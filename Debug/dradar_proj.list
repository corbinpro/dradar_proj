
dradar_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f9c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  0800a130  0800a130  0000b130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a574  0800a574  0000c1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a574  0800a574  0000b574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a57c  0800a57c  0000c1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a57c  0800a57c  0000b57c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a580  0800a580  0000b580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800a584  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000368  200001d8  0800a75c  0000c1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000540  0800a75c  0000c540  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015af5  00000000  00000000  0000c208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fa6  00000000  00000000  00021cfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001670  00000000  00000000  00024ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000116c  00000000  00000000  00026318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a531  00000000  00000000  00027484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001985e  00000000  00000000  000519b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001079d7  00000000  00000000  0006b213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00172bea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007104  00000000  00000000  00172c30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  00179d34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a114 	.word	0x0800a114

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800a114 	.word	0x0800a114

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <Buzzer_Init>:
 */
#include "buzzer.h"

extern TIM_HandleTypeDef htim1; // Change TIM1 to your timer

void Buzzer_Init(void) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000bac:	2100      	movs	r1, #0
 8000bae:	4802      	ldr	r0, [pc, #8]	@ (8000bb8 <Buzzer_Init+0x10>)
 8000bb0:	f005 fda4 	bl	80066fc <HAL_TIM_PWM_Start>
}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20000334 	.word	0x20000334

08000bbc <Buzzer_On>:

void Buzzer_On(uint16_t frequency) {
 8000bbc:	b480      	push	{r7}
 8000bbe:	b087      	sub	sp, #28
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	80fb      	strh	r3, [r7, #6]
    uint32_t timerClock = 80000000; // 80 MHz default APB2
 8000bc6:	4b12      	ldr	r3, [pc, #72]	@ (8000c10 <Buzzer_On+0x54>)
 8000bc8:	617b      	str	r3, [r7, #20]
    uint32_t prescaler = 79;        // Must match CubeMX setting
 8000bca:	234f      	movs	r3, #79	@ 0x4f
 8000bcc:	613b      	str	r3, [r7, #16]
    uint32_t period = (timerClock / (prescaler + 1)) / frequency - 1;
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	697a      	ldr	r2, [r7, #20]
 8000bd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8000bd8:	88fb      	ldrh	r3, [r7, #6]
 8000bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bde:	3b01      	subs	r3, #1
 8000be0:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_AUTORELOAD(&htim1, period);
 8000be2:	4b0c      	ldr	r3, [pc, #48]	@ (8000c14 <Buzzer_On+0x58>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	68fa      	ldr	r2, [r7, #12]
 8000be8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000bea:	4a0a      	ldr	r2, [pc, #40]	@ (8000c14 <Buzzer_On+0x58>)
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, period / 2); // 50% duty
 8000bf0:	4b08      	ldr	r3, [pc, #32]	@ (8000c14 <Buzzer_On+0x58>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	68fa      	ldr	r2, [r7, #12]
 8000bf6:	0852      	lsrs	r2, r2, #1
 8000bf8:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000bfa:	4b06      	ldr	r3, [pc, #24]	@ (8000c14 <Buzzer_On+0x58>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	2200      	movs	r2, #0
 8000c00:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000c02:	bf00      	nop
 8000c04:	371c      	adds	r7, #28
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	04c4b400 	.word	0x04c4b400
 8000c14:	20000334 	.word	0x20000334

08000c18 <Buzzer_Off>:

void Buzzer_Off(void) {
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000c1c:	4b04      	ldr	r3, [pc, #16]	@ (8000c30 <Buzzer_Off+0x18>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2200      	movs	r2, #0
 8000c22:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	20000334 	.word	0x20000334

08000c34 <CC2500_WriteRegister>:
char chst[16];

extern SPI_HandleTypeDef hspi1;

//write registers to config
void CC2500_WriteRegister(uint8_t addr, uint8_t value) {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	460a      	mov	r2, r1
 8000c3e:	71fb      	strb	r3, [r7, #7]
 8000c40:	4613      	mov	r3, r2
 8000c42:	71bb      	strb	r3, [r7, #6]
    CC2500_CS_LOW();
 8000c44:	2200      	movs	r2, #0
 8000c46:	2110      	movs	r1, #16
 8000c48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c4c:	f002 fe6c 	bl	8003928 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &addr, 1, HAL_MAX_DELAY);
 8000c50:	1df9      	adds	r1, r7, #7
 8000c52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c56:	2201      	movs	r2, #1
 8000c58:	4809      	ldr	r0, [pc, #36]	@ (8000c80 <CC2500_WriteRegister+0x4c>)
 8000c5a:	f004 fe6e 	bl	800593a <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, &value, 1, HAL_MAX_DELAY);
 8000c5e:	1db9      	adds	r1, r7, #6
 8000c60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c64:	2201      	movs	r2, #1
 8000c66:	4806      	ldr	r0, [pc, #24]	@ (8000c80 <CC2500_WriteRegister+0x4c>)
 8000c68:	f004 fe67 	bl	800593a <HAL_SPI_Transmit>
    CC2500_CS_HIGH();
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	2110      	movs	r1, #16
 8000c70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c74:	f002 fe58 	bl	8003928 <HAL_GPIO_WritePin>
}
 8000c78:	bf00      	nop
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	200002d0 	.word	0x200002d0

08000c84 <CC2500_ReadRegister>:

//read current config to write back unmodified values
uint8_t CC2500_ReadRegister(uint8_t addr) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    addr |= 0x80;
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	71fb      	strb	r3, [r7, #7]
    CC2500_CS_LOW();
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2110      	movs	r1, #16
 8000c9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ca0:	f002 fe42 	bl	8003928 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &addr, 1, HAL_MAX_DELAY);
 8000ca4:	1df9      	adds	r1, r7, #7
 8000ca6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000caa:	2201      	movs	r2, #1
 8000cac:	480a      	ldr	r0, [pc, #40]	@ (8000cd8 <CC2500_ReadRegister+0x54>)
 8000cae:	f004 fe44 	bl	800593a <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, &value, 1, HAL_MAX_DELAY);
 8000cb2:	f107 010f 	add.w	r1, r7, #15
 8000cb6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000cba:	2201      	movs	r2, #1
 8000cbc:	4806      	ldr	r0, [pc, #24]	@ (8000cd8 <CC2500_ReadRegister+0x54>)
 8000cbe:	f004 ffb2 	bl	8005c26 <HAL_SPI_Receive>
    CC2500_CS_HIGH();
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	2110      	movs	r1, #16
 8000cc6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cca:	f002 fe2d 	bl	8003928 <HAL_GPIO_WritePin>
    return value;
 8000cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3710      	adds	r7, #16
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	200002d0 	.word	0x200002d0

08000cdc <CC2500_Strobe>:

//??? TODO
void CC2500_Strobe(uint8_t cmd) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	71fb      	strb	r3, [r7, #7]
    CC2500_CS_LOW();
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2110      	movs	r1, #16
 8000cea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cee:	f002 fe1b 	bl	8003928 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8000cf2:	1df9      	adds	r1, r7, #7
 8000cf4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	4806      	ldr	r0, [pc, #24]	@ (8000d14 <CC2500_Strobe+0x38>)
 8000cfc:	f004 fe1d 	bl	800593a <HAL_SPI_Transmit>
    CC2500_CS_HIGH();
 8000d00:	2201      	movs	r2, #1
 8000d02:	2110      	movs	r1, #16
 8000d04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d08:	f002 fe0e 	bl	8003928 <HAL_GPIO_WritePin>
}
 8000d0c:	bf00      	nop
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	200002d0 	.word	0x200002d0

08000d18 <CC2500_SetChannel>:

//set channel
void CC2500_SetChannel(uint8_t channel) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71fb      	strb	r3, [r7, #7]
    CC2500_WriteRegister(0x0A, channel);
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	4619      	mov	r1, r3
 8000d26:	200a      	movs	r0, #10
 8000d28:	f7ff ff84 	bl	8000c34 <CC2500_WriteRegister>
    CC2500_Strobe(CC2500_SRX);
 8000d2c:	2034      	movs	r0, #52	@ 0x34
 8000d2e:	f7ff ffd5 	bl	8000cdc <CC2500_Strobe>
}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <CC2500_ReadRSSI>:

//Check signal strength through rssi
uint8_t CC2500_ReadRSSI(void) {
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b082      	sub	sp, #8
 8000d3e:	af00      	add	r7, sp, #0
    uint8_t raw = CC2500_ReadRegister(0x34);
 8000d40:	2034      	movs	r0, #52	@ 0x34
 8000d42:	f7ff ff9f 	bl	8000c84 <CC2500_ReadRegister>
 8000d46:	4603      	mov	r3, r0
 8000d48:	71fb      	strb	r3, [r7, #7]
    uint8_t calcValue = (raw >= 128) ? ((int8_t)(raw - 256) / 2 - 74) : (raw / 2 - 74);
 8000d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	da09      	bge.n	8000d66 <CC2500_ReadRSSI+0x2c>
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	0fda      	lsrs	r2, r3, #31
 8000d58:	4413      	add	r3, r2
 8000d5a:	105b      	asrs	r3, r3, #1
 8000d5c:	b25b      	sxtb	r3, r3
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	3b4a      	subs	r3, #74	@ 0x4a
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	e004      	b.n	8000d70 <CC2500_ReadRSSI+0x36>
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	085b      	lsrs	r3, r3, #1
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	3b4a      	subs	r3, #74	@ 0x4a
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	71bb      	strb	r3, [r7, #6]
    return calcValue;
 8000d72:	79bb      	ldrb	r3, [r7, #6]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <CC2500_ApplyConfig>:
| `0x25`        | FSCAL0        | `0x1F`      |                               |
| `0x07`        | PKTCTRL1      | `0x04`      | No address check              |
| `0x08`        | PKTCTRL0      | `0x05`      | Infinite packet length, CRC   |
| `0x3E`        | PATABLE       | `0xC0`      | Max output power              |
 * */
void CC2500_ApplyConfig(void) {
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
    CC2500_WriteRegister(0x00, 0x29);
 8000d80:	2129      	movs	r1, #41	@ 0x29
 8000d82:	2000      	movs	r0, #0
 8000d84:	f7ff ff56 	bl	8000c34 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x02, 0x06);
 8000d88:	2106      	movs	r1, #6
 8000d8a:	2002      	movs	r0, #2
 8000d8c:	f7ff ff52 	bl	8000c34 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x03, 0x07);
 8000d90:	2107      	movs	r1, #7
 8000d92:	2003      	movs	r0, #3
 8000d94:	f7ff ff4e 	bl	8000c34 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x06, 0x00);
 8000d98:	2100      	movs	r1, #0
 8000d9a:	2006      	movs	r0, #6
 8000d9c:	f7ff ff4a 	bl	8000c34 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x07, 0x04);
 8000da0:	2104      	movs	r1, #4
 8000da2:	2007      	movs	r0, #7
 8000da4:	f7ff ff46 	bl	8000c34 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x08, 0x05);
 8000da8:	2105      	movs	r1, #5
 8000daa:	2008      	movs	r0, #8
 8000dac:	f7ff ff42 	bl	8000c34 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x0A, 0x00);
 8000db0:	2100      	movs	r1, #0
 8000db2:	200a      	movs	r0, #10
 8000db4:	f7ff ff3e 	bl	8000c34 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x0B, 0x06);
 8000db8:	2106      	movs	r1, #6
 8000dba:	200b      	movs	r0, #11
 8000dbc:	f7ff ff3a 	bl	8000c34 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x0C, 0x00);
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	200c      	movs	r0, #12
 8000dc4:	f7ff ff36 	bl	8000c34 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x0D, 0x5D);
 8000dc8:	215d      	movs	r1, #93	@ 0x5d
 8000dca:	200d      	movs	r0, #13
 8000dcc:	f7ff ff32 	bl	8000c34 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x0E, 0x93);
 8000dd0:	2193      	movs	r1, #147	@ 0x93
 8000dd2:	200e      	movs	r0, #14
 8000dd4:	f7ff ff2e 	bl	8000c34 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x0F, 0xB1);
 8000dd8:	21b1      	movs	r1, #177	@ 0xb1
 8000dda:	200f      	movs	r0, #15
 8000ddc:	f7ff ff2a 	bl	8000c34 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x10, 0x2D);
 8000de0:	212d      	movs	r1, #45	@ 0x2d
 8000de2:	2010      	movs	r0, #16
 8000de4:	f7ff ff26 	bl	8000c34 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x11, 0x3B);
 8000de8:	213b      	movs	r1, #59	@ 0x3b
 8000dea:	2011      	movs	r0, #17
 8000dec:	f7ff ff22 	bl	8000c34 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x12, 0x73);
 8000df0:	2173      	movs	r1, #115	@ 0x73
 8000df2:	2012      	movs	r0, #18
 8000df4:	f7ff ff1e 	bl	8000c34 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x15, 0x01);
 8000df8:	2101      	movs	r1, #1
 8000dfa:	2015      	movs	r0, #21
 8000dfc:	f7ff ff1a 	bl	8000c34 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x18, 0x18);
 8000e00:	2118      	movs	r1, #24
 8000e02:	2018      	movs	r0, #24
 8000e04:	f7ff ff16 	bl	8000c34 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x19, 0x1D);
 8000e08:	211d      	movs	r1, #29
 8000e0a:	2019      	movs	r0, #25
 8000e0c:	f7ff ff12 	bl	8000c34 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x1A, 0x1C);
 8000e10:	211c      	movs	r1, #28
 8000e12:	201a      	movs	r0, #26
 8000e14:	f7ff ff0e 	bl	8000c34 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x21, 0x11);
 8000e18:	2111      	movs	r1, #17
 8000e1a:	2021      	movs	r0, #33	@ 0x21
 8000e1c:	f7ff ff0a 	bl	8000c34 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x22, 0xE9);
 8000e20:	21e9      	movs	r1, #233	@ 0xe9
 8000e22:	2022      	movs	r0, #34	@ 0x22
 8000e24:	f7ff ff06 	bl	8000c34 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x23, 0x2A);
 8000e28:	212a      	movs	r1, #42	@ 0x2a
 8000e2a:	2023      	movs	r0, #35	@ 0x23
 8000e2c:	f7ff ff02 	bl	8000c34 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x24, 0x00);
 8000e30:	2100      	movs	r1, #0
 8000e32:	2024      	movs	r0, #36	@ 0x24
 8000e34:	f7ff fefe 	bl	8000c34 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x25, 0x1F);
 8000e38:	211f      	movs	r1, #31
 8000e3a:	2025      	movs	r0, #37	@ 0x25
 8000e3c:	f7ff fefa 	bl	8000c34 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x3E, 0xC0);
 8000e40:	21c0      	movs	r1, #192	@ 0xc0
 8000e42:	203e      	movs	r0, #62	@ 0x3e
 8000e44:	f7ff fef6 	bl	8000c34 <CC2500_WriteRegister>
}
 8000e48:	bf00      	nop
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <CC2500_Init>:

//apply configurations and establish first noise floor
void CC2500_Init(void) {
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
    HAL_Delay(100);
 8000e50:	2064      	movs	r0, #100	@ 0x64
 8000e52:	f001 f893 	bl	8001f7c <HAL_Delay>
    CC2500_CS_HIGH(); HAL_Delay(1);
 8000e56:	2201      	movs	r2, #1
 8000e58:	2110      	movs	r1, #16
 8000e5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e5e:	f002 fd63 	bl	8003928 <HAL_GPIO_WritePin>
 8000e62:	2001      	movs	r0, #1
 8000e64:	f001 f88a 	bl	8001f7c <HAL_Delay>
    CC2500_CS_LOW();  HAL_Delay(1);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2110      	movs	r1, #16
 8000e6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e70:	f002 fd5a 	bl	8003928 <HAL_GPIO_WritePin>
 8000e74:	2001      	movs	r0, #1
 8000e76:	f001 f881 	bl	8001f7c <HAL_Delay>
    CC2500_CS_HIGH(); HAL_Delay(1);
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	2110      	movs	r1, #16
 8000e7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e82:	f002 fd51 	bl	8003928 <HAL_GPIO_WritePin>
 8000e86:	2001      	movs	r0, #1
 8000e88:	f001 f878 	bl	8001f7c <HAL_Delay>

    CC2500_Strobe(CC2500_SRES);
 8000e8c:	2030      	movs	r0, #48	@ 0x30
 8000e8e:	f7ff ff25 	bl	8000cdc <CC2500_Strobe>
    HAL_Delay(1);
 8000e92:	2001      	movs	r0, #1
 8000e94:	f001 f872 	bl	8001f7c <HAL_Delay>

    CC2500_ApplyConfig();
 8000e98:	f7ff ff70 	bl	8000d7c <CC2500_ApplyConfig>
    CC2500_Strobe(CC2500_SRX);
 8000e9c:	2034      	movs	r0, #52	@ 0x34
 8000e9e:	f7ff ff1d 	bl	8000cdc <CC2500_Strobe>

    // Initial noise floor calibration
    CC2500_RecalibrateNoiseFloor();
 8000ea2:	f000 f803 	bl	8000eac <CC2500_RecalibrateNoiseFloor>
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
	...

08000eac <CC2500_RecalibrateNoiseFloor>:

//re calibrate average noise floor.
void CC2500_RecalibrateNoiseFloor(void) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
	CharLCD_Set_Cursor(0,7); // Set cursor to row 1, column 0
 8000eb2:	2107      	movs	r1, #7
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	f000 f992 	bl	80011de <CharLCD_Set_Cursor>
	CharLCD_Write_String("CALBRATNG");
 8000eba:	481e      	ldr	r0, [pc, #120]	@ (8000f34 <CC2500_RecalibrateNoiseFloor+0x88>)
 8000ebc:	f000 f97a 	bl	80011b4 <CharLCD_Write_String>

	int32_t sum = 0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60fb      	str	r3, [r7, #12]
    const uint8_t ch_min = 0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	72bb      	strb	r3, [r7, #10]
    const uint8_t ch_max = 100;
 8000ec8:	2364      	movs	r3, #100	@ 0x64
 8000eca:	727b      	strb	r3, [r7, #9]
    const int sweep_count = ch_max - ch_min + 1;
 8000ecc:	7a7a      	ldrb	r2, [r7, #9]
 8000ece:	7abb      	ldrb	r3, [r7, #10]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	607b      	str	r3, [r7, #4]

    for (uint8_t ch = ch_min; ch <= ch_max; ch++) {
 8000ed6:	7abb      	ldrb	r3, [r7, #10]
 8000ed8:	72fb      	strb	r3, [r7, #11]
 8000eda:	e012      	b.n	8000f02 <CC2500_RecalibrateNoiseFloor+0x56>
        CC2500_SetChannel(ch);
 8000edc:	7afb      	ldrb	r3, [r7, #11]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff ff1a 	bl	8000d18 <CC2500_SetChannel>
        HAL_Delay(3);
 8000ee4:	2003      	movs	r0, #3
 8000ee6:	f001 f849 	bl	8001f7c <HAL_Delay>
        int8_t rssi = CC2500_ReadRSSI();
 8000eea:	f7ff ff26 	bl	8000d3a <CC2500_ReadRSSI>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	70fb      	strb	r3, [r7, #3]
        sum += rssi;
 8000ef2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ef6:	68fa      	ldr	r2, [r7, #12]
 8000ef8:	4413      	add	r3, r2
 8000efa:	60fb      	str	r3, [r7, #12]
    for (uint8_t ch = ch_min; ch <= ch_max; ch++) {
 8000efc:	7afb      	ldrb	r3, [r7, #11]
 8000efe:	3301      	adds	r3, #1
 8000f00:	72fb      	strb	r3, [r7, #11]
 8000f02:	7afa      	ldrb	r2, [r7, #11]
 8000f04:	7a7b      	ldrb	r3, [r7, #9]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d9e8      	bls.n	8000edc <CC2500_RecalibrateNoiseFloor+0x30>
    }

    CC2500_NoiseFloor = sum / sweep_count;
 8000f0a:	68fa      	ldr	r2, [r7, #12]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f12:	b25a      	sxtb	r2, r3
 8000f14:	4b08      	ldr	r3, [pc, #32]	@ (8000f38 <CC2500_RecalibrateNoiseFloor+0x8c>)
 8000f16:	701a      	strb	r2, [r3, #0]
    //starting threshold value:10 increase or deacrease to desired sensitivity. TODO Possibly integrate button to change this value.
    CC2500_DetectionThreshold = CC2500_NoiseFloor + 10;
 8000f18:	4b07      	ldr	r3, [pc, #28]	@ (8000f38 <CC2500_RecalibrateNoiseFloor+0x8c>)
 8000f1a:	f993 3000 	ldrsb.w	r3, [r3]
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	330a      	adds	r3, #10
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	b25a      	sxtb	r2, r3
 8000f26:	4b05      	ldr	r3, [pc, #20]	@ (8000f3c <CC2500_RecalibrateNoiseFloor+0x90>)
 8000f28:	701a      	strb	r2, [r3, #0]

}
 8000f2a:	bf00      	nop
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	0800a130 	.word	0x0800a130
 8000f38:	20000000 	.word	0x20000000
 8000f3c:	20000001 	.word	0x20000001

08000f40 <CC2500_SweepAndDetect>:

// Use sweep mode and read rssi to see if packets are being recieved on any channels, read strength, alert on noise floor threshold
void CC2500_SweepAndDetect(void) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
    for (uint8_t ch = 0; ch <= 100; ch++) {
 8000f46:	2300      	movs	r3, #0
 8000f48:	71fb      	strb	r3, [r7, #7]
 8000f4a:	e070      	b.n	800102e <CC2500_SweepAndDetect+0xee>
        CC2500_SetChannel(ch); //set channel
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff fee2 	bl	8000d18 <CC2500_SetChannel>
        HAL_Delay(3);
 8000f54:	2003      	movs	r0, #3
 8000f56:	f001 f811 	bl	8001f7c <HAL_Delay>
        int8_t rssi = CC2500_ReadRSSI(); //read signal strength on channel
 8000f5a:	f7ff feee 	bl	8000d3a <CC2500_ReadRSSI>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	71bb      	strb	r3, [r7, #6]


        //OUTPUT ON DETECTION
        if (rssi > CC2500_DetectionThreshold) { //only get here when spike is detected
 8000f62:	4b37      	ldr	r3, [pc, #220]	@ (8001040 <CC2500_SweepAndDetect+0x100>)
 8000f64:	f993 3000 	ldrsb.w	r3, [r3]
 8000f68:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	dd44      	ble.n	8000ffa <CC2500_SweepAndDetect+0xba>
        	sprintf(chst,"ch:%d",ch);
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	461a      	mov	r2, r3
 8000f74:	4933      	ldr	r1, [pc, #204]	@ (8001044 <CC2500_SweepAndDetect+0x104>)
 8000f76:	4834      	ldr	r0, [pc, #208]	@ (8001048 <CC2500_SweepAndDetect+0x108>)
 8000f78:	f006 fed8 	bl	8007d2c <siprintf>
        	CharLCD_Set_Cursor(0,7);
 8000f7c:	2107      	movs	r1, #7
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f000 f92d 	bl	80011de <CharLCD_Set_Cursor>
        	CharLCD_Write_String(chst);
 8000f84:	4830      	ldr	r0, [pc, #192]	@ (8001048 <CC2500_SweepAndDetect+0x108>)
 8000f86:	f000 f915 	bl	80011b4 <CharLCD_Write_String>
        	CharLCD_Set_Cursor(1,7); // Set cursor to row 1, column 0
 8000f8a:	2107      	movs	r1, #7
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	f000 f926 	bl	80011de <CharLCD_Set_Cursor>
        	CharLCD_Write_String("DT!");
 8000f92:	482e      	ldr	r0, [pc, #184]	@ (800104c <CC2500_SweepAndDetect+0x10c>)
 8000f94:	f000 f90e 	bl	80011b4 <CharLCD_Write_String>
        	HAL_Delay(3);
 8000f98:	2003      	movs	r0, #3
 8000f9a:	f000 ffef 	bl	8001f7c <HAL_Delay>
        	//Trigger alarm
        	Buzzer_On(523); // Tone 2: C5
 8000f9e:	f240 200b 	movw	r0, #523	@ 0x20b
 8000fa2:	f7ff fe0b 	bl	8000bbc <Buzzer_On>
        	//scan again
        	CC2500_SetChannel(ch);
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff feb5 	bl	8000d18 <CC2500_SetChannel>
        	HAL_Delay(200);
 8000fae:	20c8      	movs	r0, #200	@ 0xc8
 8000fb0:	f000 ffe4 	bl	8001f7c <HAL_Delay>
        	rssi = CC2500_ReadRSSI();
 8000fb4:	f7ff fec1 	bl	8000d3a <CC2500_ReadRSSI>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	71bb      	strb	r3, [r7, #6]
        	if (rssi > CC2500_DetectionThreshold){ //second round of detection if spike is detected
 8000fbc:	4b20      	ldr	r3, [pc, #128]	@ (8001040 <CC2500_SweepAndDetect+0x100>)
 8000fbe:	f993 3000 	ldrsb.w	r3, [r3]
 8000fc2:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	dd2e      	ble.n	8001028 <CC2500_SweepAndDetect+0xe8>
            	sprintf(chst,"ch:%d",ch);
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	461a      	mov	r2, r3
 8000fce:	491d      	ldr	r1, [pc, #116]	@ (8001044 <CC2500_SweepAndDetect+0x104>)
 8000fd0:	481d      	ldr	r0, [pc, #116]	@ (8001048 <CC2500_SweepAndDetect+0x108>)
 8000fd2:	f006 feab 	bl	8007d2c <siprintf>
            	CharLCD_Set_Cursor(0,7);
 8000fd6:	2107      	movs	r1, #7
 8000fd8:	2000      	movs	r0, #0
 8000fda:	f000 f900 	bl	80011de <CharLCD_Set_Cursor>
            	CharLCD_Write_String(chst);
 8000fde:	481a      	ldr	r0, [pc, #104]	@ (8001048 <CC2500_SweepAndDetect+0x108>)
 8000fe0:	f000 f8e8 	bl	80011b4 <CharLCD_Write_String>
            	CharLCD_Set_Cursor(1,7); // Set cursor to row 1, column 0
 8000fe4:	2107      	movs	r1, #7
 8000fe6:	2001      	movs	r0, #1
 8000fe8:	f000 f8f9 	bl	80011de <CharLCD_Set_Cursor>
            	CharLCD_Write_String("DT2!");
 8000fec:	4818      	ldr	r0, [pc, #96]	@ (8001050 <CC2500_SweepAndDetect+0x110>)
 8000fee:	f000 f8e1 	bl	80011b4 <CharLCD_Write_String>
            	HAL_Delay(200);
 8000ff2:	20c8      	movs	r0, #200	@ 0xc8
 8000ff4:	f000 ffc2 	bl	8001f7c <HAL_Delay>
 8000ff8:	e016      	b.n	8001028 <CC2500_SweepAndDetect+0xe8>
        	}


        }
        else {
        	CharLCD_Set_Cursor(0,7); // Set cursor to row 0, column 0
 8000ffa:	2107      	movs	r1, #7
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f000 f8ee 	bl	80011de <CharLCD_Set_Cursor>
        	CharLCD_Write_String("2.4GHZ: ");
 8001002:	4814      	ldr	r0, [pc, #80]	@ (8001054 <CC2500_SweepAndDetect+0x114>)
 8001004:	f000 f8d6 	bl	80011b4 <CharLCD_Write_String>
        	CharLCD_Set_Cursor(1,7); // Set cursor to row 1, column 0
 8001008:	2107      	movs	r1, #7
 800100a:	2001      	movs	r0, #1
 800100c:	f000 f8e7 	bl	80011de <CharLCD_Set_Cursor>
        	sprintf(rssiString, "FLR:%d", rssi);
 8001010:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001014:	461a      	mov	r2, r3
 8001016:	4910      	ldr	r1, [pc, #64]	@ (8001058 <CC2500_SweepAndDetect+0x118>)
 8001018:	4810      	ldr	r0, [pc, #64]	@ (800105c <CC2500_SweepAndDetect+0x11c>)
 800101a:	f006 fe87 	bl	8007d2c <siprintf>
        	CharLCD_Write_String(rssiString);
 800101e:	480f      	ldr	r0, [pc, #60]	@ (800105c <CC2500_SweepAndDetect+0x11c>)
 8001020:	f000 f8c8 	bl	80011b4 <CharLCD_Write_String>

        	//turn off alarm
        	Buzzer_Off();
 8001024:	f7ff fdf8 	bl	8000c18 <Buzzer_Off>
    for (uint8_t ch = 0; ch <= 100; ch++) {
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	3301      	adds	r3, #1
 800102c:	71fb      	strb	r3, [r7, #7]
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	2b64      	cmp	r3, #100	@ 0x64
 8001032:	d98b      	bls.n	8000f4c <CC2500_SweepAndDetect+0xc>
        }
    }
}
 8001034:	bf00      	nop
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000001 	.word	0x20000001
 8001044:	0800a13c 	.word	0x0800a13c
 8001048:	20000204 	.word	0x20000204
 800104c:	0800a144 	.word	0x0800a144
 8001050:	0800a148 	.word	0x0800a148
 8001054:	0800a150 	.word	0x0800a150
 8001058:	0800a15c 	.word	0x0800a15c
 800105c:	200001f4 	.word	0x200001f4

08001060 <CharLCD_Write_Nibble>:
 * @brief Write a 4-bit nibble to the LCD via I2C
 * @param nibble: 4-bit data to send (lower 4 bits)
 * @param dc: data/command (1 = data, 0 = command)
 * @retval None
 */
void CharLCD_Write_Nibble(uint8_t nibble, uint8_t dc) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af02      	add	r7, sp, #8
 8001066:	4603      	mov	r3, r0
 8001068:	460a      	mov	r2, r1
 800106a:	71fb      	strb	r3, [r7, #7]
 800106c:	4613      	mov	r3, r2
 800106e:	71bb      	strb	r3, [r7, #6]
 uint8_t data = nibble << D4_BIT; // Shift nibble to D4-D7 position
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	011b      	lsls	r3, r3, #4
 8001074:	b2db      	uxtb	r3, r3
 8001076:	73fb      	strb	r3, [r7, #15]
 data |= dc << DC_BIT; // Set DC bit for data/command selection
 8001078:	7bfa      	ldrb	r2, [r7, #15]
 800107a:	79bb      	ldrb	r3, [r7, #6]
 800107c:	4313      	orrs	r3, r2
 800107e:	b2db      	uxtb	r3, r3
 8001080:	73fb      	strb	r3, [r7, #15]
 data |= 1 << BL_BIT; // Include backlight state in data
 8001082:	7bfb      	ldrb	r3, [r7, #15]
 8001084:	f043 0308 	orr.w	r3, r3, #8
 8001088:	b2db      	uxtb	r3, r3
 800108a:	73fb      	strb	r3, [r7, #15]
 data |= 1 << EN_BIT; // Set enable bit high
 800108c:	7bfb      	ldrb	r3, [r7, #15]
 800108e:	f043 0304 	orr.w	r3, r3, #4
 8001092:	b2db      	uxtb	r3, r3
 8001094:	73fb      	strb	r3, [r7, #15]
 HAL_I2C_Master_Transmit(hi2c, I2C_ADDR << 1, &data, 1, 100); // Send data with EN high
 8001096:	4b10      	ldr	r3, [pc, #64]	@ (80010d8 <CharLCD_Write_Nibble+0x78>)
 8001098:	6818      	ldr	r0, [r3, #0]
 800109a:	f107 020f 	add.w	r2, r7, #15
 800109e:	2364      	movs	r3, #100	@ 0x64
 80010a0:	9300      	str	r3, [sp, #0]
 80010a2:	2301      	movs	r3, #1
 80010a4:	214e      	movs	r1, #78	@ 0x4e
 80010a6:	f002 fcf3 	bl	8003a90 <HAL_I2C_Master_Transmit>
 HAL_Delay(1); // Wait for data setup
 80010aa:	2001      	movs	r0, #1
 80010ac:	f000 ff66 	bl	8001f7c <HAL_Delay>
 data &= ~(1 << EN_BIT); // Clear enable bit (falling edge triggers LCD)
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	f023 0304 	bic.w	r3, r3, #4
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	73fb      	strb	r3, [r7, #15]
 HAL_I2C_Master_Transmit(hi2c, I2C_ADDR << 1, &data, 1, 100); // Send data with EN low
 80010ba:	4b07      	ldr	r3, [pc, #28]	@ (80010d8 <CharLCD_Write_Nibble+0x78>)
 80010bc:	6818      	ldr	r0, [r3, #0]
 80010be:	f107 020f 	add.w	r2, r7, #15
 80010c2:	2364      	movs	r3, #100	@ 0x64
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	2301      	movs	r3, #1
 80010c8:	214e      	movs	r1, #78	@ 0x4e
 80010ca:	f002 fce1 	bl	8003a90 <HAL_I2C_Master_Transmit>
}
 80010ce:	bf00      	nop
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000214 	.word	0x20000214

080010dc <CharLCD_Send_Cmd>:
/**
 * @brief Send command to LCD
 * @param cmd: 8-bit command to send to LCD controller
 * @retval None
 */
void CharLCD_Send_Cmd(uint8_t cmd) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
 uint8_t upper_nibble = cmd >> 4; // Extract upper 4 bits
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	091b      	lsrs	r3, r3, #4
 80010ea:	73fb      	strb	r3, [r7, #15]
 uint8_t lower_nibble = cmd & 0x0F; // Extract lower 4 bits
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	f003 030f 	and.w	r3, r3, #15
 80010f2:	73bb      	strb	r3, [r7, #14]
 CharLCD_Write_Nibble(upper_nibble, 0); // Send upper nibble (DC=0 for command)
 80010f4:	7bfb      	ldrb	r3, [r7, #15]
 80010f6:	2100      	movs	r1, #0
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ffb1 	bl	8001060 <CharLCD_Write_Nibble>
 CharLCD_Write_Nibble(lower_nibble, 0); // Send lower nibble (DC=0 for command)
 80010fe:	7bbb      	ldrb	r3, [r7, #14]
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff ffac 	bl	8001060 <CharLCD_Write_Nibble>
 if (cmd == 0x01 || cmd == 0x02) { // Clear display or return home commands
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d002      	beq.n	8001114 <CharLCD_Send_Cmd+0x38>
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	2b02      	cmp	r3, #2
 8001112:	d102      	bne.n	800111a <CharLCD_Send_Cmd+0x3e>
 HAL_Delay(2); // These commands need extra time
 8001114:	2002      	movs	r0, #2
 8001116:	f000 ff31 	bl	8001f7c <HAL_Delay>
 }
}
 800111a:	bf00      	nop
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <CharLCD_Send_Data>:
/**
 * @brief Send data (character) to LCD
 * @param data: 8-bit character data to display
 * @retval None
 */
void CharLCD_Send_Data(uint8_t data) {
 8001122:	b580      	push	{r7, lr}
 8001124:	b084      	sub	sp, #16
 8001126:	af00      	add	r7, sp, #0
 8001128:	4603      	mov	r3, r0
 800112a:	71fb      	strb	r3, [r7, #7]
 uint8_t upper_nibble = data >> 4; // Extract upper 4 bits
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	091b      	lsrs	r3, r3, #4
 8001130:	73fb      	strb	r3, [r7, #15]
 uint8_t lower_nibble = data & 0x0F; // Extract lower 4 bits
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	f003 030f 	and.w	r3, r3, #15
 8001138:	73bb      	strb	r3, [r7, #14]
 CharLCD_Write_Nibble(upper_nibble, 1); // Send upper nibble (DC=1 for data)
 800113a:	7bfb      	ldrb	r3, [r7, #15]
 800113c:	2101      	movs	r1, #1
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff ff8e 	bl	8001060 <CharLCD_Write_Nibble>
 CharLCD_Write_Nibble(lower_nibble, 1); // Send lower nibble (DC=1 for data)
 8001144:	7bbb      	ldrb	r3, [r7, #14]
 8001146:	2101      	movs	r1, #1
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ff89 	bl	8001060 <CharLCD_Write_Nibble>
}
 800114e:	bf00      	nop
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <CharLCD_Init>:
/**
 * @brief Initialize LCD in 4-bit mode via I2C
 * @param None
 * @retval None
 */
void CharLCD_Init() {
 8001156:	b580      	push	{r7, lr}
 8001158:	af00      	add	r7, sp, #0
 HAL_Delay(50); // Wait for LCD power-on reset (>40ms)
 800115a:	2032      	movs	r0, #50	@ 0x32
 800115c:	f000 ff0e 	bl	8001f7c <HAL_Delay>
 CharLCD_Write_Nibble(0x03, 0); // Function set: 8-bit mode (first attempt)
 8001160:	2100      	movs	r1, #0
 8001162:	2003      	movs	r0, #3
 8001164:	f7ff ff7c 	bl	8001060 <CharLCD_Write_Nibble>
 HAL_Delay(5); // Wait >4.1ms
 8001168:	2005      	movs	r0, #5
 800116a:	f000 ff07 	bl	8001f7c <HAL_Delay>
 CharLCD_Write_Nibble(0x03, 0); // Function set: 8-bit mode (second attempt)
 800116e:	2100      	movs	r1, #0
 8001170:	2003      	movs	r0, #3
 8001172:	f7ff ff75 	bl	8001060 <CharLCD_Write_Nibble>
 HAL_Delay(1); // Wait >100us
 8001176:	2001      	movs	r0, #1
 8001178:	f000 ff00 	bl	8001f7c <HAL_Delay>
 CharLCD_Write_Nibble(0x03, 0); // Function set: 8-bit mode (third attempt)
 800117c:	2100      	movs	r1, #0
 800117e:	2003      	movs	r0, #3
 8001180:	f7ff ff6e 	bl	8001060 <CharLCD_Write_Nibble>
 HAL_Delay(1); // Wait >100us
 8001184:	2001      	movs	r0, #1
 8001186:	f000 fef9 	bl	8001f7c <HAL_Delay>
 CharLCD_Write_Nibble(0x02, 0); // Function set: switch to 4-bit mode
 800118a:	2100      	movs	r1, #0
 800118c:	2002      	movs	r0, #2
 800118e:	f7ff ff67 	bl	8001060 <CharLCD_Write_Nibble>
 CharLCD_Send_Cmd(0x28); // Function set: 4-bit, 2 lines, 5x8 font
 8001192:	2028      	movs	r0, #40	@ 0x28
 8001194:	f7ff ffa2 	bl	80010dc <CharLCD_Send_Cmd>
 CharLCD_Send_Cmd(0x0C); // Display control: display on/cursor off/blink off
 8001198:	200c      	movs	r0, #12
 800119a:	f7ff ff9f 	bl	80010dc <CharLCD_Send_Cmd>
 CharLCD_Send_Cmd(0x06); // Entry mode: increment cursor, no shift
 800119e:	2006      	movs	r0, #6
 80011a0:	f7ff ff9c 	bl	80010dc <CharLCD_Send_Cmd>
 CharLCD_Send_Cmd(0x01); // Clear display
 80011a4:	2001      	movs	r0, #1
 80011a6:	f7ff ff99 	bl	80010dc <CharLCD_Send_Cmd>
 HAL_Delay(2); // Wait for clear display command
 80011aa:	2002      	movs	r0, #2
 80011ac:	f000 fee6 	bl	8001f7c <HAL_Delay>
}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <CharLCD_Write_String>:
/**
 * @brief Write string to LCD at current cursor position
 * @param str: Pointer to null-terminated string
 * @retval None
 */
void CharLCD_Write_String(char *str) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 while (*str) { // Loop until null terminator
 80011bc:	e006      	b.n	80011cc <CharLCD_Write_String+0x18>
 CharLCD_Send_Data(*str++); // Send each character and increment pointer
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	1c5a      	adds	r2, r3, #1
 80011c2:	607a      	str	r2, [r7, #4]
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff ffab 	bl	8001122 <CharLCD_Send_Data>
 while (*str) { // Loop until null terminator
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d1f4      	bne.n	80011be <CharLCD_Write_String+0xa>
 }
}
 80011d4:	bf00      	nop
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <CharLCD_Set_Cursor>:
 * @brief Set cursor position on LCD
 * @param row: Row number (0 or 1 for 2-line display)
 * @param column: Column number (0 to display width - 1)
 * @retval None
 */
void CharLCD_Set_Cursor(uint8_t row, uint8_t column) {
 80011de:	b580      	push	{r7, lr}
 80011e0:	b084      	sub	sp, #16
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	4603      	mov	r3, r0
 80011e6:	460a      	mov	r2, r1
 80011e8:	71fb      	strb	r3, [r7, #7]
 80011ea:	4613      	mov	r3, r2
 80011ec:	71bb      	strb	r3, [r7, #6]
 uint8_t address;
 switch (row) {
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d002      	beq.n	80011fa <CharLCD_Set_Cursor+0x1c>
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d003      	beq.n	8001200 <CharLCD_Set_Cursor+0x22>
 80011f8:	e005      	b.n	8001206 <CharLCD_Set_Cursor+0x28>
 case 0:
 address = 0x00; break; // First line starts at address 0x00
 80011fa:	2300      	movs	r3, #0
 80011fc:	73fb      	strb	r3, [r7, #15]
 80011fe:	e004      	b.n	800120a <CharLCD_Set_Cursor+0x2c>
 case 1:
 address = 0x40; break; // Second line starts at address 0x40
 8001200:	2340      	movs	r3, #64	@ 0x40
 8001202:	73fb      	strb	r3, [r7, #15]
 8001204:	e001      	b.n	800120a <CharLCD_Set_Cursor+0x2c>
 default:
 address = 0x00; // Default to first line for invalid row
 8001206:	2300      	movs	r3, #0
 8001208:	73fb      	strb	r3, [r7, #15]
 }
 address += column; // Add column offset
 800120a:	7bfa      	ldrb	r2, [r7, #15]
 800120c:	79bb      	ldrb	r3, [r7, #6]
 800120e:	4413      	add	r3, r2
 8001210:	73fb      	strb	r3, [r7, #15]
 CharLCD_Send_Cmd(0x80 | address); // Set DDRAM address command (0x80 + address)
 8001212:	7bfb      	ldrb	r3, [r7, #15]
 8001214:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001218:	b2db      	uxtb	r3, r3
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff ff5e 	bl	80010dc <CharLCD_Send_Cmd>
}
 8001220:	bf00      	nop
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <CharLCD_Clear>:
/**
 * @brief Clear LCD display and return cursor to home position
 * @param None
 * @retval None
 */
void CharLCD_Clear(void) {
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
 CharLCD_Send_Cmd(0x01); // Clear display command
 800122c:	2001      	movs	r0, #1
 800122e:	f7ff ff55 	bl	80010dc <CharLCD_Send_Cmd>
 HAL_Delay(2); // Wait for command execution
 8001232:	2002      	movs	r0, #2
 8001234:	f000 fea2 	bl	8001f7c <HAL_Delay>
}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}

0800123c <RecieveHandles>:

//pass handles in from main
void RecieveHandles(I2C_HandleTypeDef* handle){
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
	hi2c = handle;
 8001244:	4a04      	ldr	r2, [pc, #16]	@ (8001258 <RecieveHandles+0x1c>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6013      	str	r3, [r2, #0]
}
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	20000214 	.word	0x20000214

0800125c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001262:	f000 fe0f 	bl	8001e84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001266:	f000 f8c3 	bl	80013f0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  RecieveHandles(&hi2c1);
 800126a:	4855      	ldr	r0, [pc, #340]	@ (80013c0 <main+0x164>)
 800126c:	f7ff ffe6 	bl	800123c <RecieveHandles>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001270:	f000 fa94 	bl	800179c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001274:	f000 f90e 	bl	8001494 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001278:	f000 f982 	bl	8001580 <MX_I2C1_Init>
  MX_SPI1_Init();
 800127c:	f000 f9c0 	bl	8001600 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001280:	f000 f9fc 	bl	800167c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  Buzzer_Init();
 8001284:	f7ff fc90 	bl	8000ba8 <Buzzer_Init>
  //play tone to signal turn on
  Buzzer_On(440); // Tone 1: A4
 8001288:	f44f 70dc 	mov.w	r0, #440	@ 0x1b8
 800128c:	f7ff fc96 	bl	8000bbc <Buzzer_On>
  HAL_Delay(100);
 8001290:	2064      	movs	r0, #100	@ 0x64
 8001292:	f000 fe73 	bl	8001f7c <HAL_Delay>
  Buzzer_Off();
 8001296:	f7ff fcbf 	bl	8000c18 <Buzzer_Off>

  Buzzer_On(523); // Tone 2: C5
 800129a:	f240 200b 	movw	r0, #523	@ 0x20b
 800129e:	f7ff fc8d 	bl	8000bbc <Buzzer_On>
  HAL_Delay(100);
 80012a2:	2064      	movs	r0, #100	@ 0x64
 80012a4:	f000 fe6a 	bl	8001f7c <HAL_Delay>
  Buzzer_Off();
 80012a8:	f7ff fcb6 	bl	8000c18 <Buzzer_Off>

  Buzzer_On(659); // Tone 3: E5
 80012ac:	f240 2093 	movw	r0, #659	@ 0x293
 80012b0:	f7ff fc84 	bl	8000bbc <Buzzer_On>
  HAL_Delay(100);
 80012b4:	2064      	movs	r0, #100	@ 0x64
 80012b6:	f000 fe61 	bl	8001f7c <HAL_Delay>
  Buzzer_Off();
 80012ba:	f7ff fcad 	bl	8000c18 <Buzzer_Off>

  Buzzer_On(784); // Tone 4: G5
 80012be:	f44f 7044 	mov.w	r0, #784	@ 0x310
 80012c2:	f7ff fc7b 	bl	8000bbc <Buzzer_On>
  HAL_Delay(100);
 80012c6:	2064      	movs	r0, #100	@ 0x64
 80012c8:	f000 fe58 	bl	8001f7c <HAL_Delay>
  Buzzer_Off();
 80012cc:	f7ff fca4 	bl	8000c18 <Buzzer_Off>

  CharLCD_Clear();
 80012d0:	f7ff ffaa 	bl	8001228 <CharLCD_Clear>
  CharLCD_Init(); // Initialize the LCD
 80012d4:	f7ff ff3f 	bl	8001156 <CharLCD_Init>
  CharLCD_Set_Cursor(0,0); // Set cursor to row 0, column 0
 80012d8:	2100      	movs	r1, #0
 80012da:	2000      	movs	r0, #0
 80012dc:	f7ff ff7f 	bl	80011de <CharLCD_Set_Cursor>
  CharLCD_Write_String("INITLZING...");
 80012e0:	4838      	ldr	r0, [pc, #224]	@ (80013c4 <main+0x168>)
 80012e2:	f7ff ff67 	bl	80011b4 <CharLCD_Write_String>
  CharLCD_Set_Cursor(1,0); // Set cursor to row 1, column 0
 80012e6:	2100      	movs	r1, #0
 80012e8:	2001      	movs	r0, #1
 80012ea:	f7ff ff78 	bl	80011de <CharLCD_Set_Cursor>
  CharLCD_Write_String("CLIBRTING...");
 80012ee:	4836      	ldr	r0, [pc, #216]	@ (80013c8 <main+0x16c>)
 80012f0:	f7ff ff60 	bl	80011b4 <CharLCD_Write_String>

  //initialize the cc2500 chip
  CharLCD_Clear();
 80012f4:	f7ff ff98 	bl	8001228 <CharLCD_Clear>
  CC2500_Init(); //includes initial calibration
 80012f8:	f7ff fda8 	bl	8000e4c <CC2500_Init>

  //calibrate log noise floor
  LogDetector_RecalibrateNoiseFloor();
 80012fc:	f000 faa4 	bl	8001848 <LogDetector_RecalibrateNoiseFloor>

  CharLCD_Clear();
 8001300:	f7ff ff92 	bl	8001228 <CharLCD_Clear>
  CharLCD_Set_Cursor(0,0); // Set cursor to row 0, column 0
 8001304:	2100      	movs	r1, #0
 8001306:	2000      	movs	r0, #0
 8001308:	f7ff ff69 	bl	80011de <CharLCD_Set_Cursor>
  CharLCD_Write_String("5.8GHZ:  2.4GHZ: ");
 800130c:	482f      	ldr	r0, [pc, #188]	@ (80013cc <main+0x170>)
 800130e:	f7ff ff51 	bl	80011b4 <CharLCD_Write_String>
  CharLCD_Set_Cursor(1,0); // Set cursor to row 1, column 0
 8001312:	2100      	movs	r1, #0
 8001314:	2001      	movs	r0, #1
 8001316:	f7ff ff62 	bl	80011de <CharLCD_Set_Cursor>
  CharLCD_Write_String("0.0V");
 800131a:	482d      	ldr	r0, [pc, #180]	@ (80013d0 <main+0x174>)
 800131c:	f7ff ff4a 	bl	80011b4 <CharLCD_Write_String>
  while (1)
  {
	  //TODO make timer to re calibrate noise floors.
	  //Detect with log detector
	  // Start the ADC
	  HAL_ADC_Start(&hadc1);
 8001320:	482c      	ldr	r0, [pc, #176]	@ (80013d4 <main+0x178>)
 8001322:	f001 f983 	bl	800262c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001326:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800132a:	482a      	ldr	r0, [pc, #168]	@ (80013d4 <main+0x178>)
 800132c:	f001 fa38 	bl	80027a0 <HAL_ADC_PollForConversion>

	  // Read ADC value and convert to voltage
	  uint16_t logInputValue = HAL_ADC_GetValue(&hadc1);
 8001330:	4828      	ldr	r0, [pc, #160]	@ (80013d4 <main+0x178>)
 8001332:	f001 fb0d 	bl	8002950 <HAL_ADC_GetValue>
 8001336:	4603      	mov	r3, r0
 8001338:	80fb      	strh	r3, [r7, #6]
	  float voltage = (logInputValue / 4095.0f) * 3.3f;
 800133a:	88fb      	ldrh	r3, [r7, #6]
 800133c:	ee07 3a90 	vmov	s15, r3
 8001340:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001344:	eddf 6a24 	vldr	s13, [pc, #144]	@ 80013d8 <main+0x17c>
 8001348:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800134c:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 80013dc <main+0x180>
 8001350:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001354:	edc7 7a00 	vstr	s15, [r7]

	  // Check against calibrated threshold
	  if (voltage >= LogDetector_DetectionThreshold) {
 8001358:	4b21      	ldr	r3, [pc, #132]	@ (80013e0 <main+0x184>)
 800135a:	edd3 7a00 	vldr	s15, [r3]
 800135e:	ed97 7a00 	vldr	s14, [r7]
 8001362:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800136a:	db14      	blt.n	8001396 <main+0x13a>
	      sprintf(logMessage, "DT!:%.1f", voltage);
 800136c:	6838      	ldr	r0, [r7, #0]
 800136e:	f7ff f8eb 	bl	8000548 <__aeabi_f2d>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	491b      	ldr	r1, [pc, #108]	@ (80013e4 <main+0x188>)
 8001378:	481b      	ldr	r0, [pc, #108]	@ (80013e8 <main+0x18c>)
 800137a:	f006 fcd7 	bl	8007d2c <siprintf>
	      CharLCD_Set_Cursor(1, 0);
 800137e:	2100      	movs	r1, #0
 8001380:	2001      	movs	r0, #1
 8001382:	f7ff ff2c 	bl	80011de <CharLCD_Set_Cursor>
	      CharLCD_Write_String(logMessage);
 8001386:	4818      	ldr	r0, [pc, #96]	@ (80013e8 <main+0x18c>)
 8001388:	f7ff ff14 	bl	80011b4 <CharLCD_Write_String>
	      //BUZZER ON TILL NEXT CYCLE
	      Buzzer_On(440); // Tone 1: A4
 800138c:	f44f 70dc 	mov.w	r0, #440	@ 0x1b8
 8001390:	f7ff fc14 	bl	8000bbc <Buzzer_On>
 8001394:	e011      	b.n	80013ba <main+0x15e>
	  }
	  else{
	      sprintf(logMessage, "FLR:%.2f", voltage);
 8001396:	6838      	ldr	r0, [r7, #0]
 8001398:	f7ff f8d6 	bl	8000548 <__aeabi_f2d>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	4912      	ldr	r1, [pc, #72]	@ (80013ec <main+0x190>)
 80013a2:	4811      	ldr	r0, [pc, #68]	@ (80013e8 <main+0x18c>)
 80013a4:	f006 fcc2 	bl	8007d2c <siprintf>
	      CharLCD_Set_Cursor(1, 0);
 80013a8:	2100      	movs	r1, #0
 80013aa:	2001      	movs	r0, #1
 80013ac:	f7ff ff17 	bl	80011de <CharLCD_Set_Cursor>
	      CharLCD_Write_String(logMessage);
 80013b0:	480d      	ldr	r0, [pc, #52]	@ (80013e8 <main+0x18c>)
 80013b2:	f7ff feff 	bl	80011b4 <CharLCD_Write_String>
	      //BUZZER OFF TILL NEXT DETECT
	      Buzzer_Off();
 80013b6:	f7ff fc2f 	bl	8000c18 <Buzzer_Off>
	  }

	  //Sweep and detect with cc2500 chip
	  CC2500_SweepAndDetect();
 80013ba:	f7ff fdc1 	bl	8000f40 <CC2500_SweepAndDetect>
  {
 80013be:	e7af      	b.n	8001320 <main+0xc4>
 80013c0:	2000027c 	.word	0x2000027c
 80013c4:	0800a164 	.word	0x0800a164
 80013c8:	0800a174 	.word	0x0800a174
 80013cc:	0800a184 	.word	0x0800a184
 80013d0:	0800a198 	.word	0x0800a198
 80013d4:	20000218 	.word	0x20000218
 80013d8:	457ff000 	.word	0x457ff000
 80013dc:	40533333 	.word	0x40533333
 80013e0:	200003e8 	.word	0x200003e8
 80013e4:	0800a1a0 	.word	0x0800a1a0
 80013e8:	20000380 	.word	0x20000380
 80013ec:	0800a1ac 	.word	0x0800a1ac

080013f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b096      	sub	sp, #88	@ 0x58
 80013f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013f6:	f107 0314 	add.w	r3, r7, #20
 80013fa:	2244      	movs	r2, #68	@ 0x44
 80013fc:	2100      	movs	r1, #0
 80013fe:	4618      	mov	r0, r3
 8001400:	f006 fd78 	bl	8007ef4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001404:	463b      	mov	r3, r7
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	60da      	str	r2, [r3, #12]
 8001410:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001412:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001416:	f002 ff13 	bl	8004240 <HAL_PWREx_ControlVoltageScaling>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001420:	f000 fa74 	bl	800190c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001424:	2302      	movs	r3, #2
 8001426:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001428:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800142c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800142e:	2310      	movs	r3, #16
 8001430:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001432:	2302      	movs	r3, #2
 8001434:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001436:	2302      	movs	r3, #2
 8001438:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800143a:	2301      	movs	r3, #1
 800143c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800143e:	230a      	movs	r3, #10
 8001440:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001442:	2307      	movs	r3, #7
 8001444:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001446:	2302      	movs	r3, #2
 8001448:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800144a:	2302      	movs	r3, #2
 800144c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800144e:	f107 0314 	add.w	r3, r7, #20
 8001452:	4618      	mov	r0, r3
 8001454:	f002 ff4a 	bl	80042ec <HAL_RCC_OscConfig>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800145e:	f000 fa55 	bl	800190c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001462:	230f      	movs	r3, #15
 8001464:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001466:	2303      	movs	r3, #3
 8001468:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800146a:	2300      	movs	r3, #0
 800146c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001472:	2300      	movs	r3, #0
 8001474:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001476:	463b      	mov	r3, r7
 8001478:	2104      	movs	r1, #4
 800147a:	4618      	mov	r0, r3
 800147c:	f003 fb12 	bl	8004aa4 <HAL_RCC_ClockConfig>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001486:	f000 fa41 	bl	800190c <Error_Handler>
  }
}
 800148a:	bf00      	nop
 800148c:	3758      	adds	r7, #88	@ 0x58
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
	...

08001494 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08a      	sub	sp, #40	@ 0x28
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800149a:	f107 031c 	add.w	r3, r7, #28
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80014a6:	1d3b      	adds	r3, r7, #4
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]
 80014b4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80014b6:	4b2f      	ldr	r3, [pc, #188]	@ (8001574 <MX_ADC1_Init+0xe0>)
 80014b8:	4a2f      	ldr	r2, [pc, #188]	@ (8001578 <MX_ADC1_Init+0xe4>)
 80014ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80014bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001574 <MX_ADC1_Init+0xe0>)
 80014be:	2200      	movs	r2, #0
 80014c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014c2:	4b2c      	ldr	r3, [pc, #176]	@ (8001574 <MX_ADC1_Init+0xe0>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001574 <MX_ADC1_Init+0xe0>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014ce:	4b29      	ldr	r3, [pc, #164]	@ (8001574 <MX_ADC1_Init+0xe0>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014d4:	4b27      	ldr	r3, [pc, #156]	@ (8001574 <MX_ADC1_Init+0xe0>)
 80014d6:	2204      	movs	r2, #4
 80014d8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80014da:	4b26      	ldr	r3, [pc, #152]	@ (8001574 <MX_ADC1_Init+0xe0>)
 80014dc:	2200      	movs	r2, #0
 80014de:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014e0:	4b24      	ldr	r3, [pc, #144]	@ (8001574 <MX_ADC1_Init+0xe0>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80014e6:	4b23      	ldr	r3, [pc, #140]	@ (8001574 <MX_ADC1_Init+0xe0>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014ec:	4b21      	ldr	r3, [pc, #132]	@ (8001574 <MX_ADC1_Init+0xe0>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001574 <MX_ADC1_Init+0xe0>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001574 <MX_ADC1_Init+0xe0>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001500:	4b1c      	ldr	r3, [pc, #112]	@ (8001574 <MX_ADC1_Init+0xe0>)
 8001502:	2200      	movs	r2, #0
 8001504:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001508:	4b1a      	ldr	r3, [pc, #104]	@ (8001574 <MX_ADC1_Init+0xe0>)
 800150a:	2200      	movs	r2, #0
 800150c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800150e:	4b19      	ldr	r3, [pc, #100]	@ (8001574 <MX_ADC1_Init+0xe0>)
 8001510:	2200      	movs	r2, #0
 8001512:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001516:	4817      	ldr	r0, [pc, #92]	@ (8001574 <MX_ADC1_Init+0xe0>)
 8001518:	f000 ff38 	bl	800238c <HAL_ADC_Init>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001522:	f000 f9f3 	bl	800190c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001526:	2300      	movs	r3, #0
 8001528:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800152a:	f107 031c 	add.w	r3, r7, #28
 800152e:	4619      	mov	r1, r3
 8001530:	4810      	ldr	r0, [pc, #64]	@ (8001574 <MX_ADC1_Init+0xe0>)
 8001532:	f001 feb9 	bl	80032a8 <HAL_ADCEx_MultiModeConfigChannel>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800153c:	f000 f9e6 	bl	800190c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001540:	4b0e      	ldr	r3, [pc, #56]	@ (800157c <MX_ADC1_Init+0xe8>)
 8001542:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001544:	2306      	movs	r3, #6
 8001546:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001548:	2300      	movs	r3, #0
 800154a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800154c:	237f      	movs	r3, #127	@ 0x7f
 800154e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001550:	2304      	movs	r3, #4
 8001552:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001558:	1d3b      	adds	r3, r7, #4
 800155a:	4619      	mov	r1, r3
 800155c:	4805      	ldr	r0, [pc, #20]	@ (8001574 <MX_ADC1_Init+0xe0>)
 800155e:	f001 fa05 	bl	800296c <HAL_ADC_ConfigChannel>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001568:	f000 f9d0 	bl	800190c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800156c:	bf00      	nop
 800156e:	3728      	adds	r7, #40	@ 0x28
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20000218 	.word	0x20000218
 8001578:	50040000 	.word	0x50040000
 800157c:	14f00020 	.word	0x14f00020

08001580 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001584:	4b1b      	ldr	r3, [pc, #108]	@ (80015f4 <MX_I2C1_Init+0x74>)
 8001586:	4a1c      	ldr	r2, [pc, #112]	@ (80015f8 <MX_I2C1_Init+0x78>)
 8001588:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 800158a:	4b1a      	ldr	r3, [pc, #104]	@ (80015f4 <MX_I2C1_Init+0x74>)
 800158c:	4a1b      	ldr	r2, [pc, #108]	@ (80015fc <MX_I2C1_Init+0x7c>)
 800158e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001590:	4b18      	ldr	r3, [pc, #96]	@ (80015f4 <MX_I2C1_Init+0x74>)
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001596:	4b17      	ldr	r3, [pc, #92]	@ (80015f4 <MX_I2C1_Init+0x74>)
 8001598:	2201      	movs	r2, #1
 800159a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800159c:	4b15      	ldr	r3, [pc, #84]	@ (80015f4 <MX_I2C1_Init+0x74>)
 800159e:	2200      	movs	r2, #0
 80015a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80015a2:	4b14      	ldr	r3, [pc, #80]	@ (80015f4 <MX_I2C1_Init+0x74>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015a8:	4b12      	ldr	r3, [pc, #72]	@ (80015f4 <MX_I2C1_Init+0x74>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015ae:	4b11      	ldr	r3, [pc, #68]	@ (80015f4 <MX_I2C1_Init+0x74>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015b4:	4b0f      	ldr	r3, [pc, #60]	@ (80015f4 <MX_I2C1_Init+0x74>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015ba:	480e      	ldr	r0, [pc, #56]	@ (80015f4 <MX_I2C1_Init+0x74>)
 80015bc:	f002 f9cc 	bl	8003958 <HAL_I2C_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80015c6:	f000 f9a1 	bl	800190c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015ca:	2100      	movs	r1, #0
 80015cc:	4809      	ldr	r0, [pc, #36]	@ (80015f4 <MX_I2C1_Init+0x74>)
 80015ce:	f002 fd91 	bl	80040f4 <HAL_I2CEx_ConfigAnalogFilter>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80015d8:	f000 f998 	bl	800190c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015dc:	2100      	movs	r1, #0
 80015de:	4805      	ldr	r0, [pc, #20]	@ (80015f4 <MX_I2C1_Init+0x74>)
 80015e0:	f002 fdd3 	bl	800418a <HAL_I2CEx_ConfigDigitalFilter>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80015ea:	f000 f98f 	bl	800190c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	2000027c 	.word	0x2000027c
 80015f8:	40005400 	.word	0x40005400
 80015fc:	10d19ce4 	.word	0x10d19ce4

08001600 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001604:	4b1b      	ldr	r3, [pc, #108]	@ (8001674 <MX_SPI1_Init+0x74>)
 8001606:	4a1c      	ldr	r2, [pc, #112]	@ (8001678 <MX_SPI1_Init+0x78>)
 8001608:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800160a:	4b1a      	ldr	r3, [pc, #104]	@ (8001674 <MX_SPI1_Init+0x74>)
 800160c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001610:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001612:	4b18      	ldr	r3, [pc, #96]	@ (8001674 <MX_SPI1_Init+0x74>)
 8001614:	2200      	movs	r2, #0
 8001616:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001618:	4b16      	ldr	r3, [pc, #88]	@ (8001674 <MX_SPI1_Init+0x74>)
 800161a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800161e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001620:	4b14      	ldr	r3, [pc, #80]	@ (8001674 <MX_SPI1_Init+0x74>)
 8001622:	2200      	movs	r2, #0
 8001624:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001626:	4b13      	ldr	r3, [pc, #76]	@ (8001674 <MX_SPI1_Init+0x74>)
 8001628:	2200      	movs	r2, #0
 800162a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800162c:	4b11      	ldr	r3, [pc, #68]	@ (8001674 <MX_SPI1_Init+0x74>)
 800162e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001632:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001634:	4b0f      	ldr	r3, [pc, #60]	@ (8001674 <MX_SPI1_Init+0x74>)
 8001636:	2220      	movs	r2, #32
 8001638:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800163a:	4b0e      	ldr	r3, [pc, #56]	@ (8001674 <MX_SPI1_Init+0x74>)
 800163c:	2200      	movs	r2, #0
 800163e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001640:	4b0c      	ldr	r3, [pc, #48]	@ (8001674 <MX_SPI1_Init+0x74>)
 8001642:	2200      	movs	r2, #0
 8001644:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001646:	4b0b      	ldr	r3, [pc, #44]	@ (8001674 <MX_SPI1_Init+0x74>)
 8001648:	2200      	movs	r2, #0
 800164a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800164c:	4b09      	ldr	r3, [pc, #36]	@ (8001674 <MX_SPI1_Init+0x74>)
 800164e:	2207      	movs	r2, #7
 8001650:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001652:	4b08      	ldr	r3, [pc, #32]	@ (8001674 <MX_SPI1_Init+0x74>)
 8001654:	2200      	movs	r2, #0
 8001656:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001658:	4b06      	ldr	r3, [pc, #24]	@ (8001674 <MX_SPI1_Init+0x74>)
 800165a:	2208      	movs	r2, #8
 800165c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800165e:	4805      	ldr	r0, [pc, #20]	@ (8001674 <MX_SPI1_Init+0x74>)
 8001660:	f004 f8c8 	bl	80057f4 <HAL_SPI_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800166a:	f000 f94f 	bl	800190c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	200002d0 	.word	0x200002d0
 8001678:	40013000 	.word	0x40013000

0800167c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b096      	sub	sp, #88	@ 0x58
 8001680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001682:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	605a      	str	r2, [r3, #4]
 800168c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800168e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	605a      	str	r2, [r3, #4]
 8001698:	609a      	str	r2, [r3, #8]
 800169a:	60da      	str	r2, [r3, #12]
 800169c:	611a      	str	r2, [r3, #16]
 800169e:	615a      	str	r2, [r3, #20]
 80016a0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016a2:	1d3b      	adds	r3, r7, #4
 80016a4:	222c      	movs	r2, #44	@ 0x2c
 80016a6:	2100      	movs	r1, #0
 80016a8:	4618      	mov	r0, r3
 80016aa:	f006 fc23 	bl	8007ef4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016ae:	4b39      	ldr	r3, [pc, #228]	@ (8001794 <MX_TIM1_Init+0x118>)
 80016b0:	4a39      	ldr	r2, [pc, #228]	@ (8001798 <MX_TIM1_Init+0x11c>)
 80016b2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 80016b4:	4b37      	ldr	r3, [pc, #220]	@ (8001794 <MX_TIM1_Init+0x118>)
 80016b6:	224f      	movs	r2, #79	@ 0x4f
 80016b8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ba:	4b36      	ldr	r3, [pc, #216]	@ (8001794 <MX_TIM1_Init+0x118>)
 80016bc:	2200      	movs	r2, #0
 80016be:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80016c0:	4b34      	ldr	r3, [pc, #208]	@ (8001794 <MX_TIM1_Init+0x118>)
 80016c2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80016c6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c8:	4b32      	ldr	r3, [pc, #200]	@ (8001794 <MX_TIM1_Init+0x118>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016ce:	4b31      	ldr	r3, [pc, #196]	@ (8001794 <MX_TIM1_Init+0x118>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d4:	4b2f      	ldr	r3, [pc, #188]	@ (8001794 <MX_TIM1_Init+0x118>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80016da:	482e      	ldr	r0, [pc, #184]	@ (8001794 <MX_TIM1_Init+0x118>)
 80016dc:	f004 ffb6 	bl	800664c <HAL_TIM_PWM_Init>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80016e6:	f000 f911 	bl	800190c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ea:	2300      	movs	r3, #0
 80016ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016ee:	2300      	movs	r3, #0
 80016f0:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016f2:	2300      	movs	r3, #0
 80016f4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016f6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80016fa:	4619      	mov	r1, r3
 80016fc:	4825      	ldr	r0, [pc, #148]	@ (8001794 <MX_TIM1_Init+0x118>)
 80016fe:	f005 fdb9 	bl	8007274 <HAL_TIMEx_MasterConfigSynchronization>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001708:	f000 f900 	bl	800190c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800170c:	2360      	movs	r3, #96	@ 0x60
 800170e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001710:	2300      	movs	r3, #0
 8001712:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001714:	2300      	movs	r3, #0
 8001716:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001718:	2300      	movs	r3, #0
 800171a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800171c:	2300      	movs	r3, #0
 800171e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001720:	2300      	movs	r3, #0
 8001722:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001724:	2300      	movs	r3, #0
 8001726:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001728:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800172c:	2200      	movs	r2, #0
 800172e:	4619      	mov	r1, r3
 8001730:	4818      	ldr	r0, [pc, #96]	@ (8001794 <MX_TIM1_Init+0x118>)
 8001732:	f005 f8e9 	bl	8006908 <HAL_TIM_PWM_ConfigChannel>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800173c:	f000 f8e6 	bl	800190c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001740:	2300      	movs	r3, #0
 8001742:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001744:	2300      	movs	r3, #0
 8001746:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001748:	2300      	movs	r3, #0
 800174a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800174c:	2300      	movs	r3, #0
 800174e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001750:	2300      	movs	r3, #0
 8001752:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001754:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001758:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800175a:	2300      	movs	r3, #0
 800175c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800175e:	2300      	movs	r3, #0
 8001760:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001762:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001766:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800176c:	2300      	movs	r3, #0
 800176e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001770:	1d3b      	adds	r3, r7, #4
 8001772:	4619      	mov	r1, r3
 8001774:	4807      	ldr	r0, [pc, #28]	@ (8001794 <MX_TIM1_Init+0x118>)
 8001776:	f005 fe05 	bl	8007384 <HAL_TIMEx_ConfigBreakDeadTime>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001780:	f000 f8c4 	bl	800190c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001784:	4803      	ldr	r0, [pc, #12]	@ (8001794 <MX_TIM1_Init+0x118>)
 8001786:	f000 fa13 	bl	8001bb0 <HAL_TIM_MspPostInit>

}
 800178a:	bf00      	nop
 800178c:	3758      	adds	r7, #88	@ 0x58
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20000334 	.word	0x20000334
 8001798:	40012c00 	.word	0x40012c00

0800179c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08a      	sub	sp, #40	@ 0x28
 80017a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a2:	f107 0314 	add.w	r3, r7, #20
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	605a      	str	r2, [r3, #4]
 80017ac:	609a      	str	r2, [r3, #8]
 80017ae:	60da      	str	r2, [r3, #12]
 80017b0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017b2:	4b24      	ldr	r3, [pc, #144]	@ (8001844 <MX_GPIO_Init+0xa8>)
 80017b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017b6:	4a23      	ldr	r2, [pc, #140]	@ (8001844 <MX_GPIO_Init+0xa8>)
 80017b8:	f043 0304 	orr.w	r3, r3, #4
 80017bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017be:	4b21      	ldr	r3, [pc, #132]	@ (8001844 <MX_GPIO_Init+0xa8>)
 80017c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017c2:	f003 0304 	and.w	r3, r3, #4
 80017c6:	613b      	str	r3, [r7, #16]
 80017c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001844 <MX_GPIO_Init+0xa8>)
 80017cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ce:	4a1d      	ldr	r2, [pc, #116]	@ (8001844 <MX_GPIO_Init+0xa8>)
 80017d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001844 <MX_GPIO_Init+0xa8>)
 80017d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e2:	4b18      	ldr	r3, [pc, #96]	@ (8001844 <MX_GPIO_Init+0xa8>)
 80017e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017e6:	4a17      	ldr	r2, [pc, #92]	@ (8001844 <MX_GPIO_Init+0xa8>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017ee:	4b15      	ldr	r3, [pc, #84]	@ (8001844 <MX_GPIO_Init+0xa8>)
 80017f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	60bb      	str	r3, [r7, #8]
 80017f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fa:	4b12      	ldr	r3, [pc, #72]	@ (8001844 <MX_GPIO_Init+0xa8>)
 80017fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017fe:	4a11      	ldr	r2, [pc, #68]	@ (8001844 <MX_GPIO_Init+0xa8>)
 8001800:	f043 0302 	orr.w	r3, r3, #2
 8001804:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001806:	4b0f      	ldr	r3, [pc, #60]	@ (8001844 <MX_GPIO_Init+0xa8>)
 8001808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	607b      	str	r3, [r7, #4]
 8001810:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001812:	2200      	movs	r2, #0
 8001814:	2110      	movs	r1, #16
 8001816:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800181a:	f002 f885 	bl	8003928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800181e:	2310      	movs	r3, #16
 8001820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001822:	2301      	movs	r3, #1
 8001824:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800182a:	2302      	movs	r3, #2
 800182c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182e:	f107 0314 	add.w	r3, r7, #20
 8001832:	4619      	mov	r1, r3
 8001834:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001838:	f001 fecc 	bl	80035d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800183c:	bf00      	nop
 800183e:	3728      	adds	r7, #40	@ 0x28
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	40021000 	.word	0x40021000

08001848 <LogDetector_RecalibrateNoiseFloor>:

/* USER CODE BEGIN 4 */
void LogDetector_RecalibrateNoiseFloor(void) {
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
    const int sample_count = 100;
 800184e:	2364      	movs	r3, #100	@ 0x64
 8001850:	607b      	str	r3, [r7, #4]
    uint32_t sum = 0;
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]

    CharLCD_Set_Cursor(1, 0);
 8001856:	2100      	movs	r1, #0
 8001858:	2001      	movs	r0, #1
 800185a:	f7ff fcc0 	bl	80011de <CharLCD_Set_Cursor>
    CharLCD_Write_String("LOG CAL");
 800185e:	4824      	ldr	r0, [pc, #144]	@ (80018f0 <LogDetector_RecalibrateNoiseFloor+0xa8>)
 8001860:	f7ff fca8 	bl	80011b4 <CharLCD_Write_String>

    for (int i = 0; i < sample_count; i++) {
 8001864:	2300      	movs	r3, #0
 8001866:	60bb      	str	r3, [r7, #8]
 8001868:	e014      	b.n	8001894 <LogDetector_RecalibrateNoiseFloor+0x4c>
        HAL_ADC_Start(&hadc1);
 800186a:	4822      	ldr	r0, [pc, #136]	@ (80018f4 <LogDetector_RecalibrateNoiseFloor+0xac>)
 800186c:	f000 fede 	bl	800262c <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001870:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001874:	481f      	ldr	r0, [pc, #124]	@ (80018f4 <LogDetector_RecalibrateNoiseFloor+0xac>)
 8001876:	f000 ff93 	bl	80027a0 <HAL_ADC_PollForConversion>
        sum += HAL_ADC_GetValue(&hadc1);
 800187a:	481e      	ldr	r0, [pc, #120]	@ (80018f4 <LogDetector_RecalibrateNoiseFloor+0xac>)
 800187c:	f001 f868 	bl	8002950 <HAL_ADC_GetValue>
 8001880:	4602      	mov	r2, r0
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	4413      	add	r3, r2
 8001886:	60fb      	str	r3, [r7, #12]
        HAL_Delay(5); // Small delay between samples
 8001888:	2005      	movs	r0, #5
 800188a:	f000 fb77 	bl	8001f7c <HAL_Delay>
    for (int i = 0; i < sample_count; i++) {
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	3301      	adds	r3, #1
 8001892:	60bb      	str	r3, [r7, #8]
 8001894:	68ba      	ldr	r2, [r7, #8]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	429a      	cmp	r2, r3
 800189a:	dbe6      	blt.n	800186a <LogDetector_RecalibrateNoiseFloor+0x22>
    }

    float avg_adc = sum / (float)sample_count;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	ee07 3a90 	vmov	s15, r3
 80018a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	ee07 3a90 	vmov	s15, r3
 80018ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018b4:	edc7 7a00 	vstr	s15, [r7]
    LogDetector_NoiseFloor = (avg_adc / 4095.0f) * 3.3f;
 80018b8:	ed97 7a00 	vldr	s14, [r7]
 80018bc:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80018f8 <LogDetector_RecalibrateNoiseFloor+0xb0>
 80018c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018c4:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80018fc <LogDetector_RecalibrateNoiseFloor+0xb4>
 80018c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001900 <LogDetector_RecalibrateNoiseFloor+0xb8>)
 80018ce:	edc3 7a00 	vstr	s15, [r3]

    // Set threshold (e.g., 0.15V above floor, tune as needed)
    LogDetector_DetectionThreshold = LogDetector_NoiseFloor + 0.15f;
 80018d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001900 <LogDetector_RecalibrateNoiseFloor+0xb8>)
 80018d4:	edd3 7a00 	vldr	s15, [r3]
 80018d8:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001904 <LogDetector_RecalibrateNoiseFloor+0xbc>
 80018dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018e0:	4b09      	ldr	r3, [pc, #36]	@ (8001908 <LogDetector_RecalibrateNoiseFloor+0xc0>)
 80018e2:	edc3 7a00 	vstr	s15, [r3]
}
 80018e6:	bf00      	nop
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	0800a1b8 	.word	0x0800a1b8
 80018f4:	20000218 	.word	0x20000218
 80018f8:	457ff000 	.word	0x457ff000
 80018fc:	40533333 	.word	0x40533333
 8001900:	200003e4 	.word	0x200003e4
 8001904:	3e19999a 	.word	0x3e19999a
 8001908:	200003e8 	.word	0x200003e8

0800190c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001910:	b672      	cpsid	i
}
 8001912:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001914:	bf00      	nop
 8001916:	e7fd      	b.n	8001914 <Error_Handler+0x8>

08001918 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800191e:	4b0f      	ldr	r3, [pc, #60]	@ (800195c <HAL_MspInit+0x44>)
 8001920:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001922:	4a0e      	ldr	r2, [pc, #56]	@ (800195c <HAL_MspInit+0x44>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	6613      	str	r3, [r2, #96]	@ 0x60
 800192a:	4b0c      	ldr	r3, [pc, #48]	@ (800195c <HAL_MspInit+0x44>)
 800192c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	607b      	str	r3, [r7, #4]
 8001934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001936:	4b09      	ldr	r3, [pc, #36]	@ (800195c <HAL_MspInit+0x44>)
 8001938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800193a:	4a08      	ldr	r2, [pc, #32]	@ (800195c <HAL_MspInit+0x44>)
 800193c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001940:	6593      	str	r3, [r2, #88]	@ 0x58
 8001942:	4b06      	ldr	r3, [pc, #24]	@ (800195c <HAL_MspInit+0x44>)
 8001944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001946:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800194a:	603b      	str	r3, [r7, #0]
 800194c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	40021000 	.word	0x40021000

08001960 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b0ac      	sub	sp, #176	@ 0xb0
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001968:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	60da      	str	r2, [r3, #12]
 8001976:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001978:	f107 0314 	add.w	r3, r7, #20
 800197c:	2288      	movs	r2, #136	@ 0x88
 800197e:	2100      	movs	r1, #0
 8001980:	4618      	mov	r0, r3
 8001982:	f006 fab7 	bl	8007ef4 <memset>
  if(hadc->Instance==ADC1)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a27      	ldr	r2, [pc, #156]	@ (8001a28 <HAL_ADC_MspInit+0xc8>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d147      	bne.n	8001a20 <HAL_ADC_MspInit+0xc0>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001990:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001994:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001996:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800199a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800199e:	2302      	movs	r3, #2
 80019a0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80019a2:	2301      	movs	r3, #1
 80019a4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80019a6:	2308      	movs	r3, #8
 80019a8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80019aa:	2307      	movs	r3, #7
 80019ac:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80019ae:	2302      	movs	r3, #2
 80019b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80019b2:	2302      	movs	r3, #2
 80019b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80019b6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80019ba:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019bc:	f107 0314 	add.w	r3, r7, #20
 80019c0:	4618      	mov	r0, r3
 80019c2:	f003 fa5b 	bl	8004e7c <HAL_RCCEx_PeriphCLKConfig>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80019cc:	f7ff ff9e 	bl	800190c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80019d0:	4b16      	ldr	r3, [pc, #88]	@ (8001a2c <HAL_ADC_MspInit+0xcc>)
 80019d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019d4:	4a15      	ldr	r2, [pc, #84]	@ (8001a2c <HAL_ADC_MspInit+0xcc>)
 80019d6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80019da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019dc:	4b13      	ldr	r3, [pc, #76]	@ (8001a2c <HAL_ADC_MspInit+0xcc>)
 80019de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019e4:	613b      	str	r3, [r7, #16]
 80019e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e8:	4b10      	ldr	r3, [pc, #64]	@ (8001a2c <HAL_ADC_MspInit+0xcc>)
 80019ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ec:	4a0f      	ldr	r2, [pc, #60]	@ (8001a2c <HAL_ADC_MspInit+0xcc>)
 80019ee:	f043 0301 	orr.w	r3, r3, #1
 80019f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019f4:	4b0d      	ldr	r3, [pc, #52]	@ (8001a2c <HAL_ADC_MspInit+0xcc>)
 80019f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = LOG_IN_Pin;
 8001a00:	2301      	movs	r3, #1
 8001a02:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001a06:	230b      	movs	r3, #11
 8001a08:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(LOG_IN_GPIO_Port, &GPIO_InitStruct);
 8001a12:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001a16:	4619      	mov	r1, r3
 8001a18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a1c:	f001 fdda 	bl	80035d4 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001a20:	bf00      	nop
 8001a22:	37b0      	adds	r7, #176	@ 0xb0
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	50040000 	.word	0x50040000
 8001a2c:	40021000 	.word	0x40021000

08001a30 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b0ac      	sub	sp, #176	@ 0xb0
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a38:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a48:	f107 0314 	add.w	r3, r7, #20
 8001a4c:	2288      	movs	r2, #136	@ 0x88
 8001a4e:	2100      	movs	r1, #0
 8001a50:	4618      	mov	r0, r3
 8001a52:	f006 fa4f 	bl	8007ef4 <memset>
  if(hi2c->Instance==I2C1)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a21      	ldr	r2, [pc, #132]	@ (8001ae0 <HAL_I2C_MspInit+0xb0>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d13b      	bne.n	8001ad8 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a60:	2340      	movs	r3, #64	@ 0x40
 8001a62:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001a64:	2300      	movs	r3, #0
 8001a66:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a68:	f107 0314 	add.w	r3, r7, #20
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f003 fa05 	bl	8004e7c <HAL_RCCEx_PeriphCLKConfig>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001a78:	f7ff ff48 	bl	800190c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7c:	4b19      	ldr	r3, [pc, #100]	@ (8001ae4 <HAL_I2C_MspInit+0xb4>)
 8001a7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a80:	4a18      	ldr	r2, [pc, #96]	@ (8001ae4 <HAL_I2C_MspInit+0xb4>)
 8001a82:	f043 0302 	orr.w	r3, r3, #2
 8001a86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a88:	4b16      	ldr	r3, [pc, #88]	@ (8001ae4 <HAL_I2C_MspInit+0xb4>)
 8001a8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	613b      	str	r3, [r7, #16]
 8001a92:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_D15_Pin|SDA_D14_Pin;
 8001a94:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a98:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a9c:	2312      	movs	r3, #18
 8001a9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001aae:	2304      	movs	r3, #4
 8001ab0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ab8:	4619      	mov	r1, r3
 8001aba:	480b      	ldr	r0, [pc, #44]	@ (8001ae8 <HAL_I2C_MspInit+0xb8>)
 8001abc:	f001 fd8a 	bl	80035d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ac0:	4b08      	ldr	r3, [pc, #32]	@ (8001ae4 <HAL_I2C_MspInit+0xb4>)
 8001ac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ac4:	4a07      	ldr	r2, [pc, #28]	@ (8001ae4 <HAL_I2C_MspInit+0xb4>)
 8001ac6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001aca:	6593      	str	r3, [r2, #88]	@ 0x58
 8001acc:	4b05      	ldr	r3, [pc, #20]	@ (8001ae4 <HAL_I2C_MspInit+0xb4>)
 8001ace:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ad0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001ad8:	bf00      	nop
 8001ada:	37b0      	adds	r7, #176	@ 0xb0
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40005400 	.word	0x40005400
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	48000400 	.word	0x48000400

08001aec <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b08a      	sub	sp, #40	@ 0x28
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af4:	f107 0314 	add.w	r3, r7, #20
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a17      	ldr	r2, [pc, #92]	@ (8001b68 <HAL_SPI_MspInit+0x7c>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d128      	bne.n	8001b60 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b0e:	4b17      	ldr	r3, [pc, #92]	@ (8001b6c <HAL_SPI_MspInit+0x80>)
 8001b10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b12:	4a16      	ldr	r2, [pc, #88]	@ (8001b6c <HAL_SPI_MspInit+0x80>)
 8001b14:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b18:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b1a:	4b14      	ldr	r3, [pc, #80]	@ (8001b6c <HAL_SPI_MspInit+0x80>)
 8001b1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b1e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b22:	613b      	str	r3, [r7, #16]
 8001b24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b26:	4b11      	ldr	r3, [pc, #68]	@ (8001b6c <HAL_SPI_MspInit+0x80>)
 8001b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b2a:	4a10      	ldr	r2, [pc, #64]	@ (8001b6c <HAL_SPI_MspInit+0x80>)
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b32:	4b0e      	ldr	r3, [pc, #56]	@ (8001b6c <HAL_SPI_MspInit+0x80>)
 8001b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001b3e:	23e0      	movs	r3, #224	@ 0xe0
 8001b40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b42:	2302      	movs	r3, #2
 8001b44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b46:	2300      	movs	r3, #0
 8001b48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b4e:	2305      	movs	r3, #5
 8001b50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b52:	f107 0314 	add.w	r3, r7, #20
 8001b56:	4619      	mov	r1, r3
 8001b58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b5c:	f001 fd3a 	bl	80035d4 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001b60:	bf00      	nop
 8001b62:	3728      	adds	r7, #40	@ 0x28
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40013000 	.word	0x40013000
 8001b6c:	40021000 	.word	0x40021000

08001b70 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a0a      	ldr	r2, [pc, #40]	@ (8001ba8 <HAL_TIM_PWM_MspInit+0x38>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d10b      	bne.n	8001b9a <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b82:	4b0a      	ldr	r3, [pc, #40]	@ (8001bac <HAL_TIM_PWM_MspInit+0x3c>)
 8001b84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b86:	4a09      	ldr	r2, [pc, #36]	@ (8001bac <HAL_TIM_PWM_MspInit+0x3c>)
 8001b88:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b8c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b8e:	4b07      	ldr	r3, [pc, #28]	@ (8001bac <HAL_TIM_PWM_MspInit+0x3c>)
 8001b90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001b9a:	bf00      	nop
 8001b9c:	3714      	adds	r7, #20
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	40012c00 	.word	0x40012c00
 8001bac:	40021000 	.word	0x40021000

08001bb0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b088      	sub	sp, #32
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb8:	f107 030c 	add.w	r3, r7, #12
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a12      	ldr	r2, [pc, #72]	@ (8001c18 <HAL_TIM_MspPostInit+0x68>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d11d      	bne.n	8001c0e <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd2:	4b12      	ldr	r3, [pc, #72]	@ (8001c1c <HAL_TIM_MspPostInit+0x6c>)
 8001bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bd6:	4a11      	ldr	r2, [pc, #68]	@ (8001c1c <HAL_TIM_MspPostInit+0x6c>)
 8001bd8:	f043 0301 	orr.w	r3, r3, #1
 8001bdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bde:	4b0f      	ldr	r3, [pc, #60]	@ (8001c1c <HAL_TIM_MspPostInit+0x6c>)
 8001be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	60bb      	str	r3, [r7, #8]
 8001be8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001bea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001bee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c00:	f107 030c 	add.w	r3, r7, #12
 8001c04:	4619      	mov	r1, r3
 8001c06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c0a:	f001 fce3 	bl	80035d4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001c0e:	bf00      	nop
 8001c10:	3720      	adds	r7, #32
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40012c00 	.word	0x40012c00
 8001c1c:	40021000 	.word	0x40021000

08001c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c24:	bf00      	nop
 8001c26:	e7fd      	b.n	8001c24 <NMI_Handler+0x4>

08001c28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c2c:	bf00      	nop
 8001c2e:	e7fd      	b.n	8001c2c <HardFault_Handler+0x4>

08001c30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c34:	bf00      	nop
 8001c36:	e7fd      	b.n	8001c34 <MemManage_Handler+0x4>

08001c38 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c3c:	bf00      	nop
 8001c3e:	e7fd      	b.n	8001c3c <BusFault_Handler+0x4>

08001c40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c44:	bf00      	nop
 8001c46:	e7fd      	b.n	8001c44 <UsageFault_Handler+0x4>

08001c48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c4c:	bf00      	nop
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c56:	b480      	push	{r7}
 8001c58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr

08001c72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c76:	f000 f961 	bl	8001f3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	af00      	add	r7, sp, #0
  return 1;
 8001c82:	2301      	movs	r3, #1
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <_kill>:

int _kill(int pid, int sig)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b082      	sub	sp, #8
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
 8001c96:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c98:	f006 f934 	bl	8007f04 <__errno>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2216      	movs	r2, #22
 8001ca0:	601a      	str	r2, [r3, #0]
  return -1;
 8001ca2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <_exit>:

void _exit (int status)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b082      	sub	sp, #8
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cb6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7ff ffe7 	bl	8001c8e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cc0:	bf00      	nop
 8001cc2:	e7fd      	b.n	8001cc0 <_exit+0x12>

08001cc4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]
 8001cd4:	e00a      	b.n	8001cec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cd6:	f3af 8000 	nop.w
 8001cda:	4601      	mov	r1, r0
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	1c5a      	adds	r2, r3, #1
 8001ce0:	60ba      	str	r2, [r7, #8]
 8001ce2:	b2ca      	uxtb	r2, r1
 8001ce4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	617b      	str	r3, [r7, #20]
 8001cec:	697a      	ldr	r2, [r7, #20]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	dbf0      	blt.n	8001cd6 <_read+0x12>
  }

  return len;
 8001cf4:	687b      	ldr	r3, [r7, #4]
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3718      	adds	r7, #24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b086      	sub	sp, #24
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	60f8      	str	r0, [r7, #12]
 8001d06:	60b9      	str	r1, [r7, #8]
 8001d08:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	617b      	str	r3, [r7, #20]
 8001d0e:	e009      	b.n	8001d24 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	1c5a      	adds	r2, r3, #1
 8001d14:	60ba      	str	r2, [r7, #8]
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	3301      	adds	r3, #1
 8001d22:	617b      	str	r3, [r7, #20]
 8001d24:	697a      	ldr	r2, [r7, #20]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	dbf1      	blt.n	8001d10 <_write+0x12>
  }
  return len;
 8001d2c:	687b      	ldr	r3, [r7, #4]
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3718      	adds	r7, #24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <_close>:

int _close(int file)
{
 8001d36:	b480      	push	{r7}
 8001d38:	b083      	sub	sp, #12
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b083      	sub	sp, #12
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
 8001d56:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d5e:	605a      	str	r2, [r3, #4]
  return 0;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <_isatty>:

int _isatty(int file)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d76:	2301      	movs	r3, #1
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3714      	adds	r7, #20
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
	...

08001da0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001da8:	4a14      	ldr	r2, [pc, #80]	@ (8001dfc <_sbrk+0x5c>)
 8001daa:	4b15      	ldr	r3, [pc, #84]	@ (8001e00 <_sbrk+0x60>)
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001db4:	4b13      	ldr	r3, [pc, #76]	@ (8001e04 <_sbrk+0x64>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d102      	bne.n	8001dc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dbc:	4b11      	ldr	r3, [pc, #68]	@ (8001e04 <_sbrk+0x64>)
 8001dbe:	4a12      	ldr	r2, [pc, #72]	@ (8001e08 <_sbrk+0x68>)
 8001dc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dc2:	4b10      	ldr	r3, [pc, #64]	@ (8001e04 <_sbrk+0x64>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4413      	add	r3, r2
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d207      	bcs.n	8001de0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dd0:	f006 f898 	bl	8007f04 <__errno>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	220c      	movs	r2, #12
 8001dd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001dde:	e009      	b.n	8001df4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001de0:	4b08      	ldr	r3, [pc, #32]	@ (8001e04 <_sbrk+0x64>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001de6:	4b07      	ldr	r3, [pc, #28]	@ (8001e04 <_sbrk+0x64>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4413      	add	r3, r2
 8001dee:	4a05      	ldr	r2, [pc, #20]	@ (8001e04 <_sbrk+0x64>)
 8001df0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001df2:	68fb      	ldr	r3, [r7, #12]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3718      	adds	r7, #24
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	20018000 	.word	0x20018000
 8001e00:	00000400 	.word	0x00000400
 8001e04:	200003ec 	.word	0x200003ec
 8001e08:	20000540 	.word	0x20000540

08001e0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e10:	4b06      	ldr	r3, [pc, #24]	@ (8001e2c <SystemInit+0x20>)
 8001e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e16:	4a05      	ldr	r2, [pc, #20]	@ (8001e2c <SystemInit+0x20>)
 8001e18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001e20:	bf00      	nop
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	e000ed00 	.word	0xe000ed00

08001e30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e68 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e34:	f7ff ffea 	bl	8001e0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e38:	480c      	ldr	r0, [pc, #48]	@ (8001e6c <LoopForever+0x6>)
  ldr r1, =_edata
 8001e3a:	490d      	ldr	r1, [pc, #52]	@ (8001e70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001e74 <LoopForever+0xe>)
  movs r3, #0
 8001e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e40:	e002      	b.n	8001e48 <LoopCopyDataInit>

08001e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e46:	3304      	adds	r3, #4

08001e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e4c:	d3f9      	bcc.n	8001e42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e50:	4c0a      	ldr	r4, [pc, #40]	@ (8001e7c <LoopForever+0x16>)
  movs r3, #0
 8001e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e54:	e001      	b.n	8001e5a <LoopFillZerobss>

08001e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e58:	3204      	adds	r2, #4

08001e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e5c:	d3fb      	bcc.n	8001e56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e5e:	f006 f857 	bl	8007f10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e62:	f7ff f9fb 	bl	800125c <main>

08001e66 <LoopForever>:

LoopForever:
    b LoopForever
 8001e66:	e7fe      	b.n	8001e66 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e68:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001e6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e70:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001e74:	0800a584 	.word	0x0800a584
  ldr r2, =_sbss
 8001e78:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001e7c:	20000540 	.word	0x20000540

08001e80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e80:	e7fe      	b.n	8001e80 <ADC1_2_IRQHandler>
	...

08001e84 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec0 <HAL_Init+0x3c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a0b      	ldr	r2, [pc, #44]	@ (8001ec0 <HAL_Init+0x3c>)
 8001e94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e98:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e9a:	2003      	movs	r0, #3
 8001e9c:	f001 fb66 	bl	800356c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ea0:	2000      	movs	r0, #0
 8001ea2:	f000 f80f 	bl	8001ec4 <HAL_InitTick>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d002      	beq.n	8001eb2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	71fb      	strb	r3, [r7, #7]
 8001eb0:	e001      	b.n	8001eb6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001eb2:	f7ff fd31 	bl	8001918 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001eb6:	79fb      	ldrb	r3, [r7, #7]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40022000 	.word	0x40022000

08001ec4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ed0:	4b17      	ldr	r3, [pc, #92]	@ (8001f30 <HAL_InitTick+0x6c>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d023      	beq.n	8001f20 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ed8:	4b16      	ldr	r3, [pc, #88]	@ (8001f34 <HAL_InitTick+0x70>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	4b14      	ldr	r3, [pc, #80]	@ (8001f30 <HAL_InitTick+0x6c>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ee6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f001 fb63 	bl	80035ba <HAL_SYSTICK_Config>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d10f      	bne.n	8001f1a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2b0f      	cmp	r3, #15
 8001efe:	d809      	bhi.n	8001f14 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f00:	2200      	movs	r2, #0
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f08:	f001 fb3b 	bl	8003582 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f0c:	4a0a      	ldr	r2, [pc, #40]	@ (8001f38 <HAL_InitTick+0x74>)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	e007      	b.n	8001f24 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	73fb      	strb	r3, [r7, #15]
 8001f18:	e004      	b.n	8001f24 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	73fb      	strb	r3, [r7, #15]
 8001f1e:	e001      	b.n	8001f24 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	2000000c 	.word	0x2000000c
 8001f34:	20000004 	.word	0x20000004
 8001f38:	20000008 	.word	0x20000008

08001f3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f40:	4b06      	ldr	r3, [pc, #24]	@ (8001f5c <HAL_IncTick+0x20>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	461a      	mov	r2, r3
 8001f46:	4b06      	ldr	r3, [pc, #24]	@ (8001f60 <HAL_IncTick+0x24>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	4a04      	ldr	r2, [pc, #16]	@ (8001f60 <HAL_IncTick+0x24>)
 8001f4e:	6013      	str	r3, [r2, #0]
}
 8001f50:	bf00      	nop
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	2000000c 	.word	0x2000000c
 8001f60:	200003f0 	.word	0x200003f0

08001f64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  return uwTick;
 8001f68:	4b03      	ldr	r3, [pc, #12]	@ (8001f78 <HAL_GetTick+0x14>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	200003f0 	.word	0x200003f0

08001f7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f84:	f7ff ffee 	bl	8001f64 <HAL_GetTick>
 8001f88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f94:	d005      	beq.n	8001fa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001f96:	4b0a      	ldr	r3, [pc, #40]	@ (8001fc0 <HAL_Delay+0x44>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fa2:	bf00      	nop
 8001fa4:	f7ff ffde 	bl	8001f64 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d8f7      	bhi.n	8001fa4 <HAL_Delay+0x28>
  {
  }
}
 8001fb4:	bf00      	nop
 8001fb6:	bf00      	nop
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	2000000c 	.word	0x2000000c

08001fc4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	431a      	orrs	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	609a      	str	r2, [r3, #8]
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr

08001fea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b083      	sub	sp, #12
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
 8001ff2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	431a      	orrs	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	609a      	str	r2, [r3, #8]
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002020:	4618      	mov	r0, r3
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800202c:	b480      	push	{r7}
 800202e:	b087      	sub	sp, #28
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
 8002038:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	3360      	adds	r3, #96	@ 0x60
 800203e:	461a      	mov	r2, r3
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	4413      	add	r3, r2
 8002046:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	4b08      	ldr	r3, [pc, #32]	@ (8002070 <LL_ADC_SetOffset+0x44>)
 800204e:	4013      	ands	r3, r2
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	430a      	orrs	r2, r1
 800205a:	4313      	orrs	r3, r2
 800205c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002064:	bf00      	nop
 8002066:	371c      	adds	r7, #28
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	03fff000 	.word	0x03fff000

08002074 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	3360      	adds	r3, #96	@ 0x60
 8002082:	461a      	mov	r2, r3
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	4413      	add	r3, r2
 800208a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002094:	4618      	mov	r0, r3
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b087      	sub	sp, #28
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	3360      	adds	r3, #96	@ 0x60
 80020b0:	461a      	mov	r2, r3
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	4413      	add	r3, r2
 80020b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	431a      	orrs	r2, r3
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80020ca:	bf00      	nop
 80020cc:	371c      	adds	r7, #28
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80020d6:	b480      	push	{r7}
 80020d8:	b083      	sub	sp, #12
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80020ea:	2301      	movs	r3, #1
 80020ec:	e000      	b.n	80020f0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b087      	sub	sp, #28
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	3330      	adds	r3, #48	@ 0x30
 800210c:	461a      	mov	r2, r3
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	0a1b      	lsrs	r3, r3, #8
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	f003 030c 	and.w	r3, r3, #12
 8002118:	4413      	add	r3, r2
 800211a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	f003 031f 	and.w	r3, r3, #31
 8002126:	211f      	movs	r1, #31
 8002128:	fa01 f303 	lsl.w	r3, r1, r3
 800212c:	43db      	mvns	r3, r3
 800212e:	401a      	ands	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	0e9b      	lsrs	r3, r3, #26
 8002134:	f003 011f 	and.w	r1, r3, #31
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	f003 031f 	and.w	r3, r3, #31
 800213e:	fa01 f303 	lsl.w	r3, r1, r3
 8002142:	431a      	orrs	r2, r3
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002148:	bf00      	nop
 800214a:	371c      	adds	r7, #28
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002154:	b480      	push	{r7}
 8002156:	b087      	sub	sp, #28
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	3314      	adds	r3, #20
 8002164:	461a      	mov	r2, r3
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	0e5b      	lsrs	r3, r3, #25
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	4413      	add	r3, r2
 8002172:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	0d1b      	lsrs	r3, r3, #20
 800217c:	f003 031f 	and.w	r3, r3, #31
 8002180:	2107      	movs	r1, #7
 8002182:	fa01 f303 	lsl.w	r3, r1, r3
 8002186:	43db      	mvns	r3, r3
 8002188:	401a      	ands	r2, r3
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	0d1b      	lsrs	r3, r3, #20
 800218e:	f003 031f 	and.w	r3, r3, #31
 8002192:	6879      	ldr	r1, [r7, #4]
 8002194:	fa01 f303 	lsl.w	r3, r1, r3
 8002198:	431a      	orrs	r2, r3
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800219e:	bf00      	nop
 80021a0:	371c      	adds	r7, #28
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
	...

080021ac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021c4:	43db      	mvns	r3, r3
 80021c6:	401a      	ands	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f003 0318 	and.w	r3, r3, #24
 80021ce:	4908      	ldr	r1, [pc, #32]	@ (80021f0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80021d0:	40d9      	lsrs	r1, r3
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	400b      	ands	r3, r1
 80021d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021da:	431a      	orrs	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80021e2:	bf00      	nop
 80021e4:	3714      	adds	r7, #20
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	0007ffff 	.word	0x0007ffff

080021f4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f003 031f 	and.w	r3, r3, #31
}
 8002204:	4618      	mov	r0, r3
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002220:	4618      	mov	r0, r3
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800223c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6093      	str	r3, [r2, #8]
}
 8002244:	bf00      	nop
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002260:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002264:	d101      	bne.n	800226a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002266:	2301      	movs	r3, #1
 8002268:	e000      	b.n	800226c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002288:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800228c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80022b4:	d101      	bne.n	80022ba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80022b6:	2301      	movs	r3, #1
 80022b8:	e000      	b.n	80022bc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80022d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80022dc:	f043 0201 	orr.w	r2, r3, #1
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f003 0301 	and.w	r3, r3, #1
 8002300:	2b01      	cmp	r3, #1
 8002302:	d101      	bne.n	8002308 <LL_ADC_IsEnabled+0x18>
 8002304:	2301      	movs	r3, #1
 8002306:	e000      	b.n	800230a <LL_ADC_IsEnabled+0x1a>
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr

08002316 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002316:	b480      	push	{r7}
 8002318:	b083      	sub	sp, #12
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002326:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800232a:	f043 0204 	orr.w	r2, r3, #4
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002332:	bf00      	nop
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800233e:	b480      	push	{r7}
 8002340:	b083      	sub	sp, #12
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f003 0304 	and.w	r3, r3, #4
 800234e:	2b04      	cmp	r3, #4
 8002350:	d101      	bne.n	8002356 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002352:	2301      	movs	r3, #1
 8002354:	e000      	b.n	8002358 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f003 0308 	and.w	r3, r3, #8
 8002374:	2b08      	cmp	r3, #8
 8002376:	d101      	bne.n	800237c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002378:	2301      	movs	r3, #1
 800237a:	e000      	b.n	800237e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
	...

0800238c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800238c:	b590      	push	{r4, r7, lr}
 800238e:	b089      	sub	sp, #36	@ 0x24
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002394:	2300      	movs	r3, #0
 8002396:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002398:	2300      	movs	r3, #0
 800239a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e130      	b.n	8002608 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d109      	bne.n	80023c8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f7ff fad3 	bl	8001960 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff ff3f 	bl	8002250 <LL_ADC_IsDeepPowerDownEnabled>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d004      	beq.n	80023e2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff ff25 	bl	800222c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7ff ff5a 	bl	80022a0 <LL_ADC_IsInternalRegulatorEnabled>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d115      	bne.n	800241e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff ff3e 	bl	8002278 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023fc:	4b84      	ldr	r3, [pc, #528]	@ (8002610 <HAL_ADC_Init+0x284>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	099b      	lsrs	r3, r3, #6
 8002402:	4a84      	ldr	r2, [pc, #528]	@ (8002614 <HAL_ADC_Init+0x288>)
 8002404:	fba2 2303 	umull	r2, r3, r2, r3
 8002408:	099b      	lsrs	r3, r3, #6
 800240a:	3301      	adds	r3, #1
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002410:	e002      	b.n	8002418 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	3b01      	subs	r3, #1
 8002416:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1f9      	bne.n	8002412 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff ff3c 	bl	80022a0 <LL_ADC_IsInternalRegulatorEnabled>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d10d      	bne.n	800244a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002432:	f043 0210 	orr.w	r2, r3, #16
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800243e:	f043 0201 	orr.w	r2, r3, #1
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff ff75 	bl	800233e <LL_ADC_REG_IsConversionOngoing>
 8002454:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800245a:	f003 0310 	and.w	r3, r3, #16
 800245e:	2b00      	cmp	r3, #0
 8002460:	f040 80c9 	bne.w	80025f6 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	2b00      	cmp	r3, #0
 8002468:	f040 80c5 	bne.w	80025f6 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002470:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002474:	f043 0202 	orr.w	r2, r3, #2
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff ff35 	bl	80022f0 <LL_ADC_IsEnabled>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d115      	bne.n	80024b8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800248c:	4862      	ldr	r0, [pc, #392]	@ (8002618 <HAL_ADC_Init+0x28c>)
 800248e:	f7ff ff2f 	bl	80022f0 <LL_ADC_IsEnabled>
 8002492:	4604      	mov	r4, r0
 8002494:	4861      	ldr	r0, [pc, #388]	@ (800261c <HAL_ADC_Init+0x290>)
 8002496:	f7ff ff2b 	bl	80022f0 <LL_ADC_IsEnabled>
 800249a:	4603      	mov	r3, r0
 800249c:	431c      	orrs	r4, r3
 800249e:	4860      	ldr	r0, [pc, #384]	@ (8002620 <HAL_ADC_Init+0x294>)
 80024a0:	f7ff ff26 	bl	80022f0 <LL_ADC_IsEnabled>
 80024a4:	4603      	mov	r3, r0
 80024a6:	4323      	orrs	r3, r4
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d105      	bne.n	80024b8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	4619      	mov	r1, r3
 80024b2:	485c      	ldr	r0, [pc, #368]	@ (8002624 <HAL_ADC_Init+0x298>)
 80024b4:	f7ff fd86 	bl	8001fc4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	7e5b      	ldrb	r3, [r3, #25]
 80024bc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024c2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80024c8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80024ce:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024d6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024d8:	4313      	orrs	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d106      	bne.n	80024f4 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ea:	3b01      	subs	r3, #1
 80024ec:	045b      	lsls	r3, r3, #17
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d009      	beq.n	8002510 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002500:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002508:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	4313      	orrs	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68da      	ldr	r2, [r3, #12]
 8002516:	4b44      	ldr	r3, [pc, #272]	@ (8002628 <HAL_ADC_Init+0x29c>)
 8002518:	4013      	ands	r3, r2
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	6812      	ldr	r2, [r2, #0]
 800251e:	69b9      	ldr	r1, [r7, #24]
 8002520:	430b      	orrs	r3, r1
 8002522:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff ff1b 	bl	8002364 <LL_ADC_INJ_IsConversionOngoing>
 800252e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d13d      	bne.n	80025b2 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d13a      	bne.n	80025b2 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002540:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002548:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800254a:	4313      	orrs	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002558:	f023 0302 	bic.w	r3, r3, #2
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6812      	ldr	r2, [r2, #0]
 8002560:	69b9      	ldr	r1, [r7, #24]
 8002562:	430b      	orrs	r3, r1
 8002564:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800256c:	2b01      	cmp	r3, #1
 800256e:	d118      	bne.n	80025a2 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800257a:	f023 0304 	bic.w	r3, r3, #4
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002586:	4311      	orrs	r1, r2
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800258c:	4311      	orrs	r1, r2
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002592:	430a      	orrs	r2, r1
 8002594:	431a      	orrs	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f042 0201 	orr.w	r2, r2, #1
 800259e:	611a      	str	r2, [r3, #16]
 80025a0:	e007      	b.n	80025b2 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	691a      	ldr	r2, [r3, #16]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 0201 	bic.w	r2, r2, #1
 80025b0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d10c      	bne.n	80025d4 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c0:	f023 010f 	bic.w	r1, r3, #15
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	69db      	ldr	r3, [r3, #28]
 80025c8:	1e5a      	subs	r2, r3, #1
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	430a      	orrs	r2, r1
 80025d0:	631a      	str	r2, [r3, #48]	@ 0x30
 80025d2:	e007      	b.n	80025e4 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f022 020f 	bic.w	r2, r2, #15
 80025e2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025e8:	f023 0303 	bic.w	r3, r3, #3
 80025ec:	f043 0201 	orr.w	r2, r3, #1
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	655a      	str	r2, [r3, #84]	@ 0x54
 80025f4:	e007      	b.n	8002606 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025fa:	f043 0210 	orr.w	r2, r3, #16
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002606:	7ffb      	ldrb	r3, [r7, #31]
}
 8002608:	4618      	mov	r0, r3
 800260a:	3724      	adds	r7, #36	@ 0x24
 800260c:	46bd      	mov	sp, r7
 800260e:	bd90      	pop	{r4, r7, pc}
 8002610:	20000004 	.word	0x20000004
 8002614:	053e2d63 	.word	0x053e2d63
 8002618:	50040000 	.word	0x50040000
 800261c:	50040100 	.word	0x50040100
 8002620:	50040200 	.word	0x50040200
 8002624:	50040300 	.word	0x50040300
 8002628:	fff0c007 	.word	0xfff0c007

0800262c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b086      	sub	sp, #24
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002634:	4857      	ldr	r0, [pc, #348]	@ (8002794 <HAL_ADC_Start+0x168>)
 8002636:	f7ff fddd 	bl	80021f4 <LL_ADC_GetMultimode>
 800263a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff fe7c 	bl	800233e <LL_ADC_REG_IsConversionOngoing>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	f040 809c 	bne.w	8002786 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002654:	2b01      	cmp	r3, #1
 8002656:	d101      	bne.n	800265c <HAL_ADC_Start+0x30>
 8002658:	2302      	movs	r3, #2
 800265a:	e097      	b.n	800278c <HAL_ADC_Start+0x160>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f000 fd73 	bl	8003150 <ADC_Enable>
 800266a:	4603      	mov	r3, r0
 800266c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800266e:	7dfb      	ldrb	r3, [r7, #23]
 8002670:	2b00      	cmp	r3, #0
 8002672:	f040 8083 	bne.w	800277c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800267a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800267e:	f023 0301 	bic.w	r3, r3, #1
 8002682:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a42      	ldr	r2, [pc, #264]	@ (8002798 <HAL_ADC_Start+0x16c>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d002      	beq.n	800269a <HAL_ADC_Start+0x6e>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	e000      	b.n	800269c <HAL_ADC_Start+0x70>
 800269a:	4b40      	ldr	r3, [pc, #256]	@ (800279c <HAL_ADC_Start+0x170>)
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	6812      	ldr	r2, [r2, #0]
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d002      	beq.n	80026aa <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d105      	bne.n	80026b6 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ae:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026c2:	d106      	bne.n	80026d2 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026c8:	f023 0206 	bic.w	r2, r3, #6
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	659a      	str	r2, [r3, #88]	@ 0x58
 80026d0:	e002      	b.n	80026d8 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	221c      	movs	r2, #28
 80026de:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a2a      	ldr	r2, [pc, #168]	@ (8002798 <HAL_ADC_Start+0x16c>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d002      	beq.n	80026f8 <HAL_ADC_Start+0xcc>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	e000      	b.n	80026fa <HAL_ADC_Start+0xce>
 80026f8:	4b28      	ldr	r3, [pc, #160]	@ (800279c <HAL_ADC_Start+0x170>)
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	6812      	ldr	r2, [r2, #0]
 80026fe:	4293      	cmp	r3, r2
 8002700:	d008      	beq.n	8002714 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d005      	beq.n	8002714 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	2b05      	cmp	r3, #5
 800270c:	d002      	beq.n	8002714 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	2b09      	cmp	r3, #9
 8002712:	d114      	bne.n	800273e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d007      	beq.n	8002732 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002726:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800272a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff fded 	bl	8002316 <LL_ADC_REG_StartConversion>
 800273c:	e025      	b.n	800278a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002742:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a12      	ldr	r2, [pc, #72]	@ (8002798 <HAL_ADC_Start+0x16c>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d002      	beq.n	800275a <HAL_ADC_Start+0x12e>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	e000      	b.n	800275c <HAL_ADC_Start+0x130>
 800275a:	4b10      	ldr	r3, [pc, #64]	@ (800279c <HAL_ADC_Start+0x170>)
 800275c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00f      	beq.n	800278a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800276e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002772:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	655a      	str	r2, [r3, #84]	@ 0x54
 800277a:	e006      	b.n	800278a <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002784:	e001      	b.n	800278a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002786:	2302      	movs	r3, #2
 8002788:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800278a:	7dfb      	ldrb	r3, [r7, #23]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3718      	adds	r7, #24
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	50040300 	.word	0x50040300
 8002798:	50040100 	.word	0x50040100
 800279c:	50040000 	.word	0x50040000

080027a0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b088      	sub	sp, #32
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027aa:	4866      	ldr	r0, [pc, #408]	@ (8002944 <HAL_ADC_PollForConversion+0x1a4>)
 80027ac:	f7ff fd22 	bl	80021f4 <LL_ADC_GetMultimode>
 80027b0:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	2b08      	cmp	r3, #8
 80027b8:	d102      	bne.n	80027c0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80027ba:	2308      	movs	r3, #8
 80027bc:	61fb      	str	r3, [r7, #28]
 80027be:	e02a      	b.n	8002816 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d005      	beq.n	80027d2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	2b05      	cmp	r3, #5
 80027ca:	d002      	beq.n	80027d2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	2b09      	cmp	r3, #9
 80027d0:	d111      	bne.n	80027f6 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d007      	beq.n	80027f0 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027e4:	f043 0220 	orr.w	r2, r3, #32
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e0a4      	b.n	800293a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80027f0:	2304      	movs	r3, #4
 80027f2:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80027f4:	e00f      	b.n	8002816 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80027f6:	4853      	ldr	r0, [pc, #332]	@ (8002944 <HAL_ADC_PollForConversion+0x1a4>)
 80027f8:	f7ff fd0a 	bl	8002210 <LL_ADC_GetMultiDMATransfer>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d007      	beq.n	8002812 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002806:	f043 0220 	orr.w	r2, r3, #32
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e093      	b.n	800293a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002812:	2304      	movs	r3, #4
 8002814:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002816:	f7ff fba5 	bl	8001f64 <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800281c:	e021      	b.n	8002862 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002824:	d01d      	beq.n	8002862 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002826:	f7ff fb9d 	bl	8001f64 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	429a      	cmp	r2, r3
 8002834:	d302      	bcc.n	800283c <HAL_ADC_PollForConversion+0x9c>
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d112      	bne.n	8002862 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	4013      	ands	r3, r2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10b      	bne.n	8002862 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800284e:	f043 0204 	orr.w	r2, r3, #4
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e06b      	b.n	800293a <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	4013      	ands	r3, r2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d0d6      	beq.n	800281e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002874:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff fc28 	bl	80020d6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d01c      	beq.n	80028c6 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	7e5b      	ldrb	r3, [r3, #25]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d118      	bne.n	80028c6 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0308 	and.w	r3, r3, #8
 800289e:	2b08      	cmp	r3, #8
 80028a0:	d111      	bne.n	80028c6 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028a6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d105      	bne.n	80028c6 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028be:	f043 0201 	orr.w	r2, r3, #1
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a1f      	ldr	r2, [pc, #124]	@ (8002948 <HAL_ADC_PollForConversion+0x1a8>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d002      	beq.n	80028d6 <HAL_ADC_PollForConversion+0x136>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	e000      	b.n	80028d8 <HAL_ADC_PollForConversion+0x138>
 80028d6:	4b1d      	ldr	r3, [pc, #116]	@ (800294c <HAL_ADC_PollForConversion+0x1ac>)
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	6812      	ldr	r2, [r2, #0]
 80028dc:	4293      	cmp	r3, r2
 80028de:	d008      	beq.n	80028f2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d005      	beq.n	80028f2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	2b05      	cmp	r3, #5
 80028ea:	d002      	beq.n	80028f2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	2b09      	cmp	r3, #9
 80028f0:	d104      	bne.n	80028fc <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	61bb      	str	r3, [r7, #24]
 80028fa:	e00c      	b.n	8002916 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a11      	ldr	r2, [pc, #68]	@ (8002948 <HAL_ADC_PollForConversion+0x1a8>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d002      	beq.n	800290c <HAL_ADC_PollForConversion+0x16c>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	e000      	b.n	800290e <HAL_ADC_PollForConversion+0x16e>
 800290c:	4b0f      	ldr	r3, [pc, #60]	@ (800294c <HAL_ADC_PollForConversion+0x1ac>)
 800290e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	2b08      	cmp	r3, #8
 800291a:	d104      	bne.n	8002926 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2208      	movs	r2, #8
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	e008      	b.n	8002938 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d103      	bne.n	8002938 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	220c      	movs	r2, #12
 8002936:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3720      	adds	r7, #32
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	50040300 	.word	0x50040300
 8002948:	50040100 	.word	0x50040100
 800294c:	50040000 	.word	0x50040000

08002950 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800295e:	4618      	mov	r0, r3
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
	...

0800296c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b0b6      	sub	sp, #216	@ 0xd8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002976:	2300      	movs	r3, #0
 8002978:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800297c:	2300      	movs	r3, #0
 800297e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002986:	2b01      	cmp	r3, #1
 8002988:	d101      	bne.n	800298e <HAL_ADC_ConfigChannel+0x22>
 800298a:	2302      	movs	r3, #2
 800298c:	e3c9      	b.n	8003122 <HAL_ADC_ConfigChannel+0x7b6>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2201      	movs	r2, #1
 8002992:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4618      	mov	r0, r3
 800299c:	f7ff fccf 	bl	800233e <LL_ADC_REG_IsConversionOngoing>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f040 83aa 	bne.w	80030fc <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	2b05      	cmp	r3, #5
 80029b6:	d824      	bhi.n	8002a02 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	3b02      	subs	r3, #2
 80029be:	2b03      	cmp	r3, #3
 80029c0:	d81b      	bhi.n	80029fa <HAL_ADC_ConfigChannel+0x8e>
 80029c2:	a201      	add	r2, pc, #4	@ (adr r2, 80029c8 <HAL_ADC_ConfigChannel+0x5c>)
 80029c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c8:	080029d9 	.word	0x080029d9
 80029cc:	080029e1 	.word	0x080029e1
 80029d0:	080029e9 	.word	0x080029e9
 80029d4:	080029f1 	.word	0x080029f1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80029d8:	230c      	movs	r3, #12
 80029da:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80029de:	e010      	b.n	8002a02 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80029e0:	2312      	movs	r3, #18
 80029e2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80029e6:	e00c      	b.n	8002a02 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80029e8:	2318      	movs	r3, #24
 80029ea:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80029ee:	e008      	b.n	8002a02 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80029f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80029f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80029f8:	e003      	b.n	8002a02 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80029fa:	2306      	movs	r3, #6
 80029fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002a00:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6818      	ldr	r0, [r3, #0]
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002a10:	f7ff fb74 	bl	80020fc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff fc90 	bl	800233e <LL_ADC_REG_IsConversionOngoing>
 8002a1e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff fc9c 	bl	8002364 <LL_ADC_INJ_IsConversionOngoing>
 8002a2c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f040 81a4 	bne.w	8002d82 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f040 819f 	bne.w	8002d82 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6818      	ldr	r0, [r3, #0]
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	6819      	ldr	r1, [r3, #0]
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	461a      	mov	r2, r3
 8002a52:	f7ff fb7f 	bl	8002154 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	695a      	ldr	r2, [r3, #20]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	08db      	lsrs	r3, r3, #3
 8002a62:	f003 0303 	and.w	r3, r3, #3
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	2b04      	cmp	r3, #4
 8002a76:	d00a      	beq.n	8002a8e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6818      	ldr	r0, [r3, #0]
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	6919      	ldr	r1, [r3, #16]
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a88:	f7ff fad0 	bl	800202c <LL_ADC_SetOffset>
 8002a8c:	e179      	b.n	8002d82 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2100      	movs	r1, #0
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff faed 	bl	8002074 <LL_ADC_GetOffsetChannel>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d10a      	bne.n	8002aba <HAL_ADC_ConfigChannel+0x14e>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff fae2 	bl	8002074 <LL_ADC_GetOffsetChannel>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	0e9b      	lsrs	r3, r3, #26
 8002ab4:	f003 021f 	and.w	r2, r3, #31
 8002ab8:	e01e      	b.n	8002af8 <HAL_ADC_ConfigChannel+0x18c>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2100      	movs	r1, #0
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff fad7 	bl	8002074 <LL_ADC_GetOffsetChannel>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002acc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002ad0:	fa93 f3a3 	rbit	r3, r3
 8002ad4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ad8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002adc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ae0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002ae8:	2320      	movs	r3, #32
 8002aea:	e004      	b.n	8002af6 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002aec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002af0:	fab3 f383 	clz	r3, r3
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d105      	bne.n	8002b10 <HAL_ADC_ConfigChannel+0x1a4>
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	0e9b      	lsrs	r3, r3, #26
 8002b0a:	f003 031f 	and.w	r3, r3, #31
 8002b0e:	e018      	b.n	8002b42 <HAL_ADC_ConfigChannel+0x1d6>
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b1c:	fa93 f3a3 	rbit	r3, r3
 8002b20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002b24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002b2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d101      	bne.n	8002b38 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002b34:	2320      	movs	r3, #32
 8002b36:	e004      	b.n	8002b42 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002b38:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b3c:	fab3 f383 	clz	r3, r3
 8002b40:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d106      	bne.n	8002b54 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff faa6 	bl	80020a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2101      	movs	r1, #1
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff fa8a 	bl	8002074 <LL_ADC_GetOffsetChannel>
 8002b60:	4603      	mov	r3, r0
 8002b62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d10a      	bne.n	8002b80 <HAL_ADC_ConfigChannel+0x214>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2101      	movs	r1, #1
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff fa7f 	bl	8002074 <LL_ADC_GetOffsetChannel>
 8002b76:	4603      	mov	r3, r0
 8002b78:	0e9b      	lsrs	r3, r3, #26
 8002b7a:	f003 021f 	and.w	r2, r3, #31
 8002b7e:	e01e      	b.n	8002bbe <HAL_ADC_ConfigChannel+0x252>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2101      	movs	r1, #1
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff fa74 	bl	8002074 <LL_ADC_GetOffsetChannel>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b96:	fa93 f3a3 	rbit	r3, r3
 8002b9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002b9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002ba2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002ba6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002bae:	2320      	movs	r3, #32
 8002bb0:	e004      	b.n	8002bbc <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002bb2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002bb6:	fab3 f383 	clz	r3, r3
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d105      	bne.n	8002bd6 <HAL_ADC_ConfigChannel+0x26a>
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	0e9b      	lsrs	r3, r3, #26
 8002bd0:	f003 031f 	and.w	r3, r3, #31
 8002bd4:	e018      	b.n	8002c08 <HAL_ADC_ConfigChannel+0x29c>
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bde:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002be2:	fa93 f3a3 	rbit	r3, r3
 8002be6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002bea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002bee:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002bf2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002bfa:	2320      	movs	r3, #32
 8002bfc:	e004      	b.n	8002c08 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002bfe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c02:	fab3 f383 	clz	r3, r3
 8002c06:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d106      	bne.n	8002c1a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2200      	movs	r2, #0
 8002c12:	2101      	movs	r1, #1
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7ff fa43 	bl	80020a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2102      	movs	r1, #2
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff fa27 	bl	8002074 <LL_ADC_GetOffsetChannel>
 8002c26:	4603      	mov	r3, r0
 8002c28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d10a      	bne.n	8002c46 <HAL_ADC_ConfigChannel+0x2da>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2102      	movs	r1, #2
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7ff fa1c 	bl	8002074 <LL_ADC_GetOffsetChannel>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	0e9b      	lsrs	r3, r3, #26
 8002c40:	f003 021f 	and.w	r2, r3, #31
 8002c44:	e01e      	b.n	8002c84 <HAL_ADC_ConfigChannel+0x318>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2102      	movs	r1, #2
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff fa11 	bl	8002074 <LL_ADC_GetOffsetChannel>
 8002c52:	4603      	mov	r3, r0
 8002c54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c58:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c5c:	fa93 f3a3 	rbit	r3, r3
 8002c60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002c64:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c68:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002c6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d101      	bne.n	8002c78 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002c74:	2320      	movs	r3, #32
 8002c76:	e004      	b.n	8002c82 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002c78:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c7c:	fab3 f383 	clz	r3, r3
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d105      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x330>
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	0e9b      	lsrs	r3, r3, #26
 8002c96:	f003 031f 	and.w	r3, r3, #31
 8002c9a:	e014      	b.n	8002cc6 <HAL_ADC_ConfigChannel+0x35a>
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002ca4:	fa93 f3a3 	rbit	r3, r3
 8002ca8:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002caa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002cac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002cb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d101      	bne.n	8002cbc <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002cb8:	2320      	movs	r3, #32
 8002cba:	e004      	b.n	8002cc6 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002cbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002cc0:	fab3 f383 	clz	r3, r3
 8002cc4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d106      	bne.n	8002cd8 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	2102      	movs	r1, #2
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7ff f9e4 	bl	80020a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2103      	movs	r1, #3
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7ff f9c8 	bl	8002074 <LL_ADC_GetOffsetChannel>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10a      	bne.n	8002d04 <HAL_ADC_ConfigChannel+0x398>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2103      	movs	r1, #3
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff f9bd 	bl	8002074 <LL_ADC_GetOffsetChannel>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	0e9b      	lsrs	r3, r3, #26
 8002cfe:	f003 021f 	and.w	r2, r3, #31
 8002d02:	e017      	b.n	8002d34 <HAL_ADC_ConfigChannel+0x3c8>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2103      	movs	r1, #3
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7ff f9b2 	bl	8002074 <LL_ADC_GetOffsetChannel>
 8002d10:	4603      	mov	r3, r0
 8002d12:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d14:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d16:	fa93 f3a3 	rbit	r3, r3
 8002d1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002d1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d1e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002d20:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d101      	bne.n	8002d2a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002d26:	2320      	movs	r3, #32
 8002d28:	e003      	b.n	8002d32 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002d2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d2c:	fab3 f383 	clz	r3, r3
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d105      	bne.n	8002d4c <HAL_ADC_ConfigChannel+0x3e0>
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	0e9b      	lsrs	r3, r3, #26
 8002d46:	f003 031f 	and.w	r3, r3, #31
 8002d4a:	e011      	b.n	8002d70 <HAL_ADC_ConfigChannel+0x404>
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d52:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d54:	fa93 f3a3 	rbit	r3, r3
 8002d58:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002d5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d5c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002d5e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d101      	bne.n	8002d68 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002d64:	2320      	movs	r3, #32
 8002d66:	e003      	b.n	8002d70 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002d68:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d6a:	fab3 f383 	clz	r3, r3
 8002d6e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d106      	bne.n	8002d82 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	2103      	movs	r1, #3
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff f98f 	bl	80020a0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7ff fab2 	bl	80022f0 <LL_ADC_IsEnabled>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f040 8140 	bne.w	8003014 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6818      	ldr	r0, [r3, #0]
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	6819      	ldr	r1, [r3, #0]
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	461a      	mov	r2, r3
 8002da2:	f7ff fa03 	bl	80021ac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	4a8f      	ldr	r2, [pc, #572]	@ (8002fe8 <HAL_ADC_ConfigChannel+0x67c>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	f040 8131 	bne.w	8003014 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d10b      	bne.n	8002dda <HAL_ADC_ConfigChannel+0x46e>
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	0e9b      	lsrs	r3, r3, #26
 8002dc8:	3301      	adds	r3, #1
 8002dca:	f003 031f 	and.w	r3, r3, #31
 8002dce:	2b09      	cmp	r3, #9
 8002dd0:	bf94      	ite	ls
 8002dd2:	2301      	movls	r3, #1
 8002dd4:	2300      	movhi	r3, #0
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	e019      	b.n	8002e0e <HAL_ADC_ConfigChannel+0x4a2>
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002de2:	fa93 f3a3 	rbit	r3, r3
 8002de6:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002de8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dea:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002dec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002df2:	2320      	movs	r3, #32
 8002df4:	e003      	b.n	8002dfe <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002df6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002df8:	fab3 f383 	clz	r3, r3
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	3301      	adds	r3, #1
 8002e00:	f003 031f 	and.w	r3, r3, #31
 8002e04:	2b09      	cmp	r3, #9
 8002e06:	bf94      	ite	ls
 8002e08:	2301      	movls	r3, #1
 8002e0a:	2300      	movhi	r3, #0
 8002e0c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d079      	beq.n	8002f06 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d107      	bne.n	8002e2e <HAL_ADC_ConfigChannel+0x4c2>
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	0e9b      	lsrs	r3, r3, #26
 8002e24:	3301      	adds	r3, #1
 8002e26:	069b      	lsls	r3, r3, #26
 8002e28:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e2c:	e015      	b.n	8002e5a <HAL_ADC_ConfigChannel+0x4ee>
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e36:	fa93 f3a3 	rbit	r3, r3
 8002e3a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002e3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e3e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002e40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002e46:	2320      	movs	r3, #32
 8002e48:	e003      	b.n	8002e52 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002e4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e4c:	fab3 f383 	clz	r3, r3
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	3301      	adds	r3, #1
 8002e54:	069b      	lsls	r3, r3, #26
 8002e56:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d109      	bne.n	8002e7a <HAL_ADC_ConfigChannel+0x50e>
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	0e9b      	lsrs	r3, r3, #26
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	f003 031f 	and.w	r3, r3, #31
 8002e72:	2101      	movs	r1, #1
 8002e74:	fa01 f303 	lsl.w	r3, r1, r3
 8002e78:	e017      	b.n	8002eaa <HAL_ADC_ConfigChannel+0x53e>
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e82:	fa93 f3a3 	rbit	r3, r3
 8002e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002e88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e8a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002e8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002e92:	2320      	movs	r3, #32
 8002e94:	e003      	b.n	8002e9e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002e96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e98:	fab3 f383 	clz	r3, r3
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	f003 031f 	and.w	r3, r3, #31
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eaa:	ea42 0103 	orr.w	r1, r2, r3
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10a      	bne.n	8002ed0 <HAL_ADC_ConfigChannel+0x564>
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	0e9b      	lsrs	r3, r3, #26
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	f003 021f 	and.w	r2, r3, #31
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	4413      	add	r3, r2
 8002ecc:	051b      	lsls	r3, r3, #20
 8002ece:	e018      	b.n	8002f02 <HAL_ADC_ConfigChannel+0x596>
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ed8:	fa93 f3a3 	rbit	r3, r3
 8002edc:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ee0:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d101      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002ee8:	2320      	movs	r3, #32
 8002eea:	e003      	b.n	8002ef4 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eee:	fab3 f383 	clz	r3, r3
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	f003 021f 	and.w	r2, r3, #31
 8002efa:	4613      	mov	r3, r2
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	4413      	add	r3, r2
 8002f00:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f02:	430b      	orrs	r3, r1
 8002f04:	e081      	b.n	800300a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d107      	bne.n	8002f22 <HAL_ADC_ConfigChannel+0x5b6>
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	0e9b      	lsrs	r3, r3, #26
 8002f18:	3301      	adds	r3, #1
 8002f1a:	069b      	lsls	r3, r3, #26
 8002f1c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f20:	e015      	b.n	8002f4e <HAL_ADC_ConfigChannel+0x5e2>
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f2a:	fa93 f3a3 	rbit	r3, r3
 8002f2e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002f3a:	2320      	movs	r3, #32
 8002f3c:	e003      	b.n	8002f46 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f40:	fab3 f383 	clz	r3, r3
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	3301      	adds	r3, #1
 8002f48:	069b      	lsls	r3, r3, #26
 8002f4a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d109      	bne.n	8002f6e <HAL_ADC_ConfigChannel+0x602>
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	0e9b      	lsrs	r3, r3, #26
 8002f60:	3301      	adds	r3, #1
 8002f62:	f003 031f 	and.w	r3, r3, #31
 8002f66:	2101      	movs	r1, #1
 8002f68:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6c:	e017      	b.n	8002f9e <HAL_ADC_ConfigChannel+0x632>
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	fa93 f3a3 	rbit	r3, r3
 8002f7a:	61bb      	str	r3, [r7, #24]
  return result;
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002f80:	6a3b      	ldr	r3, [r7, #32]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002f86:	2320      	movs	r3, #32
 8002f88:	e003      	b.n	8002f92 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002f8a:	6a3b      	ldr	r3, [r7, #32]
 8002f8c:	fab3 f383 	clz	r3, r3
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	3301      	adds	r3, #1
 8002f94:	f003 031f 	and.w	r3, r3, #31
 8002f98:	2101      	movs	r1, #1
 8002f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f9e:	ea42 0103 	orr.w	r1, r2, r3
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10d      	bne.n	8002fca <HAL_ADC_ConfigChannel+0x65e>
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	0e9b      	lsrs	r3, r3, #26
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	f003 021f 	and.w	r2, r3, #31
 8002fba:	4613      	mov	r3, r2
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	4413      	add	r3, r2
 8002fc0:	3b1e      	subs	r3, #30
 8002fc2:	051b      	lsls	r3, r3, #20
 8002fc4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002fc8:	e01e      	b.n	8003008 <HAL_ADC_ConfigChannel+0x69c>
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	fa93 f3a3 	rbit	r3, r3
 8002fd6:	60fb      	str	r3, [r7, #12]
  return result;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d104      	bne.n	8002fec <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002fe2:	2320      	movs	r3, #32
 8002fe4:	e006      	b.n	8002ff4 <HAL_ADC_ConfigChannel+0x688>
 8002fe6:	bf00      	nop
 8002fe8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	fab3 f383 	clz	r3, r3
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	f003 021f 	and.w	r2, r3, #31
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	4413      	add	r3, r2
 8003000:	3b1e      	subs	r3, #30
 8003002:	051b      	lsls	r3, r3, #20
 8003004:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003008:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800300e:	4619      	mov	r1, r3
 8003010:	f7ff f8a0 	bl	8002154 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	4b44      	ldr	r3, [pc, #272]	@ (800312c <HAL_ADC_ConfigChannel+0x7c0>)
 800301a:	4013      	ands	r3, r2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d07a      	beq.n	8003116 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003020:	4843      	ldr	r0, [pc, #268]	@ (8003130 <HAL_ADC_ConfigChannel+0x7c4>)
 8003022:	f7fe fff5 	bl	8002010 <LL_ADC_GetCommonPathInternalCh>
 8003026:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a41      	ldr	r2, [pc, #260]	@ (8003134 <HAL_ADC_ConfigChannel+0x7c8>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d12c      	bne.n	800308e <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003034:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003038:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d126      	bne.n	800308e <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a3c      	ldr	r2, [pc, #240]	@ (8003138 <HAL_ADC_ConfigChannel+0x7cc>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d004      	beq.n	8003054 <HAL_ADC_ConfigChannel+0x6e8>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a3b      	ldr	r2, [pc, #236]	@ (800313c <HAL_ADC_ConfigChannel+0x7d0>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d15d      	bne.n	8003110 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003054:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003058:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800305c:	4619      	mov	r1, r3
 800305e:	4834      	ldr	r0, [pc, #208]	@ (8003130 <HAL_ADC_ConfigChannel+0x7c4>)
 8003060:	f7fe ffc3 	bl	8001fea <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003064:	4b36      	ldr	r3, [pc, #216]	@ (8003140 <HAL_ADC_ConfigChannel+0x7d4>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	099b      	lsrs	r3, r3, #6
 800306a:	4a36      	ldr	r2, [pc, #216]	@ (8003144 <HAL_ADC_ConfigChannel+0x7d8>)
 800306c:	fba2 2303 	umull	r2, r3, r2, r3
 8003070:	099b      	lsrs	r3, r3, #6
 8003072:	1c5a      	adds	r2, r3, #1
 8003074:	4613      	mov	r3, r2
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	4413      	add	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800307e:	e002      	b.n	8003086 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	3b01      	subs	r3, #1
 8003084:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1f9      	bne.n	8003080 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800308c:	e040      	b.n	8003110 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a2d      	ldr	r2, [pc, #180]	@ (8003148 <HAL_ADC_ConfigChannel+0x7dc>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d118      	bne.n	80030ca <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003098:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800309c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d112      	bne.n	80030ca <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a23      	ldr	r2, [pc, #140]	@ (8003138 <HAL_ADC_ConfigChannel+0x7cc>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d004      	beq.n	80030b8 <HAL_ADC_ConfigChannel+0x74c>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a22      	ldr	r2, [pc, #136]	@ (800313c <HAL_ADC_ConfigChannel+0x7d0>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d12d      	bne.n	8003114 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80030bc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030c0:	4619      	mov	r1, r3
 80030c2:	481b      	ldr	r0, [pc, #108]	@ (8003130 <HAL_ADC_ConfigChannel+0x7c4>)
 80030c4:	f7fe ff91 	bl	8001fea <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030c8:	e024      	b.n	8003114 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a1f      	ldr	r2, [pc, #124]	@ (800314c <HAL_ADC_ConfigChannel+0x7e0>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d120      	bne.n	8003116 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80030d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80030d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d11a      	bne.n	8003116 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a14      	ldr	r2, [pc, #80]	@ (8003138 <HAL_ADC_ConfigChannel+0x7cc>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d115      	bne.n	8003116 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80030ee:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80030f2:	4619      	mov	r1, r3
 80030f4:	480e      	ldr	r0, [pc, #56]	@ (8003130 <HAL_ADC_ConfigChannel+0x7c4>)
 80030f6:	f7fe ff78 	bl	8001fea <LL_ADC_SetCommonPathInternalCh>
 80030fa:	e00c      	b.n	8003116 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003100:	f043 0220 	orr.w	r2, r3, #32
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800310e:	e002      	b.n	8003116 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003110:	bf00      	nop
 8003112:	e000      	b.n	8003116 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003114:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800311e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003122:	4618      	mov	r0, r3
 8003124:	37d8      	adds	r7, #216	@ 0xd8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	80080000 	.word	0x80080000
 8003130:	50040300 	.word	0x50040300
 8003134:	c7520000 	.word	0xc7520000
 8003138:	50040000 	.word	0x50040000
 800313c:	50040200 	.word	0x50040200
 8003140:	20000004 	.word	0x20000004
 8003144:	053e2d63 	.word	0x053e2d63
 8003148:	cb840000 	.word	0xcb840000
 800314c:	80000001 	.word	0x80000001

08003150 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003158:	2300      	movs	r3, #0
 800315a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4618      	mov	r0, r3
 8003162:	f7ff f8c5 	bl	80022f0 <LL_ADC_IsEnabled>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d169      	bne.n	8003240 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689a      	ldr	r2, [r3, #8]
 8003172:	4b36      	ldr	r3, [pc, #216]	@ (800324c <ADC_Enable+0xfc>)
 8003174:	4013      	ands	r3, r2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00d      	beq.n	8003196 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800317e:	f043 0210 	orr.w	r2, r3, #16
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800318a:	f043 0201 	orr.w	r2, r3, #1
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e055      	b.n	8003242 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4618      	mov	r0, r3
 800319c:	f7ff f894 	bl	80022c8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80031a0:	482b      	ldr	r0, [pc, #172]	@ (8003250 <ADC_Enable+0x100>)
 80031a2:	f7fe ff35 	bl	8002010 <LL_ADC_GetCommonPathInternalCh>
 80031a6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80031a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d013      	beq.n	80031d8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031b0:	4b28      	ldr	r3, [pc, #160]	@ (8003254 <ADC_Enable+0x104>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	099b      	lsrs	r3, r3, #6
 80031b6:	4a28      	ldr	r2, [pc, #160]	@ (8003258 <ADC_Enable+0x108>)
 80031b8:	fba2 2303 	umull	r2, r3, r2, r3
 80031bc:	099b      	lsrs	r3, r3, #6
 80031be:	1c5a      	adds	r2, r3, #1
 80031c0:	4613      	mov	r3, r2
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	4413      	add	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80031ca:	e002      	b.n	80031d2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	3b01      	subs	r3, #1
 80031d0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1f9      	bne.n	80031cc <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80031d8:	f7fe fec4 	bl	8001f64 <HAL_GetTick>
 80031dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031de:	e028      	b.n	8003232 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff f883 	bl	80022f0 <LL_ADC_IsEnabled>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d104      	bne.n	80031fa <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7ff f867 	bl	80022c8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80031fa:	f7fe feb3 	bl	8001f64 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	2b02      	cmp	r3, #2
 8003206:	d914      	bls.n	8003232 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b01      	cmp	r3, #1
 8003214:	d00d      	beq.n	8003232 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800321a:	f043 0210 	orr.w	r2, r3, #16
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003226:	f043 0201 	orr.w	r2, r3, #1
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e007      	b.n	8003242 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	2b01      	cmp	r3, #1
 800323e:	d1cf      	bne.n	80031e0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	8000003f 	.word	0x8000003f
 8003250:	50040300 	.word	0x50040300
 8003254:	20000004 	.word	0x20000004
 8003258:	053e2d63 	.word	0x053e2d63

0800325c <LL_ADC_IsEnabled>:
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	2b01      	cmp	r3, #1
 800326e:	d101      	bne.n	8003274 <LL_ADC_IsEnabled+0x18>
 8003270:	2301      	movs	r3, #1
 8003272:	e000      	b.n	8003276 <LL_ADC_IsEnabled+0x1a>
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr

08003282 <LL_ADC_REG_IsConversionOngoing>:
{
 8003282:	b480      	push	{r7}
 8003284:	b083      	sub	sp, #12
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f003 0304 	and.w	r3, r3, #4
 8003292:	2b04      	cmp	r3, #4
 8003294:	d101      	bne.n	800329a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003296:	2301      	movs	r3, #1
 8003298:	e000      	b.n	800329c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80032a8:	b590      	push	{r4, r7, lr}
 80032aa:	b09f      	sub	sp, #124	@ 0x7c
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032b2:	2300      	movs	r3, #0
 80032b4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d101      	bne.n	80032c6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80032c2:	2302      	movs	r3, #2
 80032c4:	e093      	b.n	80033ee <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80032ce:	2300      	movs	r3, #0
 80032d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80032d2:	2300      	movs	r3, #0
 80032d4:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a47      	ldr	r2, [pc, #284]	@ (80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d102      	bne.n	80032e6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80032e0:	4b46      	ldr	r3, [pc, #280]	@ (80033fc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80032e2:	60bb      	str	r3, [r7, #8]
 80032e4:	e001      	b.n	80032ea <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80032e6:	2300      	movs	r3, #0
 80032e8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d10b      	bne.n	8003308 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032f4:	f043 0220 	orr.w	r2, r3, #32
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e072      	b.n	80033ee <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	4618      	mov	r0, r3
 800330c:	f7ff ffb9 	bl	8003282 <LL_ADC_REG_IsConversionOngoing>
 8003310:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	f7ff ffb3 	bl	8003282 <LL_ADC_REG_IsConversionOngoing>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d154      	bne.n	80033cc <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003322:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003324:	2b00      	cmp	r3, #0
 8003326:	d151      	bne.n	80033cc <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003328:	4b35      	ldr	r3, [pc, #212]	@ (8003400 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800332a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d02c      	beq.n	800338e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003334:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	6859      	ldr	r1, [r3, #4]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003346:	035b      	lsls	r3, r3, #13
 8003348:	430b      	orrs	r3, r1
 800334a:	431a      	orrs	r2, r3
 800334c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800334e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003350:	4829      	ldr	r0, [pc, #164]	@ (80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003352:	f7ff ff83 	bl	800325c <LL_ADC_IsEnabled>
 8003356:	4604      	mov	r4, r0
 8003358:	4828      	ldr	r0, [pc, #160]	@ (80033fc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800335a:	f7ff ff7f 	bl	800325c <LL_ADC_IsEnabled>
 800335e:	4603      	mov	r3, r0
 8003360:	431c      	orrs	r4, r3
 8003362:	4828      	ldr	r0, [pc, #160]	@ (8003404 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003364:	f7ff ff7a 	bl	800325c <LL_ADC_IsEnabled>
 8003368:	4603      	mov	r3, r0
 800336a:	4323      	orrs	r3, r4
 800336c:	2b00      	cmp	r3, #0
 800336e:	d137      	bne.n	80033e0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003370:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003378:	f023 030f 	bic.w	r3, r3, #15
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	6811      	ldr	r1, [r2, #0]
 8003380:	683a      	ldr	r2, [r7, #0]
 8003382:	6892      	ldr	r2, [r2, #8]
 8003384:	430a      	orrs	r2, r1
 8003386:	431a      	orrs	r2, r3
 8003388:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800338a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800338c:	e028      	b.n	80033e0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800338e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003396:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003398:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800339a:	4817      	ldr	r0, [pc, #92]	@ (80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800339c:	f7ff ff5e 	bl	800325c <LL_ADC_IsEnabled>
 80033a0:	4604      	mov	r4, r0
 80033a2:	4816      	ldr	r0, [pc, #88]	@ (80033fc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80033a4:	f7ff ff5a 	bl	800325c <LL_ADC_IsEnabled>
 80033a8:	4603      	mov	r3, r0
 80033aa:	431c      	orrs	r4, r3
 80033ac:	4815      	ldr	r0, [pc, #84]	@ (8003404 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80033ae:	f7ff ff55 	bl	800325c <LL_ADC_IsEnabled>
 80033b2:	4603      	mov	r3, r0
 80033b4:	4323      	orrs	r3, r4
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d112      	bne.n	80033e0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80033ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80033c2:	f023 030f 	bic.w	r3, r3, #15
 80033c6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80033c8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80033ca:	e009      	b.n	80033e0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033d0:	f043 0220 	orr.w	r2, r3, #32
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80033de:	e000      	b.n	80033e2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80033e0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80033ea:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	377c      	adds	r7, #124	@ 0x7c
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd90      	pop	{r4, r7, pc}
 80033f6:	bf00      	nop
 80033f8:	50040000 	.word	0x50040000
 80033fc:	50040100 	.word	0x50040100
 8003400:	50040300 	.word	0x50040300
 8003404:	50040200 	.word	0x50040200

08003408 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f003 0307 	and.w	r3, r3, #7
 8003416:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003418:	4b0c      	ldr	r3, [pc, #48]	@ (800344c <__NVIC_SetPriorityGrouping+0x44>)
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800341e:	68ba      	ldr	r2, [r7, #8]
 8003420:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003424:	4013      	ands	r3, r2
 8003426:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003430:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003434:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003438:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800343a:	4a04      	ldr	r2, [pc, #16]	@ (800344c <__NVIC_SetPriorityGrouping+0x44>)
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	60d3      	str	r3, [r2, #12]
}
 8003440:	bf00      	nop
 8003442:	3714      	adds	r7, #20
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr
 800344c:	e000ed00 	.word	0xe000ed00

08003450 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003454:	4b04      	ldr	r3, [pc, #16]	@ (8003468 <__NVIC_GetPriorityGrouping+0x18>)
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	0a1b      	lsrs	r3, r3, #8
 800345a:	f003 0307 	and.w	r3, r3, #7
}
 800345e:	4618      	mov	r0, r3
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr
 8003468:	e000ed00 	.word	0xe000ed00

0800346c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	4603      	mov	r3, r0
 8003474:	6039      	str	r1, [r7, #0]
 8003476:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800347c:	2b00      	cmp	r3, #0
 800347e:	db0a      	blt.n	8003496 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	b2da      	uxtb	r2, r3
 8003484:	490c      	ldr	r1, [pc, #48]	@ (80034b8 <__NVIC_SetPriority+0x4c>)
 8003486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348a:	0112      	lsls	r2, r2, #4
 800348c:	b2d2      	uxtb	r2, r2
 800348e:	440b      	add	r3, r1
 8003490:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003494:	e00a      	b.n	80034ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	b2da      	uxtb	r2, r3
 800349a:	4908      	ldr	r1, [pc, #32]	@ (80034bc <__NVIC_SetPriority+0x50>)
 800349c:	79fb      	ldrb	r3, [r7, #7]
 800349e:	f003 030f 	and.w	r3, r3, #15
 80034a2:	3b04      	subs	r3, #4
 80034a4:	0112      	lsls	r2, r2, #4
 80034a6:	b2d2      	uxtb	r2, r2
 80034a8:	440b      	add	r3, r1
 80034aa:	761a      	strb	r2, [r3, #24]
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr
 80034b8:	e000e100 	.word	0xe000e100
 80034bc:	e000ed00 	.word	0xe000ed00

080034c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b089      	sub	sp, #36	@ 0x24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f003 0307 	and.w	r3, r3, #7
 80034d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	f1c3 0307 	rsb	r3, r3, #7
 80034da:	2b04      	cmp	r3, #4
 80034dc:	bf28      	it	cs
 80034de:	2304      	movcs	r3, #4
 80034e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	3304      	adds	r3, #4
 80034e6:	2b06      	cmp	r3, #6
 80034e8:	d902      	bls.n	80034f0 <NVIC_EncodePriority+0x30>
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	3b03      	subs	r3, #3
 80034ee:	e000      	b.n	80034f2 <NVIC_EncodePriority+0x32>
 80034f0:	2300      	movs	r3, #0
 80034f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	fa02 f303 	lsl.w	r3, r2, r3
 80034fe:	43da      	mvns	r2, r3
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	401a      	ands	r2, r3
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003508:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	fa01 f303 	lsl.w	r3, r1, r3
 8003512:	43d9      	mvns	r1, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003518:	4313      	orrs	r3, r2
         );
}
 800351a:	4618      	mov	r0, r3
 800351c:	3724      	adds	r7, #36	@ 0x24
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
	...

08003528 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3b01      	subs	r3, #1
 8003534:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003538:	d301      	bcc.n	800353e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800353a:	2301      	movs	r3, #1
 800353c:	e00f      	b.n	800355e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800353e:	4a0a      	ldr	r2, [pc, #40]	@ (8003568 <SysTick_Config+0x40>)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	3b01      	subs	r3, #1
 8003544:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003546:	210f      	movs	r1, #15
 8003548:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800354c:	f7ff ff8e 	bl	800346c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003550:	4b05      	ldr	r3, [pc, #20]	@ (8003568 <SysTick_Config+0x40>)
 8003552:	2200      	movs	r2, #0
 8003554:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003556:	4b04      	ldr	r3, [pc, #16]	@ (8003568 <SysTick_Config+0x40>)
 8003558:	2207      	movs	r2, #7
 800355a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	e000e010 	.word	0xe000e010

0800356c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f7ff ff47 	bl	8003408 <__NVIC_SetPriorityGrouping>
}
 800357a:	bf00      	nop
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b086      	sub	sp, #24
 8003586:	af00      	add	r7, sp, #0
 8003588:	4603      	mov	r3, r0
 800358a:	60b9      	str	r1, [r7, #8]
 800358c:	607a      	str	r2, [r7, #4]
 800358e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003590:	2300      	movs	r3, #0
 8003592:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003594:	f7ff ff5c 	bl	8003450 <__NVIC_GetPriorityGrouping>
 8003598:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	68b9      	ldr	r1, [r7, #8]
 800359e:	6978      	ldr	r0, [r7, #20]
 80035a0:	f7ff ff8e 	bl	80034c0 <NVIC_EncodePriority>
 80035a4:	4602      	mov	r2, r0
 80035a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035aa:	4611      	mov	r1, r2
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7ff ff5d 	bl	800346c <__NVIC_SetPriority>
}
 80035b2:	bf00      	nop
 80035b4:	3718      	adds	r7, #24
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b082      	sub	sp, #8
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f7ff ffb0 	bl	8003528 <SysTick_Config>
 80035c8:	4603      	mov	r3, r0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
	...

080035d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b087      	sub	sp, #28
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035de:	2300      	movs	r3, #0
 80035e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035e2:	e17f      	b.n	80038e4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	2101      	movs	r1, #1
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	fa01 f303 	lsl.w	r3, r1, r3
 80035f0:	4013      	ands	r3, r2
 80035f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f000 8171 	beq.w	80038de <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f003 0303 	and.w	r3, r3, #3
 8003604:	2b01      	cmp	r3, #1
 8003606:	d005      	beq.n	8003614 <HAL_GPIO_Init+0x40>
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f003 0303 	and.w	r3, r3, #3
 8003610:	2b02      	cmp	r3, #2
 8003612:	d130      	bne.n	8003676 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	2203      	movs	r2, #3
 8003620:	fa02 f303 	lsl.w	r3, r2, r3
 8003624:	43db      	mvns	r3, r3
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	4013      	ands	r3, r2
 800362a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	68da      	ldr	r2, [r3, #12]
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	fa02 f303 	lsl.w	r3, r2, r3
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	4313      	orrs	r3, r2
 800363c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800364a:	2201      	movs	r2, #1
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	fa02 f303 	lsl.w	r3, r2, r3
 8003652:	43db      	mvns	r3, r3
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	4013      	ands	r3, r2
 8003658:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	091b      	lsrs	r3, r3, #4
 8003660:	f003 0201 	and.w	r2, r3, #1
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	fa02 f303 	lsl.w	r3, r2, r3
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	4313      	orrs	r3, r2
 800366e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f003 0303 	and.w	r3, r3, #3
 800367e:	2b03      	cmp	r3, #3
 8003680:	d118      	bne.n	80036b4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003686:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003688:	2201      	movs	r2, #1
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	fa02 f303 	lsl.w	r3, r2, r3
 8003690:	43db      	mvns	r3, r3
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	4013      	ands	r3, r2
 8003696:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	08db      	lsrs	r3, r3, #3
 800369e:	f003 0201 	and.w	r2, r3, #1
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	fa02 f303 	lsl.w	r3, r2, r3
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f003 0303 	and.w	r3, r3, #3
 80036bc:	2b03      	cmp	r3, #3
 80036be:	d017      	beq.n	80036f0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	2203      	movs	r2, #3
 80036cc:	fa02 f303 	lsl.w	r3, r2, r3
 80036d0:	43db      	mvns	r3, r3
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	4013      	ands	r3, r2
 80036d6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	fa02 f303 	lsl.w	r3, r2, r3
 80036e4:	693a      	ldr	r2, [r7, #16]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f003 0303 	and.w	r3, r3, #3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d123      	bne.n	8003744 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	08da      	lsrs	r2, r3, #3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	3208      	adds	r2, #8
 8003704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003708:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	f003 0307 	and.w	r3, r3, #7
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	220f      	movs	r2, #15
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	43db      	mvns	r3, r3
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	4013      	ands	r3, r2
 800371e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	691a      	ldr	r2, [r3, #16]
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	f003 0307 	and.w	r3, r3, #7
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	4313      	orrs	r3, r2
 8003734:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	08da      	lsrs	r2, r3, #3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	3208      	adds	r2, #8
 800373e:	6939      	ldr	r1, [r7, #16]
 8003740:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	2203      	movs	r2, #3
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	43db      	mvns	r3, r3
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	4013      	ands	r3, r2
 800375a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f003 0203 	and.w	r2, r3, #3
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	fa02 f303 	lsl.w	r3, r2, r3
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	4313      	orrs	r3, r2
 8003770:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003780:	2b00      	cmp	r3, #0
 8003782:	f000 80ac 	beq.w	80038de <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003786:	4b5f      	ldr	r3, [pc, #380]	@ (8003904 <HAL_GPIO_Init+0x330>)
 8003788:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800378a:	4a5e      	ldr	r2, [pc, #376]	@ (8003904 <HAL_GPIO_Init+0x330>)
 800378c:	f043 0301 	orr.w	r3, r3, #1
 8003790:	6613      	str	r3, [r2, #96]	@ 0x60
 8003792:	4b5c      	ldr	r3, [pc, #368]	@ (8003904 <HAL_GPIO_Init+0x330>)
 8003794:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	60bb      	str	r3, [r7, #8]
 800379c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800379e:	4a5a      	ldr	r2, [pc, #360]	@ (8003908 <HAL_GPIO_Init+0x334>)
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	089b      	lsrs	r3, r3, #2
 80037a4:	3302      	adds	r3, #2
 80037a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	f003 0303 	and.w	r3, r3, #3
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	220f      	movs	r2, #15
 80037b6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ba:	43db      	mvns	r3, r3
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	4013      	ands	r3, r2
 80037c0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80037c8:	d025      	beq.n	8003816 <HAL_GPIO_Init+0x242>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a4f      	ldr	r2, [pc, #316]	@ (800390c <HAL_GPIO_Init+0x338>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d01f      	beq.n	8003812 <HAL_GPIO_Init+0x23e>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a4e      	ldr	r2, [pc, #312]	@ (8003910 <HAL_GPIO_Init+0x33c>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d019      	beq.n	800380e <HAL_GPIO_Init+0x23a>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a4d      	ldr	r2, [pc, #308]	@ (8003914 <HAL_GPIO_Init+0x340>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d013      	beq.n	800380a <HAL_GPIO_Init+0x236>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a4c      	ldr	r2, [pc, #304]	@ (8003918 <HAL_GPIO_Init+0x344>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d00d      	beq.n	8003806 <HAL_GPIO_Init+0x232>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a4b      	ldr	r2, [pc, #300]	@ (800391c <HAL_GPIO_Init+0x348>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d007      	beq.n	8003802 <HAL_GPIO_Init+0x22e>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a4a      	ldr	r2, [pc, #296]	@ (8003920 <HAL_GPIO_Init+0x34c>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d101      	bne.n	80037fe <HAL_GPIO_Init+0x22a>
 80037fa:	2306      	movs	r3, #6
 80037fc:	e00c      	b.n	8003818 <HAL_GPIO_Init+0x244>
 80037fe:	2307      	movs	r3, #7
 8003800:	e00a      	b.n	8003818 <HAL_GPIO_Init+0x244>
 8003802:	2305      	movs	r3, #5
 8003804:	e008      	b.n	8003818 <HAL_GPIO_Init+0x244>
 8003806:	2304      	movs	r3, #4
 8003808:	e006      	b.n	8003818 <HAL_GPIO_Init+0x244>
 800380a:	2303      	movs	r3, #3
 800380c:	e004      	b.n	8003818 <HAL_GPIO_Init+0x244>
 800380e:	2302      	movs	r3, #2
 8003810:	e002      	b.n	8003818 <HAL_GPIO_Init+0x244>
 8003812:	2301      	movs	r3, #1
 8003814:	e000      	b.n	8003818 <HAL_GPIO_Init+0x244>
 8003816:	2300      	movs	r3, #0
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	f002 0203 	and.w	r2, r2, #3
 800381e:	0092      	lsls	r2, r2, #2
 8003820:	4093      	lsls	r3, r2
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	4313      	orrs	r3, r2
 8003826:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003828:	4937      	ldr	r1, [pc, #220]	@ (8003908 <HAL_GPIO_Init+0x334>)
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	089b      	lsrs	r3, r3, #2
 800382e:	3302      	adds	r3, #2
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003836:	4b3b      	ldr	r3, [pc, #236]	@ (8003924 <HAL_GPIO_Init+0x350>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	43db      	mvns	r3, r3
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	4013      	ands	r3, r2
 8003844:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	4313      	orrs	r3, r2
 8003858:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800385a:	4a32      	ldr	r2, [pc, #200]	@ (8003924 <HAL_GPIO_Init+0x350>)
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003860:	4b30      	ldr	r3, [pc, #192]	@ (8003924 <HAL_GPIO_Init+0x350>)
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	43db      	mvns	r3, r3
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	4013      	ands	r3, r2
 800386e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d003      	beq.n	8003884 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	4313      	orrs	r3, r2
 8003882:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003884:	4a27      	ldr	r2, [pc, #156]	@ (8003924 <HAL_GPIO_Init+0x350>)
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800388a:	4b26      	ldr	r3, [pc, #152]	@ (8003924 <HAL_GPIO_Init+0x350>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	43db      	mvns	r3, r3
 8003894:	693a      	ldr	r2, [r7, #16]
 8003896:	4013      	ands	r3, r2
 8003898:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d003      	beq.n	80038ae <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80038ae:	4a1d      	ldr	r2, [pc, #116]	@ (8003924 <HAL_GPIO_Init+0x350>)
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80038b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003924 <HAL_GPIO_Init+0x350>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	43db      	mvns	r3, r3
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	4013      	ands	r3, r2
 80038c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d003      	beq.n	80038d8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80038d8:	4a12      	ldr	r2, [pc, #72]	@ (8003924 <HAL_GPIO_Init+0x350>)
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	3301      	adds	r3, #1
 80038e2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	fa22 f303 	lsr.w	r3, r2, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f47f ae78 	bne.w	80035e4 <HAL_GPIO_Init+0x10>
  }
}
 80038f4:	bf00      	nop
 80038f6:	bf00      	nop
 80038f8:	371c      	adds	r7, #28
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	40021000 	.word	0x40021000
 8003908:	40010000 	.word	0x40010000
 800390c:	48000400 	.word	0x48000400
 8003910:	48000800 	.word	0x48000800
 8003914:	48000c00 	.word	0x48000c00
 8003918:	48001000 	.word	0x48001000
 800391c:	48001400 	.word	0x48001400
 8003920:	48001800 	.word	0x48001800
 8003924:	40010400 	.word	0x40010400

08003928 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	460b      	mov	r3, r1
 8003932:	807b      	strh	r3, [r7, #2]
 8003934:	4613      	mov	r3, r2
 8003936:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003938:	787b      	ldrb	r3, [r7, #1]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800393e:	887a      	ldrh	r2, [r7, #2]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003944:	e002      	b.n	800394c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003946:	887a      	ldrh	r2, [r7, #2]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d101      	bne.n	800396a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e08d      	b.n	8003a86 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d106      	bne.n	8003984 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7fe f856 	bl	8001a30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2224      	movs	r2, #36	@ 0x24
 8003988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f022 0201 	bic.w	r2, r2, #1
 800399a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685a      	ldr	r2, [r3, #4]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80039a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	689a      	ldr	r2, [r3, #8]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80039b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d107      	bne.n	80039d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	689a      	ldr	r2, [r3, #8]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80039ce:	609a      	str	r2, [r3, #8]
 80039d0:	e006      	b.n	80039e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	689a      	ldr	r2, [r3, #8]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80039de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d108      	bne.n	80039fa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	685a      	ldr	r2, [r3, #4]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039f6:	605a      	str	r2, [r3, #4]
 80039f8:	e007      	b.n	8003a0a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	685a      	ldr	r2, [r3, #4]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a08:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	6812      	ldr	r2, [r2, #0]
 8003a14:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003a18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a1c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68da      	ldr	r2, [r3, #12]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a2c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	691a      	ldr	r2, [r3, #16]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	430a      	orrs	r2, r1
 8003a46:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	69d9      	ldr	r1, [r3, #28]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a1a      	ldr	r2, [r3, #32]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	430a      	orrs	r2, r1
 8003a56:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f042 0201 	orr.w	r2, r2, #1
 8003a66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2220      	movs	r2, #32
 8003a72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3708      	adds	r7, #8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
	...

08003a90 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b088      	sub	sp, #32
 8003a94:	af02      	add	r7, sp, #8
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	607a      	str	r2, [r7, #4]
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	817b      	strh	r3, [r7, #10]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2b20      	cmp	r3, #32
 8003aae:	f040 80fd 	bne.w	8003cac <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d101      	bne.n	8003ac0 <HAL_I2C_Master_Transmit+0x30>
 8003abc:	2302      	movs	r3, #2
 8003abe:	e0f6      	b.n	8003cae <HAL_I2C_Master_Transmit+0x21e>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003ac8:	f7fe fa4c 	bl	8001f64 <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	2319      	movs	r3, #25
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ada:	68f8      	ldr	r0, [r7, #12]
 8003adc:	f000 f914 	bl	8003d08 <I2C_WaitOnFlagUntilTimeout>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e0e1      	b.n	8003cae <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2221      	movs	r2, #33	@ 0x21
 8003aee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2210      	movs	r2, #16
 8003af6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	893a      	ldrh	r2, [r7, #8]
 8003b0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	2bff      	cmp	r3, #255	@ 0xff
 8003b1a:	d906      	bls.n	8003b2a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	22ff      	movs	r2, #255	@ 0xff
 8003b20:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003b22:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003b26:	617b      	str	r3, [r7, #20]
 8003b28:	e007      	b.n	8003b3a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003b34:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b38:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d024      	beq.n	8003b8c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b46:	781a      	ldrb	r2, [r3, #0]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b52:	1c5a      	adds	r2, r3, #1
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	3301      	adds	r3, #1
 8003b7a:	b2da      	uxtb	r2, r3
 8003b7c:	8979      	ldrh	r1, [r7, #10]
 8003b7e:	4b4e      	ldr	r3, [pc, #312]	@ (8003cb8 <HAL_I2C_Master_Transmit+0x228>)
 8003b80:	9300      	str	r3, [sp, #0]
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f000 fa83 	bl	8004090 <I2C_TransferConfig>
 8003b8a:	e066      	b.n	8003c5a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b90:	b2da      	uxtb	r2, r3
 8003b92:	8979      	ldrh	r1, [r7, #10]
 8003b94:	4b48      	ldr	r3, [pc, #288]	@ (8003cb8 <HAL_I2C_Master_Transmit+0x228>)
 8003b96:	9300      	str	r3, [sp, #0]
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	68f8      	ldr	r0, [r7, #12]
 8003b9c:	f000 fa78 	bl	8004090 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003ba0:	e05b      	b.n	8003c5a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	6a39      	ldr	r1, [r7, #32]
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	f000 f907 	bl	8003dba <I2C_WaitOnTXISFlagUntilTimeout>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d001      	beq.n	8003bb6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e07b      	b.n	8003cae <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bba:	781a      	ldrb	r2, [r3, #0]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc6:	1c5a      	adds	r2, r3, #1
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bde:	3b01      	subs	r3, #1
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d034      	beq.n	8003c5a <HAL_I2C_Master_Transmit+0x1ca>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d130      	bne.n	8003c5a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	9300      	str	r3, [sp, #0]
 8003bfc:	6a3b      	ldr	r3, [r7, #32]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	2180      	movs	r1, #128	@ 0x80
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f000 f880 	bl	8003d08 <I2C_WaitOnFlagUntilTimeout>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e04d      	b.n	8003cae <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	2bff      	cmp	r3, #255	@ 0xff
 8003c1a:	d90e      	bls.n	8003c3a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	22ff      	movs	r2, #255	@ 0xff
 8003c20:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c26:	b2da      	uxtb	r2, r3
 8003c28:	8979      	ldrh	r1, [r7, #10]
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	9300      	str	r3, [sp, #0]
 8003c2e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f000 fa2c 	bl	8004090 <I2C_TransferConfig>
 8003c38:	e00f      	b.n	8003c5a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c48:	b2da      	uxtb	r2, r3
 8003c4a:	8979      	ldrh	r1, [r7, #10]
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f000 fa1b 	bl	8004090 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d19e      	bne.n	8003ba2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	6a39      	ldr	r1, [r7, #32]
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f000 f8ed 	bl	8003e48 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d001      	beq.n	8003c78 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e01a      	b.n	8003cae <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2220      	movs	r2, #32
 8003c7e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6859      	ldr	r1, [r3, #4]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	4b0c      	ldr	r3, [pc, #48]	@ (8003cbc <HAL_I2C_Master_Transmit+0x22c>)
 8003c8c:	400b      	ands	r3, r1
 8003c8e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2220      	movs	r2, #32
 8003c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	e000      	b.n	8003cae <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003cac:	2302      	movs	r3, #2
  }
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3718      	adds	r7, #24
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	80002000 	.word	0x80002000
 8003cbc:	fe00e800 	.word	0xfe00e800

08003cc0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d103      	bne.n	8003cde <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	f003 0301 	and.w	r3, r3, #1
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d007      	beq.n	8003cfc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	699a      	ldr	r2, [r3, #24]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f042 0201 	orr.w	r2, r2, #1
 8003cfa:	619a      	str	r2, [r3, #24]
  }
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	603b      	str	r3, [r7, #0]
 8003d14:	4613      	mov	r3, r2
 8003d16:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d18:	e03b      	b.n	8003d92 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d1a:	69ba      	ldr	r2, [r7, #24]
 8003d1c:	6839      	ldr	r1, [r7, #0]
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	f000 f8d6 	bl	8003ed0 <I2C_IsErrorOccurred>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d001      	beq.n	8003d2e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e041      	b.n	8003db2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d34:	d02d      	beq.n	8003d92 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d36:	f7fe f915 	bl	8001f64 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	683a      	ldr	r2, [r7, #0]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d302      	bcc.n	8003d4c <I2C_WaitOnFlagUntilTimeout+0x44>
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d122      	bne.n	8003d92 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	699a      	ldr	r2, [r3, #24]
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	4013      	ands	r3, r2
 8003d56:	68ba      	ldr	r2, [r7, #8]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	bf0c      	ite	eq
 8003d5c:	2301      	moveq	r3, #1
 8003d5e:	2300      	movne	r3, #0
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	461a      	mov	r2, r3
 8003d64:	79fb      	ldrb	r3, [r7, #7]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d113      	bne.n	8003d92 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d6e:	f043 0220 	orr.w	r2, r3, #32
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2220      	movs	r2, #32
 8003d7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e00f      	b.n	8003db2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	699a      	ldr	r2, [r3, #24]
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	68ba      	ldr	r2, [r7, #8]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	bf0c      	ite	eq
 8003da2:	2301      	moveq	r3, #1
 8003da4:	2300      	movne	r3, #0
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	461a      	mov	r2, r3
 8003daa:	79fb      	ldrb	r3, [r7, #7]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d0b4      	beq.n	8003d1a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b084      	sub	sp, #16
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	60f8      	str	r0, [r7, #12]
 8003dc2:	60b9      	str	r1, [r7, #8]
 8003dc4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003dc6:	e033      	b.n	8003e30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	68b9      	ldr	r1, [r7, #8]
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	f000 f87f 	bl	8003ed0 <I2C_IsErrorOccurred>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d001      	beq.n	8003ddc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e031      	b.n	8003e40 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003de2:	d025      	beq.n	8003e30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003de4:	f7fe f8be 	bl	8001f64 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	68ba      	ldr	r2, [r7, #8]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d302      	bcc.n	8003dfa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d11a      	bne.n	8003e30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d013      	beq.n	8003e30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e0c:	f043 0220 	orr.w	r2, r3, #32
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2220      	movs	r2, #32
 8003e18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e007      	b.n	8003e40 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d1c4      	bne.n	8003dc8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3710      	adds	r7, #16
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e54:	e02f      	b.n	8003eb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	68b9      	ldr	r1, [r7, #8]
 8003e5a:	68f8      	ldr	r0, [r7, #12]
 8003e5c:	f000 f838 	bl	8003ed0 <I2C_IsErrorOccurred>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d001      	beq.n	8003e6a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e02d      	b.n	8003ec6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e6a:	f7fe f87b 	bl	8001f64 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	68ba      	ldr	r2, [r7, #8]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d302      	bcc.n	8003e80 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d11a      	bne.n	8003eb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	f003 0320 	and.w	r3, r3, #32
 8003e8a:	2b20      	cmp	r3, #32
 8003e8c:	d013      	beq.n	8003eb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e92:	f043 0220 	orr.w	r2, r3, #32
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2220      	movs	r2, #32
 8003e9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e007      	b.n	8003ec6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	f003 0320 	and.w	r3, r3, #32
 8003ec0:	2b20      	cmp	r3, #32
 8003ec2:	d1c8      	bne.n	8003e56 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
	...

08003ed0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b08a      	sub	sp, #40	@ 0x28
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003edc:	2300      	movs	r3, #0
 8003ede:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003eea:	2300      	movs	r3, #0
 8003eec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	f003 0310 	and.w	r3, r3, #16
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d068      	beq.n	8003fce <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2210      	movs	r2, #16
 8003f02:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f04:	e049      	b.n	8003f9a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f0c:	d045      	beq.n	8003f9a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003f0e:	f7fe f829 	bl	8001f64 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	68ba      	ldr	r2, [r7, #8]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d302      	bcc.n	8003f24 <I2C_IsErrorOccurred+0x54>
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d13a      	bne.n	8003f9a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f2e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f36:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f46:	d121      	bne.n	8003f8c <I2C_IsErrorOccurred+0xbc>
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f4e:	d01d      	beq.n	8003f8c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003f50:	7cfb      	ldrb	r3, [r7, #19]
 8003f52:	2b20      	cmp	r3, #32
 8003f54:	d01a      	beq.n	8003f8c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f64:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003f66:	f7fd fffd 	bl	8001f64 <HAL_GetTick>
 8003f6a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f6c:	e00e      	b.n	8003f8c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003f6e:	f7fd fff9 	bl	8001f64 <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	2b19      	cmp	r3, #25
 8003f7a:	d907      	bls.n	8003f8c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003f7c:	6a3b      	ldr	r3, [r7, #32]
 8003f7e:	f043 0320 	orr.w	r3, r3, #32
 8003f82:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003f8a:	e006      	b.n	8003f9a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	f003 0320 	and.w	r3, r3, #32
 8003f96:	2b20      	cmp	r3, #32
 8003f98:	d1e9      	bne.n	8003f6e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	f003 0320 	and.w	r3, r3, #32
 8003fa4:	2b20      	cmp	r3, #32
 8003fa6:	d003      	beq.n	8003fb0 <I2C_IsErrorOccurred+0xe0>
 8003fa8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d0aa      	beq.n	8003f06 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003fb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d103      	bne.n	8003fc0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2220      	movs	r2, #32
 8003fbe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003fc0:	6a3b      	ldr	r3, [r7, #32]
 8003fc2:	f043 0304 	orr.w	r3, r3, #4
 8003fc6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00b      	beq.n	8003ff8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003fe0:	6a3b      	ldr	r3, [r7, #32]
 8003fe2:	f043 0301 	orr.w	r3, r3, #1
 8003fe6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ff0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00b      	beq.n	800401a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004002:	6a3b      	ldr	r3, [r7, #32]
 8004004:	f043 0308 	orr.w	r3, r3, #8
 8004008:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004012:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00b      	beq.n	800403c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004024:	6a3b      	ldr	r3, [r7, #32]
 8004026:	f043 0302 	orr.w	r3, r3, #2
 800402a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004034:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800403c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004040:	2b00      	cmp	r3, #0
 8004042:	d01c      	beq.n	800407e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004044:	68f8      	ldr	r0, [r7, #12]
 8004046:	f7ff fe3b 	bl	8003cc0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	6859      	ldr	r1, [r3, #4]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	4b0d      	ldr	r3, [pc, #52]	@ (800408c <I2C_IsErrorOccurred+0x1bc>)
 8004056:	400b      	ands	r3, r1
 8004058:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800405e:	6a3b      	ldr	r3, [r7, #32]
 8004060:	431a      	orrs	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2220      	movs	r2, #32
 800406a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800407e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004082:	4618      	mov	r0, r3
 8004084:	3728      	adds	r7, #40	@ 0x28
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	fe00e800 	.word	0xfe00e800

08004090 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004090:	b480      	push	{r7}
 8004092:	b087      	sub	sp, #28
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	607b      	str	r3, [r7, #4]
 800409a:	460b      	mov	r3, r1
 800409c:	817b      	strh	r3, [r7, #10]
 800409e:	4613      	mov	r3, r2
 80040a0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040a2:	897b      	ldrh	r3, [r7, #10]
 80040a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80040a8:	7a7b      	ldrb	r3, [r7, #9]
 80040aa:	041b      	lsls	r3, r3, #16
 80040ac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040b0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040b6:	6a3b      	ldr	r3, [r7, #32]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80040be:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	685a      	ldr	r2, [r3, #4]
 80040c6:	6a3b      	ldr	r3, [r7, #32]
 80040c8:	0d5b      	lsrs	r3, r3, #21
 80040ca:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80040ce:	4b08      	ldr	r3, [pc, #32]	@ (80040f0 <I2C_TransferConfig+0x60>)
 80040d0:	430b      	orrs	r3, r1
 80040d2:	43db      	mvns	r3, r3
 80040d4:	ea02 0103 	and.w	r1, r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	697a      	ldr	r2, [r7, #20]
 80040de:	430a      	orrs	r2, r1
 80040e0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80040e2:	bf00      	nop
 80040e4:	371c      	adds	r7, #28
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	03ff63ff 	.word	0x03ff63ff

080040f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b20      	cmp	r3, #32
 8004108:	d138      	bne.n	800417c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004110:	2b01      	cmp	r3, #1
 8004112:	d101      	bne.n	8004118 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004114:	2302      	movs	r3, #2
 8004116:	e032      	b.n	800417e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2224      	movs	r2, #36	@ 0x24
 8004124:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f022 0201 	bic.w	r2, r2, #1
 8004136:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004146:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	6819      	ldr	r1, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	430a      	orrs	r2, r1
 8004156:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f042 0201 	orr.w	r2, r2, #1
 8004166:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2220      	movs	r2, #32
 800416c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004178:	2300      	movs	r3, #0
 800417a:	e000      	b.n	800417e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800417c:	2302      	movs	r3, #2
  }
}
 800417e:	4618      	mov	r0, r3
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr

0800418a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800418a:	b480      	push	{r7}
 800418c:	b085      	sub	sp, #20
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
 8004192:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800419a:	b2db      	uxtb	r3, r3
 800419c:	2b20      	cmp	r3, #32
 800419e:	d139      	bne.n	8004214 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d101      	bne.n	80041ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80041aa:	2302      	movs	r3, #2
 80041ac:	e033      	b.n	8004216 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2201      	movs	r2, #1
 80041b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2224      	movs	r2, #36	@ 0x24
 80041ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f022 0201 	bic.w	r2, r2, #1
 80041cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80041dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	021b      	lsls	r3, r3, #8
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f042 0201 	orr.w	r2, r2, #1
 80041fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2220      	movs	r2, #32
 8004204:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004210:	2300      	movs	r3, #0
 8004212:	e000      	b.n	8004216 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004214:	2302      	movs	r3, #2
  }
}
 8004216:	4618      	mov	r0, r3
 8004218:	3714      	adds	r7, #20
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
	...

08004224 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004228:	4b04      	ldr	r3, [pc, #16]	@ (800423c <HAL_PWREx_GetVoltageRange+0x18>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004230:	4618      	mov	r0, r3
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	40007000 	.word	0x40007000

08004240 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800424e:	d130      	bne.n	80042b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004250:	4b23      	ldr	r3, [pc, #140]	@ (80042e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004258:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800425c:	d038      	beq.n	80042d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800425e:	4b20      	ldr	r3, [pc, #128]	@ (80042e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004266:	4a1e      	ldr	r2, [pc, #120]	@ (80042e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004268:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800426c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800426e:	4b1d      	ldr	r3, [pc, #116]	@ (80042e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2232      	movs	r2, #50	@ 0x32
 8004274:	fb02 f303 	mul.w	r3, r2, r3
 8004278:	4a1b      	ldr	r2, [pc, #108]	@ (80042e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800427a:	fba2 2303 	umull	r2, r3, r2, r3
 800427e:	0c9b      	lsrs	r3, r3, #18
 8004280:	3301      	adds	r3, #1
 8004282:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004284:	e002      	b.n	800428c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	3b01      	subs	r3, #1
 800428a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800428c:	4b14      	ldr	r3, [pc, #80]	@ (80042e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004294:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004298:	d102      	bne.n	80042a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d1f2      	bne.n	8004286 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80042a0:	4b0f      	ldr	r3, [pc, #60]	@ (80042e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042a2:	695b      	ldr	r3, [r3, #20]
 80042a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042ac:	d110      	bne.n	80042d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e00f      	b.n	80042d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80042b2:	4b0b      	ldr	r3, [pc, #44]	@ (80042e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80042ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042be:	d007      	beq.n	80042d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80042c0:	4b07      	ldr	r3, [pc, #28]	@ (80042e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80042c8:	4a05      	ldr	r2, [pc, #20]	@ (80042e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80042ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3714      	adds	r7, #20
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	40007000 	.word	0x40007000
 80042e4:	20000004 	.word	0x20000004
 80042e8:	431bde83 	.word	0x431bde83

080042ec <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b088      	sub	sp, #32
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d101      	bne.n	80042fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e3ca      	b.n	8004a94 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042fe:	4b97      	ldr	r3, [pc, #604]	@ (800455c <HAL_RCC_OscConfig+0x270>)
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f003 030c 	and.w	r3, r3, #12
 8004306:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004308:	4b94      	ldr	r3, [pc, #592]	@ (800455c <HAL_RCC_OscConfig+0x270>)
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	f003 0303 	and.w	r3, r3, #3
 8004310:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0310 	and.w	r3, r3, #16
 800431a:	2b00      	cmp	r3, #0
 800431c:	f000 80e4 	beq.w	80044e8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d007      	beq.n	8004336 <HAL_RCC_OscConfig+0x4a>
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	2b0c      	cmp	r3, #12
 800432a:	f040 808b 	bne.w	8004444 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	2b01      	cmp	r3, #1
 8004332:	f040 8087 	bne.w	8004444 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004336:	4b89      	ldr	r3, [pc, #548]	@ (800455c <HAL_RCC_OscConfig+0x270>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d005      	beq.n	800434e <HAL_RCC_OscConfig+0x62>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e3a2      	b.n	8004a94 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a1a      	ldr	r2, [r3, #32]
 8004352:	4b82      	ldr	r3, [pc, #520]	@ (800455c <HAL_RCC_OscConfig+0x270>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0308 	and.w	r3, r3, #8
 800435a:	2b00      	cmp	r3, #0
 800435c:	d004      	beq.n	8004368 <HAL_RCC_OscConfig+0x7c>
 800435e:	4b7f      	ldr	r3, [pc, #508]	@ (800455c <HAL_RCC_OscConfig+0x270>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004366:	e005      	b.n	8004374 <HAL_RCC_OscConfig+0x88>
 8004368:	4b7c      	ldr	r3, [pc, #496]	@ (800455c <HAL_RCC_OscConfig+0x270>)
 800436a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800436e:	091b      	lsrs	r3, r3, #4
 8004370:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004374:	4293      	cmp	r3, r2
 8004376:	d223      	bcs.n	80043c0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	4618      	mov	r0, r3
 800437e:	f000 fd1d 	bl	8004dbc <RCC_SetFlashLatencyFromMSIRange>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d001      	beq.n	800438c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e383      	b.n	8004a94 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800438c:	4b73      	ldr	r3, [pc, #460]	@ (800455c <HAL_RCC_OscConfig+0x270>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a72      	ldr	r2, [pc, #456]	@ (800455c <HAL_RCC_OscConfig+0x270>)
 8004392:	f043 0308 	orr.w	r3, r3, #8
 8004396:	6013      	str	r3, [r2, #0]
 8004398:	4b70      	ldr	r3, [pc, #448]	@ (800455c <HAL_RCC_OscConfig+0x270>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a1b      	ldr	r3, [r3, #32]
 80043a4:	496d      	ldr	r1, [pc, #436]	@ (800455c <HAL_RCC_OscConfig+0x270>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043aa:	4b6c      	ldr	r3, [pc, #432]	@ (800455c <HAL_RCC_OscConfig+0x270>)
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	69db      	ldr	r3, [r3, #28]
 80043b6:	021b      	lsls	r3, r3, #8
 80043b8:	4968      	ldr	r1, [pc, #416]	@ (800455c <HAL_RCC_OscConfig+0x270>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	604b      	str	r3, [r1, #4]
 80043be:	e025      	b.n	800440c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043c0:	4b66      	ldr	r3, [pc, #408]	@ (800455c <HAL_RCC_OscConfig+0x270>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a65      	ldr	r2, [pc, #404]	@ (800455c <HAL_RCC_OscConfig+0x270>)
 80043c6:	f043 0308 	orr.w	r3, r3, #8
 80043ca:	6013      	str	r3, [r2, #0]
 80043cc:	4b63      	ldr	r3, [pc, #396]	@ (800455c <HAL_RCC_OscConfig+0x270>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a1b      	ldr	r3, [r3, #32]
 80043d8:	4960      	ldr	r1, [pc, #384]	@ (800455c <HAL_RCC_OscConfig+0x270>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043de:	4b5f      	ldr	r3, [pc, #380]	@ (800455c <HAL_RCC_OscConfig+0x270>)
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	69db      	ldr	r3, [r3, #28]
 80043ea:	021b      	lsls	r3, r3, #8
 80043ec:	495b      	ldr	r1, [pc, #364]	@ (800455c <HAL_RCC_OscConfig+0x270>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d109      	bne.n	800440c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a1b      	ldr	r3, [r3, #32]
 80043fc:	4618      	mov	r0, r3
 80043fe:	f000 fcdd 	bl	8004dbc <RCC_SetFlashLatencyFromMSIRange>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d001      	beq.n	800440c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e343      	b.n	8004a94 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800440c:	f000 fc4a 	bl	8004ca4 <HAL_RCC_GetSysClockFreq>
 8004410:	4602      	mov	r2, r0
 8004412:	4b52      	ldr	r3, [pc, #328]	@ (800455c <HAL_RCC_OscConfig+0x270>)
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	091b      	lsrs	r3, r3, #4
 8004418:	f003 030f 	and.w	r3, r3, #15
 800441c:	4950      	ldr	r1, [pc, #320]	@ (8004560 <HAL_RCC_OscConfig+0x274>)
 800441e:	5ccb      	ldrb	r3, [r1, r3]
 8004420:	f003 031f 	and.w	r3, r3, #31
 8004424:	fa22 f303 	lsr.w	r3, r2, r3
 8004428:	4a4e      	ldr	r2, [pc, #312]	@ (8004564 <HAL_RCC_OscConfig+0x278>)
 800442a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800442c:	4b4e      	ldr	r3, [pc, #312]	@ (8004568 <HAL_RCC_OscConfig+0x27c>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4618      	mov	r0, r3
 8004432:	f7fd fd47 	bl	8001ec4 <HAL_InitTick>
 8004436:	4603      	mov	r3, r0
 8004438:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800443a:	7bfb      	ldrb	r3, [r7, #15]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d052      	beq.n	80044e6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004440:	7bfb      	ldrb	r3, [r7, #15]
 8004442:	e327      	b.n	8004a94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	699b      	ldr	r3, [r3, #24]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d032      	beq.n	80044b2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800444c:	4b43      	ldr	r3, [pc, #268]	@ (800455c <HAL_RCC_OscConfig+0x270>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a42      	ldr	r2, [pc, #264]	@ (800455c <HAL_RCC_OscConfig+0x270>)
 8004452:	f043 0301 	orr.w	r3, r3, #1
 8004456:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004458:	f7fd fd84 	bl	8001f64 <HAL_GetTick>
 800445c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800445e:	e008      	b.n	8004472 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004460:	f7fd fd80 	bl	8001f64 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b02      	cmp	r3, #2
 800446c:	d901      	bls.n	8004472 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e310      	b.n	8004a94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004472:	4b3a      	ldr	r3, [pc, #232]	@ (800455c <HAL_RCC_OscConfig+0x270>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	2b00      	cmp	r3, #0
 800447c:	d0f0      	beq.n	8004460 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800447e:	4b37      	ldr	r3, [pc, #220]	@ (800455c <HAL_RCC_OscConfig+0x270>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a36      	ldr	r2, [pc, #216]	@ (800455c <HAL_RCC_OscConfig+0x270>)
 8004484:	f043 0308 	orr.w	r3, r3, #8
 8004488:	6013      	str	r3, [r2, #0]
 800448a:	4b34      	ldr	r3, [pc, #208]	@ (800455c <HAL_RCC_OscConfig+0x270>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a1b      	ldr	r3, [r3, #32]
 8004496:	4931      	ldr	r1, [pc, #196]	@ (800455c <HAL_RCC_OscConfig+0x270>)
 8004498:	4313      	orrs	r3, r2
 800449a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800449c:	4b2f      	ldr	r3, [pc, #188]	@ (800455c <HAL_RCC_OscConfig+0x270>)
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	69db      	ldr	r3, [r3, #28]
 80044a8:	021b      	lsls	r3, r3, #8
 80044aa:	492c      	ldr	r1, [pc, #176]	@ (800455c <HAL_RCC_OscConfig+0x270>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	604b      	str	r3, [r1, #4]
 80044b0:	e01a      	b.n	80044e8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80044b2:	4b2a      	ldr	r3, [pc, #168]	@ (800455c <HAL_RCC_OscConfig+0x270>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a29      	ldr	r2, [pc, #164]	@ (800455c <HAL_RCC_OscConfig+0x270>)
 80044b8:	f023 0301 	bic.w	r3, r3, #1
 80044bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044be:	f7fd fd51 	bl	8001f64 <HAL_GetTick>
 80044c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80044c4:	e008      	b.n	80044d8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044c6:	f7fd fd4d 	bl	8001f64 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d901      	bls.n	80044d8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e2dd      	b.n	8004a94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80044d8:	4b20      	ldr	r3, [pc, #128]	@ (800455c <HAL_RCC_OscConfig+0x270>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1f0      	bne.n	80044c6 <HAL_RCC_OscConfig+0x1da>
 80044e4:	e000      	b.n	80044e8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044e6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0301 	and.w	r3, r3, #1
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d074      	beq.n	80045de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	2b08      	cmp	r3, #8
 80044f8:	d005      	beq.n	8004506 <HAL_RCC_OscConfig+0x21a>
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	2b0c      	cmp	r3, #12
 80044fe:	d10e      	bne.n	800451e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	2b03      	cmp	r3, #3
 8004504:	d10b      	bne.n	800451e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004506:	4b15      	ldr	r3, [pc, #84]	@ (800455c <HAL_RCC_OscConfig+0x270>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d064      	beq.n	80045dc <HAL_RCC_OscConfig+0x2f0>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d160      	bne.n	80045dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e2ba      	b.n	8004a94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004526:	d106      	bne.n	8004536 <HAL_RCC_OscConfig+0x24a>
 8004528:	4b0c      	ldr	r3, [pc, #48]	@ (800455c <HAL_RCC_OscConfig+0x270>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a0b      	ldr	r2, [pc, #44]	@ (800455c <HAL_RCC_OscConfig+0x270>)
 800452e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004532:	6013      	str	r3, [r2, #0]
 8004534:	e026      	b.n	8004584 <HAL_RCC_OscConfig+0x298>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800453e:	d115      	bne.n	800456c <HAL_RCC_OscConfig+0x280>
 8004540:	4b06      	ldr	r3, [pc, #24]	@ (800455c <HAL_RCC_OscConfig+0x270>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a05      	ldr	r2, [pc, #20]	@ (800455c <HAL_RCC_OscConfig+0x270>)
 8004546:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800454a:	6013      	str	r3, [r2, #0]
 800454c:	4b03      	ldr	r3, [pc, #12]	@ (800455c <HAL_RCC_OscConfig+0x270>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a02      	ldr	r2, [pc, #8]	@ (800455c <HAL_RCC_OscConfig+0x270>)
 8004552:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004556:	6013      	str	r3, [r2, #0]
 8004558:	e014      	b.n	8004584 <HAL_RCC_OscConfig+0x298>
 800455a:	bf00      	nop
 800455c:	40021000 	.word	0x40021000
 8004560:	0800a1c0 	.word	0x0800a1c0
 8004564:	20000004 	.word	0x20000004
 8004568:	20000008 	.word	0x20000008
 800456c:	4ba0      	ldr	r3, [pc, #640]	@ (80047f0 <HAL_RCC_OscConfig+0x504>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a9f      	ldr	r2, [pc, #636]	@ (80047f0 <HAL_RCC_OscConfig+0x504>)
 8004572:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004576:	6013      	str	r3, [r2, #0]
 8004578:	4b9d      	ldr	r3, [pc, #628]	@ (80047f0 <HAL_RCC_OscConfig+0x504>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a9c      	ldr	r2, [pc, #624]	@ (80047f0 <HAL_RCC_OscConfig+0x504>)
 800457e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004582:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d013      	beq.n	80045b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800458c:	f7fd fcea 	bl	8001f64 <HAL_GetTick>
 8004590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004592:	e008      	b.n	80045a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004594:	f7fd fce6 	bl	8001f64 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b64      	cmp	r3, #100	@ 0x64
 80045a0:	d901      	bls.n	80045a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e276      	b.n	8004a94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045a6:	4b92      	ldr	r3, [pc, #584]	@ (80047f0 <HAL_RCC_OscConfig+0x504>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d0f0      	beq.n	8004594 <HAL_RCC_OscConfig+0x2a8>
 80045b2:	e014      	b.n	80045de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b4:	f7fd fcd6 	bl	8001f64 <HAL_GetTick>
 80045b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045ba:	e008      	b.n	80045ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045bc:	f7fd fcd2 	bl	8001f64 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b64      	cmp	r3, #100	@ 0x64
 80045c8:	d901      	bls.n	80045ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e262      	b.n	8004a94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045ce:	4b88      	ldr	r3, [pc, #544]	@ (80047f0 <HAL_RCC_OscConfig+0x504>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1f0      	bne.n	80045bc <HAL_RCC_OscConfig+0x2d0>
 80045da:	e000      	b.n	80045de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d060      	beq.n	80046ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	2b04      	cmp	r3, #4
 80045ee:	d005      	beq.n	80045fc <HAL_RCC_OscConfig+0x310>
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	2b0c      	cmp	r3, #12
 80045f4:	d119      	bne.n	800462a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d116      	bne.n	800462a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045fc:	4b7c      	ldr	r3, [pc, #496]	@ (80047f0 <HAL_RCC_OscConfig+0x504>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004604:	2b00      	cmp	r3, #0
 8004606:	d005      	beq.n	8004614 <HAL_RCC_OscConfig+0x328>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d101      	bne.n	8004614 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e23f      	b.n	8004a94 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004614:	4b76      	ldr	r3, [pc, #472]	@ (80047f0 <HAL_RCC_OscConfig+0x504>)
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	061b      	lsls	r3, r3, #24
 8004622:	4973      	ldr	r1, [pc, #460]	@ (80047f0 <HAL_RCC_OscConfig+0x504>)
 8004624:	4313      	orrs	r3, r2
 8004626:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004628:	e040      	b.n	80046ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d023      	beq.n	800467a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004632:	4b6f      	ldr	r3, [pc, #444]	@ (80047f0 <HAL_RCC_OscConfig+0x504>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a6e      	ldr	r2, [pc, #440]	@ (80047f0 <HAL_RCC_OscConfig+0x504>)
 8004638:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800463c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800463e:	f7fd fc91 	bl	8001f64 <HAL_GetTick>
 8004642:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004644:	e008      	b.n	8004658 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004646:	f7fd fc8d 	bl	8001f64 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	2b02      	cmp	r3, #2
 8004652:	d901      	bls.n	8004658 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e21d      	b.n	8004a94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004658:	4b65      	ldr	r3, [pc, #404]	@ (80047f0 <HAL_RCC_OscConfig+0x504>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004660:	2b00      	cmp	r3, #0
 8004662:	d0f0      	beq.n	8004646 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004664:	4b62      	ldr	r3, [pc, #392]	@ (80047f0 <HAL_RCC_OscConfig+0x504>)
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	061b      	lsls	r3, r3, #24
 8004672:	495f      	ldr	r1, [pc, #380]	@ (80047f0 <HAL_RCC_OscConfig+0x504>)
 8004674:	4313      	orrs	r3, r2
 8004676:	604b      	str	r3, [r1, #4]
 8004678:	e018      	b.n	80046ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800467a:	4b5d      	ldr	r3, [pc, #372]	@ (80047f0 <HAL_RCC_OscConfig+0x504>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a5c      	ldr	r2, [pc, #368]	@ (80047f0 <HAL_RCC_OscConfig+0x504>)
 8004680:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004684:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004686:	f7fd fc6d 	bl	8001f64 <HAL_GetTick>
 800468a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800468c:	e008      	b.n	80046a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800468e:	f7fd fc69 	bl	8001f64 <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	2b02      	cmp	r3, #2
 800469a:	d901      	bls.n	80046a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e1f9      	b.n	8004a94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046a0:	4b53      	ldr	r3, [pc, #332]	@ (80047f0 <HAL_RCC_OscConfig+0x504>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1f0      	bne.n	800468e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0308 	and.w	r3, r3, #8
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d03c      	beq.n	8004732 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	695b      	ldr	r3, [r3, #20]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d01c      	beq.n	80046fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046c0:	4b4b      	ldr	r3, [pc, #300]	@ (80047f0 <HAL_RCC_OscConfig+0x504>)
 80046c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046c6:	4a4a      	ldr	r2, [pc, #296]	@ (80047f0 <HAL_RCC_OscConfig+0x504>)
 80046c8:	f043 0301 	orr.w	r3, r3, #1
 80046cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046d0:	f7fd fc48 	bl	8001f64 <HAL_GetTick>
 80046d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046d6:	e008      	b.n	80046ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046d8:	f7fd fc44 	bl	8001f64 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e1d4      	b.n	8004a94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046ea:	4b41      	ldr	r3, [pc, #260]	@ (80047f0 <HAL_RCC_OscConfig+0x504>)
 80046ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d0ef      	beq.n	80046d8 <HAL_RCC_OscConfig+0x3ec>
 80046f8:	e01b      	b.n	8004732 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046fa:	4b3d      	ldr	r3, [pc, #244]	@ (80047f0 <HAL_RCC_OscConfig+0x504>)
 80046fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004700:	4a3b      	ldr	r2, [pc, #236]	@ (80047f0 <HAL_RCC_OscConfig+0x504>)
 8004702:	f023 0301 	bic.w	r3, r3, #1
 8004706:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800470a:	f7fd fc2b 	bl	8001f64 <HAL_GetTick>
 800470e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004710:	e008      	b.n	8004724 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004712:	f7fd fc27 	bl	8001f64 <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	2b02      	cmp	r3, #2
 800471e:	d901      	bls.n	8004724 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e1b7      	b.n	8004a94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004724:	4b32      	ldr	r3, [pc, #200]	@ (80047f0 <HAL_RCC_OscConfig+0x504>)
 8004726:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1ef      	bne.n	8004712 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0304 	and.w	r3, r3, #4
 800473a:	2b00      	cmp	r3, #0
 800473c:	f000 80a6 	beq.w	800488c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004740:	2300      	movs	r3, #0
 8004742:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004744:	4b2a      	ldr	r3, [pc, #168]	@ (80047f0 <HAL_RCC_OscConfig+0x504>)
 8004746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004748:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d10d      	bne.n	800476c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004750:	4b27      	ldr	r3, [pc, #156]	@ (80047f0 <HAL_RCC_OscConfig+0x504>)
 8004752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004754:	4a26      	ldr	r2, [pc, #152]	@ (80047f0 <HAL_RCC_OscConfig+0x504>)
 8004756:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800475a:	6593      	str	r3, [r2, #88]	@ 0x58
 800475c:	4b24      	ldr	r3, [pc, #144]	@ (80047f0 <HAL_RCC_OscConfig+0x504>)
 800475e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004760:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004764:	60bb      	str	r3, [r7, #8]
 8004766:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004768:	2301      	movs	r3, #1
 800476a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800476c:	4b21      	ldr	r3, [pc, #132]	@ (80047f4 <HAL_RCC_OscConfig+0x508>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004774:	2b00      	cmp	r3, #0
 8004776:	d118      	bne.n	80047aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004778:	4b1e      	ldr	r3, [pc, #120]	@ (80047f4 <HAL_RCC_OscConfig+0x508>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a1d      	ldr	r2, [pc, #116]	@ (80047f4 <HAL_RCC_OscConfig+0x508>)
 800477e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004782:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004784:	f7fd fbee 	bl	8001f64 <HAL_GetTick>
 8004788:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800478a:	e008      	b.n	800479e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800478c:	f7fd fbea 	bl	8001f64 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b02      	cmp	r3, #2
 8004798:	d901      	bls.n	800479e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e17a      	b.n	8004a94 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800479e:	4b15      	ldr	r3, [pc, #84]	@ (80047f4 <HAL_RCC_OscConfig+0x508>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d0f0      	beq.n	800478c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d108      	bne.n	80047c4 <HAL_RCC_OscConfig+0x4d8>
 80047b2:	4b0f      	ldr	r3, [pc, #60]	@ (80047f0 <HAL_RCC_OscConfig+0x504>)
 80047b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047b8:	4a0d      	ldr	r2, [pc, #52]	@ (80047f0 <HAL_RCC_OscConfig+0x504>)
 80047ba:	f043 0301 	orr.w	r3, r3, #1
 80047be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047c2:	e029      	b.n	8004818 <HAL_RCC_OscConfig+0x52c>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	2b05      	cmp	r3, #5
 80047ca:	d115      	bne.n	80047f8 <HAL_RCC_OscConfig+0x50c>
 80047cc:	4b08      	ldr	r3, [pc, #32]	@ (80047f0 <HAL_RCC_OscConfig+0x504>)
 80047ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047d2:	4a07      	ldr	r2, [pc, #28]	@ (80047f0 <HAL_RCC_OscConfig+0x504>)
 80047d4:	f043 0304 	orr.w	r3, r3, #4
 80047d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047dc:	4b04      	ldr	r3, [pc, #16]	@ (80047f0 <HAL_RCC_OscConfig+0x504>)
 80047de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047e2:	4a03      	ldr	r2, [pc, #12]	@ (80047f0 <HAL_RCC_OscConfig+0x504>)
 80047e4:	f043 0301 	orr.w	r3, r3, #1
 80047e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047ec:	e014      	b.n	8004818 <HAL_RCC_OscConfig+0x52c>
 80047ee:	bf00      	nop
 80047f0:	40021000 	.word	0x40021000
 80047f4:	40007000 	.word	0x40007000
 80047f8:	4b9c      	ldr	r3, [pc, #624]	@ (8004a6c <HAL_RCC_OscConfig+0x780>)
 80047fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047fe:	4a9b      	ldr	r2, [pc, #620]	@ (8004a6c <HAL_RCC_OscConfig+0x780>)
 8004800:	f023 0301 	bic.w	r3, r3, #1
 8004804:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004808:	4b98      	ldr	r3, [pc, #608]	@ (8004a6c <HAL_RCC_OscConfig+0x780>)
 800480a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800480e:	4a97      	ldr	r2, [pc, #604]	@ (8004a6c <HAL_RCC_OscConfig+0x780>)
 8004810:	f023 0304 	bic.w	r3, r3, #4
 8004814:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d016      	beq.n	800484e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004820:	f7fd fba0 	bl	8001f64 <HAL_GetTick>
 8004824:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004826:	e00a      	b.n	800483e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004828:	f7fd fb9c 	bl	8001f64 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004836:	4293      	cmp	r3, r2
 8004838:	d901      	bls.n	800483e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e12a      	b.n	8004a94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800483e:	4b8b      	ldr	r3, [pc, #556]	@ (8004a6c <HAL_RCC_OscConfig+0x780>)
 8004840:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004844:	f003 0302 	and.w	r3, r3, #2
 8004848:	2b00      	cmp	r3, #0
 800484a:	d0ed      	beq.n	8004828 <HAL_RCC_OscConfig+0x53c>
 800484c:	e015      	b.n	800487a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800484e:	f7fd fb89 	bl	8001f64 <HAL_GetTick>
 8004852:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004854:	e00a      	b.n	800486c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004856:	f7fd fb85 	bl	8001f64 <HAL_GetTick>
 800485a:	4602      	mov	r2, r0
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004864:	4293      	cmp	r3, r2
 8004866:	d901      	bls.n	800486c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e113      	b.n	8004a94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800486c:	4b7f      	ldr	r3, [pc, #508]	@ (8004a6c <HAL_RCC_OscConfig+0x780>)
 800486e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1ed      	bne.n	8004856 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800487a:	7ffb      	ldrb	r3, [r7, #31]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d105      	bne.n	800488c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004880:	4b7a      	ldr	r3, [pc, #488]	@ (8004a6c <HAL_RCC_OscConfig+0x780>)
 8004882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004884:	4a79      	ldr	r2, [pc, #484]	@ (8004a6c <HAL_RCC_OscConfig+0x780>)
 8004886:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800488a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004890:	2b00      	cmp	r3, #0
 8004892:	f000 80fe 	beq.w	8004a92 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800489a:	2b02      	cmp	r3, #2
 800489c:	f040 80d0 	bne.w	8004a40 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80048a0:	4b72      	ldr	r3, [pc, #456]	@ (8004a6c <HAL_RCC_OscConfig+0x780>)
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	f003 0203 	and.w	r2, r3, #3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d130      	bne.n	8004916 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048be:	3b01      	subs	r3, #1
 80048c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d127      	bne.n	8004916 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d11f      	bne.n	8004916 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80048e0:	2a07      	cmp	r2, #7
 80048e2:	bf14      	ite	ne
 80048e4:	2201      	movne	r2, #1
 80048e6:	2200      	moveq	r2, #0
 80048e8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d113      	bne.n	8004916 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048f8:	085b      	lsrs	r3, r3, #1
 80048fa:	3b01      	subs	r3, #1
 80048fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80048fe:	429a      	cmp	r2, r3
 8004900:	d109      	bne.n	8004916 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800490c:	085b      	lsrs	r3, r3, #1
 800490e:	3b01      	subs	r3, #1
 8004910:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004912:	429a      	cmp	r2, r3
 8004914:	d06e      	beq.n	80049f4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	2b0c      	cmp	r3, #12
 800491a:	d069      	beq.n	80049f0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800491c:	4b53      	ldr	r3, [pc, #332]	@ (8004a6c <HAL_RCC_OscConfig+0x780>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d105      	bne.n	8004934 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004928:	4b50      	ldr	r3, [pc, #320]	@ (8004a6c <HAL_RCC_OscConfig+0x780>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d001      	beq.n	8004938 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e0ad      	b.n	8004a94 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004938:	4b4c      	ldr	r3, [pc, #304]	@ (8004a6c <HAL_RCC_OscConfig+0x780>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a4b      	ldr	r2, [pc, #300]	@ (8004a6c <HAL_RCC_OscConfig+0x780>)
 800493e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004942:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004944:	f7fd fb0e 	bl	8001f64 <HAL_GetTick>
 8004948:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800494a:	e008      	b.n	800495e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800494c:	f7fd fb0a 	bl	8001f64 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	2b02      	cmp	r3, #2
 8004958:	d901      	bls.n	800495e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e09a      	b.n	8004a94 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800495e:	4b43      	ldr	r3, [pc, #268]	@ (8004a6c <HAL_RCC_OscConfig+0x780>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1f0      	bne.n	800494c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800496a:	4b40      	ldr	r3, [pc, #256]	@ (8004a6c <HAL_RCC_OscConfig+0x780>)
 800496c:	68da      	ldr	r2, [r3, #12]
 800496e:	4b40      	ldr	r3, [pc, #256]	@ (8004a70 <HAL_RCC_OscConfig+0x784>)
 8004970:	4013      	ands	r3, r2
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800497a:	3a01      	subs	r2, #1
 800497c:	0112      	lsls	r2, r2, #4
 800497e:	4311      	orrs	r1, r2
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004984:	0212      	lsls	r2, r2, #8
 8004986:	4311      	orrs	r1, r2
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800498c:	0852      	lsrs	r2, r2, #1
 800498e:	3a01      	subs	r2, #1
 8004990:	0552      	lsls	r2, r2, #21
 8004992:	4311      	orrs	r1, r2
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004998:	0852      	lsrs	r2, r2, #1
 800499a:	3a01      	subs	r2, #1
 800499c:	0652      	lsls	r2, r2, #25
 800499e:	4311      	orrs	r1, r2
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80049a4:	0912      	lsrs	r2, r2, #4
 80049a6:	0452      	lsls	r2, r2, #17
 80049a8:	430a      	orrs	r2, r1
 80049aa:	4930      	ldr	r1, [pc, #192]	@ (8004a6c <HAL_RCC_OscConfig+0x780>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80049b0:	4b2e      	ldr	r3, [pc, #184]	@ (8004a6c <HAL_RCC_OscConfig+0x780>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a2d      	ldr	r2, [pc, #180]	@ (8004a6c <HAL_RCC_OscConfig+0x780>)
 80049b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049bc:	4b2b      	ldr	r3, [pc, #172]	@ (8004a6c <HAL_RCC_OscConfig+0x780>)
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	4a2a      	ldr	r2, [pc, #168]	@ (8004a6c <HAL_RCC_OscConfig+0x780>)
 80049c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80049c8:	f7fd facc 	bl	8001f64 <HAL_GetTick>
 80049cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049ce:	e008      	b.n	80049e2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049d0:	f7fd fac8 	bl	8001f64 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e058      	b.n	8004a94 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049e2:	4b22      	ldr	r3, [pc, #136]	@ (8004a6c <HAL_RCC_OscConfig+0x780>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d0f0      	beq.n	80049d0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049ee:	e050      	b.n	8004a92 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e04f      	b.n	8004a94 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049f4:	4b1d      	ldr	r3, [pc, #116]	@ (8004a6c <HAL_RCC_OscConfig+0x780>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d148      	bne.n	8004a92 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004a00:	4b1a      	ldr	r3, [pc, #104]	@ (8004a6c <HAL_RCC_OscConfig+0x780>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a19      	ldr	r2, [pc, #100]	@ (8004a6c <HAL_RCC_OscConfig+0x780>)
 8004a06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a0a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a0c:	4b17      	ldr	r3, [pc, #92]	@ (8004a6c <HAL_RCC_OscConfig+0x780>)
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	4a16      	ldr	r2, [pc, #88]	@ (8004a6c <HAL_RCC_OscConfig+0x780>)
 8004a12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a16:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a18:	f7fd faa4 	bl	8001f64 <HAL_GetTick>
 8004a1c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a1e:	e008      	b.n	8004a32 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a20:	f7fd faa0 	bl	8001f64 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d901      	bls.n	8004a32 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e030      	b.n	8004a94 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a32:	4b0e      	ldr	r3, [pc, #56]	@ (8004a6c <HAL_RCC_OscConfig+0x780>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d0f0      	beq.n	8004a20 <HAL_RCC_OscConfig+0x734>
 8004a3e:	e028      	b.n	8004a92 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	2b0c      	cmp	r3, #12
 8004a44:	d023      	beq.n	8004a8e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a46:	4b09      	ldr	r3, [pc, #36]	@ (8004a6c <HAL_RCC_OscConfig+0x780>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a08      	ldr	r2, [pc, #32]	@ (8004a6c <HAL_RCC_OscConfig+0x780>)
 8004a4c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a52:	f7fd fa87 	bl	8001f64 <HAL_GetTick>
 8004a56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a58:	e00c      	b.n	8004a74 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a5a:	f7fd fa83 	bl	8001f64 <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d905      	bls.n	8004a74 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e013      	b.n	8004a94 <HAL_RCC_OscConfig+0x7a8>
 8004a6c:	40021000 	.word	0x40021000
 8004a70:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a74:	4b09      	ldr	r3, [pc, #36]	@ (8004a9c <HAL_RCC_OscConfig+0x7b0>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1ec      	bne.n	8004a5a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004a80:	4b06      	ldr	r3, [pc, #24]	@ (8004a9c <HAL_RCC_OscConfig+0x7b0>)
 8004a82:	68da      	ldr	r2, [r3, #12]
 8004a84:	4905      	ldr	r1, [pc, #20]	@ (8004a9c <HAL_RCC_OscConfig+0x7b0>)
 8004a86:	4b06      	ldr	r3, [pc, #24]	@ (8004aa0 <HAL_RCC_OscConfig+0x7b4>)
 8004a88:	4013      	ands	r3, r2
 8004a8a:	60cb      	str	r3, [r1, #12]
 8004a8c:	e001      	b.n	8004a92 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e000      	b.n	8004a94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3720      	adds	r7, #32
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	40021000 	.word	0x40021000
 8004aa0:	feeefffc 	.word	0xfeeefffc

08004aa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d101      	bne.n	8004ab8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e0e7      	b.n	8004c88 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ab8:	4b75      	ldr	r3, [pc, #468]	@ (8004c90 <HAL_RCC_ClockConfig+0x1ec>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0307 	and.w	r3, r3, #7
 8004ac0:	683a      	ldr	r2, [r7, #0]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d910      	bls.n	8004ae8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ac6:	4b72      	ldr	r3, [pc, #456]	@ (8004c90 <HAL_RCC_ClockConfig+0x1ec>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f023 0207 	bic.w	r2, r3, #7
 8004ace:	4970      	ldr	r1, [pc, #448]	@ (8004c90 <HAL_RCC_ClockConfig+0x1ec>)
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ad6:	4b6e      	ldr	r3, [pc, #440]	@ (8004c90 <HAL_RCC_ClockConfig+0x1ec>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0307 	and.w	r3, r3, #7
 8004ade:	683a      	ldr	r2, [r7, #0]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d001      	beq.n	8004ae8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e0cf      	b.n	8004c88 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0302 	and.w	r3, r3, #2
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d010      	beq.n	8004b16 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	689a      	ldr	r2, [r3, #8]
 8004af8:	4b66      	ldr	r3, [pc, #408]	@ (8004c94 <HAL_RCC_ClockConfig+0x1f0>)
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d908      	bls.n	8004b16 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b04:	4b63      	ldr	r3, [pc, #396]	@ (8004c94 <HAL_RCC_ClockConfig+0x1f0>)
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	4960      	ldr	r1, [pc, #384]	@ (8004c94 <HAL_RCC_ClockConfig+0x1f0>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d04c      	beq.n	8004bbc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	2b03      	cmp	r3, #3
 8004b28:	d107      	bne.n	8004b3a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b2a:	4b5a      	ldr	r3, [pc, #360]	@ (8004c94 <HAL_RCC_ClockConfig+0x1f0>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d121      	bne.n	8004b7a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e0a6      	b.n	8004c88 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d107      	bne.n	8004b52 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b42:	4b54      	ldr	r3, [pc, #336]	@ (8004c94 <HAL_RCC_ClockConfig+0x1f0>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d115      	bne.n	8004b7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e09a      	b.n	8004c88 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d107      	bne.n	8004b6a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b5a:	4b4e      	ldr	r3, [pc, #312]	@ (8004c94 <HAL_RCC_ClockConfig+0x1f0>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d109      	bne.n	8004b7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e08e      	b.n	8004c88 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b6a:	4b4a      	ldr	r3, [pc, #296]	@ (8004c94 <HAL_RCC_ClockConfig+0x1f0>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d101      	bne.n	8004b7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e086      	b.n	8004c88 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b7a:	4b46      	ldr	r3, [pc, #280]	@ (8004c94 <HAL_RCC_ClockConfig+0x1f0>)
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f023 0203 	bic.w	r2, r3, #3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	4943      	ldr	r1, [pc, #268]	@ (8004c94 <HAL_RCC_ClockConfig+0x1f0>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b8c:	f7fd f9ea 	bl	8001f64 <HAL_GetTick>
 8004b90:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b92:	e00a      	b.n	8004baa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b94:	f7fd f9e6 	bl	8001f64 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d901      	bls.n	8004baa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e06e      	b.n	8004c88 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004baa:	4b3a      	ldr	r3, [pc, #232]	@ (8004c94 <HAL_RCC_ClockConfig+0x1f0>)
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f003 020c 	and.w	r2, r3, #12
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d1eb      	bne.n	8004b94 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0302 	and.w	r3, r3, #2
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d010      	beq.n	8004bea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	689a      	ldr	r2, [r3, #8]
 8004bcc:	4b31      	ldr	r3, [pc, #196]	@ (8004c94 <HAL_RCC_ClockConfig+0x1f0>)
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d208      	bcs.n	8004bea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bd8:	4b2e      	ldr	r3, [pc, #184]	@ (8004c94 <HAL_RCC_ClockConfig+0x1f0>)
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	492b      	ldr	r1, [pc, #172]	@ (8004c94 <HAL_RCC_ClockConfig+0x1f0>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bea:	4b29      	ldr	r3, [pc, #164]	@ (8004c90 <HAL_RCC_ClockConfig+0x1ec>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0307 	and.w	r3, r3, #7
 8004bf2:	683a      	ldr	r2, [r7, #0]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d210      	bcs.n	8004c1a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bf8:	4b25      	ldr	r3, [pc, #148]	@ (8004c90 <HAL_RCC_ClockConfig+0x1ec>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f023 0207 	bic.w	r2, r3, #7
 8004c00:	4923      	ldr	r1, [pc, #140]	@ (8004c90 <HAL_RCC_ClockConfig+0x1ec>)
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c08:	4b21      	ldr	r3, [pc, #132]	@ (8004c90 <HAL_RCC_ClockConfig+0x1ec>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0307 	and.w	r3, r3, #7
 8004c10:	683a      	ldr	r2, [r7, #0]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d001      	beq.n	8004c1a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e036      	b.n	8004c88 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0304 	and.w	r3, r3, #4
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d008      	beq.n	8004c38 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c26:	4b1b      	ldr	r3, [pc, #108]	@ (8004c94 <HAL_RCC_ClockConfig+0x1f0>)
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	4918      	ldr	r1, [pc, #96]	@ (8004c94 <HAL_RCC_ClockConfig+0x1f0>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0308 	and.w	r3, r3, #8
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d009      	beq.n	8004c58 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c44:	4b13      	ldr	r3, [pc, #76]	@ (8004c94 <HAL_RCC_ClockConfig+0x1f0>)
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	00db      	lsls	r3, r3, #3
 8004c52:	4910      	ldr	r1, [pc, #64]	@ (8004c94 <HAL_RCC_ClockConfig+0x1f0>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c58:	f000 f824 	bl	8004ca4 <HAL_RCC_GetSysClockFreq>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8004c94 <HAL_RCC_ClockConfig+0x1f0>)
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	091b      	lsrs	r3, r3, #4
 8004c64:	f003 030f 	and.w	r3, r3, #15
 8004c68:	490b      	ldr	r1, [pc, #44]	@ (8004c98 <HAL_RCC_ClockConfig+0x1f4>)
 8004c6a:	5ccb      	ldrb	r3, [r1, r3]
 8004c6c:	f003 031f 	and.w	r3, r3, #31
 8004c70:	fa22 f303 	lsr.w	r3, r2, r3
 8004c74:	4a09      	ldr	r2, [pc, #36]	@ (8004c9c <HAL_RCC_ClockConfig+0x1f8>)
 8004c76:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004c78:	4b09      	ldr	r3, [pc, #36]	@ (8004ca0 <HAL_RCC_ClockConfig+0x1fc>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f7fd f921 	bl	8001ec4 <HAL_InitTick>
 8004c82:	4603      	mov	r3, r0
 8004c84:	72fb      	strb	r3, [r7, #11]

  return status;
 8004c86:	7afb      	ldrb	r3, [r7, #11]
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	40022000 	.word	0x40022000
 8004c94:	40021000 	.word	0x40021000
 8004c98:	0800a1c0 	.word	0x0800a1c0
 8004c9c:	20000004 	.word	0x20000004
 8004ca0:	20000008 	.word	0x20000008

08004ca4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b089      	sub	sp, #36	@ 0x24
 8004ca8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004caa:	2300      	movs	r3, #0
 8004cac:	61fb      	str	r3, [r7, #28]
 8004cae:	2300      	movs	r3, #0
 8004cb0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cb2:	4b3e      	ldr	r3, [pc, #248]	@ (8004dac <HAL_RCC_GetSysClockFreq+0x108>)
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f003 030c 	and.w	r3, r3, #12
 8004cba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cbc:	4b3b      	ldr	r3, [pc, #236]	@ (8004dac <HAL_RCC_GetSysClockFreq+0x108>)
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	f003 0303 	and.w	r3, r3, #3
 8004cc4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d005      	beq.n	8004cd8 <HAL_RCC_GetSysClockFreq+0x34>
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	2b0c      	cmp	r3, #12
 8004cd0:	d121      	bne.n	8004d16 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d11e      	bne.n	8004d16 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004cd8:	4b34      	ldr	r3, [pc, #208]	@ (8004dac <HAL_RCC_GetSysClockFreq+0x108>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0308 	and.w	r3, r3, #8
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d107      	bne.n	8004cf4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004ce4:	4b31      	ldr	r3, [pc, #196]	@ (8004dac <HAL_RCC_GetSysClockFreq+0x108>)
 8004ce6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cea:	0a1b      	lsrs	r3, r3, #8
 8004cec:	f003 030f 	and.w	r3, r3, #15
 8004cf0:	61fb      	str	r3, [r7, #28]
 8004cf2:	e005      	b.n	8004d00 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004cf4:	4b2d      	ldr	r3, [pc, #180]	@ (8004dac <HAL_RCC_GetSysClockFreq+0x108>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	091b      	lsrs	r3, r3, #4
 8004cfa:	f003 030f 	and.w	r3, r3, #15
 8004cfe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004d00:	4a2b      	ldr	r2, [pc, #172]	@ (8004db0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d08:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d10d      	bne.n	8004d2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d14:	e00a      	b.n	8004d2c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	2b04      	cmp	r3, #4
 8004d1a:	d102      	bne.n	8004d22 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d1c:	4b25      	ldr	r3, [pc, #148]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d1e:	61bb      	str	r3, [r7, #24]
 8004d20:	e004      	b.n	8004d2c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	2b08      	cmp	r3, #8
 8004d26:	d101      	bne.n	8004d2c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d28:	4b23      	ldr	r3, [pc, #140]	@ (8004db8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004d2a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	2b0c      	cmp	r3, #12
 8004d30:	d134      	bne.n	8004d9c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d32:	4b1e      	ldr	r3, [pc, #120]	@ (8004dac <HAL_RCC_GetSysClockFreq+0x108>)
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	f003 0303 	and.w	r3, r3, #3
 8004d3a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d003      	beq.n	8004d4a <HAL_RCC_GetSysClockFreq+0xa6>
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	2b03      	cmp	r3, #3
 8004d46:	d003      	beq.n	8004d50 <HAL_RCC_GetSysClockFreq+0xac>
 8004d48:	e005      	b.n	8004d56 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004d4a:	4b1a      	ldr	r3, [pc, #104]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d4c:	617b      	str	r3, [r7, #20]
      break;
 8004d4e:	e005      	b.n	8004d5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004d50:	4b19      	ldr	r3, [pc, #100]	@ (8004db8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004d52:	617b      	str	r3, [r7, #20]
      break;
 8004d54:	e002      	b.n	8004d5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	617b      	str	r3, [r7, #20]
      break;
 8004d5a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d5c:	4b13      	ldr	r3, [pc, #76]	@ (8004dac <HAL_RCC_GetSysClockFreq+0x108>)
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	091b      	lsrs	r3, r3, #4
 8004d62:	f003 0307 	and.w	r3, r3, #7
 8004d66:	3301      	adds	r3, #1
 8004d68:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004d6a:	4b10      	ldr	r3, [pc, #64]	@ (8004dac <HAL_RCC_GetSysClockFreq+0x108>)
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	0a1b      	lsrs	r3, r3, #8
 8004d70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d74:	697a      	ldr	r2, [r7, #20]
 8004d76:	fb03 f202 	mul.w	r2, r3, r2
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d80:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d82:	4b0a      	ldr	r3, [pc, #40]	@ (8004dac <HAL_RCC_GetSysClockFreq+0x108>)
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	0e5b      	lsrs	r3, r3, #25
 8004d88:	f003 0303 	and.w	r3, r3, #3
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	005b      	lsls	r3, r3, #1
 8004d90:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004d92:	697a      	ldr	r2, [r7, #20]
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d9a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004d9c:	69bb      	ldr	r3, [r7, #24]
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3724      	adds	r7, #36	@ 0x24
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	40021000 	.word	0x40021000
 8004db0:	0800a1d0 	.word	0x0800a1d0
 8004db4:	00f42400 	.word	0x00f42400
 8004db8:	007a1200 	.word	0x007a1200

08004dbc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b086      	sub	sp, #24
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004dc8:	4b2a      	ldr	r3, [pc, #168]	@ (8004e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d003      	beq.n	8004ddc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004dd4:	f7ff fa26 	bl	8004224 <HAL_PWREx_GetVoltageRange>
 8004dd8:	6178      	str	r0, [r7, #20]
 8004dda:	e014      	b.n	8004e06 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ddc:	4b25      	ldr	r3, [pc, #148]	@ (8004e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004de0:	4a24      	ldr	r2, [pc, #144]	@ (8004e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004de2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004de6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004de8:	4b22      	ldr	r3, [pc, #136]	@ (8004e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004df0:	60fb      	str	r3, [r7, #12]
 8004df2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004df4:	f7ff fa16 	bl	8004224 <HAL_PWREx_GetVoltageRange>
 8004df8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004dfa:	4b1e      	ldr	r3, [pc, #120]	@ (8004e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dfe:	4a1d      	ldr	r2, [pc, #116]	@ (8004e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e04:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e0c:	d10b      	bne.n	8004e26 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2b80      	cmp	r3, #128	@ 0x80
 8004e12:	d919      	bls.n	8004e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2ba0      	cmp	r3, #160	@ 0xa0
 8004e18:	d902      	bls.n	8004e20 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e1a:	2302      	movs	r3, #2
 8004e1c:	613b      	str	r3, [r7, #16]
 8004e1e:	e013      	b.n	8004e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e20:	2301      	movs	r3, #1
 8004e22:	613b      	str	r3, [r7, #16]
 8004e24:	e010      	b.n	8004e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2b80      	cmp	r3, #128	@ 0x80
 8004e2a:	d902      	bls.n	8004e32 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	613b      	str	r3, [r7, #16]
 8004e30:	e00a      	b.n	8004e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2b80      	cmp	r3, #128	@ 0x80
 8004e36:	d102      	bne.n	8004e3e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e38:	2302      	movs	r3, #2
 8004e3a:	613b      	str	r3, [r7, #16]
 8004e3c:	e004      	b.n	8004e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2b70      	cmp	r3, #112	@ 0x70
 8004e42:	d101      	bne.n	8004e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e44:	2301      	movs	r3, #1
 8004e46:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004e48:	4b0b      	ldr	r3, [pc, #44]	@ (8004e78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f023 0207 	bic.w	r2, r3, #7
 8004e50:	4909      	ldr	r1, [pc, #36]	@ (8004e78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004e58:	4b07      	ldr	r3, [pc, #28]	@ (8004e78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0307 	and.w	r3, r3, #7
 8004e60:	693a      	ldr	r2, [r7, #16]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d001      	beq.n	8004e6a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e000      	b.n	8004e6c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3718      	adds	r7, #24
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	40021000 	.word	0x40021000
 8004e78:	40022000 	.word	0x40022000

08004e7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b086      	sub	sp, #24
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e84:	2300      	movs	r3, #0
 8004e86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e88:	2300      	movs	r3, #0
 8004e8a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d041      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e9c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004ea0:	d02a      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004ea2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004ea6:	d824      	bhi.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004ea8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004eac:	d008      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004eae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004eb2:	d81e      	bhi.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d00a      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004eb8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ebc:	d010      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004ebe:	e018      	b.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ec0:	4b86      	ldr	r3, [pc, #536]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	4a85      	ldr	r2, [pc, #532]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ec6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004eca:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ecc:	e015      	b.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	3304      	adds	r3, #4
 8004ed2:	2100      	movs	r1, #0
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f000 fabb 	bl	8005450 <RCCEx_PLLSAI1_Config>
 8004eda:	4603      	mov	r3, r0
 8004edc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ede:	e00c      	b.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	3320      	adds	r3, #32
 8004ee4:	2100      	movs	r1, #0
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f000 fba6 	bl	8005638 <RCCEx_PLLSAI2_Config>
 8004eec:	4603      	mov	r3, r0
 8004eee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ef0:	e003      	b.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	74fb      	strb	r3, [r7, #19]
      break;
 8004ef6:	e000      	b.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004ef8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004efa:	7cfb      	ldrb	r3, [r7, #19]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d10b      	bne.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f00:	4b76      	ldr	r3, [pc, #472]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f06:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f0e:	4973      	ldr	r1, [pc, #460]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f10:	4313      	orrs	r3, r2
 8004f12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004f16:	e001      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f18:	7cfb      	ldrb	r3, [r7, #19]
 8004f1a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d041      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f2c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004f30:	d02a      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004f32:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004f36:	d824      	bhi.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004f38:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f3c:	d008      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004f3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f42:	d81e      	bhi.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00a      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004f48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f4c:	d010      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004f4e:	e018      	b.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f50:	4b62      	ldr	r3, [pc, #392]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	4a61      	ldr	r2, [pc, #388]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f5a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f5c:	e015      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	3304      	adds	r3, #4
 8004f62:	2100      	movs	r1, #0
 8004f64:	4618      	mov	r0, r3
 8004f66:	f000 fa73 	bl	8005450 <RCCEx_PLLSAI1_Config>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f6e:	e00c      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	3320      	adds	r3, #32
 8004f74:	2100      	movs	r1, #0
 8004f76:	4618      	mov	r0, r3
 8004f78:	f000 fb5e 	bl	8005638 <RCCEx_PLLSAI2_Config>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f80:	e003      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	74fb      	strb	r3, [r7, #19]
      break;
 8004f86:	e000      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004f88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f8a:	7cfb      	ldrb	r3, [r7, #19]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d10b      	bne.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004f90:	4b52      	ldr	r3, [pc, #328]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f96:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f9e:	494f      	ldr	r1, [pc, #316]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004fa6:	e001      	b.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fa8:	7cfb      	ldrb	r3, [r7, #19]
 8004faa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	f000 80a0 	beq.w	80050fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004fbe:	4b47      	ldr	r3, [pc, #284]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d101      	bne.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e000      	b.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004fce:	2300      	movs	r3, #0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00d      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fd4:	4b41      	ldr	r3, [pc, #260]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fd8:	4a40      	ldr	r2, [pc, #256]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fde:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fe0:	4b3e      	ldr	r3, [pc, #248]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fe2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fe4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fe8:	60bb      	str	r3, [r7, #8]
 8004fea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fec:	2301      	movs	r3, #1
 8004fee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ff0:	4b3b      	ldr	r3, [pc, #236]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a3a      	ldr	r2, [pc, #232]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ff6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ffa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ffc:	f7fc ffb2 	bl	8001f64 <HAL_GetTick>
 8005000:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005002:	e009      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005004:	f7fc ffae 	bl	8001f64 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	2b02      	cmp	r3, #2
 8005010:	d902      	bls.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	74fb      	strb	r3, [r7, #19]
        break;
 8005016:	e005      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005018:	4b31      	ldr	r3, [pc, #196]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005020:	2b00      	cmp	r3, #0
 8005022:	d0ef      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005024:	7cfb      	ldrb	r3, [r7, #19]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d15c      	bne.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800502a:	4b2c      	ldr	r3, [pc, #176]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800502c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005030:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005034:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d01f      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005042:	697a      	ldr	r2, [r7, #20]
 8005044:	429a      	cmp	r2, r3
 8005046:	d019      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005048:	4b24      	ldr	r3, [pc, #144]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800504a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800504e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005052:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005054:	4b21      	ldr	r3, [pc, #132]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005056:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800505a:	4a20      	ldr	r2, [pc, #128]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800505c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005060:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005064:	4b1d      	ldr	r3, [pc, #116]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005066:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800506a:	4a1c      	ldr	r2, [pc, #112]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800506c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005070:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005074:	4a19      	ldr	r2, [pc, #100]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	f003 0301 	and.w	r3, r3, #1
 8005082:	2b00      	cmp	r3, #0
 8005084:	d016      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005086:	f7fc ff6d 	bl	8001f64 <HAL_GetTick>
 800508a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800508c:	e00b      	b.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800508e:	f7fc ff69 	bl	8001f64 <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	f241 3288 	movw	r2, #5000	@ 0x1388
 800509c:	4293      	cmp	r3, r2
 800509e:	d902      	bls.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	74fb      	strb	r3, [r7, #19]
            break;
 80050a4:	e006      	b.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050a6:	4b0d      	ldr	r3, [pc, #52]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050ac:	f003 0302 	and.w	r3, r3, #2
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d0ec      	beq.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80050b4:	7cfb      	ldrb	r3, [r7, #19]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10c      	bne.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050ba:	4b08      	ldr	r3, [pc, #32]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050ca:	4904      	ldr	r1, [pc, #16]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80050d2:	e009      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050d4:	7cfb      	ldrb	r3, [r7, #19]
 80050d6:	74bb      	strb	r3, [r7, #18]
 80050d8:	e006      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80050da:	bf00      	nop
 80050dc:	40021000 	.word	0x40021000
 80050e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050e4:	7cfb      	ldrb	r3, [r7, #19]
 80050e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050e8:	7c7b      	ldrb	r3, [r7, #17]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d105      	bne.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050ee:	4b9e      	ldr	r3, [pc, #632]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050f2:	4a9d      	ldr	r2, [pc, #628]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050f8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0301 	and.w	r3, r3, #1
 8005102:	2b00      	cmp	r3, #0
 8005104:	d00a      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005106:	4b98      	ldr	r3, [pc, #608]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005108:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800510c:	f023 0203 	bic.w	r2, r3, #3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005114:	4994      	ldr	r1, [pc, #592]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005116:	4313      	orrs	r3, r2
 8005118:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0302 	and.w	r3, r3, #2
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00a      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005128:	4b8f      	ldr	r3, [pc, #572]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800512a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800512e:	f023 020c 	bic.w	r2, r3, #12
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005136:	498c      	ldr	r1, [pc, #560]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005138:	4313      	orrs	r3, r2
 800513a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0304 	and.w	r3, r3, #4
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00a      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800514a:	4b87      	ldr	r3, [pc, #540]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800514c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005150:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005158:	4983      	ldr	r1, [pc, #524]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800515a:	4313      	orrs	r3, r2
 800515c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0308 	and.w	r3, r3, #8
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00a      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800516c:	4b7e      	ldr	r3, [pc, #504]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800516e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005172:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800517a:	497b      	ldr	r1, [pc, #492]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800517c:	4313      	orrs	r3, r2
 800517e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0310 	and.w	r3, r3, #16
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00a      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800518e:	4b76      	ldr	r3, [pc, #472]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005190:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005194:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800519c:	4972      	ldr	r1, [pc, #456]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0320 	and.w	r3, r3, #32
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00a      	beq.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80051b0:	4b6d      	ldr	r3, [pc, #436]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051b6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051be:	496a      	ldr	r1, [pc, #424]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00a      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051d2:	4b65      	ldr	r3, [pc, #404]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051d8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051e0:	4961      	ldr	r1, [pc, #388]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00a      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80051f4:	4b5c      	ldr	r3, [pc, #368]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005202:	4959      	ldr	r1, [pc, #356]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005204:	4313      	orrs	r3, r2
 8005206:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00a      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005216:	4b54      	ldr	r3, [pc, #336]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005218:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800521c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005224:	4950      	ldr	r1, [pc, #320]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005226:	4313      	orrs	r3, r2
 8005228:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005234:	2b00      	cmp	r3, #0
 8005236:	d00a      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005238:	4b4b      	ldr	r3, [pc, #300]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800523a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800523e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005246:	4948      	ldr	r1, [pc, #288]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005248:	4313      	orrs	r3, r2
 800524a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00a      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800525a:	4b43      	ldr	r3, [pc, #268]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800525c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005260:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005268:	493f      	ldr	r1, [pc, #252]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800526a:	4313      	orrs	r3, r2
 800526c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d028      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800527c:	4b3a      	ldr	r3, [pc, #232]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800527e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005282:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800528a:	4937      	ldr	r1, [pc, #220]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800528c:	4313      	orrs	r3, r2
 800528e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005296:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800529a:	d106      	bne.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800529c:	4b32      	ldr	r3, [pc, #200]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	4a31      	ldr	r2, [pc, #196]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052a6:	60d3      	str	r3, [r2, #12]
 80052a8:	e011      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80052b2:	d10c      	bne.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	3304      	adds	r3, #4
 80052b8:	2101      	movs	r1, #1
 80052ba:	4618      	mov	r0, r3
 80052bc:	f000 f8c8 	bl	8005450 <RCCEx_PLLSAI1_Config>
 80052c0:	4603      	mov	r3, r0
 80052c2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80052c4:	7cfb      	ldrb	r3, [r7, #19]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d001      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80052ca:	7cfb      	ldrb	r3, [r7, #19]
 80052cc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d028      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80052da:	4b23      	ldr	r3, [pc, #140]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052e0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052e8:	491f      	ldr	r1, [pc, #124]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80052f8:	d106      	bne.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052fa:	4b1b      	ldr	r3, [pc, #108]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	4a1a      	ldr	r2, [pc, #104]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005300:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005304:	60d3      	str	r3, [r2, #12]
 8005306:	e011      	b.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800530c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005310:	d10c      	bne.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	3304      	adds	r3, #4
 8005316:	2101      	movs	r1, #1
 8005318:	4618      	mov	r0, r3
 800531a:	f000 f899 	bl	8005450 <RCCEx_PLLSAI1_Config>
 800531e:	4603      	mov	r3, r0
 8005320:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005322:	7cfb      	ldrb	r3, [r7, #19]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d001      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005328:	7cfb      	ldrb	r3, [r7, #19]
 800532a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d02b      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005338:	4b0b      	ldr	r3, [pc, #44]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800533a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800533e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005346:	4908      	ldr	r1, [pc, #32]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005348:	4313      	orrs	r3, r2
 800534a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005352:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005356:	d109      	bne.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005358:	4b03      	ldr	r3, [pc, #12]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	4a02      	ldr	r2, [pc, #8]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800535e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005362:	60d3      	str	r3, [r2, #12]
 8005364:	e014      	b.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005366:	bf00      	nop
 8005368:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005370:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005374:	d10c      	bne.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	3304      	adds	r3, #4
 800537a:	2101      	movs	r1, #1
 800537c:	4618      	mov	r0, r3
 800537e:	f000 f867 	bl	8005450 <RCCEx_PLLSAI1_Config>
 8005382:	4603      	mov	r3, r0
 8005384:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005386:	7cfb      	ldrb	r3, [r7, #19]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d001      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800538c:	7cfb      	ldrb	r3, [r7, #19]
 800538e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d02f      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800539c:	4b2b      	ldr	r3, [pc, #172]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800539e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053a2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80053aa:	4928      	ldr	r1, [pc, #160]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053ac:	4313      	orrs	r3, r2
 80053ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80053b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053ba:	d10d      	bne.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	3304      	adds	r3, #4
 80053c0:	2102      	movs	r1, #2
 80053c2:	4618      	mov	r0, r3
 80053c4:	f000 f844 	bl	8005450 <RCCEx_PLLSAI1_Config>
 80053c8:	4603      	mov	r3, r0
 80053ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053cc:	7cfb      	ldrb	r3, [r7, #19]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d014      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80053d2:	7cfb      	ldrb	r3, [r7, #19]
 80053d4:	74bb      	strb	r3, [r7, #18]
 80053d6:	e011      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80053dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053e0:	d10c      	bne.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	3320      	adds	r3, #32
 80053e6:	2102      	movs	r1, #2
 80053e8:	4618      	mov	r0, r3
 80053ea:	f000 f925 	bl	8005638 <RCCEx_PLLSAI2_Config>
 80053ee:	4603      	mov	r3, r0
 80053f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053f2:	7cfb      	ldrb	r3, [r7, #19]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d001      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80053f8:	7cfb      	ldrb	r3, [r7, #19]
 80053fa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d00a      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005408:	4b10      	ldr	r3, [pc, #64]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800540a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800540e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005416:	490d      	ldr	r1, [pc, #52]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005418:	4313      	orrs	r3, r2
 800541a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00b      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800542a:	4b08      	ldr	r3, [pc, #32]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800542c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005430:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800543a:	4904      	ldr	r1, [pc, #16]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800543c:	4313      	orrs	r3, r2
 800543e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005442:	7cbb      	ldrb	r3, [r7, #18]
}
 8005444:	4618      	mov	r0, r3
 8005446:	3718      	adds	r7, #24
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	40021000 	.word	0x40021000

08005450 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800545a:	2300      	movs	r3, #0
 800545c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800545e:	4b75      	ldr	r3, [pc, #468]	@ (8005634 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	f003 0303 	and.w	r3, r3, #3
 8005466:	2b00      	cmp	r3, #0
 8005468:	d018      	beq.n	800549c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800546a:	4b72      	ldr	r3, [pc, #456]	@ (8005634 <RCCEx_PLLSAI1_Config+0x1e4>)
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	f003 0203 	and.w	r2, r3, #3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	429a      	cmp	r2, r3
 8005478:	d10d      	bne.n	8005496 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
       ||
 800547e:	2b00      	cmp	r3, #0
 8005480:	d009      	beq.n	8005496 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005482:	4b6c      	ldr	r3, [pc, #432]	@ (8005634 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	091b      	lsrs	r3, r3, #4
 8005488:	f003 0307 	and.w	r3, r3, #7
 800548c:	1c5a      	adds	r2, r3, #1
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	685b      	ldr	r3, [r3, #4]
       ||
 8005492:	429a      	cmp	r2, r3
 8005494:	d047      	beq.n	8005526 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	73fb      	strb	r3, [r7, #15]
 800549a:	e044      	b.n	8005526 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2b03      	cmp	r3, #3
 80054a2:	d018      	beq.n	80054d6 <RCCEx_PLLSAI1_Config+0x86>
 80054a4:	2b03      	cmp	r3, #3
 80054a6:	d825      	bhi.n	80054f4 <RCCEx_PLLSAI1_Config+0xa4>
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d002      	beq.n	80054b2 <RCCEx_PLLSAI1_Config+0x62>
 80054ac:	2b02      	cmp	r3, #2
 80054ae:	d009      	beq.n	80054c4 <RCCEx_PLLSAI1_Config+0x74>
 80054b0:	e020      	b.n	80054f4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80054b2:	4b60      	ldr	r3, [pc, #384]	@ (8005634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0302 	and.w	r3, r3, #2
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d11d      	bne.n	80054fa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054c2:	e01a      	b.n	80054fa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80054c4:	4b5b      	ldr	r3, [pc, #364]	@ (8005634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d116      	bne.n	80054fe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054d4:	e013      	b.n	80054fe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80054d6:	4b57      	ldr	r3, [pc, #348]	@ (8005634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10f      	bne.n	8005502 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80054e2:	4b54      	ldr	r3, [pc, #336]	@ (8005634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d109      	bne.n	8005502 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80054f2:	e006      	b.n	8005502 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	73fb      	strb	r3, [r7, #15]
      break;
 80054f8:	e004      	b.n	8005504 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80054fa:	bf00      	nop
 80054fc:	e002      	b.n	8005504 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80054fe:	bf00      	nop
 8005500:	e000      	b.n	8005504 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005502:	bf00      	nop
    }

    if(status == HAL_OK)
 8005504:	7bfb      	ldrb	r3, [r7, #15]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d10d      	bne.n	8005526 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800550a:	4b4a      	ldr	r3, [pc, #296]	@ (8005634 <RCCEx_PLLSAI1_Config+0x1e4>)
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6819      	ldr	r1, [r3, #0]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	3b01      	subs	r3, #1
 800551c:	011b      	lsls	r3, r3, #4
 800551e:	430b      	orrs	r3, r1
 8005520:	4944      	ldr	r1, [pc, #272]	@ (8005634 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005522:	4313      	orrs	r3, r2
 8005524:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005526:	7bfb      	ldrb	r3, [r7, #15]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d17d      	bne.n	8005628 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800552c:	4b41      	ldr	r3, [pc, #260]	@ (8005634 <RCCEx_PLLSAI1_Config+0x1e4>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a40      	ldr	r2, [pc, #256]	@ (8005634 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005532:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005536:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005538:	f7fc fd14 	bl	8001f64 <HAL_GetTick>
 800553c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800553e:	e009      	b.n	8005554 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005540:	f7fc fd10 	bl	8001f64 <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	2b02      	cmp	r3, #2
 800554c:	d902      	bls.n	8005554 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	73fb      	strb	r3, [r7, #15]
        break;
 8005552:	e005      	b.n	8005560 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005554:	4b37      	ldr	r3, [pc, #220]	@ (8005634 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800555c:	2b00      	cmp	r3, #0
 800555e:	d1ef      	bne.n	8005540 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005560:	7bfb      	ldrb	r3, [r7, #15]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d160      	bne.n	8005628 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d111      	bne.n	8005590 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800556c:	4b31      	ldr	r3, [pc, #196]	@ (8005634 <RCCEx_PLLSAI1_Config+0x1e4>)
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005574:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	6892      	ldr	r2, [r2, #8]
 800557c:	0211      	lsls	r1, r2, #8
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	68d2      	ldr	r2, [r2, #12]
 8005582:	0912      	lsrs	r2, r2, #4
 8005584:	0452      	lsls	r2, r2, #17
 8005586:	430a      	orrs	r2, r1
 8005588:	492a      	ldr	r1, [pc, #168]	@ (8005634 <RCCEx_PLLSAI1_Config+0x1e4>)
 800558a:	4313      	orrs	r3, r2
 800558c:	610b      	str	r3, [r1, #16]
 800558e:	e027      	b.n	80055e0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	2b01      	cmp	r3, #1
 8005594:	d112      	bne.n	80055bc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005596:	4b27      	ldr	r3, [pc, #156]	@ (8005634 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800559e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	6892      	ldr	r2, [r2, #8]
 80055a6:	0211      	lsls	r1, r2, #8
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	6912      	ldr	r2, [r2, #16]
 80055ac:	0852      	lsrs	r2, r2, #1
 80055ae:	3a01      	subs	r2, #1
 80055b0:	0552      	lsls	r2, r2, #21
 80055b2:	430a      	orrs	r2, r1
 80055b4:	491f      	ldr	r1, [pc, #124]	@ (8005634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	610b      	str	r3, [r1, #16]
 80055ba:	e011      	b.n	80055e0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055bc:	4b1d      	ldr	r3, [pc, #116]	@ (8005634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80055c4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	6892      	ldr	r2, [r2, #8]
 80055cc:	0211      	lsls	r1, r2, #8
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	6952      	ldr	r2, [r2, #20]
 80055d2:	0852      	lsrs	r2, r2, #1
 80055d4:	3a01      	subs	r2, #1
 80055d6:	0652      	lsls	r2, r2, #25
 80055d8:	430a      	orrs	r2, r1
 80055da:	4916      	ldr	r1, [pc, #88]	@ (8005634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80055e0:	4b14      	ldr	r3, [pc, #80]	@ (8005634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a13      	ldr	r2, [pc, #76]	@ (8005634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055e6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80055ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055ec:	f7fc fcba 	bl	8001f64 <HAL_GetTick>
 80055f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80055f2:	e009      	b.n	8005608 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80055f4:	f7fc fcb6 	bl	8001f64 <HAL_GetTick>
 80055f8:	4602      	mov	r2, r0
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	2b02      	cmp	r3, #2
 8005600:	d902      	bls.n	8005608 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	73fb      	strb	r3, [r7, #15]
          break;
 8005606:	e005      	b.n	8005614 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005608:	4b0a      	ldr	r3, [pc, #40]	@ (8005634 <RCCEx_PLLSAI1_Config+0x1e4>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005610:	2b00      	cmp	r3, #0
 8005612:	d0ef      	beq.n	80055f4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005614:	7bfb      	ldrb	r3, [r7, #15]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d106      	bne.n	8005628 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800561a:	4b06      	ldr	r3, [pc, #24]	@ (8005634 <RCCEx_PLLSAI1_Config+0x1e4>)
 800561c:	691a      	ldr	r2, [r3, #16]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	4904      	ldr	r1, [pc, #16]	@ (8005634 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005624:	4313      	orrs	r3, r2
 8005626:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005628:	7bfb      	ldrb	r3, [r7, #15]
}
 800562a:	4618      	mov	r0, r3
 800562c:	3710      	adds	r7, #16
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	40021000 	.word	0x40021000

08005638 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005642:	2300      	movs	r3, #0
 8005644:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005646:	4b6a      	ldr	r3, [pc, #424]	@ (80057f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	f003 0303 	and.w	r3, r3, #3
 800564e:	2b00      	cmp	r3, #0
 8005650:	d018      	beq.n	8005684 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005652:	4b67      	ldr	r3, [pc, #412]	@ (80057f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	f003 0203 	and.w	r2, r3, #3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	429a      	cmp	r2, r3
 8005660:	d10d      	bne.n	800567e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
       ||
 8005666:	2b00      	cmp	r3, #0
 8005668:	d009      	beq.n	800567e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800566a:	4b61      	ldr	r3, [pc, #388]	@ (80057f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	091b      	lsrs	r3, r3, #4
 8005670:	f003 0307 	and.w	r3, r3, #7
 8005674:	1c5a      	adds	r2, r3, #1
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	685b      	ldr	r3, [r3, #4]
       ||
 800567a:	429a      	cmp	r2, r3
 800567c:	d047      	beq.n	800570e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	73fb      	strb	r3, [r7, #15]
 8005682:	e044      	b.n	800570e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2b03      	cmp	r3, #3
 800568a:	d018      	beq.n	80056be <RCCEx_PLLSAI2_Config+0x86>
 800568c:	2b03      	cmp	r3, #3
 800568e:	d825      	bhi.n	80056dc <RCCEx_PLLSAI2_Config+0xa4>
 8005690:	2b01      	cmp	r3, #1
 8005692:	d002      	beq.n	800569a <RCCEx_PLLSAI2_Config+0x62>
 8005694:	2b02      	cmp	r3, #2
 8005696:	d009      	beq.n	80056ac <RCCEx_PLLSAI2_Config+0x74>
 8005698:	e020      	b.n	80056dc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800569a:	4b55      	ldr	r3, [pc, #340]	@ (80057f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0302 	and.w	r3, r3, #2
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d11d      	bne.n	80056e2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056aa:	e01a      	b.n	80056e2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80056ac:	4b50      	ldr	r3, [pc, #320]	@ (80057f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d116      	bne.n	80056e6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056bc:	e013      	b.n	80056e6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80056be:	4b4c      	ldr	r3, [pc, #304]	@ (80057f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d10f      	bne.n	80056ea <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80056ca:	4b49      	ldr	r3, [pc, #292]	@ (80057f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d109      	bne.n	80056ea <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80056da:	e006      	b.n	80056ea <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	73fb      	strb	r3, [r7, #15]
      break;
 80056e0:	e004      	b.n	80056ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80056e2:	bf00      	nop
 80056e4:	e002      	b.n	80056ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80056e6:	bf00      	nop
 80056e8:	e000      	b.n	80056ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80056ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80056ec:	7bfb      	ldrb	r3, [r7, #15]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d10d      	bne.n	800570e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80056f2:	4b3f      	ldr	r3, [pc, #252]	@ (80057f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6819      	ldr	r1, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	3b01      	subs	r3, #1
 8005704:	011b      	lsls	r3, r3, #4
 8005706:	430b      	orrs	r3, r1
 8005708:	4939      	ldr	r1, [pc, #228]	@ (80057f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800570a:	4313      	orrs	r3, r2
 800570c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800570e:	7bfb      	ldrb	r3, [r7, #15]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d167      	bne.n	80057e4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005714:	4b36      	ldr	r3, [pc, #216]	@ (80057f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a35      	ldr	r2, [pc, #212]	@ (80057f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800571a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800571e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005720:	f7fc fc20 	bl	8001f64 <HAL_GetTick>
 8005724:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005726:	e009      	b.n	800573c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005728:	f7fc fc1c 	bl	8001f64 <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	2b02      	cmp	r3, #2
 8005734:	d902      	bls.n	800573c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	73fb      	strb	r3, [r7, #15]
        break;
 800573a:	e005      	b.n	8005748 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800573c:	4b2c      	ldr	r3, [pc, #176]	@ (80057f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005744:	2b00      	cmp	r3, #0
 8005746:	d1ef      	bne.n	8005728 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005748:	7bfb      	ldrb	r3, [r7, #15]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d14a      	bne.n	80057e4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d111      	bne.n	8005778 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005754:	4b26      	ldr	r3, [pc, #152]	@ (80057f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005756:	695b      	ldr	r3, [r3, #20]
 8005758:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800575c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	6892      	ldr	r2, [r2, #8]
 8005764:	0211      	lsls	r1, r2, #8
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	68d2      	ldr	r2, [r2, #12]
 800576a:	0912      	lsrs	r2, r2, #4
 800576c:	0452      	lsls	r2, r2, #17
 800576e:	430a      	orrs	r2, r1
 8005770:	491f      	ldr	r1, [pc, #124]	@ (80057f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005772:	4313      	orrs	r3, r2
 8005774:	614b      	str	r3, [r1, #20]
 8005776:	e011      	b.n	800579c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005778:	4b1d      	ldr	r3, [pc, #116]	@ (80057f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800577a:	695b      	ldr	r3, [r3, #20]
 800577c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005780:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	6892      	ldr	r2, [r2, #8]
 8005788:	0211      	lsls	r1, r2, #8
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	6912      	ldr	r2, [r2, #16]
 800578e:	0852      	lsrs	r2, r2, #1
 8005790:	3a01      	subs	r2, #1
 8005792:	0652      	lsls	r2, r2, #25
 8005794:	430a      	orrs	r2, r1
 8005796:	4916      	ldr	r1, [pc, #88]	@ (80057f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005798:	4313      	orrs	r3, r2
 800579a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800579c:	4b14      	ldr	r3, [pc, #80]	@ (80057f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a13      	ldr	r2, [pc, #76]	@ (80057f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057a8:	f7fc fbdc 	bl	8001f64 <HAL_GetTick>
 80057ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80057ae:	e009      	b.n	80057c4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80057b0:	f7fc fbd8 	bl	8001f64 <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d902      	bls.n	80057c4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	73fb      	strb	r3, [r7, #15]
          break;
 80057c2:	e005      	b.n	80057d0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80057c4:	4b0a      	ldr	r3, [pc, #40]	@ (80057f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d0ef      	beq.n	80057b0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80057d0:	7bfb      	ldrb	r3, [r7, #15]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d106      	bne.n	80057e4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80057d6:	4b06      	ldr	r3, [pc, #24]	@ (80057f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057d8:	695a      	ldr	r2, [r3, #20]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	695b      	ldr	r3, [r3, #20]
 80057de:	4904      	ldr	r1, [pc, #16]	@ (80057f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057e0:	4313      	orrs	r3, r2
 80057e2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80057e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3710      	adds	r7, #16
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	40021000 	.word	0x40021000

080057f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d101      	bne.n	8005806 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e095      	b.n	8005932 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800580a:	2b00      	cmp	r3, #0
 800580c:	d108      	bne.n	8005820 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005816:	d009      	beq.n	800582c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	61da      	str	r2, [r3, #28]
 800581e:	e005      	b.n	800582c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005838:	b2db      	uxtb	r3, r3
 800583a:	2b00      	cmp	r3, #0
 800583c:	d106      	bne.n	800584c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f7fc f950 	bl	8001aec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2202      	movs	r2, #2
 8005850:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005862:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800586c:	d902      	bls.n	8005874 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800586e:	2300      	movs	r3, #0
 8005870:	60fb      	str	r3, [r7, #12]
 8005872:	e002      	b.n	800587a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005874:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005878:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005882:	d007      	beq.n	8005894 <HAL_SPI_Init+0xa0>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800588c:	d002      	beq.n	8005894 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80058a4:	431a      	orrs	r2, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	f003 0302 	and.w	r3, r3, #2
 80058ae:	431a      	orrs	r2, r3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	695b      	ldr	r3, [r3, #20]
 80058b4:	f003 0301 	and.w	r3, r3, #1
 80058b8:	431a      	orrs	r2, r3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	699b      	ldr	r3, [r3, #24]
 80058be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058c2:	431a      	orrs	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	69db      	ldr	r3, [r3, #28]
 80058c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80058cc:	431a      	orrs	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a1b      	ldr	r3, [r3, #32]
 80058d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058d6:	ea42 0103 	orr.w	r1, r2, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058de:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	430a      	orrs	r2, r1
 80058e8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	699b      	ldr	r3, [r3, #24]
 80058ee:	0c1b      	lsrs	r3, r3, #16
 80058f0:	f003 0204 	and.w	r2, r3, #4
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f8:	f003 0310 	and.w	r3, r3, #16
 80058fc:	431a      	orrs	r2, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005902:	f003 0308 	and.w	r3, r3, #8
 8005906:	431a      	orrs	r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005910:	ea42 0103 	orr.w	r1, r2, r3
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	430a      	orrs	r2, r1
 8005920:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3710      	adds	r7, #16
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800593a:	b580      	push	{r7, lr}
 800593c:	b088      	sub	sp, #32
 800593e:	af00      	add	r7, sp, #0
 8005940:	60f8      	str	r0, [r7, #12]
 8005942:	60b9      	str	r1, [r7, #8]
 8005944:	603b      	str	r3, [r7, #0]
 8005946:	4613      	mov	r3, r2
 8005948:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800594a:	f7fc fb0b 	bl	8001f64 <HAL_GetTick>
 800594e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005950:	88fb      	ldrh	r3, [r7, #6]
 8005952:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800595a:	b2db      	uxtb	r3, r3
 800595c:	2b01      	cmp	r3, #1
 800595e:	d001      	beq.n	8005964 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005960:	2302      	movs	r3, #2
 8005962:	e15c      	b.n	8005c1e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d002      	beq.n	8005970 <HAL_SPI_Transmit+0x36>
 800596a:	88fb      	ldrh	r3, [r7, #6]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d101      	bne.n	8005974 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e154      	b.n	8005c1e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800597a:	2b01      	cmp	r3, #1
 800597c:	d101      	bne.n	8005982 <HAL_SPI_Transmit+0x48>
 800597e:	2302      	movs	r3, #2
 8005980:	e14d      	b.n	8005c1e <HAL_SPI_Transmit+0x2e4>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2201      	movs	r2, #1
 8005986:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2203      	movs	r2, #3
 800598e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2200      	movs	r2, #0
 8005996:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	68ba      	ldr	r2, [r7, #8]
 800599c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	88fa      	ldrh	r2, [r7, #6]
 80059a2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	88fa      	ldrh	r2, [r7, #6]
 80059a8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2200      	movs	r2, #0
 80059ca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059d4:	d10f      	bne.n	80059f6 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80059f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a00:	2b40      	cmp	r3, #64	@ 0x40
 8005a02:	d007      	beq.n	8005a14 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005a1c:	d952      	bls.n	8005ac4 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d002      	beq.n	8005a2c <HAL_SPI_Transmit+0xf2>
 8005a26:	8b7b      	ldrh	r3, [r7, #26]
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d145      	bne.n	8005ab8 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a30:	881a      	ldrh	r2, [r3, #0]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a3c:	1c9a      	adds	r2, r3, #2
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	b29a      	uxth	r2, r3
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005a50:	e032      	b.n	8005ab8 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f003 0302 	and.w	r3, r3, #2
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d112      	bne.n	8005a86 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a64:	881a      	ldrh	r2, [r3, #0]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a70:	1c9a      	adds	r2, r3, #2
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	b29a      	uxth	r2, r3
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005a84:	e018      	b.n	8005ab8 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a86:	f7fc fa6d 	bl	8001f64 <HAL_GetTick>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	683a      	ldr	r2, [r7, #0]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d803      	bhi.n	8005a9e <HAL_SPI_Transmit+0x164>
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a9c:	d102      	bne.n	8005aa4 <HAL_SPI_Transmit+0x16a>
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d109      	bne.n	8005ab8 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e0b2      	b.n	8005c1e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d1c7      	bne.n	8005a52 <HAL_SPI_Transmit+0x118>
 8005ac2:	e083      	b.n	8005bcc <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d002      	beq.n	8005ad2 <HAL_SPI_Transmit+0x198>
 8005acc:	8b7b      	ldrh	r3, [r7, #26]
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d177      	bne.n	8005bc2 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d912      	bls.n	8005b02 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ae0:	881a      	ldrh	r2, [r3, #0]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aec:	1c9a      	adds	r2, r3, #2
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	3b02      	subs	r3, #2
 8005afa:	b29a      	uxth	r2, r3
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005b00:	e05f      	b.n	8005bc2 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	330c      	adds	r3, #12
 8005b0c:	7812      	ldrb	r2, [r2, #0]
 8005b0e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b14:	1c5a      	adds	r2, r3, #1
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	3b01      	subs	r3, #1
 8005b22:	b29a      	uxth	r2, r3
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005b28:	e04b      	b.n	8005bc2 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	f003 0302 	and.w	r3, r3, #2
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d12b      	bne.n	8005b90 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d912      	bls.n	8005b68 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b46:	881a      	ldrh	r2, [r3, #0]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b52:	1c9a      	adds	r2, r3, #2
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	3b02      	subs	r3, #2
 8005b60:	b29a      	uxth	r2, r3
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005b66:	e02c      	b.n	8005bc2 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	330c      	adds	r3, #12
 8005b72:	7812      	ldrb	r2, [r2, #0]
 8005b74:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b7a:	1c5a      	adds	r2, r3, #1
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	3b01      	subs	r3, #1
 8005b88:	b29a      	uxth	r2, r3
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005b8e:	e018      	b.n	8005bc2 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b90:	f7fc f9e8 	bl	8001f64 <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	683a      	ldr	r2, [r7, #0]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d803      	bhi.n	8005ba8 <HAL_SPI_Transmit+0x26e>
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ba6:	d102      	bne.n	8005bae <HAL_SPI_Transmit+0x274>
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d109      	bne.n	8005bc2 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e02d      	b.n	8005c1e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1ae      	bne.n	8005b2a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bcc:	69fa      	ldr	r2, [r7, #28]
 8005bce:	6839      	ldr	r1, [r7, #0]
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f000 fcf5 	bl	80065c0 <SPI_EndRxTxTransaction>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d002      	beq.n	8005be2 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2220      	movs	r2, #32
 8005be0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d10a      	bne.n	8005c00 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005bea:	2300      	movs	r3, #0
 8005bec:	617b      	str	r3, [r7, #20]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	617b      	str	r3, [r7, #20]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	617b      	str	r3, [r7, #20]
 8005bfe:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d001      	beq.n	8005c1c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e000      	b.n	8005c1e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8005c1c:	2300      	movs	r3, #0
  }
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3720      	adds	r7, #32
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b088      	sub	sp, #32
 8005c2a:	af02      	add	r7, sp, #8
 8005c2c:	60f8      	str	r0, [r7, #12]
 8005c2e:	60b9      	str	r1, [r7, #8]
 8005c30:	603b      	str	r3, [r7, #0]
 8005c32:	4613      	mov	r3, r2
 8005c34:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d001      	beq.n	8005c46 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8005c42:	2302      	movs	r3, #2
 8005c44:	e123      	b.n	8005e8e <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c4e:	d112      	bne.n	8005c76 <HAL_SPI_Receive+0x50>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d10e      	bne.n	8005c76 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2204      	movs	r2, #4
 8005c5c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005c60:	88fa      	ldrh	r2, [r7, #6]
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	9300      	str	r3, [sp, #0]
 8005c66:	4613      	mov	r3, r2
 8005c68:	68ba      	ldr	r2, [r7, #8]
 8005c6a:	68b9      	ldr	r1, [r7, #8]
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f000 f912 	bl	8005e96 <HAL_SPI_TransmitReceive>
 8005c72:	4603      	mov	r3, r0
 8005c74:	e10b      	b.n	8005e8e <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c76:	f7fc f975 	bl	8001f64 <HAL_GetTick>
 8005c7a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d002      	beq.n	8005c88 <HAL_SPI_Receive+0x62>
 8005c82:	88fb      	ldrh	r3, [r7, #6]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d101      	bne.n	8005c8c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e100      	b.n	8005e8e <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d101      	bne.n	8005c9a <HAL_SPI_Receive+0x74>
 8005c96:	2302      	movs	r3, #2
 8005c98:	e0f9      	b.n	8005e8e <HAL_SPI_Receive+0x268>
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2204      	movs	r2, #4
 8005ca6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2200      	movs	r2, #0
 8005cae:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	68ba      	ldr	r2, [r7, #8]
 8005cb4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	88fa      	ldrh	r2, [r7, #6]
 8005cba:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	88fa      	ldrh	r2, [r7, #6]
 8005cc2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005cec:	d908      	bls.n	8005d00 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	685a      	ldr	r2, [r3, #4]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005cfc:	605a      	str	r2, [r3, #4]
 8005cfe:	e007      	b.n	8005d10 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	685a      	ldr	r2, [r3, #4]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005d0e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d18:	d10f      	bne.n	8005d3a <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d28:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005d38:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d44:	2b40      	cmp	r3, #64	@ 0x40
 8005d46:	d007      	beq.n	8005d58 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d56:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005d60:	d875      	bhi.n	8005e4e <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005d62:	e037      	b.n	8005dd4 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	f003 0301 	and.w	r3, r3, #1
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d117      	bne.n	8005da2 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f103 020c 	add.w	r2, r3, #12
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d7e:	7812      	ldrb	r2, [r2, #0]
 8005d80:	b2d2      	uxtb	r2, r2
 8005d82:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d88:	1c5a      	adds	r2, r3, #1
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	3b01      	subs	r3, #1
 8005d98:	b29a      	uxth	r2, r3
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005da0:	e018      	b.n	8005dd4 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005da2:	f7fc f8df 	bl	8001f64 <HAL_GetTick>
 8005da6:	4602      	mov	r2, r0
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	683a      	ldr	r2, [r7, #0]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d803      	bhi.n	8005dba <HAL_SPI_Receive+0x194>
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005db8:	d102      	bne.n	8005dc0 <HAL_SPI_Receive+0x19a>
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d109      	bne.n	8005dd4 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	e05c      	b.n	8005e8e <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d1c1      	bne.n	8005d64 <HAL_SPI_Receive+0x13e>
 8005de0:	e03b      	b.n	8005e5a <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	f003 0301 	and.w	r3, r3, #1
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d115      	bne.n	8005e1c <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	68da      	ldr	r2, [r3, #12]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dfa:	b292      	uxth	r2, r2
 8005dfc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e02:	1c9a      	adds	r2, r3, #2
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	3b01      	subs	r3, #1
 8005e12:	b29a      	uxth	r2, r3
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005e1a:	e018      	b.n	8005e4e <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e1c:	f7fc f8a2 	bl	8001f64 <HAL_GetTick>
 8005e20:	4602      	mov	r2, r0
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	683a      	ldr	r2, [r7, #0]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d803      	bhi.n	8005e34 <HAL_SPI_Receive+0x20e>
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e32:	d102      	bne.n	8005e3a <HAL_SPI_Receive+0x214>
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d109      	bne.n	8005e4e <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	e01f      	b.n	8005e8e <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d1c3      	bne.n	8005de2 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e5a:	697a      	ldr	r2, [r7, #20]
 8005e5c:	6839      	ldr	r1, [r7, #0]
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f000 fb56 	bl	8006510 <SPI_EndRxTransaction>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d002      	beq.n	8005e70 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2220      	movs	r2, #32
 8005e6e:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d001      	beq.n	8005e8c <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e000      	b.n	8005e8e <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
  }
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3718      	adds	r7, #24
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}

08005e96 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005e96:	b580      	push	{r7, lr}
 8005e98:	b08a      	sub	sp, #40	@ 0x28
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	60f8      	str	r0, [r7, #12]
 8005e9e:	60b9      	str	r1, [r7, #8]
 8005ea0:	607a      	str	r2, [r7, #4]
 8005ea2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ea8:	f7fc f85c 	bl	8001f64 <HAL_GetTick>
 8005eac:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005eb4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005ebc:	887b      	ldrh	r3, [r7, #2]
 8005ebe:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8005ec0:	887b      	ldrh	r3, [r7, #2]
 8005ec2:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005ec4:	7ffb      	ldrb	r3, [r7, #31]
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d00c      	beq.n	8005ee4 <HAL_SPI_TransmitReceive+0x4e>
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ed0:	d106      	bne.n	8005ee0 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d102      	bne.n	8005ee0 <HAL_SPI_TransmitReceive+0x4a>
 8005eda:	7ffb      	ldrb	r3, [r7, #31]
 8005edc:	2b04      	cmp	r3, #4
 8005ede:	d001      	beq.n	8005ee4 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005ee0:	2302      	movs	r3, #2
 8005ee2:	e1f3      	b.n	80062cc <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d005      	beq.n	8005ef6 <HAL_SPI_TransmitReceive+0x60>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d002      	beq.n	8005ef6 <HAL_SPI_TransmitReceive+0x60>
 8005ef0:	887b      	ldrh	r3, [r7, #2]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d101      	bne.n	8005efa <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e1e8      	b.n	80062cc <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d101      	bne.n	8005f08 <HAL_SPI_TransmitReceive+0x72>
 8005f04:	2302      	movs	r3, #2
 8005f06:	e1e1      	b.n	80062cc <HAL_SPI_TransmitReceive+0x436>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	2b04      	cmp	r3, #4
 8005f1a:	d003      	beq.n	8005f24 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2205      	movs	r2, #5
 8005f20:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2200      	movs	r2, #0
 8005f28:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	887a      	ldrh	r2, [r7, #2]
 8005f34:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	887a      	ldrh	r2, [r7, #2]
 8005f3c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	68ba      	ldr	r2, [r7, #8]
 8005f44:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	887a      	ldrh	r2, [r7, #2]
 8005f4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	887a      	ldrh	r2, [r7, #2]
 8005f50:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2200      	movs	r2, #0
 8005f56:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005f66:	d802      	bhi.n	8005f6e <HAL_SPI_TransmitReceive+0xd8>
 8005f68:	8abb      	ldrh	r3, [r7, #20]
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d908      	bls.n	8005f80 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	685a      	ldr	r2, [r3, #4]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005f7c:	605a      	str	r2, [r3, #4]
 8005f7e:	e007      	b.n	8005f90 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	685a      	ldr	r2, [r3, #4]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005f8e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f9a:	2b40      	cmp	r3, #64	@ 0x40
 8005f9c:	d007      	beq.n	8005fae <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005fac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005fb6:	f240 8083 	bls.w	80060c0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d002      	beq.n	8005fc8 <HAL_SPI_TransmitReceive+0x132>
 8005fc2:	8afb      	ldrh	r3, [r7, #22]
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d16f      	bne.n	80060a8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fcc:	881a      	ldrh	r2, [r3, #0]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fd8:	1c9a      	adds	r2, r3, #2
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	3b01      	subs	r3, #1
 8005fe6:	b29a      	uxth	r2, r3
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fec:	e05c      	b.n	80060a8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	f003 0302 	and.w	r3, r3, #2
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	d11b      	bne.n	8006034 <HAL_SPI_TransmitReceive+0x19e>
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006000:	b29b      	uxth	r3, r3
 8006002:	2b00      	cmp	r3, #0
 8006004:	d016      	beq.n	8006034 <HAL_SPI_TransmitReceive+0x19e>
 8006006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006008:	2b01      	cmp	r3, #1
 800600a:	d113      	bne.n	8006034 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006010:	881a      	ldrh	r2, [r3, #0]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800601c:	1c9a      	adds	r2, r3, #2
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006026:	b29b      	uxth	r3, r3
 8006028:	3b01      	subs	r3, #1
 800602a:	b29a      	uxth	r2, r3
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006030:	2300      	movs	r3, #0
 8006032:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	f003 0301 	and.w	r3, r3, #1
 800603e:	2b01      	cmp	r3, #1
 8006040:	d11c      	bne.n	800607c <HAL_SPI_TransmitReceive+0x1e6>
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006048:	b29b      	uxth	r3, r3
 800604a:	2b00      	cmp	r3, #0
 800604c:	d016      	beq.n	800607c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68da      	ldr	r2, [r3, #12]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006058:	b292      	uxth	r2, r2
 800605a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006060:	1c9a      	adds	r2, r3, #2
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800606c:	b29b      	uxth	r3, r3
 800606e:	3b01      	subs	r3, #1
 8006070:	b29a      	uxth	r2, r3
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006078:	2301      	movs	r3, #1
 800607a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800607c:	f7fb ff72 	bl	8001f64 <HAL_GetTick>
 8006080:	4602      	mov	r2, r0
 8006082:	6a3b      	ldr	r3, [r7, #32]
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006088:	429a      	cmp	r2, r3
 800608a:	d80d      	bhi.n	80060a8 <HAL_SPI_TransmitReceive+0x212>
 800608c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800608e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006092:	d009      	beq.n	80060a8 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80060a4:	2303      	movs	r3, #3
 80060a6:	e111      	b.n	80062cc <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d19d      	bne.n	8005fee <HAL_SPI_TransmitReceive+0x158>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d197      	bne.n	8005fee <HAL_SPI_TransmitReceive+0x158>
 80060be:	e0e5      	b.n	800628c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d003      	beq.n	80060d0 <HAL_SPI_TransmitReceive+0x23a>
 80060c8:	8afb      	ldrh	r3, [r7, #22]
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	f040 80d1 	bne.w	8006272 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d912      	bls.n	8006100 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060de:	881a      	ldrh	r2, [r3, #0]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ea:	1c9a      	adds	r2, r3, #2
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	3b02      	subs	r3, #2
 80060f8:	b29a      	uxth	r2, r3
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80060fe:	e0b8      	b.n	8006272 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	330c      	adds	r3, #12
 800610a:	7812      	ldrb	r2, [r2, #0]
 800610c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006112:	1c5a      	adds	r2, r3, #1
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800611c:	b29b      	uxth	r3, r3
 800611e:	3b01      	subs	r3, #1
 8006120:	b29a      	uxth	r2, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006126:	e0a4      	b.n	8006272 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	f003 0302 	and.w	r3, r3, #2
 8006132:	2b02      	cmp	r3, #2
 8006134:	d134      	bne.n	80061a0 <HAL_SPI_TransmitReceive+0x30a>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800613a:	b29b      	uxth	r3, r3
 800613c:	2b00      	cmp	r3, #0
 800613e:	d02f      	beq.n	80061a0 <HAL_SPI_TransmitReceive+0x30a>
 8006140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006142:	2b01      	cmp	r3, #1
 8006144:	d12c      	bne.n	80061a0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800614a:	b29b      	uxth	r3, r3
 800614c:	2b01      	cmp	r3, #1
 800614e:	d912      	bls.n	8006176 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006154:	881a      	ldrh	r2, [r3, #0]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006160:	1c9a      	adds	r2, r3, #2
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800616a:	b29b      	uxth	r3, r3
 800616c:	3b02      	subs	r3, #2
 800616e:	b29a      	uxth	r2, r3
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006174:	e012      	b.n	800619c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	330c      	adds	r3, #12
 8006180:	7812      	ldrb	r2, [r2, #0]
 8006182:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006188:	1c5a      	adds	r2, r3, #1
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006192:	b29b      	uxth	r3, r3
 8006194:	3b01      	subs	r3, #1
 8006196:	b29a      	uxth	r2, r3
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800619c:	2300      	movs	r3, #0
 800619e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	f003 0301 	and.w	r3, r3, #1
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d148      	bne.n	8006240 <HAL_SPI_TransmitReceive+0x3aa>
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d042      	beq.n	8006240 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d923      	bls.n	800620e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68da      	ldr	r2, [r3, #12]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061d0:	b292      	uxth	r2, r2
 80061d2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061d8:	1c9a      	adds	r2, r3, #2
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	3b02      	subs	r3, #2
 80061e8:	b29a      	uxth	r2, r3
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d81f      	bhi.n	800623c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	685a      	ldr	r2, [r3, #4]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800620a:	605a      	str	r2, [r3, #4]
 800620c:	e016      	b.n	800623c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f103 020c 	add.w	r2, r3, #12
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800621a:	7812      	ldrb	r2, [r2, #0]
 800621c:	b2d2      	uxtb	r2, r2
 800621e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006224:	1c5a      	adds	r2, r3, #1
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006230:	b29b      	uxth	r3, r3
 8006232:	3b01      	subs	r3, #1
 8006234:	b29a      	uxth	r2, r3
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800623c:	2301      	movs	r3, #1
 800623e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006240:	f7fb fe90 	bl	8001f64 <HAL_GetTick>
 8006244:	4602      	mov	r2, r0
 8006246:	6a3b      	ldr	r3, [r7, #32]
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800624c:	429a      	cmp	r2, r3
 800624e:	d803      	bhi.n	8006258 <HAL_SPI_TransmitReceive+0x3c2>
 8006250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006252:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006256:	d102      	bne.n	800625e <HAL_SPI_TransmitReceive+0x3c8>
 8006258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800625a:	2b00      	cmp	r3, #0
 800625c:	d109      	bne.n	8006272 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2201      	movs	r2, #1
 8006262:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2200      	movs	r2, #0
 800626a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800626e:	2303      	movs	r3, #3
 8006270:	e02c      	b.n	80062cc <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006276:	b29b      	uxth	r3, r3
 8006278:	2b00      	cmp	r3, #0
 800627a:	f47f af55 	bne.w	8006128 <HAL_SPI_TransmitReceive+0x292>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006284:	b29b      	uxth	r3, r3
 8006286:	2b00      	cmp	r3, #0
 8006288:	f47f af4e 	bne.w	8006128 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800628c:	6a3a      	ldr	r2, [r7, #32]
 800628e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006290:	68f8      	ldr	r0, [r7, #12]
 8006292:	f000 f995 	bl	80065c0 <SPI_EndRxTxTransaction>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d008      	beq.n	80062ae <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2220      	movs	r2, #32
 80062a0:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e00e      	b.n	80062cc <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2201      	movs	r2, #1
 80062b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d001      	beq.n	80062ca <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e000      	b.n	80062cc <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80062ca:	2300      	movs	r3, #0
  }
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3728      	adds	r7, #40	@ 0x28
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b088      	sub	sp, #32
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	603b      	str	r3, [r7, #0]
 80062e0:	4613      	mov	r3, r2
 80062e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80062e4:	f7fb fe3e 	bl	8001f64 <HAL_GetTick>
 80062e8:	4602      	mov	r2, r0
 80062ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ec:	1a9b      	subs	r3, r3, r2
 80062ee:	683a      	ldr	r2, [r7, #0]
 80062f0:	4413      	add	r3, r2
 80062f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80062f4:	f7fb fe36 	bl	8001f64 <HAL_GetTick>
 80062f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80062fa:	4b39      	ldr	r3, [pc, #228]	@ (80063e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	015b      	lsls	r3, r3, #5
 8006300:	0d1b      	lsrs	r3, r3, #20
 8006302:	69fa      	ldr	r2, [r7, #28]
 8006304:	fb02 f303 	mul.w	r3, r2, r3
 8006308:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800630a:	e054      	b.n	80063b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006312:	d050      	beq.n	80063b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006314:	f7fb fe26 	bl	8001f64 <HAL_GetTick>
 8006318:	4602      	mov	r2, r0
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	69fa      	ldr	r2, [r7, #28]
 8006320:	429a      	cmp	r2, r3
 8006322:	d902      	bls.n	800632a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d13d      	bne.n	80063a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	685a      	ldr	r2, [r3, #4]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006338:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006342:	d111      	bne.n	8006368 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800634c:	d004      	beq.n	8006358 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006356:	d107      	bne.n	8006368 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006366:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800636c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006370:	d10f      	bne.n	8006392 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006380:	601a      	str	r2, [r3, #0]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006390:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2201      	movs	r2, #1
 8006396:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2200      	movs	r2, #0
 800639e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80063a2:	2303      	movs	r3, #3
 80063a4:	e017      	b.n	80063d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d101      	bne.n	80063b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80063ac:	2300      	movs	r3, #0
 80063ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	3b01      	subs	r3, #1
 80063b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	689a      	ldr	r2, [r3, #8]
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	4013      	ands	r3, r2
 80063c0:	68ba      	ldr	r2, [r7, #8]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	bf0c      	ite	eq
 80063c6:	2301      	moveq	r3, #1
 80063c8:	2300      	movne	r3, #0
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	461a      	mov	r2, r3
 80063ce:	79fb      	ldrb	r3, [r7, #7]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d19b      	bne.n	800630c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3720      	adds	r7, #32
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	20000004 	.word	0x20000004

080063e4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b08a      	sub	sp, #40	@ 0x28
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	60b9      	str	r1, [r7, #8]
 80063ee:	607a      	str	r2, [r7, #4]
 80063f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80063f2:	2300      	movs	r3, #0
 80063f4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80063f6:	f7fb fdb5 	bl	8001f64 <HAL_GetTick>
 80063fa:	4602      	mov	r2, r0
 80063fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063fe:	1a9b      	subs	r3, r3, r2
 8006400:	683a      	ldr	r2, [r7, #0]
 8006402:	4413      	add	r3, r2
 8006404:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006406:	f7fb fdad 	bl	8001f64 <HAL_GetTick>
 800640a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	330c      	adds	r3, #12
 8006412:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006414:	4b3d      	ldr	r3, [pc, #244]	@ (800650c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	4613      	mov	r3, r2
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	4413      	add	r3, r2
 800641e:	00da      	lsls	r2, r3, #3
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	0d1b      	lsrs	r3, r3, #20
 8006424:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006426:	fb02 f303 	mul.w	r3, r2, r3
 800642a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800642c:	e060      	b.n	80064f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006434:	d107      	bne.n	8006446 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d104      	bne.n	8006446 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	b2db      	uxtb	r3, r3
 8006442:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006444:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800644c:	d050      	beq.n	80064f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800644e:	f7fb fd89 	bl	8001f64 <HAL_GetTick>
 8006452:	4602      	mov	r2, r0
 8006454:	6a3b      	ldr	r3, [r7, #32]
 8006456:	1ad3      	subs	r3, r2, r3
 8006458:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800645a:	429a      	cmp	r2, r3
 800645c:	d902      	bls.n	8006464 <SPI_WaitFifoStateUntilTimeout+0x80>
 800645e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006460:	2b00      	cmp	r3, #0
 8006462:	d13d      	bne.n	80064e0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	685a      	ldr	r2, [r3, #4]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006472:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800647c:	d111      	bne.n	80064a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006486:	d004      	beq.n	8006492 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006490:	d107      	bne.n	80064a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80064a0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064aa:	d10f      	bne.n	80064cc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80064ba:	601a      	str	r2, [r3, #0]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80064ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80064dc:	2303      	movs	r3, #3
 80064de:	e010      	b.n	8006502 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d101      	bne.n	80064ea <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80064e6:	2300      	movs	r3, #0
 80064e8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	3b01      	subs	r3, #1
 80064ee:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	689a      	ldr	r2, [r3, #8]
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	4013      	ands	r3, r2
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d196      	bne.n	800642e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006500:	2300      	movs	r3, #0
}
 8006502:	4618      	mov	r0, r3
 8006504:	3728      	adds	r7, #40	@ 0x28
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	20000004 	.word	0x20000004

08006510 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b086      	sub	sp, #24
 8006514:	af02      	add	r7, sp, #8
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006524:	d111      	bne.n	800654a <SPI_EndRxTransaction+0x3a>
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800652e:	d004      	beq.n	800653a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006538:	d107      	bne.n	800654a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006548:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	9300      	str	r3, [sp, #0]
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	2200      	movs	r2, #0
 8006552:	2180      	movs	r1, #128	@ 0x80
 8006554:	68f8      	ldr	r0, [r7, #12]
 8006556:	f7ff febd 	bl	80062d4 <SPI_WaitFlagStateUntilTimeout>
 800655a:	4603      	mov	r3, r0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d007      	beq.n	8006570 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006564:	f043 0220 	orr.w	r2, r3, #32
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800656c:	2303      	movs	r3, #3
 800656e:	e023      	b.n	80065b8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006578:	d11d      	bne.n	80065b6 <SPI_EndRxTransaction+0xa6>
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006582:	d004      	beq.n	800658e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800658c:	d113      	bne.n	80065b6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	9300      	str	r3, [sp, #0]
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	2200      	movs	r2, #0
 8006596:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	f7ff ff22 	bl	80063e4 <SPI_WaitFifoStateUntilTimeout>
 80065a0:	4603      	mov	r3, r0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d007      	beq.n	80065b6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065aa:	f043 0220 	orr.w	r2, r3, #32
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80065b2:	2303      	movs	r3, #3
 80065b4:	e000      	b.n	80065b8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3710      	adds	r7, #16
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b086      	sub	sp, #24
 80065c4:	af02      	add	r7, sp, #8
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	60b9      	str	r1, [r7, #8]
 80065ca:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	9300      	str	r3, [sp, #0]
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80065d8:	68f8      	ldr	r0, [r7, #12]
 80065da:	f7ff ff03 	bl	80063e4 <SPI_WaitFifoStateUntilTimeout>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d007      	beq.n	80065f4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065e8:	f043 0220 	orr.w	r2, r3, #32
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80065f0:	2303      	movs	r3, #3
 80065f2:	e027      	b.n	8006644 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	9300      	str	r3, [sp, #0]
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	2200      	movs	r2, #0
 80065fc:	2180      	movs	r1, #128	@ 0x80
 80065fe:	68f8      	ldr	r0, [r7, #12]
 8006600:	f7ff fe68 	bl	80062d4 <SPI_WaitFlagStateUntilTimeout>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d007      	beq.n	800661a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800660e:	f043 0220 	orr.w	r2, r3, #32
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006616:	2303      	movs	r3, #3
 8006618:	e014      	b.n	8006644 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	9300      	str	r3, [sp, #0]
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	2200      	movs	r2, #0
 8006622:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006626:	68f8      	ldr	r0, [r7, #12]
 8006628:	f7ff fedc 	bl	80063e4 <SPI_WaitFifoStateUntilTimeout>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d007      	beq.n	8006642 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006636:	f043 0220 	orr.w	r2, r3, #32
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800663e:	2303      	movs	r3, #3
 8006640:	e000      	b.n	8006644 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006642:	2300      	movs	r3, #0
}
 8006644:	4618      	mov	r0, r3
 8006646:	3710      	adds	r7, #16
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d101      	bne.n	800665e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e049      	b.n	80066f2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006664:	b2db      	uxtb	r3, r3
 8006666:	2b00      	cmp	r3, #0
 8006668:	d106      	bne.n	8006678 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f7fb fa7c 	bl	8001b70 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2202      	movs	r2, #2
 800667c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	3304      	adds	r3, #4
 8006688:	4619      	mov	r1, r3
 800668a:	4610      	mov	r0, r2
 800668c:	f000 fa50 	bl	8006b30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3708      	adds	r7, #8
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
	...

080066fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d109      	bne.n	8006720 <HAL_TIM_PWM_Start+0x24>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006712:	b2db      	uxtb	r3, r3
 8006714:	2b01      	cmp	r3, #1
 8006716:	bf14      	ite	ne
 8006718:	2301      	movne	r3, #1
 800671a:	2300      	moveq	r3, #0
 800671c:	b2db      	uxtb	r3, r3
 800671e:	e03c      	b.n	800679a <HAL_TIM_PWM_Start+0x9e>
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	2b04      	cmp	r3, #4
 8006724:	d109      	bne.n	800673a <HAL_TIM_PWM_Start+0x3e>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800672c:	b2db      	uxtb	r3, r3
 800672e:	2b01      	cmp	r3, #1
 8006730:	bf14      	ite	ne
 8006732:	2301      	movne	r3, #1
 8006734:	2300      	moveq	r3, #0
 8006736:	b2db      	uxtb	r3, r3
 8006738:	e02f      	b.n	800679a <HAL_TIM_PWM_Start+0x9e>
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	2b08      	cmp	r3, #8
 800673e:	d109      	bne.n	8006754 <HAL_TIM_PWM_Start+0x58>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006746:	b2db      	uxtb	r3, r3
 8006748:	2b01      	cmp	r3, #1
 800674a:	bf14      	ite	ne
 800674c:	2301      	movne	r3, #1
 800674e:	2300      	moveq	r3, #0
 8006750:	b2db      	uxtb	r3, r3
 8006752:	e022      	b.n	800679a <HAL_TIM_PWM_Start+0x9e>
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	2b0c      	cmp	r3, #12
 8006758:	d109      	bne.n	800676e <HAL_TIM_PWM_Start+0x72>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006760:	b2db      	uxtb	r3, r3
 8006762:	2b01      	cmp	r3, #1
 8006764:	bf14      	ite	ne
 8006766:	2301      	movne	r3, #1
 8006768:	2300      	moveq	r3, #0
 800676a:	b2db      	uxtb	r3, r3
 800676c:	e015      	b.n	800679a <HAL_TIM_PWM_Start+0x9e>
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	2b10      	cmp	r3, #16
 8006772:	d109      	bne.n	8006788 <HAL_TIM_PWM_Start+0x8c>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800677a:	b2db      	uxtb	r3, r3
 800677c:	2b01      	cmp	r3, #1
 800677e:	bf14      	ite	ne
 8006780:	2301      	movne	r3, #1
 8006782:	2300      	moveq	r3, #0
 8006784:	b2db      	uxtb	r3, r3
 8006786:	e008      	b.n	800679a <HAL_TIM_PWM_Start+0x9e>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800678e:	b2db      	uxtb	r3, r3
 8006790:	2b01      	cmp	r3, #1
 8006792:	bf14      	ite	ne
 8006794:	2301      	movne	r3, #1
 8006796:	2300      	moveq	r3, #0
 8006798:	b2db      	uxtb	r3, r3
 800679a:	2b00      	cmp	r3, #0
 800679c:	d001      	beq.n	80067a2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e09c      	b.n	80068dc <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d104      	bne.n	80067b2 <HAL_TIM_PWM_Start+0xb6>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2202      	movs	r2, #2
 80067ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80067b0:	e023      	b.n	80067fa <HAL_TIM_PWM_Start+0xfe>
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	2b04      	cmp	r3, #4
 80067b6:	d104      	bne.n	80067c2 <HAL_TIM_PWM_Start+0xc6>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2202      	movs	r2, #2
 80067bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80067c0:	e01b      	b.n	80067fa <HAL_TIM_PWM_Start+0xfe>
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	2b08      	cmp	r3, #8
 80067c6:	d104      	bne.n	80067d2 <HAL_TIM_PWM_Start+0xd6>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2202      	movs	r2, #2
 80067cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80067d0:	e013      	b.n	80067fa <HAL_TIM_PWM_Start+0xfe>
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	2b0c      	cmp	r3, #12
 80067d6:	d104      	bne.n	80067e2 <HAL_TIM_PWM_Start+0xe6>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2202      	movs	r2, #2
 80067dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80067e0:	e00b      	b.n	80067fa <HAL_TIM_PWM_Start+0xfe>
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	2b10      	cmp	r3, #16
 80067e6:	d104      	bne.n	80067f2 <HAL_TIM_PWM_Start+0xf6>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2202      	movs	r2, #2
 80067ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80067f0:	e003      	b.n	80067fa <HAL_TIM_PWM_Start+0xfe>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2202      	movs	r2, #2
 80067f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	2201      	movs	r2, #1
 8006800:	6839      	ldr	r1, [r7, #0]
 8006802:	4618      	mov	r0, r3
 8006804:	f000 fd10 	bl	8007228 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a35      	ldr	r2, [pc, #212]	@ (80068e4 <HAL_TIM_PWM_Start+0x1e8>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d013      	beq.n	800683a <HAL_TIM_PWM_Start+0x13e>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a34      	ldr	r2, [pc, #208]	@ (80068e8 <HAL_TIM_PWM_Start+0x1ec>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d00e      	beq.n	800683a <HAL_TIM_PWM_Start+0x13e>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a32      	ldr	r2, [pc, #200]	@ (80068ec <HAL_TIM_PWM_Start+0x1f0>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d009      	beq.n	800683a <HAL_TIM_PWM_Start+0x13e>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a31      	ldr	r2, [pc, #196]	@ (80068f0 <HAL_TIM_PWM_Start+0x1f4>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d004      	beq.n	800683a <HAL_TIM_PWM_Start+0x13e>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a2f      	ldr	r2, [pc, #188]	@ (80068f4 <HAL_TIM_PWM_Start+0x1f8>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d101      	bne.n	800683e <HAL_TIM_PWM_Start+0x142>
 800683a:	2301      	movs	r3, #1
 800683c:	e000      	b.n	8006840 <HAL_TIM_PWM_Start+0x144>
 800683e:	2300      	movs	r3, #0
 8006840:	2b00      	cmp	r3, #0
 8006842:	d007      	beq.n	8006854 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006852:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a22      	ldr	r2, [pc, #136]	@ (80068e4 <HAL_TIM_PWM_Start+0x1e8>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d01d      	beq.n	800689a <HAL_TIM_PWM_Start+0x19e>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006866:	d018      	beq.n	800689a <HAL_TIM_PWM_Start+0x19e>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a22      	ldr	r2, [pc, #136]	@ (80068f8 <HAL_TIM_PWM_Start+0x1fc>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d013      	beq.n	800689a <HAL_TIM_PWM_Start+0x19e>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a21      	ldr	r2, [pc, #132]	@ (80068fc <HAL_TIM_PWM_Start+0x200>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d00e      	beq.n	800689a <HAL_TIM_PWM_Start+0x19e>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a1f      	ldr	r2, [pc, #124]	@ (8006900 <HAL_TIM_PWM_Start+0x204>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d009      	beq.n	800689a <HAL_TIM_PWM_Start+0x19e>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a17      	ldr	r2, [pc, #92]	@ (80068e8 <HAL_TIM_PWM_Start+0x1ec>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d004      	beq.n	800689a <HAL_TIM_PWM_Start+0x19e>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a15      	ldr	r2, [pc, #84]	@ (80068ec <HAL_TIM_PWM_Start+0x1f0>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d115      	bne.n	80068c6 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	689a      	ldr	r2, [r3, #8]
 80068a0:	4b18      	ldr	r3, [pc, #96]	@ (8006904 <HAL_TIM_PWM_Start+0x208>)
 80068a2:	4013      	ands	r3, r2
 80068a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2b06      	cmp	r3, #6
 80068aa:	d015      	beq.n	80068d8 <HAL_TIM_PWM_Start+0x1dc>
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068b2:	d011      	beq.n	80068d8 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f042 0201 	orr.w	r2, r2, #1
 80068c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068c4:	e008      	b.n	80068d8 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f042 0201 	orr.w	r2, r2, #1
 80068d4:	601a      	str	r2, [r3, #0]
 80068d6:	e000      	b.n	80068da <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068d8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80068da:	2300      	movs	r3, #0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3710      	adds	r7, #16
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	40012c00 	.word	0x40012c00
 80068e8:	40013400 	.word	0x40013400
 80068ec:	40014000 	.word	0x40014000
 80068f0:	40014400 	.word	0x40014400
 80068f4:	40014800 	.word	0x40014800
 80068f8:	40000400 	.word	0x40000400
 80068fc:	40000800 	.word	0x40000800
 8006900:	40000c00 	.word	0x40000c00
 8006904:	00010007 	.word	0x00010007

08006908 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b086      	sub	sp, #24
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006914:	2300      	movs	r3, #0
 8006916:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800691e:	2b01      	cmp	r3, #1
 8006920:	d101      	bne.n	8006926 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006922:	2302      	movs	r3, #2
 8006924:	e0ff      	b.n	8006b26 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2201      	movs	r2, #1
 800692a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2b14      	cmp	r3, #20
 8006932:	f200 80f0 	bhi.w	8006b16 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006936:	a201      	add	r2, pc, #4	@ (adr r2, 800693c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800693c:	08006991 	.word	0x08006991
 8006940:	08006b17 	.word	0x08006b17
 8006944:	08006b17 	.word	0x08006b17
 8006948:	08006b17 	.word	0x08006b17
 800694c:	080069d1 	.word	0x080069d1
 8006950:	08006b17 	.word	0x08006b17
 8006954:	08006b17 	.word	0x08006b17
 8006958:	08006b17 	.word	0x08006b17
 800695c:	08006a13 	.word	0x08006a13
 8006960:	08006b17 	.word	0x08006b17
 8006964:	08006b17 	.word	0x08006b17
 8006968:	08006b17 	.word	0x08006b17
 800696c:	08006a53 	.word	0x08006a53
 8006970:	08006b17 	.word	0x08006b17
 8006974:	08006b17 	.word	0x08006b17
 8006978:	08006b17 	.word	0x08006b17
 800697c:	08006a95 	.word	0x08006a95
 8006980:	08006b17 	.word	0x08006b17
 8006984:	08006b17 	.word	0x08006b17
 8006988:	08006b17 	.word	0x08006b17
 800698c:	08006ad5 	.word	0x08006ad5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	68b9      	ldr	r1, [r7, #8]
 8006996:	4618      	mov	r0, r3
 8006998:	f000 f970 	bl	8006c7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	699a      	ldr	r2, [r3, #24]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f042 0208 	orr.w	r2, r2, #8
 80069aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	699a      	ldr	r2, [r3, #24]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f022 0204 	bic.w	r2, r2, #4
 80069ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	6999      	ldr	r1, [r3, #24]
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	691a      	ldr	r2, [r3, #16]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	430a      	orrs	r2, r1
 80069cc:	619a      	str	r2, [r3, #24]
      break;
 80069ce:	e0a5      	b.n	8006b1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68b9      	ldr	r1, [r7, #8]
 80069d6:	4618      	mov	r0, r3
 80069d8:	f000 f9e0 	bl	8006d9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	699a      	ldr	r2, [r3, #24]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80069ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	699a      	ldr	r2, [r3, #24]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80069fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	6999      	ldr	r1, [r3, #24]
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	021a      	lsls	r2, r3, #8
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	430a      	orrs	r2, r1
 8006a0e:	619a      	str	r2, [r3, #24]
      break;
 8006a10:	e084      	b.n	8006b1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	68b9      	ldr	r1, [r7, #8]
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f000 fa49 	bl	8006eb0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	69da      	ldr	r2, [r3, #28]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f042 0208 	orr.w	r2, r2, #8
 8006a2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	69da      	ldr	r2, [r3, #28]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f022 0204 	bic.w	r2, r2, #4
 8006a3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	69d9      	ldr	r1, [r3, #28]
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	691a      	ldr	r2, [r3, #16]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	430a      	orrs	r2, r1
 8006a4e:	61da      	str	r2, [r3, #28]
      break;
 8006a50:	e064      	b.n	8006b1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	68b9      	ldr	r1, [r7, #8]
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f000 fab1 	bl	8006fc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	69da      	ldr	r2, [r3, #28]
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	69da      	ldr	r2, [r3, #28]
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	69d9      	ldr	r1, [r3, #28]
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	691b      	ldr	r3, [r3, #16]
 8006a88:	021a      	lsls	r2, r3, #8
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	430a      	orrs	r2, r1
 8006a90:	61da      	str	r2, [r3, #28]
      break;
 8006a92:	e043      	b.n	8006b1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	68b9      	ldr	r1, [r7, #8]
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f000 fafa 	bl	8007094 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f042 0208 	orr.w	r2, r2, #8
 8006aae:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f022 0204 	bic.w	r2, r2, #4
 8006abe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	691a      	ldr	r2, [r3, #16]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	430a      	orrs	r2, r1
 8006ad0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006ad2:	e023      	b.n	8006b1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	68b9      	ldr	r1, [r7, #8]
 8006ada:	4618      	mov	r0, r3
 8006adc:	f000 fb3e 	bl	800715c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006aee:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006afe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	021a      	lsls	r2, r3, #8
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	430a      	orrs	r2, r1
 8006b12:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006b14:	e002      	b.n	8006b1c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	75fb      	strb	r3, [r7, #23]
      break;
 8006b1a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006b24:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3718      	adds	r7, #24
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop

08006b30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b085      	sub	sp, #20
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4a46      	ldr	r2, [pc, #280]	@ (8006c5c <TIM_Base_SetConfig+0x12c>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d013      	beq.n	8006b70 <TIM_Base_SetConfig+0x40>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b4e:	d00f      	beq.n	8006b70 <TIM_Base_SetConfig+0x40>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4a43      	ldr	r2, [pc, #268]	@ (8006c60 <TIM_Base_SetConfig+0x130>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d00b      	beq.n	8006b70 <TIM_Base_SetConfig+0x40>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	4a42      	ldr	r2, [pc, #264]	@ (8006c64 <TIM_Base_SetConfig+0x134>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d007      	beq.n	8006b70 <TIM_Base_SetConfig+0x40>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a41      	ldr	r2, [pc, #260]	@ (8006c68 <TIM_Base_SetConfig+0x138>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d003      	beq.n	8006b70 <TIM_Base_SetConfig+0x40>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4a40      	ldr	r2, [pc, #256]	@ (8006c6c <TIM_Base_SetConfig+0x13c>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d108      	bne.n	8006b82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	68fa      	ldr	r2, [r7, #12]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a35      	ldr	r2, [pc, #212]	@ (8006c5c <TIM_Base_SetConfig+0x12c>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d01f      	beq.n	8006bca <TIM_Base_SetConfig+0x9a>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b90:	d01b      	beq.n	8006bca <TIM_Base_SetConfig+0x9a>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a32      	ldr	r2, [pc, #200]	@ (8006c60 <TIM_Base_SetConfig+0x130>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d017      	beq.n	8006bca <TIM_Base_SetConfig+0x9a>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a31      	ldr	r2, [pc, #196]	@ (8006c64 <TIM_Base_SetConfig+0x134>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d013      	beq.n	8006bca <TIM_Base_SetConfig+0x9a>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a30      	ldr	r2, [pc, #192]	@ (8006c68 <TIM_Base_SetConfig+0x138>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d00f      	beq.n	8006bca <TIM_Base_SetConfig+0x9a>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a2f      	ldr	r2, [pc, #188]	@ (8006c6c <TIM_Base_SetConfig+0x13c>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d00b      	beq.n	8006bca <TIM_Base_SetConfig+0x9a>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4a2e      	ldr	r2, [pc, #184]	@ (8006c70 <TIM_Base_SetConfig+0x140>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d007      	beq.n	8006bca <TIM_Base_SetConfig+0x9a>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4a2d      	ldr	r2, [pc, #180]	@ (8006c74 <TIM_Base_SetConfig+0x144>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d003      	beq.n	8006bca <TIM_Base_SetConfig+0x9a>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a2c      	ldr	r2, [pc, #176]	@ (8006c78 <TIM_Base_SetConfig+0x148>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d108      	bne.n	8006bdc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006bd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	68db      	ldr	r3, [r3, #12]
 8006bd6:	68fa      	ldr	r2, [r7, #12]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	695b      	ldr	r3, [r3, #20]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	689a      	ldr	r2, [r3, #8]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4a16      	ldr	r2, [pc, #88]	@ (8006c5c <TIM_Base_SetConfig+0x12c>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d00f      	beq.n	8006c28 <TIM_Base_SetConfig+0xf8>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4a18      	ldr	r2, [pc, #96]	@ (8006c6c <TIM_Base_SetConfig+0x13c>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d00b      	beq.n	8006c28 <TIM_Base_SetConfig+0xf8>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a17      	ldr	r2, [pc, #92]	@ (8006c70 <TIM_Base_SetConfig+0x140>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d007      	beq.n	8006c28 <TIM_Base_SetConfig+0xf8>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4a16      	ldr	r2, [pc, #88]	@ (8006c74 <TIM_Base_SetConfig+0x144>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d003      	beq.n	8006c28 <TIM_Base_SetConfig+0xf8>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	4a15      	ldr	r2, [pc, #84]	@ (8006c78 <TIM_Base_SetConfig+0x148>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d103      	bne.n	8006c30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	691a      	ldr	r2, [r3, #16]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	f003 0301 	and.w	r3, r3, #1
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d105      	bne.n	8006c4e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	f023 0201 	bic.w	r2, r3, #1
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	611a      	str	r2, [r3, #16]
  }
}
 8006c4e:	bf00      	nop
 8006c50:	3714      	adds	r7, #20
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr
 8006c5a:	bf00      	nop
 8006c5c:	40012c00 	.word	0x40012c00
 8006c60:	40000400 	.word	0x40000400
 8006c64:	40000800 	.word	0x40000800
 8006c68:	40000c00 	.word	0x40000c00
 8006c6c:	40013400 	.word	0x40013400
 8006c70:	40014000 	.word	0x40014000
 8006c74:	40014400 	.word	0x40014400
 8006c78:	40014800 	.word	0x40014800

08006c7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b087      	sub	sp, #28
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a1b      	ldr	r3, [r3, #32]
 8006c8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6a1b      	ldr	r3, [r3, #32]
 8006c90:	f023 0201 	bic.w	r2, r3, #1
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	699b      	ldr	r3, [r3, #24]
 8006ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006caa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f023 0303 	bic.w	r3, r3, #3
 8006cb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	f023 0302 	bic.w	r3, r3, #2
 8006cc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	697a      	ldr	r2, [r7, #20]
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	4a2c      	ldr	r2, [pc, #176]	@ (8006d88 <TIM_OC1_SetConfig+0x10c>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d00f      	beq.n	8006cfc <TIM_OC1_SetConfig+0x80>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	4a2b      	ldr	r2, [pc, #172]	@ (8006d8c <TIM_OC1_SetConfig+0x110>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d00b      	beq.n	8006cfc <TIM_OC1_SetConfig+0x80>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4a2a      	ldr	r2, [pc, #168]	@ (8006d90 <TIM_OC1_SetConfig+0x114>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d007      	beq.n	8006cfc <TIM_OC1_SetConfig+0x80>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	4a29      	ldr	r2, [pc, #164]	@ (8006d94 <TIM_OC1_SetConfig+0x118>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d003      	beq.n	8006cfc <TIM_OC1_SetConfig+0x80>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	4a28      	ldr	r2, [pc, #160]	@ (8006d98 <TIM_OC1_SetConfig+0x11c>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d10c      	bne.n	8006d16 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	f023 0308 	bic.w	r3, r3, #8
 8006d02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	697a      	ldr	r2, [r7, #20]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	f023 0304 	bic.w	r3, r3, #4
 8006d14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	4a1b      	ldr	r2, [pc, #108]	@ (8006d88 <TIM_OC1_SetConfig+0x10c>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d00f      	beq.n	8006d3e <TIM_OC1_SetConfig+0xc2>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	4a1a      	ldr	r2, [pc, #104]	@ (8006d8c <TIM_OC1_SetConfig+0x110>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d00b      	beq.n	8006d3e <TIM_OC1_SetConfig+0xc2>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	4a19      	ldr	r2, [pc, #100]	@ (8006d90 <TIM_OC1_SetConfig+0x114>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d007      	beq.n	8006d3e <TIM_OC1_SetConfig+0xc2>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	4a18      	ldr	r2, [pc, #96]	@ (8006d94 <TIM_OC1_SetConfig+0x118>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d003      	beq.n	8006d3e <TIM_OC1_SetConfig+0xc2>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4a17      	ldr	r2, [pc, #92]	@ (8006d98 <TIM_OC1_SetConfig+0x11c>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d111      	bne.n	8006d62 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006d4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	695b      	ldr	r3, [r3, #20]
 8006d52:	693a      	ldr	r2, [r7, #16]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	699b      	ldr	r3, [r3, #24]
 8006d5c:	693a      	ldr	r2, [r7, #16]
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	693a      	ldr	r2, [r7, #16]
 8006d66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	68fa      	ldr	r2, [r7, #12]
 8006d6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	685a      	ldr	r2, [r3, #4]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	697a      	ldr	r2, [r7, #20]
 8006d7a:	621a      	str	r2, [r3, #32]
}
 8006d7c:	bf00      	nop
 8006d7e:	371c      	adds	r7, #28
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr
 8006d88:	40012c00 	.word	0x40012c00
 8006d8c:	40013400 	.word	0x40013400
 8006d90:	40014000 	.word	0x40014000
 8006d94:	40014400 	.word	0x40014400
 8006d98:	40014800 	.word	0x40014800

08006d9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b087      	sub	sp, #28
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6a1b      	ldr	r3, [r3, #32]
 8006daa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6a1b      	ldr	r3, [r3, #32]
 8006db0:	f023 0210 	bic.w	r2, r3, #16
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	699b      	ldr	r3, [r3, #24]
 8006dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006dca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006dce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006dd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	021b      	lsls	r3, r3, #8
 8006dde:	68fa      	ldr	r2, [r7, #12]
 8006de0:	4313      	orrs	r3, r2
 8006de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	f023 0320 	bic.w	r3, r3, #32
 8006dea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	011b      	lsls	r3, r3, #4
 8006df2:	697a      	ldr	r2, [r7, #20]
 8006df4:	4313      	orrs	r3, r2
 8006df6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	4a28      	ldr	r2, [pc, #160]	@ (8006e9c <TIM_OC2_SetConfig+0x100>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d003      	beq.n	8006e08 <TIM_OC2_SetConfig+0x6c>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	4a27      	ldr	r2, [pc, #156]	@ (8006ea0 <TIM_OC2_SetConfig+0x104>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d10d      	bne.n	8006e24 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	011b      	lsls	r3, r3, #4
 8006e16:	697a      	ldr	r2, [r7, #20]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e22:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	4a1d      	ldr	r2, [pc, #116]	@ (8006e9c <TIM_OC2_SetConfig+0x100>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d00f      	beq.n	8006e4c <TIM_OC2_SetConfig+0xb0>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	4a1c      	ldr	r2, [pc, #112]	@ (8006ea0 <TIM_OC2_SetConfig+0x104>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d00b      	beq.n	8006e4c <TIM_OC2_SetConfig+0xb0>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	4a1b      	ldr	r2, [pc, #108]	@ (8006ea4 <TIM_OC2_SetConfig+0x108>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d007      	beq.n	8006e4c <TIM_OC2_SetConfig+0xb0>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4a1a      	ldr	r2, [pc, #104]	@ (8006ea8 <TIM_OC2_SetConfig+0x10c>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d003      	beq.n	8006e4c <TIM_OC2_SetConfig+0xb0>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	4a19      	ldr	r2, [pc, #100]	@ (8006eac <TIM_OC2_SetConfig+0x110>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d113      	bne.n	8006e74 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006e52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006e5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	695b      	ldr	r3, [r3, #20]
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	693a      	ldr	r2, [r7, #16]
 8006e64:	4313      	orrs	r3, r2
 8006e66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	699b      	ldr	r3, [r3, #24]
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	693a      	ldr	r2, [r7, #16]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	693a      	ldr	r2, [r7, #16]
 8006e78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	68fa      	ldr	r2, [r7, #12]
 8006e7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	685a      	ldr	r2, [r3, #4]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	697a      	ldr	r2, [r7, #20]
 8006e8c:	621a      	str	r2, [r3, #32]
}
 8006e8e:	bf00      	nop
 8006e90:	371c      	adds	r7, #28
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr
 8006e9a:	bf00      	nop
 8006e9c:	40012c00 	.word	0x40012c00
 8006ea0:	40013400 	.word	0x40013400
 8006ea4:	40014000 	.word	0x40014000
 8006ea8:	40014400 	.word	0x40014400
 8006eac:	40014800 	.word	0x40014800

08006eb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b087      	sub	sp, #28
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a1b      	ldr	r3, [r3, #32]
 8006ebe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6a1b      	ldr	r3, [r3, #32]
 8006ec4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	69db      	ldr	r3, [r3, #28]
 8006ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ede:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ee2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f023 0303 	bic.w	r3, r3, #3
 8006eea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	68fa      	ldr	r2, [r7, #12]
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006efc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	021b      	lsls	r3, r3, #8
 8006f04:	697a      	ldr	r2, [r7, #20]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a27      	ldr	r2, [pc, #156]	@ (8006fac <TIM_OC3_SetConfig+0xfc>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d003      	beq.n	8006f1a <TIM_OC3_SetConfig+0x6a>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a26      	ldr	r2, [pc, #152]	@ (8006fb0 <TIM_OC3_SetConfig+0x100>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d10d      	bne.n	8006f36 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006f20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	68db      	ldr	r3, [r3, #12]
 8006f26:	021b      	lsls	r3, r3, #8
 8006f28:	697a      	ldr	r2, [r7, #20]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006f34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	4a1c      	ldr	r2, [pc, #112]	@ (8006fac <TIM_OC3_SetConfig+0xfc>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d00f      	beq.n	8006f5e <TIM_OC3_SetConfig+0xae>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4a1b      	ldr	r2, [pc, #108]	@ (8006fb0 <TIM_OC3_SetConfig+0x100>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d00b      	beq.n	8006f5e <TIM_OC3_SetConfig+0xae>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4a1a      	ldr	r2, [pc, #104]	@ (8006fb4 <TIM_OC3_SetConfig+0x104>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d007      	beq.n	8006f5e <TIM_OC3_SetConfig+0xae>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4a19      	ldr	r2, [pc, #100]	@ (8006fb8 <TIM_OC3_SetConfig+0x108>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d003      	beq.n	8006f5e <TIM_OC3_SetConfig+0xae>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4a18      	ldr	r2, [pc, #96]	@ (8006fbc <TIM_OC3_SetConfig+0x10c>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d113      	bne.n	8006f86 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006f6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	695b      	ldr	r3, [r3, #20]
 8006f72:	011b      	lsls	r3, r3, #4
 8006f74:	693a      	ldr	r2, [r7, #16]
 8006f76:	4313      	orrs	r3, r2
 8006f78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	699b      	ldr	r3, [r3, #24]
 8006f7e:	011b      	lsls	r3, r3, #4
 8006f80:	693a      	ldr	r2, [r7, #16]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	693a      	ldr	r2, [r7, #16]
 8006f8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	68fa      	ldr	r2, [r7, #12]
 8006f90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	685a      	ldr	r2, [r3, #4]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	697a      	ldr	r2, [r7, #20]
 8006f9e:	621a      	str	r2, [r3, #32]
}
 8006fa0:	bf00      	nop
 8006fa2:	371c      	adds	r7, #28
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr
 8006fac:	40012c00 	.word	0x40012c00
 8006fb0:	40013400 	.word	0x40013400
 8006fb4:	40014000 	.word	0x40014000
 8006fb8:	40014400 	.word	0x40014400
 8006fbc:	40014800 	.word	0x40014800

08006fc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b087      	sub	sp, #28
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6a1b      	ldr	r3, [r3, #32]
 8006fce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6a1b      	ldr	r3, [r3, #32]
 8006fd4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	69db      	ldr	r3, [r3, #28]
 8006fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006fee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ffa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	021b      	lsls	r3, r3, #8
 8007002:	68fa      	ldr	r2, [r7, #12]
 8007004:	4313      	orrs	r3, r2
 8007006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800700e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	031b      	lsls	r3, r3, #12
 8007016:	693a      	ldr	r2, [r7, #16]
 8007018:	4313      	orrs	r3, r2
 800701a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	4a18      	ldr	r2, [pc, #96]	@ (8007080 <TIM_OC4_SetConfig+0xc0>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d00f      	beq.n	8007044 <TIM_OC4_SetConfig+0x84>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	4a17      	ldr	r2, [pc, #92]	@ (8007084 <TIM_OC4_SetConfig+0xc4>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d00b      	beq.n	8007044 <TIM_OC4_SetConfig+0x84>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	4a16      	ldr	r2, [pc, #88]	@ (8007088 <TIM_OC4_SetConfig+0xc8>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d007      	beq.n	8007044 <TIM_OC4_SetConfig+0x84>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	4a15      	ldr	r2, [pc, #84]	@ (800708c <TIM_OC4_SetConfig+0xcc>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d003      	beq.n	8007044 <TIM_OC4_SetConfig+0x84>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	4a14      	ldr	r2, [pc, #80]	@ (8007090 <TIM_OC4_SetConfig+0xd0>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d109      	bne.n	8007058 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800704a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	695b      	ldr	r3, [r3, #20]
 8007050:	019b      	lsls	r3, r3, #6
 8007052:	697a      	ldr	r2, [r7, #20]
 8007054:	4313      	orrs	r3, r2
 8007056:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	697a      	ldr	r2, [r7, #20]
 800705c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	68fa      	ldr	r2, [r7, #12]
 8007062:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	685a      	ldr	r2, [r3, #4]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	693a      	ldr	r2, [r7, #16]
 8007070:	621a      	str	r2, [r3, #32]
}
 8007072:	bf00      	nop
 8007074:	371c      	adds	r7, #28
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr
 800707e:	bf00      	nop
 8007080:	40012c00 	.word	0x40012c00
 8007084:	40013400 	.word	0x40013400
 8007088:	40014000 	.word	0x40014000
 800708c:	40014400 	.word	0x40014400
 8007090:	40014800 	.word	0x40014800

08007094 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007094:	b480      	push	{r7}
 8007096:	b087      	sub	sp, #28
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6a1b      	ldr	r3, [r3, #32]
 80070a2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6a1b      	ldr	r3, [r3, #32]
 80070a8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	68fa      	ldr	r2, [r7, #12]
 80070ce:	4313      	orrs	r3, r2
 80070d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80070d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	041b      	lsls	r3, r3, #16
 80070e0:	693a      	ldr	r2, [r7, #16]
 80070e2:	4313      	orrs	r3, r2
 80070e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4a17      	ldr	r2, [pc, #92]	@ (8007148 <TIM_OC5_SetConfig+0xb4>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d00f      	beq.n	800710e <TIM_OC5_SetConfig+0x7a>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4a16      	ldr	r2, [pc, #88]	@ (800714c <TIM_OC5_SetConfig+0xb8>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d00b      	beq.n	800710e <TIM_OC5_SetConfig+0x7a>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a15      	ldr	r2, [pc, #84]	@ (8007150 <TIM_OC5_SetConfig+0xbc>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d007      	beq.n	800710e <TIM_OC5_SetConfig+0x7a>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4a14      	ldr	r2, [pc, #80]	@ (8007154 <TIM_OC5_SetConfig+0xc0>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d003      	beq.n	800710e <TIM_OC5_SetConfig+0x7a>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4a13      	ldr	r2, [pc, #76]	@ (8007158 <TIM_OC5_SetConfig+0xc4>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d109      	bne.n	8007122 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007114:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	695b      	ldr	r3, [r3, #20]
 800711a:	021b      	lsls	r3, r3, #8
 800711c:	697a      	ldr	r2, [r7, #20]
 800711e:	4313      	orrs	r3, r2
 8007120:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	697a      	ldr	r2, [r7, #20]
 8007126:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	68fa      	ldr	r2, [r7, #12]
 800712c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	685a      	ldr	r2, [r3, #4]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	693a      	ldr	r2, [r7, #16]
 800713a:	621a      	str	r2, [r3, #32]
}
 800713c:	bf00      	nop
 800713e:	371c      	adds	r7, #28
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr
 8007148:	40012c00 	.word	0x40012c00
 800714c:	40013400 	.word	0x40013400
 8007150:	40014000 	.word	0x40014000
 8007154:	40014400 	.word	0x40014400
 8007158:	40014800 	.word	0x40014800

0800715c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800715c:	b480      	push	{r7}
 800715e:	b087      	sub	sp, #28
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a1b      	ldr	r3, [r3, #32]
 800716a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6a1b      	ldr	r3, [r3, #32]
 8007170:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800718a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800718e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	021b      	lsls	r3, r3, #8
 8007196:	68fa      	ldr	r2, [r7, #12]
 8007198:	4313      	orrs	r3, r2
 800719a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80071a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	051b      	lsls	r3, r3, #20
 80071aa:	693a      	ldr	r2, [r7, #16]
 80071ac:	4313      	orrs	r3, r2
 80071ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4a18      	ldr	r2, [pc, #96]	@ (8007214 <TIM_OC6_SetConfig+0xb8>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d00f      	beq.n	80071d8 <TIM_OC6_SetConfig+0x7c>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4a17      	ldr	r2, [pc, #92]	@ (8007218 <TIM_OC6_SetConfig+0xbc>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d00b      	beq.n	80071d8 <TIM_OC6_SetConfig+0x7c>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	4a16      	ldr	r2, [pc, #88]	@ (800721c <TIM_OC6_SetConfig+0xc0>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d007      	beq.n	80071d8 <TIM_OC6_SetConfig+0x7c>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	4a15      	ldr	r2, [pc, #84]	@ (8007220 <TIM_OC6_SetConfig+0xc4>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d003      	beq.n	80071d8 <TIM_OC6_SetConfig+0x7c>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4a14      	ldr	r2, [pc, #80]	@ (8007224 <TIM_OC6_SetConfig+0xc8>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d109      	bne.n	80071ec <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80071de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	695b      	ldr	r3, [r3, #20]
 80071e4:	029b      	lsls	r3, r3, #10
 80071e6:	697a      	ldr	r2, [r7, #20]
 80071e8:	4313      	orrs	r3, r2
 80071ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	697a      	ldr	r2, [r7, #20]
 80071f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	68fa      	ldr	r2, [r7, #12]
 80071f6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	685a      	ldr	r2, [r3, #4]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	693a      	ldr	r2, [r7, #16]
 8007204:	621a      	str	r2, [r3, #32]
}
 8007206:	bf00      	nop
 8007208:	371c      	adds	r7, #28
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr
 8007212:	bf00      	nop
 8007214:	40012c00 	.word	0x40012c00
 8007218:	40013400 	.word	0x40013400
 800721c:	40014000 	.word	0x40014000
 8007220:	40014400 	.word	0x40014400
 8007224:	40014800 	.word	0x40014800

08007228 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007228:	b480      	push	{r7}
 800722a:	b087      	sub	sp, #28
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	f003 031f 	and.w	r3, r3, #31
 800723a:	2201      	movs	r2, #1
 800723c:	fa02 f303 	lsl.w	r3, r2, r3
 8007240:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	6a1a      	ldr	r2, [r3, #32]
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	43db      	mvns	r3, r3
 800724a:	401a      	ands	r2, r3
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6a1a      	ldr	r2, [r3, #32]
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	f003 031f 	and.w	r3, r3, #31
 800725a:	6879      	ldr	r1, [r7, #4]
 800725c:	fa01 f303 	lsl.w	r3, r1, r3
 8007260:	431a      	orrs	r2, r3
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	621a      	str	r2, [r3, #32]
}
 8007266:	bf00      	nop
 8007268:	371c      	adds	r7, #28
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr
	...

08007274 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007274:	b480      	push	{r7}
 8007276:	b085      	sub	sp, #20
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007284:	2b01      	cmp	r3, #1
 8007286:	d101      	bne.n	800728c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007288:	2302      	movs	r3, #2
 800728a:	e068      	b.n	800735e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2201      	movs	r2, #1
 8007290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2202      	movs	r2, #2
 8007298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a2e      	ldr	r2, [pc, #184]	@ (800736c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d004      	beq.n	80072c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a2d      	ldr	r2, [pc, #180]	@ (8007370 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d108      	bne.n	80072d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80072c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	68fa      	ldr	r2, [r7, #12]
 80072ce:	4313      	orrs	r3, r2
 80072d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	68fa      	ldr	r2, [r7, #12]
 80072e0:	4313      	orrs	r3, r2
 80072e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	68fa      	ldr	r2, [r7, #12]
 80072ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a1e      	ldr	r2, [pc, #120]	@ (800736c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d01d      	beq.n	8007332 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072fe:	d018      	beq.n	8007332 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a1b      	ldr	r2, [pc, #108]	@ (8007374 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d013      	beq.n	8007332 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a1a      	ldr	r2, [pc, #104]	@ (8007378 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d00e      	beq.n	8007332 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a18      	ldr	r2, [pc, #96]	@ (800737c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d009      	beq.n	8007332 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a13      	ldr	r2, [pc, #76]	@ (8007370 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d004      	beq.n	8007332 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a14      	ldr	r2, [pc, #80]	@ (8007380 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d10c      	bne.n	800734c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007338:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	68ba      	ldr	r2, [r7, #8]
 8007340:	4313      	orrs	r3, r2
 8007342:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	68ba      	ldr	r2, [r7, #8]
 800734a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800735c:	2300      	movs	r3, #0
}
 800735e:	4618      	mov	r0, r3
 8007360:	3714      	adds	r7, #20
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr
 800736a:	bf00      	nop
 800736c:	40012c00 	.word	0x40012c00
 8007370:	40013400 	.word	0x40013400
 8007374:	40000400 	.word	0x40000400
 8007378:	40000800 	.word	0x40000800
 800737c:	40000c00 	.word	0x40000c00
 8007380:	40014000 	.word	0x40014000

08007384 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007384:	b480      	push	{r7}
 8007386:	b085      	sub	sp, #20
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800738e:	2300      	movs	r3, #0
 8007390:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007398:	2b01      	cmp	r3, #1
 800739a:	d101      	bne.n	80073a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800739c:	2302      	movs	r3, #2
 800739e:	e065      	b.n	800746c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2201      	movs	r2, #1
 80073a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	68db      	ldr	r3, [r3, #12]
 80073b2:	4313      	orrs	r3, r2
 80073b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	4313      	orrs	r3, r2
 80073c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	4313      	orrs	r3, r2
 80073d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4313      	orrs	r3, r2
 80073de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	691b      	ldr	r3, [r3, #16]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	695b      	ldr	r3, [r3, #20]
 80073f8:	4313      	orrs	r3, r2
 80073fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007406:	4313      	orrs	r3, r2
 8007408:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	699b      	ldr	r3, [r3, #24]
 8007414:	041b      	lsls	r3, r3, #16
 8007416:	4313      	orrs	r3, r2
 8007418:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a16      	ldr	r2, [pc, #88]	@ (8007478 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d004      	beq.n	800742e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a14      	ldr	r2, [pc, #80]	@ (800747c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d115      	bne.n	800745a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007438:	051b      	lsls	r3, r3, #20
 800743a:	4313      	orrs	r3, r2
 800743c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	69db      	ldr	r3, [r3, #28]
 8007448:	4313      	orrs	r3, r2
 800744a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	6a1b      	ldr	r3, [r3, #32]
 8007456:	4313      	orrs	r3, r2
 8007458:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	68fa      	ldr	r2, [r7, #12]
 8007460:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800746a:	2300      	movs	r3, #0
}
 800746c:	4618      	mov	r0, r3
 800746e:	3714      	adds	r7, #20
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr
 8007478:	40012c00 	.word	0x40012c00
 800747c:	40013400 	.word	0x40013400

08007480 <__cvt>:
 8007480:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007484:	ec57 6b10 	vmov	r6, r7, d0
 8007488:	2f00      	cmp	r7, #0
 800748a:	460c      	mov	r4, r1
 800748c:	4619      	mov	r1, r3
 800748e:	463b      	mov	r3, r7
 8007490:	bfbb      	ittet	lt
 8007492:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007496:	461f      	movlt	r7, r3
 8007498:	2300      	movge	r3, #0
 800749a:	232d      	movlt	r3, #45	@ 0x2d
 800749c:	700b      	strb	r3, [r1, #0]
 800749e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80074a0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80074a4:	4691      	mov	r9, r2
 80074a6:	f023 0820 	bic.w	r8, r3, #32
 80074aa:	bfbc      	itt	lt
 80074ac:	4632      	movlt	r2, r6
 80074ae:	4616      	movlt	r6, r2
 80074b0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80074b4:	d005      	beq.n	80074c2 <__cvt+0x42>
 80074b6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80074ba:	d100      	bne.n	80074be <__cvt+0x3e>
 80074bc:	3401      	adds	r4, #1
 80074be:	2102      	movs	r1, #2
 80074c0:	e000      	b.n	80074c4 <__cvt+0x44>
 80074c2:	2103      	movs	r1, #3
 80074c4:	ab03      	add	r3, sp, #12
 80074c6:	9301      	str	r3, [sp, #4]
 80074c8:	ab02      	add	r3, sp, #8
 80074ca:	9300      	str	r3, [sp, #0]
 80074cc:	ec47 6b10 	vmov	d0, r6, r7
 80074d0:	4653      	mov	r3, sl
 80074d2:	4622      	mov	r2, r4
 80074d4:	f000 fdd0 	bl	8008078 <_dtoa_r>
 80074d8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80074dc:	4605      	mov	r5, r0
 80074de:	d119      	bne.n	8007514 <__cvt+0x94>
 80074e0:	f019 0f01 	tst.w	r9, #1
 80074e4:	d00e      	beq.n	8007504 <__cvt+0x84>
 80074e6:	eb00 0904 	add.w	r9, r0, r4
 80074ea:	2200      	movs	r2, #0
 80074ec:	2300      	movs	r3, #0
 80074ee:	4630      	mov	r0, r6
 80074f0:	4639      	mov	r1, r7
 80074f2:	f7f9 fae9 	bl	8000ac8 <__aeabi_dcmpeq>
 80074f6:	b108      	cbz	r0, 80074fc <__cvt+0x7c>
 80074f8:	f8cd 900c 	str.w	r9, [sp, #12]
 80074fc:	2230      	movs	r2, #48	@ 0x30
 80074fe:	9b03      	ldr	r3, [sp, #12]
 8007500:	454b      	cmp	r3, r9
 8007502:	d31e      	bcc.n	8007542 <__cvt+0xc2>
 8007504:	9b03      	ldr	r3, [sp, #12]
 8007506:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007508:	1b5b      	subs	r3, r3, r5
 800750a:	4628      	mov	r0, r5
 800750c:	6013      	str	r3, [r2, #0]
 800750e:	b004      	add	sp, #16
 8007510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007514:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007518:	eb00 0904 	add.w	r9, r0, r4
 800751c:	d1e5      	bne.n	80074ea <__cvt+0x6a>
 800751e:	7803      	ldrb	r3, [r0, #0]
 8007520:	2b30      	cmp	r3, #48	@ 0x30
 8007522:	d10a      	bne.n	800753a <__cvt+0xba>
 8007524:	2200      	movs	r2, #0
 8007526:	2300      	movs	r3, #0
 8007528:	4630      	mov	r0, r6
 800752a:	4639      	mov	r1, r7
 800752c:	f7f9 facc 	bl	8000ac8 <__aeabi_dcmpeq>
 8007530:	b918      	cbnz	r0, 800753a <__cvt+0xba>
 8007532:	f1c4 0401 	rsb	r4, r4, #1
 8007536:	f8ca 4000 	str.w	r4, [sl]
 800753a:	f8da 3000 	ldr.w	r3, [sl]
 800753e:	4499      	add	r9, r3
 8007540:	e7d3      	b.n	80074ea <__cvt+0x6a>
 8007542:	1c59      	adds	r1, r3, #1
 8007544:	9103      	str	r1, [sp, #12]
 8007546:	701a      	strb	r2, [r3, #0]
 8007548:	e7d9      	b.n	80074fe <__cvt+0x7e>

0800754a <__exponent>:
 800754a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800754c:	2900      	cmp	r1, #0
 800754e:	bfba      	itte	lt
 8007550:	4249      	neglt	r1, r1
 8007552:	232d      	movlt	r3, #45	@ 0x2d
 8007554:	232b      	movge	r3, #43	@ 0x2b
 8007556:	2909      	cmp	r1, #9
 8007558:	7002      	strb	r2, [r0, #0]
 800755a:	7043      	strb	r3, [r0, #1]
 800755c:	dd29      	ble.n	80075b2 <__exponent+0x68>
 800755e:	f10d 0307 	add.w	r3, sp, #7
 8007562:	461d      	mov	r5, r3
 8007564:	270a      	movs	r7, #10
 8007566:	461a      	mov	r2, r3
 8007568:	fbb1 f6f7 	udiv	r6, r1, r7
 800756c:	fb07 1416 	mls	r4, r7, r6, r1
 8007570:	3430      	adds	r4, #48	@ 0x30
 8007572:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007576:	460c      	mov	r4, r1
 8007578:	2c63      	cmp	r4, #99	@ 0x63
 800757a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800757e:	4631      	mov	r1, r6
 8007580:	dcf1      	bgt.n	8007566 <__exponent+0x1c>
 8007582:	3130      	adds	r1, #48	@ 0x30
 8007584:	1e94      	subs	r4, r2, #2
 8007586:	f803 1c01 	strb.w	r1, [r3, #-1]
 800758a:	1c41      	adds	r1, r0, #1
 800758c:	4623      	mov	r3, r4
 800758e:	42ab      	cmp	r3, r5
 8007590:	d30a      	bcc.n	80075a8 <__exponent+0x5e>
 8007592:	f10d 0309 	add.w	r3, sp, #9
 8007596:	1a9b      	subs	r3, r3, r2
 8007598:	42ac      	cmp	r4, r5
 800759a:	bf88      	it	hi
 800759c:	2300      	movhi	r3, #0
 800759e:	3302      	adds	r3, #2
 80075a0:	4403      	add	r3, r0
 80075a2:	1a18      	subs	r0, r3, r0
 80075a4:	b003      	add	sp, #12
 80075a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075a8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80075ac:	f801 6f01 	strb.w	r6, [r1, #1]!
 80075b0:	e7ed      	b.n	800758e <__exponent+0x44>
 80075b2:	2330      	movs	r3, #48	@ 0x30
 80075b4:	3130      	adds	r1, #48	@ 0x30
 80075b6:	7083      	strb	r3, [r0, #2]
 80075b8:	70c1      	strb	r1, [r0, #3]
 80075ba:	1d03      	adds	r3, r0, #4
 80075bc:	e7f1      	b.n	80075a2 <__exponent+0x58>
	...

080075c0 <_printf_float>:
 80075c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075c4:	b08d      	sub	sp, #52	@ 0x34
 80075c6:	460c      	mov	r4, r1
 80075c8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80075cc:	4616      	mov	r6, r2
 80075ce:	461f      	mov	r7, r3
 80075d0:	4605      	mov	r5, r0
 80075d2:	f000 fcc5 	bl	8007f60 <_localeconv_r>
 80075d6:	6803      	ldr	r3, [r0, #0]
 80075d8:	9304      	str	r3, [sp, #16]
 80075da:	4618      	mov	r0, r3
 80075dc:	f7f8 fe48 	bl	8000270 <strlen>
 80075e0:	2300      	movs	r3, #0
 80075e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80075e4:	f8d8 3000 	ldr.w	r3, [r8]
 80075e8:	9005      	str	r0, [sp, #20]
 80075ea:	3307      	adds	r3, #7
 80075ec:	f023 0307 	bic.w	r3, r3, #7
 80075f0:	f103 0208 	add.w	r2, r3, #8
 80075f4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80075f8:	f8d4 b000 	ldr.w	fp, [r4]
 80075fc:	f8c8 2000 	str.w	r2, [r8]
 8007600:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007604:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007608:	9307      	str	r3, [sp, #28]
 800760a:	f8cd 8018 	str.w	r8, [sp, #24]
 800760e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007612:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007616:	4b9c      	ldr	r3, [pc, #624]	@ (8007888 <_printf_float+0x2c8>)
 8007618:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800761c:	f7f9 fa86 	bl	8000b2c <__aeabi_dcmpun>
 8007620:	bb70      	cbnz	r0, 8007680 <_printf_float+0xc0>
 8007622:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007626:	4b98      	ldr	r3, [pc, #608]	@ (8007888 <_printf_float+0x2c8>)
 8007628:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800762c:	f7f9 fa60 	bl	8000af0 <__aeabi_dcmple>
 8007630:	bb30      	cbnz	r0, 8007680 <_printf_float+0xc0>
 8007632:	2200      	movs	r2, #0
 8007634:	2300      	movs	r3, #0
 8007636:	4640      	mov	r0, r8
 8007638:	4649      	mov	r1, r9
 800763a:	f7f9 fa4f 	bl	8000adc <__aeabi_dcmplt>
 800763e:	b110      	cbz	r0, 8007646 <_printf_float+0x86>
 8007640:	232d      	movs	r3, #45	@ 0x2d
 8007642:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007646:	4a91      	ldr	r2, [pc, #580]	@ (800788c <_printf_float+0x2cc>)
 8007648:	4b91      	ldr	r3, [pc, #580]	@ (8007890 <_printf_float+0x2d0>)
 800764a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800764e:	bf8c      	ite	hi
 8007650:	4690      	movhi	r8, r2
 8007652:	4698      	movls	r8, r3
 8007654:	2303      	movs	r3, #3
 8007656:	6123      	str	r3, [r4, #16]
 8007658:	f02b 0304 	bic.w	r3, fp, #4
 800765c:	6023      	str	r3, [r4, #0]
 800765e:	f04f 0900 	mov.w	r9, #0
 8007662:	9700      	str	r7, [sp, #0]
 8007664:	4633      	mov	r3, r6
 8007666:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007668:	4621      	mov	r1, r4
 800766a:	4628      	mov	r0, r5
 800766c:	f000 f9d2 	bl	8007a14 <_printf_common>
 8007670:	3001      	adds	r0, #1
 8007672:	f040 808d 	bne.w	8007790 <_printf_float+0x1d0>
 8007676:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800767a:	b00d      	add	sp, #52	@ 0x34
 800767c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007680:	4642      	mov	r2, r8
 8007682:	464b      	mov	r3, r9
 8007684:	4640      	mov	r0, r8
 8007686:	4649      	mov	r1, r9
 8007688:	f7f9 fa50 	bl	8000b2c <__aeabi_dcmpun>
 800768c:	b140      	cbz	r0, 80076a0 <_printf_float+0xe0>
 800768e:	464b      	mov	r3, r9
 8007690:	2b00      	cmp	r3, #0
 8007692:	bfbc      	itt	lt
 8007694:	232d      	movlt	r3, #45	@ 0x2d
 8007696:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800769a:	4a7e      	ldr	r2, [pc, #504]	@ (8007894 <_printf_float+0x2d4>)
 800769c:	4b7e      	ldr	r3, [pc, #504]	@ (8007898 <_printf_float+0x2d8>)
 800769e:	e7d4      	b.n	800764a <_printf_float+0x8a>
 80076a0:	6863      	ldr	r3, [r4, #4]
 80076a2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80076a6:	9206      	str	r2, [sp, #24]
 80076a8:	1c5a      	adds	r2, r3, #1
 80076aa:	d13b      	bne.n	8007724 <_printf_float+0x164>
 80076ac:	2306      	movs	r3, #6
 80076ae:	6063      	str	r3, [r4, #4]
 80076b0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80076b4:	2300      	movs	r3, #0
 80076b6:	6022      	str	r2, [r4, #0]
 80076b8:	9303      	str	r3, [sp, #12]
 80076ba:	ab0a      	add	r3, sp, #40	@ 0x28
 80076bc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80076c0:	ab09      	add	r3, sp, #36	@ 0x24
 80076c2:	9300      	str	r3, [sp, #0]
 80076c4:	6861      	ldr	r1, [r4, #4]
 80076c6:	ec49 8b10 	vmov	d0, r8, r9
 80076ca:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80076ce:	4628      	mov	r0, r5
 80076d0:	f7ff fed6 	bl	8007480 <__cvt>
 80076d4:	9b06      	ldr	r3, [sp, #24]
 80076d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80076d8:	2b47      	cmp	r3, #71	@ 0x47
 80076da:	4680      	mov	r8, r0
 80076dc:	d129      	bne.n	8007732 <_printf_float+0x172>
 80076de:	1cc8      	adds	r0, r1, #3
 80076e0:	db02      	blt.n	80076e8 <_printf_float+0x128>
 80076e2:	6863      	ldr	r3, [r4, #4]
 80076e4:	4299      	cmp	r1, r3
 80076e6:	dd41      	ble.n	800776c <_printf_float+0x1ac>
 80076e8:	f1aa 0a02 	sub.w	sl, sl, #2
 80076ec:	fa5f fa8a 	uxtb.w	sl, sl
 80076f0:	3901      	subs	r1, #1
 80076f2:	4652      	mov	r2, sl
 80076f4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80076f8:	9109      	str	r1, [sp, #36]	@ 0x24
 80076fa:	f7ff ff26 	bl	800754a <__exponent>
 80076fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007700:	1813      	adds	r3, r2, r0
 8007702:	2a01      	cmp	r2, #1
 8007704:	4681      	mov	r9, r0
 8007706:	6123      	str	r3, [r4, #16]
 8007708:	dc02      	bgt.n	8007710 <_printf_float+0x150>
 800770a:	6822      	ldr	r2, [r4, #0]
 800770c:	07d2      	lsls	r2, r2, #31
 800770e:	d501      	bpl.n	8007714 <_printf_float+0x154>
 8007710:	3301      	adds	r3, #1
 8007712:	6123      	str	r3, [r4, #16]
 8007714:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007718:	2b00      	cmp	r3, #0
 800771a:	d0a2      	beq.n	8007662 <_printf_float+0xa2>
 800771c:	232d      	movs	r3, #45	@ 0x2d
 800771e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007722:	e79e      	b.n	8007662 <_printf_float+0xa2>
 8007724:	9a06      	ldr	r2, [sp, #24]
 8007726:	2a47      	cmp	r2, #71	@ 0x47
 8007728:	d1c2      	bne.n	80076b0 <_printf_float+0xf0>
 800772a:	2b00      	cmp	r3, #0
 800772c:	d1c0      	bne.n	80076b0 <_printf_float+0xf0>
 800772e:	2301      	movs	r3, #1
 8007730:	e7bd      	b.n	80076ae <_printf_float+0xee>
 8007732:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007736:	d9db      	bls.n	80076f0 <_printf_float+0x130>
 8007738:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800773c:	d118      	bne.n	8007770 <_printf_float+0x1b0>
 800773e:	2900      	cmp	r1, #0
 8007740:	6863      	ldr	r3, [r4, #4]
 8007742:	dd0b      	ble.n	800775c <_printf_float+0x19c>
 8007744:	6121      	str	r1, [r4, #16]
 8007746:	b913      	cbnz	r3, 800774e <_printf_float+0x18e>
 8007748:	6822      	ldr	r2, [r4, #0]
 800774a:	07d0      	lsls	r0, r2, #31
 800774c:	d502      	bpl.n	8007754 <_printf_float+0x194>
 800774e:	3301      	adds	r3, #1
 8007750:	440b      	add	r3, r1
 8007752:	6123      	str	r3, [r4, #16]
 8007754:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007756:	f04f 0900 	mov.w	r9, #0
 800775a:	e7db      	b.n	8007714 <_printf_float+0x154>
 800775c:	b913      	cbnz	r3, 8007764 <_printf_float+0x1a4>
 800775e:	6822      	ldr	r2, [r4, #0]
 8007760:	07d2      	lsls	r2, r2, #31
 8007762:	d501      	bpl.n	8007768 <_printf_float+0x1a8>
 8007764:	3302      	adds	r3, #2
 8007766:	e7f4      	b.n	8007752 <_printf_float+0x192>
 8007768:	2301      	movs	r3, #1
 800776a:	e7f2      	b.n	8007752 <_printf_float+0x192>
 800776c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007770:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007772:	4299      	cmp	r1, r3
 8007774:	db05      	blt.n	8007782 <_printf_float+0x1c2>
 8007776:	6823      	ldr	r3, [r4, #0]
 8007778:	6121      	str	r1, [r4, #16]
 800777a:	07d8      	lsls	r0, r3, #31
 800777c:	d5ea      	bpl.n	8007754 <_printf_float+0x194>
 800777e:	1c4b      	adds	r3, r1, #1
 8007780:	e7e7      	b.n	8007752 <_printf_float+0x192>
 8007782:	2900      	cmp	r1, #0
 8007784:	bfd4      	ite	le
 8007786:	f1c1 0202 	rsble	r2, r1, #2
 800778a:	2201      	movgt	r2, #1
 800778c:	4413      	add	r3, r2
 800778e:	e7e0      	b.n	8007752 <_printf_float+0x192>
 8007790:	6823      	ldr	r3, [r4, #0]
 8007792:	055a      	lsls	r2, r3, #21
 8007794:	d407      	bmi.n	80077a6 <_printf_float+0x1e6>
 8007796:	6923      	ldr	r3, [r4, #16]
 8007798:	4642      	mov	r2, r8
 800779a:	4631      	mov	r1, r6
 800779c:	4628      	mov	r0, r5
 800779e:	47b8      	blx	r7
 80077a0:	3001      	adds	r0, #1
 80077a2:	d12b      	bne.n	80077fc <_printf_float+0x23c>
 80077a4:	e767      	b.n	8007676 <_printf_float+0xb6>
 80077a6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80077aa:	f240 80dd 	bls.w	8007968 <_printf_float+0x3a8>
 80077ae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80077b2:	2200      	movs	r2, #0
 80077b4:	2300      	movs	r3, #0
 80077b6:	f7f9 f987 	bl	8000ac8 <__aeabi_dcmpeq>
 80077ba:	2800      	cmp	r0, #0
 80077bc:	d033      	beq.n	8007826 <_printf_float+0x266>
 80077be:	4a37      	ldr	r2, [pc, #220]	@ (800789c <_printf_float+0x2dc>)
 80077c0:	2301      	movs	r3, #1
 80077c2:	4631      	mov	r1, r6
 80077c4:	4628      	mov	r0, r5
 80077c6:	47b8      	blx	r7
 80077c8:	3001      	adds	r0, #1
 80077ca:	f43f af54 	beq.w	8007676 <_printf_float+0xb6>
 80077ce:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80077d2:	4543      	cmp	r3, r8
 80077d4:	db02      	blt.n	80077dc <_printf_float+0x21c>
 80077d6:	6823      	ldr	r3, [r4, #0]
 80077d8:	07d8      	lsls	r0, r3, #31
 80077da:	d50f      	bpl.n	80077fc <_printf_float+0x23c>
 80077dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077e0:	4631      	mov	r1, r6
 80077e2:	4628      	mov	r0, r5
 80077e4:	47b8      	blx	r7
 80077e6:	3001      	adds	r0, #1
 80077e8:	f43f af45 	beq.w	8007676 <_printf_float+0xb6>
 80077ec:	f04f 0900 	mov.w	r9, #0
 80077f0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80077f4:	f104 0a1a 	add.w	sl, r4, #26
 80077f8:	45c8      	cmp	r8, r9
 80077fa:	dc09      	bgt.n	8007810 <_printf_float+0x250>
 80077fc:	6823      	ldr	r3, [r4, #0]
 80077fe:	079b      	lsls	r3, r3, #30
 8007800:	f100 8103 	bmi.w	8007a0a <_printf_float+0x44a>
 8007804:	68e0      	ldr	r0, [r4, #12]
 8007806:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007808:	4298      	cmp	r0, r3
 800780a:	bfb8      	it	lt
 800780c:	4618      	movlt	r0, r3
 800780e:	e734      	b.n	800767a <_printf_float+0xba>
 8007810:	2301      	movs	r3, #1
 8007812:	4652      	mov	r2, sl
 8007814:	4631      	mov	r1, r6
 8007816:	4628      	mov	r0, r5
 8007818:	47b8      	blx	r7
 800781a:	3001      	adds	r0, #1
 800781c:	f43f af2b 	beq.w	8007676 <_printf_float+0xb6>
 8007820:	f109 0901 	add.w	r9, r9, #1
 8007824:	e7e8      	b.n	80077f8 <_printf_float+0x238>
 8007826:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007828:	2b00      	cmp	r3, #0
 800782a:	dc39      	bgt.n	80078a0 <_printf_float+0x2e0>
 800782c:	4a1b      	ldr	r2, [pc, #108]	@ (800789c <_printf_float+0x2dc>)
 800782e:	2301      	movs	r3, #1
 8007830:	4631      	mov	r1, r6
 8007832:	4628      	mov	r0, r5
 8007834:	47b8      	blx	r7
 8007836:	3001      	adds	r0, #1
 8007838:	f43f af1d 	beq.w	8007676 <_printf_float+0xb6>
 800783c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007840:	ea59 0303 	orrs.w	r3, r9, r3
 8007844:	d102      	bne.n	800784c <_printf_float+0x28c>
 8007846:	6823      	ldr	r3, [r4, #0]
 8007848:	07d9      	lsls	r1, r3, #31
 800784a:	d5d7      	bpl.n	80077fc <_printf_float+0x23c>
 800784c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007850:	4631      	mov	r1, r6
 8007852:	4628      	mov	r0, r5
 8007854:	47b8      	blx	r7
 8007856:	3001      	adds	r0, #1
 8007858:	f43f af0d 	beq.w	8007676 <_printf_float+0xb6>
 800785c:	f04f 0a00 	mov.w	sl, #0
 8007860:	f104 0b1a 	add.w	fp, r4, #26
 8007864:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007866:	425b      	negs	r3, r3
 8007868:	4553      	cmp	r3, sl
 800786a:	dc01      	bgt.n	8007870 <_printf_float+0x2b0>
 800786c:	464b      	mov	r3, r9
 800786e:	e793      	b.n	8007798 <_printf_float+0x1d8>
 8007870:	2301      	movs	r3, #1
 8007872:	465a      	mov	r2, fp
 8007874:	4631      	mov	r1, r6
 8007876:	4628      	mov	r0, r5
 8007878:	47b8      	blx	r7
 800787a:	3001      	adds	r0, #1
 800787c:	f43f aefb 	beq.w	8007676 <_printf_float+0xb6>
 8007880:	f10a 0a01 	add.w	sl, sl, #1
 8007884:	e7ee      	b.n	8007864 <_printf_float+0x2a4>
 8007886:	bf00      	nop
 8007888:	7fefffff 	.word	0x7fefffff
 800788c:	0800a204 	.word	0x0800a204
 8007890:	0800a200 	.word	0x0800a200
 8007894:	0800a20c 	.word	0x0800a20c
 8007898:	0800a208 	.word	0x0800a208
 800789c:	0800a210 	.word	0x0800a210
 80078a0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80078a2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80078a6:	4553      	cmp	r3, sl
 80078a8:	bfa8      	it	ge
 80078aa:	4653      	movge	r3, sl
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	4699      	mov	r9, r3
 80078b0:	dc36      	bgt.n	8007920 <_printf_float+0x360>
 80078b2:	f04f 0b00 	mov.w	fp, #0
 80078b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80078ba:	f104 021a 	add.w	r2, r4, #26
 80078be:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80078c0:	9306      	str	r3, [sp, #24]
 80078c2:	eba3 0309 	sub.w	r3, r3, r9
 80078c6:	455b      	cmp	r3, fp
 80078c8:	dc31      	bgt.n	800792e <_printf_float+0x36e>
 80078ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078cc:	459a      	cmp	sl, r3
 80078ce:	dc3a      	bgt.n	8007946 <_printf_float+0x386>
 80078d0:	6823      	ldr	r3, [r4, #0]
 80078d2:	07da      	lsls	r2, r3, #31
 80078d4:	d437      	bmi.n	8007946 <_printf_float+0x386>
 80078d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078d8:	ebaa 0903 	sub.w	r9, sl, r3
 80078dc:	9b06      	ldr	r3, [sp, #24]
 80078de:	ebaa 0303 	sub.w	r3, sl, r3
 80078e2:	4599      	cmp	r9, r3
 80078e4:	bfa8      	it	ge
 80078e6:	4699      	movge	r9, r3
 80078e8:	f1b9 0f00 	cmp.w	r9, #0
 80078ec:	dc33      	bgt.n	8007956 <_printf_float+0x396>
 80078ee:	f04f 0800 	mov.w	r8, #0
 80078f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80078f6:	f104 0b1a 	add.w	fp, r4, #26
 80078fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078fc:	ebaa 0303 	sub.w	r3, sl, r3
 8007900:	eba3 0309 	sub.w	r3, r3, r9
 8007904:	4543      	cmp	r3, r8
 8007906:	f77f af79 	ble.w	80077fc <_printf_float+0x23c>
 800790a:	2301      	movs	r3, #1
 800790c:	465a      	mov	r2, fp
 800790e:	4631      	mov	r1, r6
 8007910:	4628      	mov	r0, r5
 8007912:	47b8      	blx	r7
 8007914:	3001      	adds	r0, #1
 8007916:	f43f aeae 	beq.w	8007676 <_printf_float+0xb6>
 800791a:	f108 0801 	add.w	r8, r8, #1
 800791e:	e7ec      	b.n	80078fa <_printf_float+0x33a>
 8007920:	4642      	mov	r2, r8
 8007922:	4631      	mov	r1, r6
 8007924:	4628      	mov	r0, r5
 8007926:	47b8      	blx	r7
 8007928:	3001      	adds	r0, #1
 800792a:	d1c2      	bne.n	80078b2 <_printf_float+0x2f2>
 800792c:	e6a3      	b.n	8007676 <_printf_float+0xb6>
 800792e:	2301      	movs	r3, #1
 8007930:	4631      	mov	r1, r6
 8007932:	4628      	mov	r0, r5
 8007934:	9206      	str	r2, [sp, #24]
 8007936:	47b8      	blx	r7
 8007938:	3001      	adds	r0, #1
 800793a:	f43f ae9c 	beq.w	8007676 <_printf_float+0xb6>
 800793e:	9a06      	ldr	r2, [sp, #24]
 8007940:	f10b 0b01 	add.w	fp, fp, #1
 8007944:	e7bb      	b.n	80078be <_printf_float+0x2fe>
 8007946:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800794a:	4631      	mov	r1, r6
 800794c:	4628      	mov	r0, r5
 800794e:	47b8      	blx	r7
 8007950:	3001      	adds	r0, #1
 8007952:	d1c0      	bne.n	80078d6 <_printf_float+0x316>
 8007954:	e68f      	b.n	8007676 <_printf_float+0xb6>
 8007956:	9a06      	ldr	r2, [sp, #24]
 8007958:	464b      	mov	r3, r9
 800795a:	4442      	add	r2, r8
 800795c:	4631      	mov	r1, r6
 800795e:	4628      	mov	r0, r5
 8007960:	47b8      	blx	r7
 8007962:	3001      	adds	r0, #1
 8007964:	d1c3      	bne.n	80078ee <_printf_float+0x32e>
 8007966:	e686      	b.n	8007676 <_printf_float+0xb6>
 8007968:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800796c:	f1ba 0f01 	cmp.w	sl, #1
 8007970:	dc01      	bgt.n	8007976 <_printf_float+0x3b6>
 8007972:	07db      	lsls	r3, r3, #31
 8007974:	d536      	bpl.n	80079e4 <_printf_float+0x424>
 8007976:	2301      	movs	r3, #1
 8007978:	4642      	mov	r2, r8
 800797a:	4631      	mov	r1, r6
 800797c:	4628      	mov	r0, r5
 800797e:	47b8      	blx	r7
 8007980:	3001      	adds	r0, #1
 8007982:	f43f ae78 	beq.w	8007676 <_printf_float+0xb6>
 8007986:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800798a:	4631      	mov	r1, r6
 800798c:	4628      	mov	r0, r5
 800798e:	47b8      	blx	r7
 8007990:	3001      	adds	r0, #1
 8007992:	f43f ae70 	beq.w	8007676 <_printf_float+0xb6>
 8007996:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800799a:	2200      	movs	r2, #0
 800799c:	2300      	movs	r3, #0
 800799e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80079a2:	f7f9 f891 	bl	8000ac8 <__aeabi_dcmpeq>
 80079a6:	b9c0      	cbnz	r0, 80079da <_printf_float+0x41a>
 80079a8:	4653      	mov	r3, sl
 80079aa:	f108 0201 	add.w	r2, r8, #1
 80079ae:	4631      	mov	r1, r6
 80079b0:	4628      	mov	r0, r5
 80079b2:	47b8      	blx	r7
 80079b4:	3001      	adds	r0, #1
 80079b6:	d10c      	bne.n	80079d2 <_printf_float+0x412>
 80079b8:	e65d      	b.n	8007676 <_printf_float+0xb6>
 80079ba:	2301      	movs	r3, #1
 80079bc:	465a      	mov	r2, fp
 80079be:	4631      	mov	r1, r6
 80079c0:	4628      	mov	r0, r5
 80079c2:	47b8      	blx	r7
 80079c4:	3001      	adds	r0, #1
 80079c6:	f43f ae56 	beq.w	8007676 <_printf_float+0xb6>
 80079ca:	f108 0801 	add.w	r8, r8, #1
 80079ce:	45d0      	cmp	r8, sl
 80079d0:	dbf3      	blt.n	80079ba <_printf_float+0x3fa>
 80079d2:	464b      	mov	r3, r9
 80079d4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80079d8:	e6df      	b.n	800779a <_printf_float+0x1da>
 80079da:	f04f 0800 	mov.w	r8, #0
 80079de:	f104 0b1a 	add.w	fp, r4, #26
 80079e2:	e7f4      	b.n	80079ce <_printf_float+0x40e>
 80079e4:	2301      	movs	r3, #1
 80079e6:	4642      	mov	r2, r8
 80079e8:	e7e1      	b.n	80079ae <_printf_float+0x3ee>
 80079ea:	2301      	movs	r3, #1
 80079ec:	464a      	mov	r2, r9
 80079ee:	4631      	mov	r1, r6
 80079f0:	4628      	mov	r0, r5
 80079f2:	47b8      	blx	r7
 80079f4:	3001      	adds	r0, #1
 80079f6:	f43f ae3e 	beq.w	8007676 <_printf_float+0xb6>
 80079fa:	f108 0801 	add.w	r8, r8, #1
 80079fe:	68e3      	ldr	r3, [r4, #12]
 8007a00:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007a02:	1a5b      	subs	r3, r3, r1
 8007a04:	4543      	cmp	r3, r8
 8007a06:	dcf0      	bgt.n	80079ea <_printf_float+0x42a>
 8007a08:	e6fc      	b.n	8007804 <_printf_float+0x244>
 8007a0a:	f04f 0800 	mov.w	r8, #0
 8007a0e:	f104 0919 	add.w	r9, r4, #25
 8007a12:	e7f4      	b.n	80079fe <_printf_float+0x43e>

08007a14 <_printf_common>:
 8007a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a18:	4616      	mov	r6, r2
 8007a1a:	4698      	mov	r8, r3
 8007a1c:	688a      	ldr	r2, [r1, #8]
 8007a1e:	690b      	ldr	r3, [r1, #16]
 8007a20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007a24:	4293      	cmp	r3, r2
 8007a26:	bfb8      	it	lt
 8007a28:	4613      	movlt	r3, r2
 8007a2a:	6033      	str	r3, [r6, #0]
 8007a2c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007a30:	4607      	mov	r7, r0
 8007a32:	460c      	mov	r4, r1
 8007a34:	b10a      	cbz	r2, 8007a3a <_printf_common+0x26>
 8007a36:	3301      	adds	r3, #1
 8007a38:	6033      	str	r3, [r6, #0]
 8007a3a:	6823      	ldr	r3, [r4, #0]
 8007a3c:	0699      	lsls	r1, r3, #26
 8007a3e:	bf42      	ittt	mi
 8007a40:	6833      	ldrmi	r3, [r6, #0]
 8007a42:	3302      	addmi	r3, #2
 8007a44:	6033      	strmi	r3, [r6, #0]
 8007a46:	6825      	ldr	r5, [r4, #0]
 8007a48:	f015 0506 	ands.w	r5, r5, #6
 8007a4c:	d106      	bne.n	8007a5c <_printf_common+0x48>
 8007a4e:	f104 0a19 	add.w	sl, r4, #25
 8007a52:	68e3      	ldr	r3, [r4, #12]
 8007a54:	6832      	ldr	r2, [r6, #0]
 8007a56:	1a9b      	subs	r3, r3, r2
 8007a58:	42ab      	cmp	r3, r5
 8007a5a:	dc26      	bgt.n	8007aaa <_printf_common+0x96>
 8007a5c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007a60:	6822      	ldr	r2, [r4, #0]
 8007a62:	3b00      	subs	r3, #0
 8007a64:	bf18      	it	ne
 8007a66:	2301      	movne	r3, #1
 8007a68:	0692      	lsls	r2, r2, #26
 8007a6a:	d42b      	bmi.n	8007ac4 <_printf_common+0xb0>
 8007a6c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007a70:	4641      	mov	r1, r8
 8007a72:	4638      	mov	r0, r7
 8007a74:	47c8      	blx	r9
 8007a76:	3001      	adds	r0, #1
 8007a78:	d01e      	beq.n	8007ab8 <_printf_common+0xa4>
 8007a7a:	6823      	ldr	r3, [r4, #0]
 8007a7c:	6922      	ldr	r2, [r4, #16]
 8007a7e:	f003 0306 	and.w	r3, r3, #6
 8007a82:	2b04      	cmp	r3, #4
 8007a84:	bf02      	ittt	eq
 8007a86:	68e5      	ldreq	r5, [r4, #12]
 8007a88:	6833      	ldreq	r3, [r6, #0]
 8007a8a:	1aed      	subeq	r5, r5, r3
 8007a8c:	68a3      	ldr	r3, [r4, #8]
 8007a8e:	bf0c      	ite	eq
 8007a90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a94:	2500      	movne	r5, #0
 8007a96:	4293      	cmp	r3, r2
 8007a98:	bfc4      	itt	gt
 8007a9a:	1a9b      	subgt	r3, r3, r2
 8007a9c:	18ed      	addgt	r5, r5, r3
 8007a9e:	2600      	movs	r6, #0
 8007aa0:	341a      	adds	r4, #26
 8007aa2:	42b5      	cmp	r5, r6
 8007aa4:	d11a      	bne.n	8007adc <_printf_common+0xc8>
 8007aa6:	2000      	movs	r0, #0
 8007aa8:	e008      	b.n	8007abc <_printf_common+0xa8>
 8007aaa:	2301      	movs	r3, #1
 8007aac:	4652      	mov	r2, sl
 8007aae:	4641      	mov	r1, r8
 8007ab0:	4638      	mov	r0, r7
 8007ab2:	47c8      	blx	r9
 8007ab4:	3001      	adds	r0, #1
 8007ab6:	d103      	bne.n	8007ac0 <_printf_common+0xac>
 8007ab8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ac0:	3501      	adds	r5, #1
 8007ac2:	e7c6      	b.n	8007a52 <_printf_common+0x3e>
 8007ac4:	18e1      	adds	r1, r4, r3
 8007ac6:	1c5a      	adds	r2, r3, #1
 8007ac8:	2030      	movs	r0, #48	@ 0x30
 8007aca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007ace:	4422      	add	r2, r4
 8007ad0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007ad4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007ad8:	3302      	adds	r3, #2
 8007ada:	e7c7      	b.n	8007a6c <_printf_common+0x58>
 8007adc:	2301      	movs	r3, #1
 8007ade:	4622      	mov	r2, r4
 8007ae0:	4641      	mov	r1, r8
 8007ae2:	4638      	mov	r0, r7
 8007ae4:	47c8      	blx	r9
 8007ae6:	3001      	adds	r0, #1
 8007ae8:	d0e6      	beq.n	8007ab8 <_printf_common+0xa4>
 8007aea:	3601      	adds	r6, #1
 8007aec:	e7d9      	b.n	8007aa2 <_printf_common+0x8e>
	...

08007af0 <_printf_i>:
 8007af0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007af4:	7e0f      	ldrb	r7, [r1, #24]
 8007af6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007af8:	2f78      	cmp	r7, #120	@ 0x78
 8007afa:	4691      	mov	r9, r2
 8007afc:	4680      	mov	r8, r0
 8007afe:	460c      	mov	r4, r1
 8007b00:	469a      	mov	sl, r3
 8007b02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007b06:	d807      	bhi.n	8007b18 <_printf_i+0x28>
 8007b08:	2f62      	cmp	r7, #98	@ 0x62
 8007b0a:	d80a      	bhi.n	8007b22 <_printf_i+0x32>
 8007b0c:	2f00      	cmp	r7, #0
 8007b0e:	f000 80d1 	beq.w	8007cb4 <_printf_i+0x1c4>
 8007b12:	2f58      	cmp	r7, #88	@ 0x58
 8007b14:	f000 80b8 	beq.w	8007c88 <_printf_i+0x198>
 8007b18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007b20:	e03a      	b.n	8007b98 <_printf_i+0xa8>
 8007b22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007b26:	2b15      	cmp	r3, #21
 8007b28:	d8f6      	bhi.n	8007b18 <_printf_i+0x28>
 8007b2a:	a101      	add	r1, pc, #4	@ (adr r1, 8007b30 <_printf_i+0x40>)
 8007b2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b30:	08007b89 	.word	0x08007b89
 8007b34:	08007b9d 	.word	0x08007b9d
 8007b38:	08007b19 	.word	0x08007b19
 8007b3c:	08007b19 	.word	0x08007b19
 8007b40:	08007b19 	.word	0x08007b19
 8007b44:	08007b19 	.word	0x08007b19
 8007b48:	08007b9d 	.word	0x08007b9d
 8007b4c:	08007b19 	.word	0x08007b19
 8007b50:	08007b19 	.word	0x08007b19
 8007b54:	08007b19 	.word	0x08007b19
 8007b58:	08007b19 	.word	0x08007b19
 8007b5c:	08007c9b 	.word	0x08007c9b
 8007b60:	08007bc7 	.word	0x08007bc7
 8007b64:	08007c55 	.word	0x08007c55
 8007b68:	08007b19 	.word	0x08007b19
 8007b6c:	08007b19 	.word	0x08007b19
 8007b70:	08007cbd 	.word	0x08007cbd
 8007b74:	08007b19 	.word	0x08007b19
 8007b78:	08007bc7 	.word	0x08007bc7
 8007b7c:	08007b19 	.word	0x08007b19
 8007b80:	08007b19 	.word	0x08007b19
 8007b84:	08007c5d 	.word	0x08007c5d
 8007b88:	6833      	ldr	r3, [r6, #0]
 8007b8a:	1d1a      	adds	r2, r3, #4
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	6032      	str	r2, [r6, #0]
 8007b90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007b98:	2301      	movs	r3, #1
 8007b9a:	e09c      	b.n	8007cd6 <_printf_i+0x1e6>
 8007b9c:	6833      	ldr	r3, [r6, #0]
 8007b9e:	6820      	ldr	r0, [r4, #0]
 8007ba0:	1d19      	adds	r1, r3, #4
 8007ba2:	6031      	str	r1, [r6, #0]
 8007ba4:	0606      	lsls	r6, r0, #24
 8007ba6:	d501      	bpl.n	8007bac <_printf_i+0xbc>
 8007ba8:	681d      	ldr	r5, [r3, #0]
 8007baa:	e003      	b.n	8007bb4 <_printf_i+0xc4>
 8007bac:	0645      	lsls	r5, r0, #25
 8007bae:	d5fb      	bpl.n	8007ba8 <_printf_i+0xb8>
 8007bb0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007bb4:	2d00      	cmp	r5, #0
 8007bb6:	da03      	bge.n	8007bc0 <_printf_i+0xd0>
 8007bb8:	232d      	movs	r3, #45	@ 0x2d
 8007bba:	426d      	negs	r5, r5
 8007bbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007bc0:	4858      	ldr	r0, [pc, #352]	@ (8007d24 <_printf_i+0x234>)
 8007bc2:	230a      	movs	r3, #10
 8007bc4:	e011      	b.n	8007bea <_printf_i+0xfa>
 8007bc6:	6821      	ldr	r1, [r4, #0]
 8007bc8:	6833      	ldr	r3, [r6, #0]
 8007bca:	0608      	lsls	r0, r1, #24
 8007bcc:	f853 5b04 	ldr.w	r5, [r3], #4
 8007bd0:	d402      	bmi.n	8007bd8 <_printf_i+0xe8>
 8007bd2:	0649      	lsls	r1, r1, #25
 8007bd4:	bf48      	it	mi
 8007bd6:	b2ad      	uxthmi	r5, r5
 8007bd8:	2f6f      	cmp	r7, #111	@ 0x6f
 8007bda:	4852      	ldr	r0, [pc, #328]	@ (8007d24 <_printf_i+0x234>)
 8007bdc:	6033      	str	r3, [r6, #0]
 8007bde:	bf14      	ite	ne
 8007be0:	230a      	movne	r3, #10
 8007be2:	2308      	moveq	r3, #8
 8007be4:	2100      	movs	r1, #0
 8007be6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007bea:	6866      	ldr	r6, [r4, #4]
 8007bec:	60a6      	str	r6, [r4, #8]
 8007bee:	2e00      	cmp	r6, #0
 8007bf0:	db05      	blt.n	8007bfe <_printf_i+0x10e>
 8007bf2:	6821      	ldr	r1, [r4, #0]
 8007bf4:	432e      	orrs	r6, r5
 8007bf6:	f021 0104 	bic.w	r1, r1, #4
 8007bfa:	6021      	str	r1, [r4, #0]
 8007bfc:	d04b      	beq.n	8007c96 <_printf_i+0x1a6>
 8007bfe:	4616      	mov	r6, r2
 8007c00:	fbb5 f1f3 	udiv	r1, r5, r3
 8007c04:	fb03 5711 	mls	r7, r3, r1, r5
 8007c08:	5dc7      	ldrb	r7, [r0, r7]
 8007c0a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c0e:	462f      	mov	r7, r5
 8007c10:	42bb      	cmp	r3, r7
 8007c12:	460d      	mov	r5, r1
 8007c14:	d9f4      	bls.n	8007c00 <_printf_i+0x110>
 8007c16:	2b08      	cmp	r3, #8
 8007c18:	d10b      	bne.n	8007c32 <_printf_i+0x142>
 8007c1a:	6823      	ldr	r3, [r4, #0]
 8007c1c:	07df      	lsls	r7, r3, #31
 8007c1e:	d508      	bpl.n	8007c32 <_printf_i+0x142>
 8007c20:	6923      	ldr	r3, [r4, #16]
 8007c22:	6861      	ldr	r1, [r4, #4]
 8007c24:	4299      	cmp	r1, r3
 8007c26:	bfde      	ittt	le
 8007c28:	2330      	movle	r3, #48	@ 0x30
 8007c2a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007c2e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007c32:	1b92      	subs	r2, r2, r6
 8007c34:	6122      	str	r2, [r4, #16]
 8007c36:	f8cd a000 	str.w	sl, [sp]
 8007c3a:	464b      	mov	r3, r9
 8007c3c:	aa03      	add	r2, sp, #12
 8007c3e:	4621      	mov	r1, r4
 8007c40:	4640      	mov	r0, r8
 8007c42:	f7ff fee7 	bl	8007a14 <_printf_common>
 8007c46:	3001      	adds	r0, #1
 8007c48:	d14a      	bne.n	8007ce0 <_printf_i+0x1f0>
 8007c4a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007c4e:	b004      	add	sp, #16
 8007c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c54:	6823      	ldr	r3, [r4, #0]
 8007c56:	f043 0320 	orr.w	r3, r3, #32
 8007c5a:	6023      	str	r3, [r4, #0]
 8007c5c:	4832      	ldr	r0, [pc, #200]	@ (8007d28 <_printf_i+0x238>)
 8007c5e:	2778      	movs	r7, #120	@ 0x78
 8007c60:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007c64:	6823      	ldr	r3, [r4, #0]
 8007c66:	6831      	ldr	r1, [r6, #0]
 8007c68:	061f      	lsls	r7, r3, #24
 8007c6a:	f851 5b04 	ldr.w	r5, [r1], #4
 8007c6e:	d402      	bmi.n	8007c76 <_printf_i+0x186>
 8007c70:	065f      	lsls	r7, r3, #25
 8007c72:	bf48      	it	mi
 8007c74:	b2ad      	uxthmi	r5, r5
 8007c76:	6031      	str	r1, [r6, #0]
 8007c78:	07d9      	lsls	r1, r3, #31
 8007c7a:	bf44      	itt	mi
 8007c7c:	f043 0320 	orrmi.w	r3, r3, #32
 8007c80:	6023      	strmi	r3, [r4, #0]
 8007c82:	b11d      	cbz	r5, 8007c8c <_printf_i+0x19c>
 8007c84:	2310      	movs	r3, #16
 8007c86:	e7ad      	b.n	8007be4 <_printf_i+0xf4>
 8007c88:	4826      	ldr	r0, [pc, #152]	@ (8007d24 <_printf_i+0x234>)
 8007c8a:	e7e9      	b.n	8007c60 <_printf_i+0x170>
 8007c8c:	6823      	ldr	r3, [r4, #0]
 8007c8e:	f023 0320 	bic.w	r3, r3, #32
 8007c92:	6023      	str	r3, [r4, #0]
 8007c94:	e7f6      	b.n	8007c84 <_printf_i+0x194>
 8007c96:	4616      	mov	r6, r2
 8007c98:	e7bd      	b.n	8007c16 <_printf_i+0x126>
 8007c9a:	6833      	ldr	r3, [r6, #0]
 8007c9c:	6825      	ldr	r5, [r4, #0]
 8007c9e:	6961      	ldr	r1, [r4, #20]
 8007ca0:	1d18      	adds	r0, r3, #4
 8007ca2:	6030      	str	r0, [r6, #0]
 8007ca4:	062e      	lsls	r6, r5, #24
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	d501      	bpl.n	8007cae <_printf_i+0x1be>
 8007caa:	6019      	str	r1, [r3, #0]
 8007cac:	e002      	b.n	8007cb4 <_printf_i+0x1c4>
 8007cae:	0668      	lsls	r0, r5, #25
 8007cb0:	d5fb      	bpl.n	8007caa <_printf_i+0x1ba>
 8007cb2:	8019      	strh	r1, [r3, #0]
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	6123      	str	r3, [r4, #16]
 8007cb8:	4616      	mov	r6, r2
 8007cba:	e7bc      	b.n	8007c36 <_printf_i+0x146>
 8007cbc:	6833      	ldr	r3, [r6, #0]
 8007cbe:	1d1a      	adds	r2, r3, #4
 8007cc0:	6032      	str	r2, [r6, #0]
 8007cc2:	681e      	ldr	r6, [r3, #0]
 8007cc4:	6862      	ldr	r2, [r4, #4]
 8007cc6:	2100      	movs	r1, #0
 8007cc8:	4630      	mov	r0, r6
 8007cca:	f7f8 fa81 	bl	80001d0 <memchr>
 8007cce:	b108      	cbz	r0, 8007cd4 <_printf_i+0x1e4>
 8007cd0:	1b80      	subs	r0, r0, r6
 8007cd2:	6060      	str	r0, [r4, #4]
 8007cd4:	6863      	ldr	r3, [r4, #4]
 8007cd6:	6123      	str	r3, [r4, #16]
 8007cd8:	2300      	movs	r3, #0
 8007cda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007cde:	e7aa      	b.n	8007c36 <_printf_i+0x146>
 8007ce0:	6923      	ldr	r3, [r4, #16]
 8007ce2:	4632      	mov	r2, r6
 8007ce4:	4649      	mov	r1, r9
 8007ce6:	4640      	mov	r0, r8
 8007ce8:	47d0      	blx	sl
 8007cea:	3001      	adds	r0, #1
 8007cec:	d0ad      	beq.n	8007c4a <_printf_i+0x15a>
 8007cee:	6823      	ldr	r3, [r4, #0]
 8007cf0:	079b      	lsls	r3, r3, #30
 8007cf2:	d413      	bmi.n	8007d1c <_printf_i+0x22c>
 8007cf4:	68e0      	ldr	r0, [r4, #12]
 8007cf6:	9b03      	ldr	r3, [sp, #12]
 8007cf8:	4298      	cmp	r0, r3
 8007cfa:	bfb8      	it	lt
 8007cfc:	4618      	movlt	r0, r3
 8007cfe:	e7a6      	b.n	8007c4e <_printf_i+0x15e>
 8007d00:	2301      	movs	r3, #1
 8007d02:	4632      	mov	r2, r6
 8007d04:	4649      	mov	r1, r9
 8007d06:	4640      	mov	r0, r8
 8007d08:	47d0      	blx	sl
 8007d0a:	3001      	adds	r0, #1
 8007d0c:	d09d      	beq.n	8007c4a <_printf_i+0x15a>
 8007d0e:	3501      	adds	r5, #1
 8007d10:	68e3      	ldr	r3, [r4, #12]
 8007d12:	9903      	ldr	r1, [sp, #12]
 8007d14:	1a5b      	subs	r3, r3, r1
 8007d16:	42ab      	cmp	r3, r5
 8007d18:	dcf2      	bgt.n	8007d00 <_printf_i+0x210>
 8007d1a:	e7eb      	b.n	8007cf4 <_printf_i+0x204>
 8007d1c:	2500      	movs	r5, #0
 8007d1e:	f104 0619 	add.w	r6, r4, #25
 8007d22:	e7f5      	b.n	8007d10 <_printf_i+0x220>
 8007d24:	0800a212 	.word	0x0800a212
 8007d28:	0800a223 	.word	0x0800a223

08007d2c <siprintf>:
 8007d2c:	b40e      	push	{r1, r2, r3}
 8007d2e:	b510      	push	{r4, lr}
 8007d30:	b09d      	sub	sp, #116	@ 0x74
 8007d32:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007d34:	9002      	str	r0, [sp, #8]
 8007d36:	9006      	str	r0, [sp, #24]
 8007d38:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007d3c:	480a      	ldr	r0, [pc, #40]	@ (8007d68 <siprintf+0x3c>)
 8007d3e:	9107      	str	r1, [sp, #28]
 8007d40:	9104      	str	r1, [sp, #16]
 8007d42:	490a      	ldr	r1, [pc, #40]	@ (8007d6c <siprintf+0x40>)
 8007d44:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d48:	9105      	str	r1, [sp, #20]
 8007d4a:	2400      	movs	r4, #0
 8007d4c:	a902      	add	r1, sp, #8
 8007d4e:	6800      	ldr	r0, [r0, #0]
 8007d50:	9301      	str	r3, [sp, #4]
 8007d52:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007d54:	f000 ffbc 	bl	8008cd0 <_svfiprintf_r>
 8007d58:	9b02      	ldr	r3, [sp, #8]
 8007d5a:	701c      	strb	r4, [r3, #0]
 8007d5c:	b01d      	add	sp, #116	@ 0x74
 8007d5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d62:	b003      	add	sp, #12
 8007d64:	4770      	bx	lr
 8007d66:	bf00      	nop
 8007d68:	2000001c 	.word	0x2000001c
 8007d6c:	ffff0208 	.word	0xffff0208

08007d70 <std>:
 8007d70:	2300      	movs	r3, #0
 8007d72:	b510      	push	{r4, lr}
 8007d74:	4604      	mov	r4, r0
 8007d76:	e9c0 3300 	strd	r3, r3, [r0]
 8007d7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d7e:	6083      	str	r3, [r0, #8]
 8007d80:	8181      	strh	r1, [r0, #12]
 8007d82:	6643      	str	r3, [r0, #100]	@ 0x64
 8007d84:	81c2      	strh	r2, [r0, #14]
 8007d86:	6183      	str	r3, [r0, #24]
 8007d88:	4619      	mov	r1, r3
 8007d8a:	2208      	movs	r2, #8
 8007d8c:	305c      	adds	r0, #92	@ 0x5c
 8007d8e:	f000 f8b1 	bl	8007ef4 <memset>
 8007d92:	4b0d      	ldr	r3, [pc, #52]	@ (8007dc8 <std+0x58>)
 8007d94:	6263      	str	r3, [r4, #36]	@ 0x24
 8007d96:	4b0d      	ldr	r3, [pc, #52]	@ (8007dcc <std+0x5c>)
 8007d98:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8007dd0 <std+0x60>)
 8007d9c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8007dd4 <std+0x64>)
 8007da0:	6323      	str	r3, [r4, #48]	@ 0x30
 8007da2:	4b0d      	ldr	r3, [pc, #52]	@ (8007dd8 <std+0x68>)
 8007da4:	6224      	str	r4, [r4, #32]
 8007da6:	429c      	cmp	r4, r3
 8007da8:	d006      	beq.n	8007db8 <std+0x48>
 8007daa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007dae:	4294      	cmp	r4, r2
 8007db0:	d002      	beq.n	8007db8 <std+0x48>
 8007db2:	33d0      	adds	r3, #208	@ 0xd0
 8007db4:	429c      	cmp	r4, r3
 8007db6:	d105      	bne.n	8007dc4 <std+0x54>
 8007db8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007dbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dc0:	f000 b8ca 	b.w	8007f58 <__retarget_lock_init_recursive>
 8007dc4:	bd10      	pop	{r4, pc}
 8007dc6:	bf00      	nop
 8007dc8:	08009881 	.word	0x08009881
 8007dcc:	080098a3 	.word	0x080098a3
 8007dd0:	080098db 	.word	0x080098db
 8007dd4:	080098ff 	.word	0x080098ff
 8007dd8:	200003f4 	.word	0x200003f4

08007ddc <stdio_exit_handler>:
 8007ddc:	4a02      	ldr	r2, [pc, #8]	@ (8007de8 <stdio_exit_handler+0xc>)
 8007dde:	4903      	ldr	r1, [pc, #12]	@ (8007dec <stdio_exit_handler+0x10>)
 8007de0:	4803      	ldr	r0, [pc, #12]	@ (8007df0 <stdio_exit_handler+0x14>)
 8007de2:	f000 b869 	b.w	8007eb8 <_fwalk_sglue>
 8007de6:	bf00      	nop
 8007de8:	20000010 	.word	0x20000010
 8007dec:	08009125 	.word	0x08009125
 8007df0:	20000020 	.word	0x20000020

08007df4 <cleanup_stdio>:
 8007df4:	6841      	ldr	r1, [r0, #4]
 8007df6:	4b0c      	ldr	r3, [pc, #48]	@ (8007e28 <cleanup_stdio+0x34>)
 8007df8:	4299      	cmp	r1, r3
 8007dfa:	b510      	push	{r4, lr}
 8007dfc:	4604      	mov	r4, r0
 8007dfe:	d001      	beq.n	8007e04 <cleanup_stdio+0x10>
 8007e00:	f001 f990 	bl	8009124 <_fflush_r>
 8007e04:	68a1      	ldr	r1, [r4, #8]
 8007e06:	4b09      	ldr	r3, [pc, #36]	@ (8007e2c <cleanup_stdio+0x38>)
 8007e08:	4299      	cmp	r1, r3
 8007e0a:	d002      	beq.n	8007e12 <cleanup_stdio+0x1e>
 8007e0c:	4620      	mov	r0, r4
 8007e0e:	f001 f989 	bl	8009124 <_fflush_r>
 8007e12:	68e1      	ldr	r1, [r4, #12]
 8007e14:	4b06      	ldr	r3, [pc, #24]	@ (8007e30 <cleanup_stdio+0x3c>)
 8007e16:	4299      	cmp	r1, r3
 8007e18:	d004      	beq.n	8007e24 <cleanup_stdio+0x30>
 8007e1a:	4620      	mov	r0, r4
 8007e1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e20:	f001 b980 	b.w	8009124 <_fflush_r>
 8007e24:	bd10      	pop	{r4, pc}
 8007e26:	bf00      	nop
 8007e28:	200003f4 	.word	0x200003f4
 8007e2c:	2000045c 	.word	0x2000045c
 8007e30:	200004c4 	.word	0x200004c4

08007e34 <global_stdio_init.part.0>:
 8007e34:	b510      	push	{r4, lr}
 8007e36:	4b0b      	ldr	r3, [pc, #44]	@ (8007e64 <global_stdio_init.part.0+0x30>)
 8007e38:	4c0b      	ldr	r4, [pc, #44]	@ (8007e68 <global_stdio_init.part.0+0x34>)
 8007e3a:	4a0c      	ldr	r2, [pc, #48]	@ (8007e6c <global_stdio_init.part.0+0x38>)
 8007e3c:	601a      	str	r2, [r3, #0]
 8007e3e:	4620      	mov	r0, r4
 8007e40:	2200      	movs	r2, #0
 8007e42:	2104      	movs	r1, #4
 8007e44:	f7ff ff94 	bl	8007d70 <std>
 8007e48:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	2109      	movs	r1, #9
 8007e50:	f7ff ff8e 	bl	8007d70 <std>
 8007e54:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007e58:	2202      	movs	r2, #2
 8007e5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e5e:	2112      	movs	r1, #18
 8007e60:	f7ff bf86 	b.w	8007d70 <std>
 8007e64:	2000052c 	.word	0x2000052c
 8007e68:	200003f4 	.word	0x200003f4
 8007e6c:	08007ddd 	.word	0x08007ddd

08007e70 <__sfp_lock_acquire>:
 8007e70:	4801      	ldr	r0, [pc, #4]	@ (8007e78 <__sfp_lock_acquire+0x8>)
 8007e72:	f000 b872 	b.w	8007f5a <__retarget_lock_acquire_recursive>
 8007e76:	bf00      	nop
 8007e78:	20000531 	.word	0x20000531

08007e7c <__sfp_lock_release>:
 8007e7c:	4801      	ldr	r0, [pc, #4]	@ (8007e84 <__sfp_lock_release+0x8>)
 8007e7e:	f000 b86d 	b.w	8007f5c <__retarget_lock_release_recursive>
 8007e82:	bf00      	nop
 8007e84:	20000531 	.word	0x20000531

08007e88 <__sinit>:
 8007e88:	b510      	push	{r4, lr}
 8007e8a:	4604      	mov	r4, r0
 8007e8c:	f7ff fff0 	bl	8007e70 <__sfp_lock_acquire>
 8007e90:	6a23      	ldr	r3, [r4, #32]
 8007e92:	b11b      	cbz	r3, 8007e9c <__sinit+0x14>
 8007e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e98:	f7ff bff0 	b.w	8007e7c <__sfp_lock_release>
 8007e9c:	4b04      	ldr	r3, [pc, #16]	@ (8007eb0 <__sinit+0x28>)
 8007e9e:	6223      	str	r3, [r4, #32]
 8007ea0:	4b04      	ldr	r3, [pc, #16]	@ (8007eb4 <__sinit+0x2c>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d1f5      	bne.n	8007e94 <__sinit+0xc>
 8007ea8:	f7ff ffc4 	bl	8007e34 <global_stdio_init.part.0>
 8007eac:	e7f2      	b.n	8007e94 <__sinit+0xc>
 8007eae:	bf00      	nop
 8007eb0:	08007df5 	.word	0x08007df5
 8007eb4:	2000052c 	.word	0x2000052c

08007eb8 <_fwalk_sglue>:
 8007eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ebc:	4607      	mov	r7, r0
 8007ebe:	4688      	mov	r8, r1
 8007ec0:	4614      	mov	r4, r2
 8007ec2:	2600      	movs	r6, #0
 8007ec4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ec8:	f1b9 0901 	subs.w	r9, r9, #1
 8007ecc:	d505      	bpl.n	8007eda <_fwalk_sglue+0x22>
 8007ece:	6824      	ldr	r4, [r4, #0]
 8007ed0:	2c00      	cmp	r4, #0
 8007ed2:	d1f7      	bne.n	8007ec4 <_fwalk_sglue+0xc>
 8007ed4:	4630      	mov	r0, r6
 8007ed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007eda:	89ab      	ldrh	r3, [r5, #12]
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d907      	bls.n	8007ef0 <_fwalk_sglue+0x38>
 8007ee0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	d003      	beq.n	8007ef0 <_fwalk_sglue+0x38>
 8007ee8:	4629      	mov	r1, r5
 8007eea:	4638      	mov	r0, r7
 8007eec:	47c0      	blx	r8
 8007eee:	4306      	orrs	r6, r0
 8007ef0:	3568      	adds	r5, #104	@ 0x68
 8007ef2:	e7e9      	b.n	8007ec8 <_fwalk_sglue+0x10>

08007ef4 <memset>:
 8007ef4:	4402      	add	r2, r0
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d100      	bne.n	8007efe <memset+0xa>
 8007efc:	4770      	bx	lr
 8007efe:	f803 1b01 	strb.w	r1, [r3], #1
 8007f02:	e7f9      	b.n	8007ef8 <memset+0x4>

08007f04 <__errno>:
 8007f04:	4b01      	ldr	r3, [pc, #4]	@ (8007f0c <__errno+0x8>)
 8007f06:	6818      	ldr	r0, [r3, #0]
 8007f08:	4770      	bx	lr
 8007f0a:	bf00      	nop
 8007f0c:	2000001c 	.word	0x2000001c

08007f10 <__libc_init_array>:
 8007f10:	b570      	push	{r4, r5, r6, lr}
 8007f12:	4d0d      	ldr	r5, [pc, #52]	@ (8007f48 <__libc_init_array+0x38>)
 8007f14:	4c0d      	ldr	r4, [pc, #52]	@ (8007f4c <__libc_init_array+0x3c>)
 8007f16:	1b64      	subs	r4, r4, r5
 8007f18:	10a4      	asrs	r4, r4, #2
 8007f1a:	2600      	movs	r6, #0
 8007f1c:	42a6      	cmp	r6, r4
 8007f1e:	d109      	bne.n	8007f34 <__libc_init_array+0x24>
 8007f20:	4d0b      	ldr	r5, [pc, #44]	@ (8007f50 <__libc_init_array+0x40>)
 8007f22:	4c0c      	ldr	r4, [pc, #48]	@ (8007f54 <__libc_init_array+0x44>)
 8007f24:	f002 f8f6 	bl	800a114 <_init>
 8007f28:	1b64      	subs	r4, r4, r5
 8007f2a:	10a4      	asrs	r4, r4, #2
 8007f2c:	2600      	movs	r6, #0
 8007f2e:	42a6      	cmp	r6, r4
 8007f30:	d105      	bne.n	8007f3e <__libc_init_array+0x2e>
 8007f32:	bd70      	pop	{r4, r5, r6, pc}
 8007f34:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f38:	4798      	blx	r3
 8007f3a:	3601      	adds	r6, #1
 8007f3c:	e7ee      	b.n	8007f1c <__libc_init_array+0xc>
 8007f3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f42:	4798      	blx	r3
 8007f44:	3601      	adds	r6, #1
 8007f46:	e7f2      	b.n	8007f2e <__libc_init_array+0x1e>
 8007f48:	0800a57c 	.word	0x0800a57c
 8007f4c:	0800a57c 	.word	0x0800a57c
 8007f50:	0800a57c 	.word	0x0800a57c
 8007f54:	0800a580 	.word	0x0800a580

08007f58 <__retarget_lock_init_recursive>:
 8007f58:	4770      	bx	lr

08007f5a <__retarget_lock_acquire_recursive>:
 8007f5a:	4770      	bx	lr

08007f5c <__retarget_lock_release_recursive>:
 8007f5c:	4770      	bx	lr
	...

08007f60 <_localeconv_r>:
 8007f60:	4800      	ldr	r0, [pc, #0]	@ (8007f64 <_localeconv_r+0x4>)
 8007f62:	4770      	bx	lr
 8007f64:	2000015c 	.word	0x2000015c

08007f68 <quorem>:
 8007f68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f6c:	6903      	ldr	r3, [r0, #16]
 8007f6e:	690c      	ldr	r4, [r1, #16]
 8007f70:	42a3      	cmp	r3, r4
 8007f72:	4607      	mov	r7, r0
 8007f74:	db7e      	blt.n	8008074 <quorem+0x10c>
 8007f76:	3c01      	subs	r4, #1
 8007f78:	f101 0814 	add.w	r8, r1, #20
 8007f7c:	00a3      	lsls	r3, r4, #2
 8007f7e:	f100 0514 	add.w	r5, r0, #20
 8007f82:	9300      	str	r3, [sp, #0]
 8007f84:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f88:	9301      	str	r3, [sp, #4]
 8007f8a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007f8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f92:	3301      	adds	r3, #1
 8007f94:	429a      	cmp	r2, r3
 8007f96:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007f9a:	fbb2 f6f3 	udiv	r6, r2, r3
 8007f9e:	d32e      	bcc.n	8007ffe <quorem+0x96>
 8007fa0:	f04f 0a00 	mov.w	sl, #0
 8007fa4:	46c4      	mov	ip, r8
 8007fa6:	46ae      	mov	lr, r5
 8007fa8:	46d3      	mov	fp, sl
 8007faa:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007fae:	b298      	uxth	r0, r3
 8007fb0:	fb06 a000 	mla	r0, r6, r0, sl
 8007fb4:	0c02      	lsrs	r2, r0, #16
 8007fb6:	0c1b      	lsrs	r3, r3, #16
 8007fb8:	fb06 2303 	mla	r3, r6, r3, r2
 8007fbc:	f8de 2000 	ldr.w	r2, [lr]
 8007fc0:	b280      	uxth	r0, r0
 8007fc2:	b292      	uxth	r2, r2
 8007fc4:	1a12      	subs	r2, r2, r0
 8007fc6:	445a      	add	r2, fp
 8007fc8:	f8de 0000 	ldr.w	r0, [lr]
 8007fcc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007fd6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007fda:	b292      	uxth	r2, r2
 8007fdc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007fe0:	45e1      	cmp	r9, ip
 8007fe2:	f84e 2b04 	str.w	r2, [lr], #4
 8007fe6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007fea:	d2de      	bcs.n	8007faa <quorem+0x42>
 8007fec:	9b00      	ldr	r3, [sp, #0]
 8007fee:	58eb      	ldr	r3, [r5, r3]
 8007ff0:	b92b      	cbnz	r3, 8007ffe <quorem+0x96>
 8007ff2:	9b01      	ldr	r3, [sp, #4]
 8007ff4:	3b04      	subs	r3, #4
 8007ff6:	429d      	cmp	r5, r3
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	d32f      	bcc.n	800805c <quorem+0xf4>
 8007ffc:	613c      	str	r4, [r7, #16]
 8007ffe:	4638      	mov	r0, r7
 8008000:	f001 fb36 	bl	8009670 <__mcmp>
 8008004:	2800      	cmp	r0, #0
 8008006:	db25      	blt.n	8008054 <quorem+0xec>
 8008008:	4629      	mov	r1, r5
 800800a:	2000      	movs	r0, #0
 800800c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008010:	f8d1 c000 	ldr.w	ip, [r1]
 8008014:	fa1f fe82 	uxth.w	lr, r2
 8008018:	fa1f f38c 	uxth.w	r3, ip
 800801c:	eba3 030e 	sub.w	r3, r3, lr
 8008020:	4403      	add	r3, r0
 8008022:	0c12      	lsrs	r2, r2, #16
 8008024:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008028:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800802c:	b29b      	uxth	r3, r3
 800802e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008032:	45c1      	cmp	r9, r8
 8008034:	f841 3b04 	str.w	r3, [r1], #4
 8008038:	ea4f 4022 	mov.w	r0, r2, asr #16
 800803c:	d2e6      	bcs.n	800800c <quorem+0xa4>
 800803e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008042:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008046:	b922      	cbnz	r2, 8008052 <quorem+0xea>
 8008048:	3b04      	subs	r3, #4
 800804a:	429d      	cmp	r5, r3
 800804c:	461a      	mov	r2, r3
 800804e:	d30b      	bcc.n	8008068 <quorem+0x100>
 8008050:	613c      	str	r4, [r7, #16]
 8008052:	3601      	adds	r6, #1
 8008054:	4630      	mov	r0, r6
 8008056:	b003      	add	sp, #12
 8008058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800805c:	6812      	ldr	r2, [r2, #0]
 800805e:	3b04      	subs	r3, #4
 8008060:	2a00      	cmp	r2, #0
 8008062:	d1cb      	bne.n	8007ffc <quorem+0x94>
 8008064:	3c01      	subs	r4, #1
 8008066:	e7c6      	b.n	8007ff6 <quorem+0x8e>
 8008068:	6812      	ldr	r2, [r2, #0]
 800806a:	3b04      	subs	r3, #4
 800806c:	2a00      	cmp	r2, #0
 800806e:	d1ef      	bne.n	8008050 <quorem+0xe8>
 8008070:	3c01      	subs	r4, #1
 8008072:	e7ea      	b.n	800804a <quorem+0xe2>
 8008074:	2000      	movs	r0, #0
 8008076:	e7ee      	b.n	8008056 <quorem+0xee>

08008078 <_dtoa_r>:
 8008078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800807c:	69c7      	ldr	r7, [r0, #28]
 800807e:	b097      	sub	sp, #92	@ 0x5c
 8008080:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008084:	ec55 4b10 	vmov	r4, r5, d0
 8008088:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800808a:	9107      	str	r1, [sp, #28]
 800808c:	4681      	mov	r9, r0
 800808e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008090:	9311      	str	r3, [sp, #68]	@ 0x44
 8008092:	b97f      	cbnz	r7, 80080b4 <_dtoa_r+0x3c>
 8008094:	2010      	movs	r0, #16
 8008096:	f000 ff17 	bl	8008ec8 <malloc>
 800809a:	4602      	mov	r2, r0
 800809c:	f8c9 001c 	str.w	r0, [r9, #28]
 80080a0:	b920      	cbnz	r0, 80080ac <_dtoa_r+0x34>
 80080a2:	4ba9      	ldr	r3, [pc, #676]	@ (8008348 <_dtoa_r+0x2d0>)
 80080a4:	21ef      	movs	r1, #239	@ 0xef
 80080a6:	48a9      	ldr	r0, [pc, #676]	@ (800834c <_dtoa_r+0x2d4>)
 80080a8:	f001 fcda 	bl	8009a60 <__assert_func>
 80080ac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80080b0:	6007      	str	r7, [r0, #0]
 80080b2:	60c7      	str	r7, [r0, #12]
 80080b4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80080b8:	6819      	ldr	r1, [r3, #0]
 80080ba:	b159      	cbz	r1, 80080d4 <_dtoa_r+0x5c>
 80080bc:	685a      	ldr	r2, [r3, #4]
 80080be:	604a      	str	r2, [r1, #4]
 80080c0:	2301      	movs	r3, #1
 80080c2:	4093      	lsls	r3, r2
 80080c4:	608b      	str	r3, [r1, #8]
 80080c6:	4648      	mov	r0, r9
 80080c8:	f001 f8a0 	bl	800920c <_Bfree>
 80080cc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80080d0:	2200      	movs	r2, #0
 80080d2:	601a      	str	r2, [r3, #0]
 80080d4:	1e2b      	subs	r3, r5, #0
 80080d6:	bfb9      	ittee	lt
 80080d8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80080dc:	9305      	strlt	r3, [sp, #20]
 80080de:	2300      	movge	r3, #0
 80080e0:	6033      	strge	r3, [r6, #0]
 80080e2:	9f05      	ldr	r7, [sp, #20]
 80080e4:	4b9a      	ldr	r3, [pc, #616]	@ (8008350 <_dtoa_r+0x2d8>)
 80080e6:	bfbc      	itt	lt
 80080e8:	2201      	movlt	r2, #1
 80080ea:	6032      	strlt	r2, [r6, #0]
 80080ec:	43bb      	bics	r3, r7
 80080ee:	d112      	bne.n	8008116 <_dtoa_r+0x9e>
 80080f0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80080f2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80080f6:	6013      	str	r3, [r2, #0]
 80080f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80080fc:	4323      	orrs	r3, r4
 80080fe:	f000 855a 	beq.w	8008bb6 <_dtoa_r+0xb3e>
 8008102:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008104:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8008364 <_dtoa_r+0x2ec>
 8008108:	2b00      	cmp	r3, #0
 800810a:	f000 855c 	beq.w	8008bc6 <_dtoa_r+0xb4e>
 800810e:	f10a 0303 	add.w	r3, sl, #3
 8008112:	f000 bd56 	b.w	8008bc2 <_dtoa_r+0xb4a>
 8008116:	ed9d 7b04 	vldr	d7, [sp, #16]
 800811a:	2200      	movs	r2, #0
 800811c:	ec51 0b17 	vmov	r0, r1, d7
 8008120:	2300      	movs	r3, #0
 8008122:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8008126:	f7f8 fccf 	bl	8000ac8 <__aeabi_dcmpeq>
 800812a:	4680      	mov	r8, r0
 800812c:	b158      	cbz	r0, 8008146 <_dtoa_r+0xce>
 800812e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008130:	2301      	movs	r3, #1
 8008132:	6013      	str	r3, [r2, #0]
 8008134:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008136:	b113      	cbz	r3, 800813e <_dtoa_r+0xc6>
 8008138:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800813a:	4b86      	ldr	r3, [pc, #536]	@ (8008354 <_dtoa_r+0x2dc>)
 800813c:	6013      	str	r3, [r2, #0]
 800813e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008368 <_dtoa_r+0x2f0>
 8008142:	f000 bd40 	b.w	8008bc6 <_dtoa_r+0xb4e>
 8008146:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800814a:	aa14      	add	r2, sp, #80	@ 0x50
 800814c:	a915      	add	r1, sp, #84	@ 0x54
 800814e:	4648      	mov	r0, r9
 8008150:	f001 fb3e 	bl	80097d0 <__d2b>
 8008154:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008158:	9002      	str	r0, [sp, #8]
 800815a:	2e00      	cmp	r6, #0
 800815c:	d078      	beq.n	8008250 <_dtoa_r+0x1d8>
 800815e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008160:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8008164:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008168:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800816c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008170:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008174:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008178:	4619      	mov	r1, r3
 800817a:	2200      	movs	r2, #0
 800817c:	4b76      	ldr	r3, [pc, #472]	@ (8008358 <_dtoa_r+0x2e0>)
 800817e:	f7f8 f883 	bl	8000288 <__aeabi_dsub>
 8008182:	a36b      	add	r3, pc, #428	@ (adr r3, 8008330 <_dtoa_r+0x2b8>)
 8008184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008188:	f7f8 fa36 	bl	80005f8 <__aeabi_dmul>
 800818c:	a36a      	add	r3, pc, #424	@ (adr r3, 8008338 <_dtoa_r+0x2c0>)
 800818e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008192:	f7f8 f87b 	bl	800028c <__adddf3>
 8008196:	4604      	mov	r4, r0
 8008198:	4630      	mov	r0, r6
 800819a:	460d      	mov	r5, r1
 800819c:	f7f8 f9c2 	bl	8000524 <__aeabi_i2d>
 80081a0:	a367      	add	r3, pc, #412	@ (adr r3, 8008340 <_dtoa_r+0x2c8>)
 80081a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a6:	f7f8 fa27 	bl	80005f8 <__aeabi_dmul>
 80081aa:	4602      	mov	r2, r0
 80081ac:	460b      	mov	r3, r1
 80081ae:	4620      	mov	r0, r4
 80081b0:	4629      	mov	r1, r5
 80081b2:	f7f8 f86b 	bl	800028c <__adddf3>
 80081b6:	4604      	mov	r4, r0
 80081b8:	460d      	mov	r5, r1
 80081ba:	f7f8 fccd 	bl	8000b58 <__aeabi_d2iz>
 80081be:	2200      	movs	r2, #0
 80081c0:	4607      	mov	r7, r0
 80081c2:	2300      	movs	r3, #0
 80081c4:	4620      	mov	r0, r4
 80081c6:	4629      	mov	r1, r5
 80081c8:	f7f8 fc88 	bl	8000adc <__aeabi_dcmplt>
 80081cc:	b140      	cbz	r0, 80081e0 <_dtoa_r+0x168>
 80081ce:	4638      	mov	r0, r7
 80081d0:	f7f8 f9a8 	bl	8000524 <__aeabi_i2d>
 80081d4:	4622      	mov	r2, r4
 80081d6:	462b      	mov	r3, r5
 80081d8:	f7f8 fc76 	bl	8000ac8 <__aeabi_dcmpeq>
 80081dc:	b900      	cbnz	r0, 80081e0 <_dtoa_r+0x168>
 80081de:	3f01      	subs	r7, #1
 80081e0:	2f16      	cmp	r7, #22
 80081e2:	d852      	bhi.n	800828a <_dtoa_r+0x212>
 80081e4:	4b5d      	ldr	r3, [pc, #372]	@ (800835c <_dtoa_r+0x2e4>)
 80081e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80081ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80081f2:	f7f8 fc73 	bl	8000adc <__aeabi_dcmplt>
 80081f6:	2800      	cmp	r0, #0
 80081f8:	d049      	beq.n	800828e <_dtoa_r+0x216>
 80081fa:	3f01      	subs	r7, #1
 80081fc:	2300      	movs	r3, #0
 80081fe:	9310      	str	r3, [sp, #64]	@ 0x40
 8008200:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008202:	1b9b      	subs	r3, r3, r6
 8008204:	1e5a      	subs	r2, r3, #1
 8008206:	bf45      	ittet	mi
 8008208:	f1c3 0301 	rsbmi	r3, r3, #1
 800820c:	9300      	strmi	r3, [sp, #0]
 800820e:	2300      	movpl	r3, #0
 8008210:	2300      	movmi	r3, #0
 8008212:	9206      	str	r2, [sp, #24]
 8008214:	bf54      	ite	pl
 8008216:	9300      	strpl	r3, [sp, #0]
 8008218:	9306      	strmi	r3, [sp, #24]
 800821a:	2f00      	cmp	r7, #0
 800821c:	db39      	blt.n	8008292 <_dtoa_r+0x21a>
 800821e:	9b06      	ldr	r3, [sp, #24]
 8008220:	970d      	str	r7, [sp, #52]	@ 0x34
 8008222:	443b      	add	r3, r7
 8008224:	9306      	str	r3, [sp, #24]
 8008226:	2300      	movs	r3, #0
 8008228:	9308      	str	r3, [sp, #32]
 800822a:	9b07      	ldr	r3, [sp, #28]
 800822c:	2b09      	cmp	r3, #9
 800822e:	d863      	bhi.n	80082f8 <_dtoa_r+0x280>
 8008230:	2b05      	cmp	r3, #5
 8008232:	bfc4      	itt	gt
 8008234:	3b04      	subgt	r3, #4
 8008236:	9307      	strgt	r3, [sp, #28]
 8008238:	9b07      	ldr	r3, [sp, #28]
 800823a:	f1a3 0302 	sub.w	r3, r3, #2
 800823e:	bfcc      	ite	gt
 8008240:	2400      	movgt	r4, #0
 8008242:	2401      	movle	r4, #1
 8008244:	2b03      	cmp	r3, #3
 8008246:	d863      	bhi.n	8008310 <_dtoa_r+0x298>
 8008248:	e8df f003 	tbb	[pc, r3]
 800824c:	2b375452 	.word	0x2b375452
 8008250:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008254:	441e      	add	r6, r3
 8008256:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800825a:	2b20      	cmp	r3, #32
 800825c:	bfc1      	itttt	gt
 800825e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008262:	409f      	lslgt	r7, r3
 8008264:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008268:	fa24 f303 	lsrgt.w	r3, r4, r3
 800826c:	bfd6      	itet	le
 800826e:	f1c3 0320 	rsble	r3, r3, #32
 8008272:	ea47 0003 	orrgt.w	r0, r7, r3
 8008276:	fa04 f003 	lslle.w	r0, r4, r3
 800827a:	f7f8 f943 	bl	8000504 <__aeabi_ui2d>
 800827e:	2201      	movs	r2, #1
 8008280:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008284:	3e01      	subs	r6, #1
 8008286:	9212      	str	r2, [sp, #72]	@ 0x48
 8008288:	e776      	b.n	8008178 <_dtoa_r+0x100>
 800828a:	2301      	movs	r3, #1
 800828c:	e7b7      	b.n	80081fe <_dtoa_r+0x186>
 800828e:	9010      	str	r0, [sp, #64]	@ 0x40
 8008290:	e7b6      	b.n	8008200 <_dtoa_r+0x188>
 8008292:	9b00      	ldr	r3, [sp, #0]
 8008294:	1bdb      	subs	r3, r3, r7
 8008296:	9300      	str	r3, [sp, #0]
 8008298:	427b      	negs	r3, r7
 800829a:	9308      	str	r3, [sp, #32]
 800829c:	2300      	movs	r3, #0
 800829e:	930d      	str	r3, [sp, #52]	@ 0x34
 80082a0:	e7c3      	b.n	800822a <_dtoa_r+0x1b2>
 80082a2:	2301      	movs	r3, #1
 80082a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80082a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80082a8:	eb07 0b03 	add.w	fp, r7, r3
 80082ac:	f10b 0301 	add.w	r3, fp, #1
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	9303      	str	r3, [sp, #12]
 80082b4:	bfb8      	it	lt
 80082b6:	2301      	movlt	r3, #1
 80082b8:	e006      	b.n	80082c8 <_dtoa_r+0x250>
 80082ba:	2301      	movs	r3, #1
 80082bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80082be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	dd28      	ble.n	8008316 <_dtoa_r+0x29e>
 80082c4:	469b      	mov	fp, r3
 80082c6:	9303      	str	r3, [sp, #12]
 80082c8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80082cc:	2100      	movs	r1, #0
 80082ce:	2204      	movs	r2, #4
 80082d0:	f102 0514 	add.w	r5, r2, #20
 80082d4:	429d      	cmp	r5, r3
 80082d6:	d926      	bls.n	8008326 <_dtoa_r+0x2ae>
 80082d8:	6041      	str	r1, [r0, #4]
 80082da:	4648      	mov	r0, r9
 80082dc:	f000 ff56 	bl	800918c <_Balloc>
 80082e0:	4682      	mov	sl, r0
 80082e2:	2800      	cmp	r0, #0
 80082e4:	d142      	bne.n	800836c <_dtoa_r+0x2f4>
 80082e6:	4b1e      	ldr	r3, [pc, #120]	@ (8008360 <_dtoa_r+0x2e8>)
 80082e8:	4602      	mov	r2, r0
 80082ea:	f240 11af 	movw	r1, #431	@ 0x1af
 80082ee:	e6da      	b.n	80080a6 <_dtoa_r+0x2e>
 80082f0:	2300      	movs	r3, #0
 80082f2:	e7e3      	b.n	80082bc <_dtoa_r+0x244>
 80082f4:	2300      	movs	r3, #0
 80082f6:	e7d5      	b.n	80082a4 <_dtoa_r+0x22c>
 80082f8:	2401      	movs	r4, #1
 80082fa:	2300      	movs	r3, #0
 80082fc:	9307      	str	r3, [sp, #28]
 80082fe:	9409      	str	r4, [sp, #36]	@ 0x24
 8008300:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8008304:	2200      	movs	r2, #0
 8008306:	f8cd b00c 	str.w	fp, [sp, #12]
 800830a:	2312      	movs	r3, #18
 800830c:	920c      	str	r2, [sp, #48]	@ 0x30
 800830e:	e7db      	b.n	80082c8 <_dtoa_r+0x250>
 8008310:	2301      	movs	r3, #1
 8008312:	9309      	str	r3, [sp, #36]	@ 0x24
 8008314:	e7f4      	b.n	8008300 <_dtoa_r+0x288>
 8008316:	f04f 0b01 	mov.w	fp, #1
 800831a:	f8cd b00c 	str.w	fp, [sp, #12]
 800831e:	465b      	mov	r3, fp
 8008320:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8008324:	e7d0      	b.n	80082c8 <_dtoa_r+0x250>
 8008326:	3101      	adds	r1, #1
 8008328:	0052      	lsls	r2, r2, #1
 800832a:	e7d1      	b.n	80082d0 <_dtoa_r+0x258>
 800832c:	f3af 8000 	nop.w
 8008330:	636f4361 	.word	0x636f4361
 8008334:	3fd287a7 	.word	0x3fd287a7
 8008338:	8b60c8b3 	.word	0x8b60c8b3
 800833c:	3fc68a28 	.word	0x3fc68a28
 8008340:	509f79fb 	.word	0x509f79fb
 8008344:	3fd34413 	.word	0x3fd34413
 8008348:	0800a241 	.word	0x0800a241
 800834c:	0800a258 	.word	0x0800a258
 8008350:	7ff00000 	.word	0x7ff00000
 8008354:	0800a211 	.word	0x0800a211
 8008358:	3ff80000 	.word	0x3ff80000
 800835c:	0800a3a8 	.word	0x0800a3a8
 8008360:	0800a2b0 	.word	0x0800a2b0
 8008364:	0800a23d 	.word	0x0800a23d
 8008368:	0800a210 	.word	0x0800a210
 800836c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008370:	6018      	str	r0, [r3, #0]
 8008372:	9b03      	ldr	r3, [sp, #12]
 8008374:	2b0e      	cmp	r3, #14
 8008376:	f200 80a1 	bhi.w	80084bc <_dtoa_r+0x444>
 800837a:	2c00      	cmp	r4, #0
 800837c:	f000 809e 	beq.w	80084bc <_dtoa_r+0x444>
 8008380:	2f00      	cmp	r7, #0
 8008382:	dd33      	ble.n	80083ec <_dtoa_r+0x374>
 8008384:	4b9c      	ldr	r3, [pc, #624]	@ (80085f8 <_dtoa_r+0x580>)
 8008386:	f007 020f 	and.w	r2, r7, #15
 800838a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800838e:	ed93 7b00 	vldr	d7, [r3]
 8008392:	05f8      	lsls	r0, r7, #23
 8008394:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008398:	ea4f 1427 	mov.w	r4, r7, asr #4
 800839c:	d516      	bpl.n	80083cc <_dtoa_r+0x354>
 800839e:	4b97      	ldr	r3, [pc, #604]	@ (80085fc <_dtoa_r+0x584>)
 80083a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80083a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80083a8:	f7f8 fa50 	bl	800084c <__aeabi_ddiv>
 80083ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80083b0:	f004 040f 	and.w	r4, r4, #15
 80083b4:	2603      	movs	r6, #3
 80083b6:	4d91      	ldr	r5, [pc, #580]	@ (80085fc <_dtoa_r+0x584>)
 80083b8:	b954      	cbnz	r4, 80083d0 <_dtoa_r+0x358>
 80083ba:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80083be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083c2:	f7f8 fa43 	bl	800084c <__aeabi_ddiv>
 80083c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80083ca:	e028      	b.n	800841e <_dtoa_r+0x3a6>
 80083cc:	2602      	movs	r6, #2
 80083ce:	e7f2      	b.n	80083b6 <_dtoa_r+0x33e>
 80083d0:	07e1      	lsls	r1, r4, #31
 80083d2:	d508      	bpl.n	80083e6 <_dtoa_r+0x36e>
 80083d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80083d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80083dc:	f7f8 f90c 	bl	80005f8 <__aeabi_dmul>
 80083e0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80083e4:	3601      	adds	r6, #1
 80083e6:	1064      	asrs	r4, r4, #1
 80083e8:	3508      	adds	r5, #8
 80083ea:	e7e5      	b.n	80083b8 <_dtoa_r+0x340>
 80083ec:	f000 80af 	beq.w	800854e <_dtoa_r+0x4d6>
 80083f0:	427c      	negs	r4, r7
 80083f2:	4b81      	ldr	r3, [pc, #516]	@ (80085f8 <_dtoa_r+0x580>)
 80083f4:	4d81      	ldr	r5, [pc, #516]	@ (80085fc <_dtoa_r+0x584>)
 80083f6:	f004 020f 	and.w	r2, r4, #15
 80083fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008402:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008406:	f7f8 f8f7 	bl	80005f8 <__aeabi_dmul>
 800840a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800840e:	1124      	asrs	r4, r4, #4
 8008410:	2300      	movs	r3, #0
 8008412:	2602      	movs	r6, #2
 8008414:	2c00      	cmp	r4, #0
 8008416:	f040 808f 	bne.w	8008538 <_dtoa_r+0x4c0>
 800841a:	2b00      	cmp	r3, #0
 800841c:	d1d3      	bne.n	80083c6 <_dtoa_r+0x34e>
 800841e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008420:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008424:	2b00      	cmp	r3, #0
 8008426:	f000 8094 	beq.w	8008552 <_dtoa_r+0x4da>
 800842a:	4b75      	ldr	r3, [pc, #468]	@ (8008600 <_dtoa_r+0x588>)
 800842c:	2200      	movs	r2, #0
 800842e:	4620      	mov	r0, r4
 8008430:	4629      	mov	r1, r5
 8008432:	f7f8 fb53 	bl	8000adc <__aeabi_dcmplt>
 8008436:	2800      	cmp	r0, #0
 8008438:	f000 808b 	beq.w	8008552 <_dtoa_r+0x4da>
 800843c:	9b03      	ldr	r3, [sp, #12]
 800843e:	2b00      	cmp	r3, #0
 8008440:	f000 8087 	beq.w	8008552 <_dtoa_r+0x4da>
 8008444:	f1bb 0f00 	cmp.w	fp, #0
 8008448:	dd34      	ble.n	80084b4 <_dtoa_r+0x43c>
 800844a:	4620      	mov	r0, r4
 800844c:	4b6d      	ldr	r3, [pc, #436]	@ (8008604 <_dtoa_r+0x58c>)
 800844e:	2200      	movs	r2, #0
 8008450:	4629      	mov	r1, r5
 8008452:	f7f8 f8d1 	bl	80005f8 <__aeabi_dmul>
 8008456:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800845a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800845e:	3601      	adds	r6, #1
 8008460:	465c      	mov	r4, fp
 8008462:	4630      	mov	r0, r6
 8008464:	f7f8 f85e 	bl	8000524 <__aeabi_i2d>
 8008468:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800846c:	f7f8 f8c4 	bl	80005f8 <__aeabi_dmul>
 8008470:	4b65      	ldr	r3, [pc, #404]	@ (8008608 <_dtoa_r+0x590>)
 8008472:	2200      	movs	r2, #0
 8008474:	f7f7 ff0a 	bl	800028c <__adddf3>
 8008478:	4605      	mov	r5, r0
 800847a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800847e:	2c00      	cmp	r4, #0
 8008480:	d16a      	bne.n	8008558 <_dtoa_r+0x4e0>
 8008482:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008486:	4b61      	ldr	r3, [pc, #388]	@ (800860c <_dtoa_r+0x594>)
 8008488:	2200      	movs	r2, #0
 800848a:	f7f7 fefd 	bl	8000288 <__aeabi_dsub>
 800848e:	4602      	mov	r2, r0
 8008490:	460b      	mov	r3, r1
 8008492:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008496:	462a      	mov	r2, r5
 8008498:	4633      	mov	r3, r6
 800849a:	f7f8 fb3d 	bl	8000b18 <__aeabi_dcmpgt>
 800849e:	2800      	cmp	r0, #0
 80084a0:	f040 8298 	bne.w	80089d4 <_dtoa_r+0x95c>
 80084a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80084a8:	462a      	mov	r2, r5
 80084aa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80084ae:	f7f8 fb15 	bl	8000adc <__aeabi_dcmplt>
 80084b2:	bb38      	cbnz	r0, 8008504 <_dtoa_r+0x48c>
 80084b4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80084b8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80084bc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80084be:	2b00      	cmp	r3, #0
 80084c0:	f2c0 8157 	blt.w	8008772 <_dtoa_r+0x6fa>
 80084c4:	2f0e      	cmp	r7, #14
 80084c6:	f300 8154 	bgt.w	8008772 <_dtoa_r+0x6fa>
 80084ca:	4b4b      	ldr	r3, [pc, #300]	@ (80085f8 <_dtoa_r+0x580>)
 80084cc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80084d0:	ed93 7b00 	vldr	d7, [r3]
 80084d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	ed8d 7b00 	vstr	d7, [sp]
 80084dc:	f280 80e5 	bge.w	80086aa <_dtoa_r+0x632>
 80084e0:	9b03      	ldr	r3, [sp, #12]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	f300 80e1 	bgt.w	80086aa <_dtoa_r+0x632>
 80084e8:	d10c      	bne.n	8008504 <_dtoa_r+0x48c>
 80084ea:	4b48      	ldr	r3, [pc, #288]	@ (800860c <_dtoa_r+0x594>)
 80084ec:	2200      	movs	r2, #0
 80084ee:	ec51 0b17 	vmov	r0, r1, d7
 80084f2:	f7f8 f881 	bl	80005f8 <__aeabi_dmul>
 80084f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084fa:	f7f8 fb03 	bl	8000b04 <__aeabi_dcmpge>
 80084fe:	2800      	cmp	r0, #0
 8008500:	f000 8266 	beq.w	80089d0 <_dtoa_r+0x958>
 8008504:	2400      	movs	r4, #0
 8008506:	4625      	mov	r5, r4
 8008508:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800850a:	4656      	mov	r6, sl
 800850c:	ea6f 0803 	mvn.w	r8, r3
 8008510:	2700      	movs	r7, #0
 8008512:	4621      	mov	r1, r4
 8008514:	4648      	mov	r0, r9
 8008516:	f000 fe79 	bl	800920c <_Bfree>
 800851a:	2d00      	cmp	r5, #0
 800851c:	f000 80bd 	beq.w	800869a <_dtoa_r+0x622>
 8008520:	b12f      	cbz	r7, 800852e <_dtoa_r+0x4b6>
 8008522:	42af      	cmp	r7, r5
 8008524:	d003      	beq.n	800852e <_dtoa_r+0x4b6>
 8008526:	4639      	mov	r1, r7
 8008528:	4648      	mov	r0, r9
 800852a:	f000 fe6f 	bl	800920c <_Bfree>
 800852e:	4629      	mov	r1, r5
 8008530:	4648      	mov	r0, r9
 8008532:	f000 fe6b 	bl	800920c <_Bfree>
 8008536:	e0b0      	b.n	800869a <_dtoa_r+0x622>
 8008538:	07e2      	lsls	r2, r4, #31
 800853a:	d505      	bpl.n	8008548 <_dtoa_r+0x4d0>
 800853c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008540:	f7f8 f85a 	bl	80005f8 <__aeabi_dmul>
 8008544:	3601      	adds	r6, #1
 8008546:	2301      	movs	r3, #1
 8008548:	1064      	asrs	r4, r4, #1
 800854a:	3508      	adds	r5, #8
 800854c:	e762      	b.n	8008414 <_dtoa_r+0x39c>
 800854e:	2602      	movs	r6, #2
 8008550:	e765      	b.n	800841e <_dtoa_r+0x3a6>
 8008552:	9c03      	ldr	r4, [sp, #12]
 8008554:	46b8      	mov	r8, r7
 8008556:	e784      	b.n	8008462 <_dtoa_r+0x3ea>
 8008558:	4b27      	ldr	r3, [pc, #156]	@ (80085f8 <_dtoa_r+0x580>)
 800855a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800855c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008560:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008564:	4454      	add	r4, sl
 8008566:	2900      	cmp	r1, #0
 8008568:	d054      	beq.n	8008614 <_dtoa_r+0x59c>
 800856a:	4929      	ldr	r1, [pc, #164]	@ (8008610 <_dtoa_r+0x598>)
 800856c:	2000      	movs	r0, #0
 800856e:	f7f8 f96d 	bl	800084c <__aeabi_ddiv>
 8008572:	4633      	mov	r3, r6
 8008574:	462a      	mov	r2, r5
 8008576:	f7f7 fe87 	bl	8000288 <__aeabi_dsub>
 800857a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800857e:	4656      	mov	r6, sl
 8008580:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008584:	f7f8 fae8 	bl	8000b58 <__aeabi_d2iz>
 8008588:	4605      	mov	r5, r0
 800858a:	f7f7 ffcb 	bl	8000524 <__aeabi_i2d>
 800858e:	4602      	mov	r2, r0
 8008590:	460b      	mov	r3, r1
 8008592:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008596:	f7f7 fe77 	bl	8000288 <__aeabi_dsub>
 800859a:	3530      	adds	r5, #48	@ 0x30
 800859c:	4602      	mov	r2, r0
 800859e:	460b      	mov	r3, r1
 80085a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80085a4:	f806 5b01 	strb.w	r5, [r6], #1
 80085a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80085ac:	f7f8 fa96 	bl	8000adc <__aeabi_dcmplt>
 80085b0:	2800      	cmp	r0, #0
 80085b2:	d172      	bne.n	800869a <_dtoa_r+0x622>
 80085b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085b8:	4911      	ldr	r1, [pc, #68]	@ (8008600 <_dtoa_r+0x588>)
 80085ba:	2000      	movs	r0, #0
 80085bc:	f7f7 fe64 	bl	8000288 <__aeabi_dsub>
 80085c0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80085c4:	f7f8 fa8a 	bl	8000adc <__aeabi_dcmplt>
 80085c8:	2800      	cmp	r0, #0
 80085ca:	f040 80b4 	bne.w	8008736 <_dtoa_r+0x6be>
 80085ce:	42a6      	cmp	r6, r4
 80085d0:	f43f af70 	beq.w	80084b4 <_dtoa_r+0x43c>
 80085d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80085d8:	4b0a      	ldr	r3, [pc, #40]	@ (8008604 <_dtoa_r+0x58c>)
 80085da:	2200      	movs	r2, #0
 80085dc:	f7f8 f80c 	bl	80005f8 <__aeabi_dmul>
 80085e0:	4b08      	ldr	r3, [pc, #32]	@ (8008604 <_dtoa_r+0x58c>)
 80085e2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80085e6:	2200      	movs	r2, #0
 80085e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085ec:	f7f8 f804 	bl	80005f8 <__aeabi_dmul>
 80085f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80085f4:	e7c4      	b.n	8008580 <_dtoa_r+0x508>
 80085f6:	bf00      	nop
 80085f8:	0800a3a8 	.word	0x0800a3a8
 80085fc:	0800a380 	.word	0x0800a380
 8008600:	3ff00000 	.word	0x3ff00000
 8008604:	40240000 	.word	0x40240000
 8008608:	401c0000 	.word	0x401c0000
 800860c:	40140000 	.word	0x40140000
 8008610:	3fe00000 	.word	0x3fe00000
 8008614:	4631      	mov	r1, r6
 8008616:	4628      	mov	r0, r5
 8008618:	f7f7 ffee 	bl	80005f8 <__aeabi_dmul>
 800861c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008620:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008622:	4656      	mov	r6, sl
 8008624:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008628:	f7f8 fa96 	bl	8000b58 <__aeabi_d2iz>
 800862c:	4605      	mov	r5, r0
 800862e:	f7f7 ff79 	bl	8000524 <__aeabi_i2d>
 8008632:	4602      	mov	r2, r0
 8008634:	460b      	mov	r3, r1
 8008636:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800863a:	f7f7 fe25 	bl	8000288 <__aeabi_dsub>
 800863e:	3530      	adds	r5, #48	@ 0x30
 8008640:	f806 5b01 	strb.w	r5, [r6], #1
 8008644:	4602      	mov	r2, r0
 8008646:	460b      	mov	r3, r1
 8008648:	42a6      	cmp	r6, r4
 800864a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800864e:	f04f 0200 	mov.w	r2, #0
 8008652:	d124      	bne.n	800869e <_dtoa_r+0x626>
 8008654:	4baf      	ldr	r3, [pc, #700]	@ (8008914 <_dtoa_r+0x89c>)
 8008656:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800865a:	f7f7 fe17 	bl	800028c <__adddf3>
 800865e:	4602      	mov	r2, r0
 8008660:	460b      	mov	r3, r1
 8008662:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008666:	f7f8 fa57 	bl	8000b18 <__aeabi_dcmpgt>
 800866a:	2800      	cmp	r0, #0
 800866c:	d163      	bne.n	8008736 <_dtoa_r+0x6be>
 800866e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008672:	49a8      	ldr	r1, [pc, #672]	@ (8008914 <_dtoa_r+0x89c>)
 8008674:	2000      	movs	r0, #0
 8008676:	f7f7 fe07 	bl	8000288 <__aeabi_dsub>
 800867a:	4602      	mov	r2, r0
 800867c:	460b      	mov	r3, r1
 800867e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008682:	f7f8 fa2b 	bl	8000adc <__aeabi_dcmplt>
 8008686:	2800      	cmp	r0, #0
 8008688:	f43f af14 	beq.w	80084b4 <_dtoa_r+0x43c>
 800868c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800868e:	1e73      	subs	r3, r6, #1
 8008690:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008692:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008696:	2b30      	cmp	r3, #48	@ 0x30
 8008698:	d0f8      	beq.n	800868c <_dtoa_r+0x614>
 800869a:	4647      	mov	r7, r8
 800869c:	e03b      	b.n	8008716 <_dtoa_r+0x69e>
 800869e:	4b9e      	ldr	r3, [pc, #632]	@ (8008918 <_dtoa_r+0x8a0>)
 80086a0:	f7f7 ffaa 	bl	80005f8 <__aeabi_dmul>
 80086a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80086a8:	e7bc      	b.n	8008624 <_dtoa_r+0x5ac>
 80086aa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80086ae:	4656      	mov	r6, sl
 80086b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086b4:	4620      	mov	r0, r4
 80086b6:	4629      	mov	r1, r5
 80086b8:	f7f8 f8c8 	bl	800084c <__aeabi_ddiv>
 80086bc:	f7f8 fa4c 	bl	8000b58 <__aeabi_d2iz>
 80086c0:	4680      	mov	r8, r0
 80086c2:	f7f7 ff2f 	bl	8000524 <__aeabi_i2d>
 80086c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086ca:	f7f7 ff95 	bl	80005f8 <__aeabi_dmul>
 80086ce:	4602      	mov	r2, r0
 80086d0:	460b      	mov	r3, r1
 80086d2:	4620      	mov	r0, r4
 80086d4:	4629      	mov	r1, r5
 80086d6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80086da:	f7f7 fdd5 	bl	8000288 <__aeabi_dsub>
 80086de:	f806 4b01 	strb.w	r4, [r6], #1
 80086e2:	9d03      	ldr	r5, [sp, #12]
 80086e4:	eba6 040a 	sub.w	r4, r6, sl
 80086e8:	42a5      	cmp	r5, r4
 80086ea:	4602      	mov	r2, r0
 80086ec:	460b      	mov	r3, r1
 80086ee:	d133      	bne.n	8008758 <_dtoa_r+0x6e0>
 80086f0:	f7f7 fdcc 	bl	800028c <__adddf3>
 80086f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086f8:	4604      	mov	r4, r0
 80086fa:	460d      	mov	r5, r1
 80086fc:	f7f8 fa0c 	bl	8000b18 <__aeabi_dcmpgt>
 8008700:	b9c0      	cbnz	r0, 8008734 <_dtoa_r+0x6bc>
 8008702:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008706:	4620      	mov	r0, r4
 8008708:	4629      	mov	r1, r5
 800870a:	f7f8 f9dd 	bl	8000ac8 <__aeabi_dcmpeq>
 800870e:	b110      	cbz	r0, 8008716 <_dtoa_r+0x69e>
 8008710:	f018 0f01 	tst.w	r8, #1
 8008714:	d10e      	bne.n	8008734 <_dtoa_r+0x6bc>
 8008716:	9902      	ldr	r1, [sp, #8]
 8008718:	4648      	mov	r0, r9
 800871a:	f000 fd77 	bl	800920c <_Bfree>
 800871e:	2300      	movs	r3, #0
 8008720:	7033      	strb	r3, [r6, #0]
 8008722:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008724:	3701      	adds	r7, #1
 8008726:	601f      	str	r7, [r3, #0]
 8008728:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800872a:	2b00      	cmp	r3, #0
 800872c:	f000 824b 	beq.w	8008bc6 <_dtoa_r+0xb4e>
 8008730:	601e      	str	r6, [r3, #0]
 8008732:	e248      	b.n	8008bc6 <_dtoa_r+0xb4e>
 8008734:	46b8      	mov	r8, r7
 8008736:	4633      	mov	r3, r6
 8008738:	461e      	mov	r6, r3
 800873a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800873e:	2a39      	cmp	r2, #57	@ 0x39
 8008740:	d106      	bne.n	8008750 <_dtoa_r+0x6d8>
 8008742:	459a      	cmp	sl, r3
 8008744:	d1f8      	bne.n	8008738 <_dtoa_r+0x6c0>
 8008746:	2230      	movs	r2, #48	@ 0x30
 8008748:	f108 0801 	add.w	r8, r8, #1
 800874c:	f88a 2000 	strb.w	r2, [sl]
 8008750:	781a      	ldrb	r2, [r3, #0]
 8008752:	3201      	adds	r2, #1
 8008754:	701a      	strb	r2, [r3, #0]
 8008756:	e7a0      	b.n	800869a <_dtoa_r+0x622>
 8008758:	4b6f      	ldr	r3, [pc, #444]	@ (8008918 <_dtoa_r+0x8a0>)
 800875a:	2200      	movs	r2, #0
 800875c:	f7f7 ff4c 	bl	80005f8 <__aeabi_dmul>
 8008760:	2200      	movs	r2, #0
 8008762:	2300      	movs	r3, #0
 8008764:	4604      	mov	r4, r0
 8008766:	460d      	mov	r5, r1
 8008768:	f7f8 f9ae 	bl	8000ac8 <__aeabi_dcmpeq>
 800876c:	2800      	cmp	r0, #0
 800876e:	d09f      	beq.n	80086b0 <_dtoa_r+0x638>
 8008770:	e7d1      	b.n	8008716 <_dtoa_r+0x69e>
 8008772:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008774:	2a00      	cmp	r2, #0
 8008776:	f000 80ea 	beq.w	800894e <_dtoa_r+0x8d6>
 800877a:	9a07      	ldr	r2, [sp, #28]
 800877c:	2a01      	cmp	r2, #1
 800877e:	f300 80cd 	bgt.w	800891c <_dtoa_r+0x8a4>
 8008782:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008784:	2a00      	cmp	r2, #0
 8008786:	f000 80c1 	beq.w	800890c <_dtoa_r+0x894>
 800878a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800878e:	9c08      	ldr	r4, [sp, #32]
 8008790:	9e00      	ldr	r6, [sp, #0]
 8008792:	9a00      	ldr	r2, [sp, #0]
 8008794:	441a      	add	r2, r3
 8008796:	9200      	str	r2, [sp, #0]
 8008798:	9a06      	ldr	r2, [sp, #24]
 800879a:	2101      	movs	r1, #1
 800879c:	441a      	add	r2, r3
 800879e:	4648      	mov	r0, r9
 80087a0:	9206      	str	r2, [sp, #24]
 80087a2:	f000 fde7 	bl	8009374 <__i2b>
 80087a6:	4605      	mov	r5, r0
 80087a8:	b166      	cbz	r6, 80087c4 <_dtoa_r+0x74c>
 80087aa:	9b06      	ldr	r3, [sp, #24]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	dd09      	ble.n	80087c4 <_dtoa_r+0x74c>
 80087b0:	42b3      	cmp	r3, r6
 80087b2:	9a00      	ldr	r2, [sp, #0]
 80087b4:	bfa8      	it	ge
 80087b6:	4633      	movge	r3, r6
 80087b8:	1ad2      	subs	r2, r2, r3
 80087ba:	9200      	str	r2, [sp, #0]
 80087bc:	9a06      	ldr	r2, [sp, #24]
 80087be:	1af6      	subs	r6, r6, r3
 80087c0:	1ad3      	subs	r3, r2, r3
 80087c2:	9306      	str	r3, [sp, #24]
 80087c4:	9b08      	ldr	r3, [sp, #32]
 80087c6:	b30b      	cbz	r3, 800880c <_dtoa_r+0x794>
 80087c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	f000 80c6 	beq.w	800895c <_dtoa_r+0x8e4>
 80087d0:	2c00      	cmp	r4, #0
 80087d2:	f000 80c0 	beq.w	8008956 <_dtoa_r+0x8de>
 80087d6:	4629      	mov	r1, r5
 80087d8:	4622      	mov	r2, r4
 80087da:	4648      	mov	r0, r9
 80087dc:	f000 fe82 	bl	80094e4 <__pow5mult>
 80087e0:	9a02      	ldr	r2, [sp, #8]
 80087e2:	4601      	mov	r1, r0
 80087e4:	4605      	mov	r5, r0
 80087e6:	4648      	mov	r0, r9
 80087e8:	f000 fdda 	bl	80093a0 <__multiply>
 80087ec:	9902      	ldr	r1, [sp, #8]
 80087ee:	4680      	mov	r8, r0
 80087f0:	4648      	mov	r0, r9
 80087f2:	f000 fd0b 	bl	800920c <_Bfree>
 80087f6:	9b08      	ldr	r3, [sp, #32]
 80087f8:	1b1b      	subs	r3, r3, r4
 80087fa:	9308      	str	r3, [sp, #32]
 80087fc:	f000 80b1 	beq.w	8008962 <_dtoa_r+0x8ea>
 8008800:	9a08      	ldr	r2, [sp, #32]
 8008802:	4641      	mov	r1, r8
 8008804:	4648      	mov	r0, r9
 8008806:	f000 fe6d 	bl	80094e4 <__pow5mult>
 800880a:	9002      	str	r0, [sp, #8]
 800880c:	2101      	movs	r1, #1
 800880e:	4648      	mov	r0, r9
 8008810:	f000 fdb0 	bl	8009374 <__i2b>
 8008814:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008816:	4604      	mov	r4, r0
 8008818:	2b00      	cmp	r3, #0
 800881a:	f000 81d8 	beq.w	8008bce <_dtoa_r+0xb56>
 800881e:	461a      	mov	r2, r3
 8008820:	4601      	mov	r1, r0
 8008822:	4648      	mov	r0, r9
 8008824:	f000 fe5e 	bl	80094e4 <__pow5mult>
 8008828:	9b07      	ldr	r3, [sp, #28]
 800882a:	2b01      	cmp	r3, #1
 800882c:	4604      	mov	r4, r0
 800882e:	f300 809f 	bgt.w	8008970 <_dtoa_r+0x8f8>
 8008832:	9b04      	ldr	r3, [sp, #16]
 8008834:	2b00      	cmp	r3, #0
 8008836:	f040 8097 	bne.w	8008968 <_dtoa_r+0x8f0>
 800883a:	9b05      	ldr	r3, [sp, #20]
 800883c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008840:	2b00      	cmp	r3, #0
 8008842:	f040 8093 	bne.w	800896c <_dtoa_r+0x8f4>
 8008846:	9b05      	ldr	r3, [sp, #20]
 8008848:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800884c:	0d1b      	lsrs	r3, r3, #20
 800884e:	051b      	lsls	r3, r3, #20
 8008850:	b133      	cbz	r3, 8008860 <_dtoa_r+0x7e8>
 8008852:	9b00      	ldr	r3, [sp, #0]
 8008854:	3301      	adds	r3, #1
 8008856:	9300      	str	r3, [sp, #0]
 8008858:	9b06      	ldr	r3, [sp, #24]
 800885a:	3301      	adds	r3, #1
 800885c:	9306      	str	r3, [sp, #24]
 800885e:	2301      	movs	r3, #1
 8008860:	9308      	str	r3, [sp, #32]
 8008862:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008864:	2b00      	cmp	r3, #0
 8008866:	f000 81b8 	beq.w	8008bda <_dtoa_r+0xb62>
 800886a:	6923      	ldr	r3, [r4, #16]
 800886c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008870:	6918      	ldr	r0, [r3, #16]
 8008872:	f000 fd33 	bl	80092dc <__hi0bits>
 8008876:	f1c0 0020 	rsb	r0, r0, #32
 800887a:	9b06      	ldr	r3, [sp, #24]
 800887c:	4418      	add	r0, r3
 800887e:	f010 001f 	ands.w	r0, r0, #31
 8008882:	f000 8082 	beq.w	800898a <_dtoa_r+0x912>
 8008886:	f1c0 0320 	rsb	r3, r0, #32
 800888a:	2b04      	cmp	r3, #4
 800888c:	dd73      	ble.n	8008976 <_dtoa_r+0x8fe>
 800888e:	9b00      	ldr	r3, [sp, #0]
 8008890:	f1c0 001c 	rsb	r0, r0, #28
 8008894:	4403      	add	r3, r0
 8008896:	9300      	str	r3, [sp, #0]
 8008898:	9b06      	ldr	r3, [sp, #24]
 800889a:	4403      	add	r3, r0
 800889c:	4406      	add	r6, r0
 800889e:	9306      	str	r3, [sp, #24]
 80088a0:	9b00      	ldr	r3, [sp, #0]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	dd05      	ble.n	80088b2 <_dtoa_r+0x83a>
 80088a6:	9902      	ldr	r1, [sp, #8]
 80088a8:	461a      	mov	r2, r3
 80088aa:	4648      	mov	r0, r9
 80088ac:	f000 fe74 	bl	8009598 <__lshift>
 80088b0:	9002      	str	r0, [sp, #8]
 80088b2:	9b06      	ldr	r3, [sp, #24]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	dd05      	ble.n	80088c4 <_dtoa_r+0x84c>
 80088b8:	4621      	mov	r1, r4
 80088ba:	461a      	mov	r2, r3
 80088bc:	4648      	mov	r0, r9
 80088be:	f000 fe6b 	bl	8009598 <__lshift>
 80088c2:	4604      	mov	r4, r0
 80088c4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d061      	beq.n	800898e <_dtoa_r+0x916>
 80088ca:	9802      	ldr	r0, [sp, #8]
 80088cc:	4621      	mov	r1, r4
 80088ce:	f000 fecf 	bl	8009670 <__mcmp>
 80088d2:	2800      	cmp	r0, #0
 80088d4:	da5b      	bge.n	800898e <_dtoa_r+0x916>
 80088d6:	2300      	movs	r3, #0
 80088d8:	9902      	ldr	r1, [sp, #8]
 80088da:	220a      	movs	r2, #10
 80088dc:	4648      	mov	r0, r9
 80088de:	f000 fcb7 	bl	8009250 <__multadd>
 80088e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088e4:	9002      	str	r0, [sp, #8]
 80088e6:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	f000 8177 	beq.w	8008bde <_dtoa_r+0xb66>
 80088f0:	4629      	mov	r1, r5
 80088f2:	2300      	movs	r3, #0
 80088f4:	220a      	movs	r2, #10
 80088f6:	4648      	mov	r0, r9
 80088f8:	f000 fcaa 	bl	8009250 <__multadd>
 80088fc:	f1bb 0f00 	cmp.w	fp, #0
 8008900:	4605      	mov	r5, r0
 8008902:	dc6f      	bgt.n	80089e4 <_dtoa_r+0x96c>
 8008904:	9b07      	ldr	r3, [sp, #28]
 8008906:	2b02      	cmp	r3, #2
 8008908:	dc49      	bgt.n	800899e <_dtoa_r+0x926>
 800890a:	e06b      	b.n	80089e4 <_dtoa_r+0x96c>
 800890c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800890e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008912:	e73c      	b.n	800878e <_dtoa_r+0x716>
 8008914:	3fe00000 	.word	0x3fe00000
 8008918:	40240000 	.word	0x40240000
 800891c:	9b03      	ldr	r3, [sp, #12]
 800891e:	1e5c      	subs	r4, r3, #1
 8008920:	9b08      	ldr	r3, [sp, #32]
 8008922:	42a3      	cmp	r3, r4
 8008924:	db09      	blt.n	800893a <_dtoa_r+0x8c2>
 8008926:	1b1c      	subs	r4, r3, r4
 8008928:	9b03      	ldr	r3, [sp, #12]
 800892a:	2b00      	cmp	r3, #0
 800892c:	f6bf af30 	bge.w	8008790 <_dtoa_r+0x718>
 8008930:	9b00      	ldr	r3, [sp, #0]
 8008932:	9a03      	ldr	r2, [sp, #12]
 8008934:	1a9e      	subs	r6, r3, r2
 8008936:	2300      	movs	r3, #0
 8008938:	e72b      	b.n	8008792 <_dtoa_r+0x71a>
 800893a:	9b08      	ldr	r3, [sp, #32]
 800893c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800893e:	9408      	str	r4, [sp, #32]
 8008940:	1ae3      	subs	r3, r4, r3
 8008942:	441a      	add	r2, r3
 8008944:	9e00      	ldr	r6, [sp, #0]
 8008946:	9b03      	ldr	r3, [sp, #12]
 8008948:	920d      	str	r2, [sp, #52]	@ 0x34
 800894a:	2400      	movs	r4, #0
 800894c:	e721      	b.n	8008792 <_dtoa_r+0x71a>
 800894e:	9c08      	ldr	r4, [sp, #32]
 8008950:	9e00      	ldr	r6, [sp, #0]
 8008952:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8008954:	e728      	b.n	80087a8 <_dtoa_r+0x730>
 8008956:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800895a:	e751      	b.n	8008800 <_dtoa_r+0x788>
 800895c:	9a08      	ldr	r2, [sp, #32]
 800895e:	9902      	ldr	r1, [sp, #8]
 8008960:	e750      	b.n	8008804 <_dtoa_r+0x78c>
 8008962:	f8cd 8008 	str.w	r8, [sp, #8]
 8008966:	e751      	b.n	800880c <_dtoa_r+0x794>
 8008968:	2300      	movs	r3, #0
 800896a:	e779      	b.n	8008860 <_dtoa_r+0x7e8>
 800896c:	9b04      	ldr	r3, [sp, #16]
 800896e:	e777      	b.n	8008860 <_dtoa_r+0x7e8>
 8008970:	2300      	movs	r3, #0
 8008972:	9308      	str	r3, [sp, #32]
 8008974:	e779      	b.n	800886a <_dtoa_r+0x7f2>
 8008976:	d093      	beq.n	80088a0 <_dtoa_r+0x828>
 8008978:	9a00      	ldr	r2, [sp, #0]
 800897a:	331c      	adds	r3, #28
 800897c:	441a      	add	r2, r3
 800897e:	9200      	str	r2, [sp, #0]
 8008980:	9a06      	ldr	r2, [sp, #24]
 8008982:	441a      	add	r2, r3
 8008984:	441e      	add	r6, r3
 8008986:	9206      	str	r2, [sp, #24]
 8008988:	e78a      	b.n	80088a0 <_dtoa_r+0x828>
 800898a:	4603      	mov	r3, r0
 800898c:	e7f4      	b.n	8008978 <_dtoa_r+0x900>
 800898e:	9b03      	ldr	r3, [sp, #12]
 8008990:	2b00      	cmp	r3, #0
 8008992:	46b8      	mov	r8, r7
 8008994:	dc20      	bgt.n	80089d8 <_dtoa_r+0x960>
 8008996:	469b      	mov	fp, r3
 8008998:	9b07      	ldr	r3, [sp, #28]
 800899a:	2b02      	cmp	r3, #2
 800899c:	dd1e      	ble.n	80089dc <_dtoa_r+0x964>
 800899e:	f1bb 0f00 	cmp.w	fp, #0
 80089a2:	f47f adb1 	bne.w	8008508 <_dtoa_r+0x490>
 80089a6:	4621      	mov	r1, r4
 80089a8:	465b      	mov	r3, fp
 80089aa:	2205      	movs	r2, #5
 80089ac:	4648      	mov	r0, r9
 80089ae:	f000 fc4f 	bl	8009250 <__multadd>
 80089b2:	4601      	mov	r1, r0
 80089b4:	4604      	mov	r4, r0
 80089b6:	9802      	ldr	r0, [sp, #8]
 80089b8:	f000 fe5a 	bl	8009670 <__mcmp>
 80089bc:	2800      	cmp	r0, #0
 80089be:	f77f ada3 	ble.w	8008508 <_dtoa_r+0x490>
 80089c2:	4656      	mov	r6, sl
 80089c4:	2331      	movs	r3, #49	@ 0x31
 80089c6:	f806 3b01 	strb.w	r3, [r6], #1
 80089ca:	f108 0801 	add.w	r8, r8, #1
 80089ce:	e59f      	b.n	8008510 <_dtoa_r+0x498>
 80089d0:	9c03      	ldr	r4, [sp, #12]
 80089d2:	46b8      	mov	r8, r7
 80089d4:	4625      	mov	r5, r4
 80089d6:	e7f4      	b.n	80089c2 <_dtoa_r+0x94a>
 80089d8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80089dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089de:	2b00      	cmp	r3, #0
 80089e0:	f000 8101 	beq.w	8008be6 <_dtoa_r+0xb6e>
 80089e4:	2e00      	cmp	r6, #0
 80089e6:	dd05      	ble.n	80089f4 <_dtoa_r+0x97c>
 80089e8:	4629      	mov	r1, r5
 80089ea:	4632      	mov	r2, r6
 80089ec:	4648      	mov	r0, r9
 80089ee:	f000 fdd3 	bl	8009598 <__lshift>
 80089f2:	4605      	mov	r5, r0
 80089f4:	9b08      	ldr	r3, [sp, #32]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d05c      	beq.n	8008ab4 <_dtoa_r+0xa3c>
 80089fa:	6869      	ldr	r1, [r5, #4]
 80089fc:	4648      	mov	r0, r9
 80089fe:	f000 fbc5 	bl	800918c <_Balloc>
 8008a02:	4606      	mov	r6, r0
 8008a04:	b928      	cbnz	r0, 8008a12 <_dtoa_r+0x99a>
 8008a06:	4b82      	ldr	r3, [pc, #520]	@ (8008c10 <_dtoa_r+0xb98>)
 8008a08:	4602      	mov	r2, r0
 8008a0a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008a0e:	f7ff bb4a 	b.w	80080a6 <_dtoa_r+0x2e>
 8008a12:	692a      	ldr	r2, [r5, #16]
 8008a14:	3202      	adds	r2, #2
 8008a16:	0092      	lsls	r2, r2, #2
 8008a18:	f105 010c 	add.w	r1, r5, #12
 8008a1c:	300c      	adds	r0, #12
 8008a1e:	f001 f811 	bl	8009a44 <memcpy>
 8008a22:	2201      	movs	r2, #1
 8008a24:	4631      	mov	r1, r6
 8008a26:	4648      	mov	r0, r9
 8008a28:	f000 fdb6 	bl	8009598 <__lshift>
 8008a2c:	f10a 0301 	add.w	r3, sl, #1
 8008a30:	9300      	str	r3, [sp, #0]
 8008a32:	eb0a 030b 	add.w	r3, sl, fp
 8008a36:	9308      	str	r3, [sp, #32]
 8008a38:	9b04      	ldr	r3, [sp, #16]
 8008a3a:	f003 0301 	and.w	r3, r3, #1
 8008a3e:	462f      	mov	r7, r5
 8008a40:	9306      	str	r3, [sp, #24]
 8008a42:	4605      	mov	r5, r0
 8008a44:	9b00      	ldr	r3, [sp, #0]
 8008a46:	9802      	ldr	r0, [sp, #8]
 8008a48:	4621      	mov	r1, r4
 8008a4a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8008a4e:	f7ff fa8b 	bl	8007f68 <quorem>
 8008a52:	4603      	mov	r3, r0
 8008a54:	3330      	adds	r3, #48	@ 0x30
 8008a56:	9003      	str	r0, [sp, #12]
 8008a58:	4639      	mov	r1, r7
 8008a5a:	9802      	ldr	r0, [sp, #8]
 8008a5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a5e:	f000 fe07 	bl	8009670 <__mcmp>
 8008a62:	462a      	mov	r2, r5
 8008a64:	9004      	str	r0, [sp, #16]
 8008a66:	4621      	mov	r1, r4
 8008a68:	4648      	mov	r0, r9
 8008a6a:	f000 fe1d 	bl	80096a8 <__mdiff>
 8008a6e:	68c2      	ldr	r2, [r0, #12]
 8008a70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a72:	4606      	mov	r6, r0
 8008a74:	bb02      	cbnz	r2, 8008ab8 <_dtoa_r+0xa40>
 8008a76:	4601      	mov	r1, r0
 8008a78:	9802      	ldr	r0, [sp, #8]
 8008a7a:	f000 fdf9 	bl	8009670 <__mcmp>
 8008a7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a80:	4602      	mov	r2, r0
 8008a82:	4631      	mov	r1, r6
 8008a84:	4648      	mov	r0, r9
 8008a86:	920c      	str	r2, [sp, #48]	@ 0x30
 8008a88:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a8a:	f000 fbbf 	bl	800920c <_Bfree>
 8008a8e:	9b07      	ldr	r3, [sp, #28]
 8008a90:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008a92:	9e00      	ldr	r6, [sp, #0]
 8008a94:	ea42 0103 	orr.w	r1, r2, r3
 8008a98:	9b06      	ldr	r3, [sp, #24]
 8008a9a:	4319      	orrs	r1, r3
 8008a9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a9e:	d10d      	bne.n	8008abc <_dtoa_r+0xa44>
 8008aa0:	2b39      	cmp	r3, #57	@ 0x39
 8008aa2:	d027      	beq.n	8008af4 <_dtoa_r+0xa7c>
 8008aa4:	9a04      	ldr	r2, [sp, #16]
 8008aa6:	2a00      	cmp	r2, #0
 8008aa8:	dd01      	ble.n	8008aae <_dtoa_r+0xa36>
 8008aaa:	9b03      	ldr	r3, [sp, #12]
 8008aac:	3331      	adds	r3, #49	@ 0x31
 8008aae:	f88b 3000 	strb.w	r3, [fp]
 8008ab2:	e52e      	b.n	8008512 <_dtoa_r+0x49a>
 8008ab4:	4628      	mov	r0, r5
 8008ab6:	e7b9      	b.n	8008a2c <_dtoa_r+0x9b4>
 8008ab8:	2201      	movs	r2, #1
 8008aba:	e7e2      	b.n	8008a82 <_dtoa_r+0xa0a>
 8008abc:	9904      	ldr	r1, [sp, #16]
 8008abe:	2900      	cmp	r1, #0
 8008ac0:	db04      	blt.n	8008acc <_dtoa_r+0xa54>
 8008ac2:	9807      	ldr	r0, [sp, #28]
 8008ac4:	4301      	orrs	r1, r0
 8008ac6:	9806      	ldr	r0, [sp, #24]
 8008ac8:	4301      	orrs	r1, r0
 8008aca:	d120      	bne.n	8008b0e <_dtoa_r+0xa96>
 8008acc:	2a00      	cmp	r2, #0
 8008ace:	ddee      	ble.n	8008aae <_dtoa_r+0xa36>
 8008ad0:	9902      	ldr	r1, [sp, #8]
 8008ad2:	9300      	str	r3, [sp, #0]
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	4648      	mov	r0, r9
 8008ad8:	f000 fd5e 	bl	8009598 <__lshift>
 8008adc:	4621      	mov	r1, r4
 8008ade:	9002      	str	r0, [sp, #8]
 8008ae0:	f000 fdc6 	bl	8009670 <__mcmp>
 8008ae4:	2800      	cmp	r0, #0
 8008ae6:	9b00      	ldr	r3, [sp, #0]
 8008ae8:	dc02      	bgt.n	8008af0 <_dtoa_r+0xa78>
 8008aea:	d1e0      	bne.n	8008aae <_dtoa_r+0xa36>
 8008aec:	07da      	lsls	r2, r3, #31
 8008aee:	d5de      	bpl.n	8008aae <_dtoa_r+0xa36>
 8008af0:	2b39      	cmp	r3, #57	@ 0x39
 8008af2:	d1da      	bne.n	8008aaa <_dtoa_r+0xa32>
 8008af4:	2339      	movs	r3, #57	@ 0x39
 8008af6:	f88b 3000 	strb.w	r3, [fp]
 8008afa:	4633      	mov	r3, r6
 8008afc:	461e      	mov	r6, r3
 8008afe:	3b01      	subs	r3, #1
 8008b00:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008b04:	2a39      	cmp	r2, #57	@ 0x39
 8008b06:	d04e      	beq.n	8008ba6 <_dtoa_r+0xb2e>
 8008b08:	3201      	adds	r2, #1
 8008b0a:	701a      	strb	r2, [r3, #0]
 8008b0c:	e501      	b.n	8008512 <_dtoa_r+0x49a>
 8008b0e:	2a00      	cmp	r2, #0
 8008b10:	dd03      	ble.n	8008b1a <_dtoa_r+0xaa2>
 8008b12:	2b39      	cmp	r3, #57	@ 0x39
 8008b14:	d0ee      	beq.n	8008af4 <_dtoa_r+0xa7c>
 8008b16:	3301      	adds	r3, #1
 8008b18:	e7c9      	b.n	8008aae <_dtoa_r+0xa36>
 8008b1a:	9a00      	ldr	r2, [sp, #0]
 8008b1c:	9908      	ldr	r1, [sp, #32]
 8008b1e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008b22:	428a      	cmp	r2, r1
 8008b24:	d028      	beq.n	8008b78 <_dtoa_r+0xb00>
 8008b26:	9902      	ldr	r1, [sp, #8]
 8008b28:	2300      	movs	r3, #0
 8008b2a:	220a      	movs	r2, #10
 8008b2c:	4648      	mov	r0, r9
 8008b2e:	f000 fb8f 	bl	8009250 <__multadd>
 8008b32:	42af      	cmp	r7, r5
 8008b34:	9002      	str	r0, [sp, #8]
 8008b36:	f04f 0300 	mov.w	r3, #0
 8008b3a:	f04f 020a 	mov.w	r2, #10
 8008b3e:	4639      	mov	r1, r7
 8008b40:	4648      	mov	r0, r9
 8008b42:	d107      	bne.n	8008b54 <_dtoa_r+0xadc>
 8008b44:	f000 fb84 	bl	8009250 <__multadd>
 8008b48:	4607      	mov	r7, r0
 8008b4a:	4605      	mov	r5, r0
 8008b4c:	9b00      	ldr	r3, [sp, #0]
 8008b4e:	3301      	adds	r3, #1
 8008b50:	9300      	str	r3, [sp, #0]
 8008b52:	e777      	b.n	8008a44 <_dtoa_r+0x9cc>
 8008b54:	f000 fb7c 	bl	8009250 <__multadd>
 8008b58:	4629      	mov	r1, r5
 8008b5a:	4607      	mov	r7, r0
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	220a      	movs	r2, #10
 8008b60:	4648      	mov	r0, r9
 8008b62:	f000 fb75 	bl	8009250 <__multadd>
 8008b66:	4605      	mov	r5, r0
 8008b68:	e7f0      	b.n	8008b4c <_dtoa_r+0xad4>
 8008b6a:	f1bb 0f00 	cmp.w	fp, #0
 8008b6e:	bfcc      	ite	gt
 8008b70:	465e      	movgt	r6, fp
 8008b72:	2601      	movle	r6, #1
 8008b74:	4456      	add	r6, sl
 8008b76:	2700      	movs	r7, #0
 8008b78:	9902      	ldr	r1, [sp, #8]
 8008b7a:	9300      	str	r3, [sp, #0]
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	4648      	mov	r0, r9
 8008b80:	f000 fd0a 	bl	8009598 <__lshift>
 8008b84:	4621      	mov	r1, r4
 8008b86:	9002      	str	r0, [sp, #8]
 8008b88:	f000 fd72 	bl	8009670 <__mcmp>
 8008b8c:	2800      	cmp	r0, #0
 8008b8e:	dcb4      	bgt.n	8008afa <_dtoa_r+0xa82>
 8008b90:	d102      	bne.n	8008b98 <_dtoa_r+0xb20>
 8008b92:	9b00      	ldr	r3, [sp, #0]
 8008b94:	07db      	lsls	r3, r3, #31
 8008b96:	d4b0      	bmi.n	8008afa <_dtoa_r+0xa82>
 8008b98:	4633      	mov	r3, r6
 8008b9a:	461e      	mov	r6, r3
 8008b9c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ba0:	2a30      	cmp	r2, #48	@ 0x30
 8008ba2:	d0fa      	beq.n	8008b9a <_dtoa_r+0xb22>
 8008ba4:	e4b5      	b.n	8008512 <_dtoa_r+0x49a>
 8008ba6:	459a      	cmp	sl, r3
 8008ba8:	d1a8      	bne.n	8008afc <_dtoa_r+0xa84>
 8008baa:	2331      	movs	r3, #49	@ 0x31
 8008bac:	f108 0801 	add.w	r8, r8, #1
 8008bb0:	f88a 3000 	strb.w	r3, [sl]
 8008bb4:	e4ad      	b.n	8008512 <_dtoa_r+0x49a>
 8008bb6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008bb8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008c14 <_dtoa_r+0xb9c>
 8008bbc:	b11b      	cbz	r3, 8008bc6 <_dtoa_r+0xb4e>
 8008bbe:	f10a 0308 	add.w	r3, sl, #8
 8008bc2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008bc4:	6013      	str	r3, [r2, #0]
 8008bc6:	4650      	mov	r0, sl
 8008bc8:	b017      	add	sp, #92	@ 0x5c
 8008bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bce:	9b07      	ldr	r3, [sp, #28]
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	f77f ae2e 	ble.w	8008832 <_dtoa_r+0x7ba>
 8008bd6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008bd8:	9308      	str	r3, [sp, #32]
 8008bda:	2001      	movs	r0, #1
 8008bdc:	e64d      	b.n	800887a <_dtoa_r+0x802>
 8008bde:	f1bb 0f00 	cmp.w	fp, #0
 8008be2:	f77f aed9 	ble.w	8008998 <_dtoa_r+0x920>
 8008be6:	4656      	mov	r6, sl
 8008be8:	9802      	ldr	r0, [sp, #8]
 8008bea:	4621      	mov	r1, r4
 8008bec:	f7ff f9bc 	bl	8007f68 <quorem>
 8008bf0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008bf4:	f806 3b01 	strb.w	r3, [r6], #1
 8008bf8:	eba6 020a 	sub.w	r2, r6, sl
 8008bfc:	4593      	cmp	fp, r2
 8008bfe:	ddb4      	ble.n	8008b6a <_dtoa_r+0xaf2>
 8008c00:	9902      	ldr	r1, [sp, #8]
 8008c02:	2300      	movs	r3, #0
 8008c04:	220a      	movs	r2, #10
 8008c06:	4648      	mov	r0, r9
 8008c08:	f000 fb22 	bl	8009250 <__multadd>
 8008c0c:	9002      	str	r0, [sp, #8]
 8008c0e:	e7eb      	b.n	8008be8 <_dtoa_r+0xb70>
 8008c10:	0800a2b0 	.word	0x0800a2b0
 8008c14:	0800a234 	.word	0x0800a234

08008c18 <__ssputs_r>:
 8008c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c1c:	688e      	ldr	r6, [r1, #8]
 8008c1e:	461f      	mov	r7, r3
 8008c20:	42be      	cmp	r6, r7
 8008c22:	680b      	ldr	r3, [r1, #0]
 8008c24:	4682      	mov	sl, r0
 8008c26:	460c      	mov	r4, r1
 8008c28:	4690      	mov	r8, r2
 8008c2a:	d82d      	bhi.n	8008c88 <__ssputs_r+0x70>
 8008c2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c30:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008c34:	d026      	beq.n	8008c84 <__ssputs_r+0x6c>
 8008c36:	6965      	ldr	r5, [r4, #20]
 8008c38:	6909      	ldr	r1, [r1, #16]
 8008c3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c3e:	eba3 0901 	sub.w	r9, r3, r1
 8008c42:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c46:	1c7b      	adds	r3, r7, #1
 8008c48:	444b      	add	r3, r9
 8008c4a:	106d      	asrs	r5, r5, #1
 8008c4c:	429d      	cmp	r5, r3
 8008c4e:	bf38      	it	cc
 8008c50:	461d      	movcc	r5, r3
 8008c52:	0553      	lsls	r3, r2, #21
 8008c54:	d527      	bpl.n	8008ca6 <__ssputs_r+0x8e>
 8008c56:	4629      	mov	r1, r5
 8008c58:	f000 f960 	bl	8008f1c <_malloc_r>
 8008c5c:	4606      	mov	r6, r0
 8008c5e:	b360      	cbz	r0, 8008cba <__ssputs_r+0xa2>
 8008c60:	6921      	ldr	r1, [r4, #16]
 8008c62:	464a      	mov	r2, r9
 8008c64:	f000 feee 	bl	8009a44 <memcpy>
 8008c68:	89a3      	ldrh	r3, [r4, #12]
 8008c6a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008c6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c72:	81a3      	strh	r3, [r4, #12]
 8008c74:	6126      	str	r6, [r4, #16]
 8008c76:	6165      	str	r5, [r4, #20]
 8008c78:	444e      	add	r6, r9
 8008c7a:	eba5 0509 	sub.w	r5, r5, r9
 8008c7e:	6026      	str	r6, [r4, #0]
 8008c80:	60a5      	str	r5, [r4, #8]
 8008c82:	463e      	mov	r6, r7
 8008c84:	42be      	cmp	r6, r7
 8008c86:	d900      	bls.n	8008c8a <__ssputs_r+0x72>
 8008c88:	463e      	mov	r6, r7
 8008c8a:	6820      	ldr	r0, [r4, #0]
 8008c8c:	4632      	mov	r2, r6
 8008c8e:	4641      	mov	r1, r8
 8008c90:	f000 fe67 	bl	8009962 <memmove>
 8008c94:	68a3      	ldr	r3, [r4, #8]
 8008c96:	1b9b      	subs	r3, r3, r6
 8008c98:	60a3      	str	r3, [r4, #8]
 8008c9a:	6823      	ldr	r3, [r4, #0]
 8008c9c:	4433      	add	r3, r6
 8008c9e:	6023      	str	r3, [r4, #0]
 8008ca0:	2000      	movs	r0, #0
 8008ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ca6:	462a      	mov	r2, r5
 8008ca8:	f000 fe2d 	bl	8009906 <_realloc_r>
 8008cac:	4606      	mov	r6, r0
 8008cae:	2800      	cmp	r0, #0
 8008cb0:	d1e0      	bne.n	8008c74 <__ssputs_r+0x5c>
 8008cb2:	6921      	ldr	r1, [r4, #16]
 8008cb4:	4650      	mov	r0, sl
 8008cb6:	f000 ff05 	bl	8009ac4 <_free_r>
 8008cba:	230c      	movs	r3, #12
 8008cbc:	f8ca 3000 	str.w	r3, [sl]
 8008cc0:	89a3      	ldrh	r3, [r4, #12]
 8008cc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cc6:	81a3      	strh	r3, [r4, #12]
 8008cc8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008ccc:	e7e9      	b.n	8008ca2 <__ssputs_r+0x8a>
	...

08008cd0 <_svfiprintf_r>:
 8008cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cd4:	4698      	mov	r8, r3
 8008cd6:	898b      	ldrh	r3, [r1, #12]
 8008cd8:	061b      	lsls	r3, r3, #24
 8008cda:	b09d      	sub	sp, #116	@ 0x74
 8008cdc:	4607      	mov	r7, r0
 8008cde:	460d      	mov	r5, r1
 8008ce0:	4614      	mov	r4, r2
 8008ce2:	d510      	bpl.n	8008d06 <_svfiprintf_r+0x36>
 8008ce4:	690b      	ldr	r3, [r1, #16]
 8008ce6:	b973      	cbnz	r3, 8008d06 <_svfiprintf_r+0x36>
 8008ce8:	2140      	movs	r1, #64	@ 0x40
 8008cea:	f000 f917 	bl	8008f1c <_malloc_r>
 8008cee:	6028      	str	r0, [r5, #0]
 8008cf0:	6128      	str	r0, [r5, #16]
 8008cf2:	b930      	cbnz	r0, 8008d02 <_svfiprintf_r+0x32>
 8008cf4:	230c      	movs	r3, #12
 8008cf6:	603b      	str	r3, [r7, #0]
 8008cf8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008cfc:	b01d      	add	sp, #116	@ 0x74
 8008cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d02:	2340      	movs	r3, #64	@ 0x40
 8008d04:	616b      	str	r3, [r5, #20]
 8008d06:	2300      	movs	r3, #0
 8008d08:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d0a:	2320      	movs	r3, #32
 8008d0c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d10:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d14:	2330      	movs	r3, #48	@ 0x30
 8008d16:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008eb4 <_svfiprintf_r+0x1e4>
 8008d1a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d1e:	f04f 0901 	mov.w	r9, #1
 8008d22:	4623      	mov	r3, r4
 8008d24:	469a      	mov	sl, r3
 8008d26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d2a:	b10a      	cbz	r2, 8008d30 <_svfiprintf_r+0x60>
 8008d2c:	2a25      	cmp	r2, #37	@ 0x25
 8008d2e:	d1f9      	bne.n	8008d24 <_svfiprintf_r+0x54>
 8008d30:	ebba 0b04 	subs.w	fp, sl, r4
 8008d34:	d00b      	beq.n	8008d4e <_svfiprintf_r+0x7e>
 8008d36:	465b      	mov	r3, fp
 8008d38:	4622      	mov	r2, r4
 8008d3a:	4629      	mov	r1, r5
 8008d3c:	4638      	mov	r0, r7
 8008d3e:	f7ff ff6b 	bl	8008c18 <__ssputs_r>
 8008d42:	3001      	adds	r0, #1
 8008d44:	f000 80a7 	beq.w	8008e96 <_svfiprintf_r+0x1c6>
 8008d48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d4a:	445a      	add	r2, fp
 8008d4c:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d4e:	f89a 3000 	ldrb.w	r3, [sl]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	f000 809f 	beq.w	8008e96 <_svfiprintf_r+0x1c6>
 8008d58:	2300      	movs	r3, #0
 8008d5a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008d5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d62:	f10a 0a01 	add.w	sl, sl, #1
 8008d66:	9304      	str	r3, [sp, #16]
 8008d68:	9307      	str	r3, [sp, #28]
 8008d6a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d6e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d70:	4654      	mov	r4, sl
 8008d72:	2205      	movs	r2, #5
 8008d74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d78:	484e      	ldr	r0, [pc, #312]	@ (8008eb4 <_svfiprintf_r+0x1e4>)
 8008d7a:	f7f7 fa29 	bl	80001d0 <memchr>
 8008d7e:	9a04      	ldr	r2, [sp, #16]
 8008d80:	b9d8      	cbnz	r0, 8008dba <_svfiprintf_r+0xea>
 8008d82:	06d0      	lsls	r0, r2, #27
 8008d84:	bf44      	itt	mi
 8008d86:	2320      	movmi	r3, #32
 8008d88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d8c:	0711      	lsls	r1, r2, #28
 8008d8e:	bf44      	itt	mi
 8008d90:	232b      	movmi	r3, #43	@ 0x2b
 8008d92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d96:	f89a 3000 	ldrb.w	r3, [sl]
 8008d9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d9c:	d015      	beq.n	8008dca <_svfiprintf_r+0xfa>
 8008d9e:	9a07      	ldr	r2, [sp, #28]
 8008da0:	4654      	mov	r4, sl
 8008da2:	2000      	movs	r0, #0
 8008da4:	f04f 0c0a 	mov.w	ip, #10
 8008da8:	4621      	mov	r1, r4
 8008daa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008dae:	3b30      	subs	r3, #48	@ 0x30
 8008db0:	2b09      	cmp	r3, #9
 8008db2:	d94b      	bls.n	8008e4c <_svfiprintf_r+0x17c>
 8008db4:	b1b0      	cbz	r0, 8008de4 <_svfiprintf_r+0x114>
 8008db6:	9207      	str	r2, [sp, #28]
 8008db8:	e014      	b.n	8008de4 <_svfiprintf_r+0x114>
 8008dba:	eba0 0308 	sub.w	r3, r0, r8
 8008dbe:	fa09 f303 	lsl.w	r3, r9, r3
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	9304      	str	r3, [sp, #16]
 8008dc6:	46a2      	mov	sl, r4
 8008dc8:	e7d2      	b.n	8008d70 <_svfiprintf_r+0xa0>
 8008dca:	9b03      	ldr	r3, [sp, #12]
 8008dcc:	1d19      	adds	r1, r3, #4
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	9103      	str	r1, [sp, #12]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	bfbb      	ittet	lt
 8008dd6:	425b      	neglt	r3, r3
 8008dd8:	f042 0202 	orrlt.w	r2, r2, #2
 8008ddc:	9307      	strge	r3, [sp, #28]
 8008dde:	9307      	strlt	r3, [sp, #28]
 8008de0:	bfb8      	it	lt
 8008de2:	9204      	strlt	r2, [sp, #16]
 8008de4:	7823      	ldrb	r3, [r4, #0]
 8008de6:	2b2e      	cmp	r3, #46	@ 0x2e
 8008de8:	d10a      	bne.n	8008e00 <_svfiprintf_r+0x130>
 8008dea:	7863      	ldrb	r3, [r4, #1]
 8008dec:	2b2a      	cmp	r3, #42	@ 0x2a
 8008dee:	d132      	bne.n	8008e56 <_svfiprintf_r+0x186>
 8008df0:	9b03      	ldr	r3, [sp, #12]
 8008df2:	1d1a      	adds	r2, r3, #4
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	9203      	str	r2, [sp, #12]
 8008df8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008dfc:	3402      	adds	r4, #2
 8008dfe:	9305      	str	r3, [sp, #20]
 8008e00:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008ec4 <_svfiprintf_r+0x1f4>
 8008e04:	7821      	ldrb	r1, [r4, #0]
 8008e06:	2203      	movs	r2, #3
 8008e08:	4650      	mov	r0, sl
 8008e0a:	f7f7 f9e1 	bl	80001d0 <memchr>
 8008e0e:	b138      	cbz	r0, 8008e20 <_svfiprintf_r+0x150>
 8008e10:	9b04      	ldr	r3, [sp, #16]
 8008e12:	eba0 000a 	sub.w	r0, r0, sl
 8008e16:	2240      	movs	r2, #64	@ 0x40
 8008e18:	4082      	lsls	r2, r0
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	3401      	adds	r4, #1
 8008e1e:	9304      	str	r3, [sp, #16]
 8008e20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e24:	4824      	ldr	r0, [pc, #144]	@ (8008eb8 <_svfiprintf_r+0x1e8>)
 8008e26:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e2a:	2206      	movs	r2, #6
 8008e2c:	f7f7 f9d0 	bl	80001d0 <memchr>
 8008e30:	2800      	cmp	r0, #0
 8008e32:	d036      	beq.n	8008ea2 <_svfiprintf_r+0x1d2>
 8008e34:	4b21      	ldr	r3, [pc, #132]	@ (8008ebc <_svfiprintf_r+0x1ec>)
 8008e36:	bb1b      	cbnz	r3, 8008e80 <_svfiprintf_r+0x1b0>
 8008e38:	9b03      	ldr	r3, [sp, #12]
 8008e3a:	3307      	adds	r3, #7
 8008e3c:	f023 0307 	bic.w	r3, r3, #7
 8008e40:	3308      	adds	r3, #8
 8008e42:	9303      	str	r3, [sp, #12]
 8008e44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e46:	4433      	add	r3, r6
 8008e48:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e4a:	e76a      	b.n	8008d22 <_svfiprintf_r+0x52>
 8008e4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e50:	460c      	mov	r4, r1
 8008e52:	2001      	movs	r0, #1
 8008e54:	e7a8      	b.n	8008da8 <_svfiprintf_r+0xd8>
 8008e56:	2300      	movs	r3, #0
 8008e58:	3401      	adds	r4, #1
 8008e5a:	9305      	str	r3, [sp, #20]
 8008e5c:	4619      	mov	r1, r3
 8008e5e:	f04f 0c0a 	mov.w	ip, #10
 8008e62:	4620      	mov	r0, r4
 8008e64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e68:	3a30      	subs	r2, #48	@ 0x30
 8008e6a:	2a09      	cmp	r2, #9
 8008e6c:	d903      	bls.n	8008e76 <_svfiprintf_r+0x1a6>
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d0c6      	beq.n	8008e00 <_svfiprintf_r+0x130>
 8008e72:	9105      	str	r1, [sp, #20]
 8008e74:	e7c4      	b.n	8008e00 <_svfiprintf_r+0x130>
 8008e76:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e7a:	4604      	mov	r4, r0
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	e7f0      	b.n	8008e62 <_svfiprintf_r+0x192>
 8008e80:	ab03      	add	r3, sp, #12
 8008e82:	9300      	str	r3, [sp, #0]
 8008e84:	462a      	mov	r2, r5
 8008e86:	4b0e      	ldr	r3, [pc, #56]	@ (8008ec0 <_svfiprintf_r+0x1f0>)
 8008e88:	a904      	add	r1, sp, #16
 8008e8a:	4638      	mov	r0, r7
 8008e8c:	f7fe fb98 	bl	80075c0 <_printf_float>
 8008e90:	1c42      	adds	r2, r0, #1
 8008e92:	4606      	mov	r6, r0
 8008e94:	d1d6      	bne.n	8008e44 <_svfiprintf_r+0x174>
 8008e96:	89ab      	ldrh	r3, [r5, #12]
 8008e98:	065b      	lsls	r3, r3, #25
 8008e9a:	f53f af2d 	bmi.w	8008cf8 <_svfiprintf_r+0x28>
 8008e9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ea0:	e72c      	b.n	8008cfc <_svfiprintf_r+0x2c>
 8008ea2:	ab03      	add	r3, sp, #12
 8008ea4:	9300      	str	r3, [sp, #0]
 8008ea6:	462a      	mov	r2, r5
 8008ea8:	4b05      	ldr	r3, [pc, #20]	@ (8008ec0 <_svfiprintf_r+0x1f0>)
 8008eaa:	a904      	add	r1, sp, #16
 8008eac:	4638      	mov	r0, r7
 8008eae:	f7fe fe1f 	bl	8007af0 <_printf_i>
 8008eb2:	e7ed      	b.n	8008e90 <_svfiprintf_r+0x1c0>
 8008eb4:	0800a2c1 	.word	0x0800a2c1
 8008eb8:	0800a2cb 	.word	0x0800a2cb
 8008ebc:	080075c1 	.word	0x080075c1
 8008ec0:	08008c19 	.word	0x08008c19
 8008ec4:	0800a2c7 	.word	0x0800a2c7

08008ec8 <malloc>:
 8008ec8:	4b02      	ldr	r3, [pc, #8]	@ (8008ed4 <malloc+0xc>)
 8008eca:	4601      	mov	r1, r0
 8008ecc:	6818      	ldr	r0, [r3, #0]
 8008ece:	f000 b825 	b.w	8008f1c <_malloc_r>
 8008ed2:	bf00      	nop
 8008ed4:	2000001c 	.word	0x2000001c

08008ed8 <sbrk_aligned>:
 8008ed8:	b570      	push	{r4, r5, r6, lr}
 8008eda:	4e0f      	ldr	r6, [pc, #60]	@ (8008f18 <sbrk_aligned+0x40>)
 8008edc:	460c      	mov	r4, r1
 8008ede:	6831      	ldr	r1, [r6, #0]
 8008ee0:	4605      	mov	r5, r0
 8008ee2:	b911      	cbnz	r1, 8008eea <sbrk_aligned+0x12>
 8008ee4:	f000 fd7c 	bl	80099e0 <_sbrk_r>
 8008ee8:	6030      	str	r0, [r6, #0]
 8008eea:	4621      	mov	r1, r4
 8008eec:	4628      	mov	r0, r5
 8008eee:	f000 fd77 	bl	80099e0 <_sbrk_r>
 8008ef2:	1c43      	adds	r3, r0, #1
 8008ef4:	d103      	bne.n	8008efe <sbrk_aligned+0x26>
 8008ef6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008efa:	4620      	mov	r0, r4
 8008efc:	bd70      	pop	{r4, r5, r6, pc}
 8008efe:	1cc4      	adds	r4, r0, #3
 8008f00:	f024 0403 	bic.w	r4, r4, #3
 8008f04:	42a0      	cmp	r0, r4
 8008f06:	d0f8      	beq.n	8008efa <sbrk_aligned+0x22>
 8008f08:	1a21      	subs	r1, r4, r0
 8008f0a:	4628      	mov	r0, r5
 8008f0c:	f000 fd68 	bl	80099e0 <_sbrk_r>
 8008f10:	3001      	adds	r0, #1
 8008f12:	d1f2      	bne.n	8008efa <sbrk_aligned+0x22>
 8008f14:	e7ef      	b.n	8008ef6 <sbrk_aligned+0x1e>
 8008f16:	bf00      	nop
 8008f18:	20000534 	.word	0x20000534

08008f1c <_malloc_r>:
 8008f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f20:	1ccd      	adds	r5, r1, #3
 8008f22:	f025 0503 	bic.w	r5, r5, #3
 8008f26:	3508      	adds	r5, #8
 8008f28:	2d0c      	cmp	r5, #12
 8008f2a:	bf38      	it	cc
 8008f2c:	250c      	movcc	r5, #12
 8008f2e:	2d00      	cmp	r5, #0
 8008f30:	4606      	mov	r6, r0
 8008f32:	db01      	blt.n	8008f38 <_malloc_r+0x1c>
 8008f34:	42a9      	cmp	r1, r5
 8008f36:	d904      	bls.n	8008f42 <_malloc_r+0x26>
 8008f38:	230c      	movs	r3, #12
 8008f3a:	6033      	str	r3, [r6, #0]
 8008f3c:	2000      	movs	r0, #0
 8008f3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009018 <_malloc_r+0xfc>
 8008f46:	f000 f915 	bl	8009174 <__malloc_lock>
 8008f4a:	f8d8 3000 	ldr.w	r3, [r8]
 8008f4e:	461c      	mov	r4, r3
 8008f50:	bb44      	cbnz	r4, 8008fa4 <_malloc_r+0x88>
 8008f52:	4629      	mov	r1, r5
 8008f54:	4630      	mov	r0, r6
 8008f56:	f7ff ffbf 	bl	8008ed8 <sbrk_aligned>
 8008f5a:	1c43      	adds	r3, r0, #1
 8008f5c:	4604      	mov	r4, r0
 8008f5e:	d158      	bne.n	8009012 <_malloc_r+0xf6>
 8008f60:	f8d8 4000 	ldr.w	r4, [r8]
 8008f64:	4627      	mov	r7, r4
 8008f66:	2f00      	cmp	r7, #0
 8008f68:	d143      	bne.n	8008ff2 <_malloc_r+0xd6>
 8008f6a:	2c00      	cmp	r4, #0
 8008f6c:	d04b      	beq.n	8009006 <_malloc_r+0xea>
 8008f6e:	6823      	ldr	r3, [r4, #0]
 8008f70:	4639      	mov	r1, r7
 8008f72:	4630      	mov	r0, r6
 8008f74:	eb04 0903 	add.w	r9, r4, r3
 8008f78:	f000 fd32 	bl	80099e0 <_sbrk_r>
 8008f7c:	4581      	cmp	r9, r0
 8008f7e:	d142      	bne.n	8009006 <_malloc_r+0xea>
 8008f80:	6821      	ldr	r1, [r4, #0]
 8008f82:	1a6d      	subs	r5, r5, r1
 8008f84:	4629      	mov	r1, r5
 8008f86:	4630      	mov	r0, r6
 8008f88:	f7ff ffa6 	bl	8008ed8 <sbrk_aligned>
 8008f8c:	3001      	adds	r0, #1
 8008f8e:	d03a      	beq.n	8009006 <_malloc_r+0xea>
 8008f90:	6823      	ldr	r3, [r4, #0]
 8008f92:	442b      	add	r3, r5
 8008f94:	6023      	str	r3, [r4, #0]
 8008f96:	f8d8 3000 	ldr.w	r3, [r8]
 8008f9a:	685a      	ldr	r2, [r3, #4]
 8008f9c:	bb62      	cbnz	r2, 8008ff8 <_malloc_r+0xdc>
 8008f9e:	f8c8 7000 	str.w	r7, [r8]
 8008fa2:	e00f      	b.n	8008fc4 <_malloc_r+0xa8>
 8008fa4:	6822      	ldr	r2, [r4, #0]
 8008fa6:	1b52      	subs	r2, r2, r5
 8008fa8:	d420      	bmi.n	8008fec <_malloc_r+0xd0>
 8008faa:	2a0b      	cmp	r2, #11
 8008fac:	d917      	bls.n	8008fde <_malloc_r+0xc2>
 8008fae:	1961      	adds	r1, r4, r5
 8008fb0:	42a3      	cmp	r3, r4
 8008fb2:	6025      	str	r5, [r4, #0]
 8008fb4:	bf18      	it	ne
 8008fb6:	6059      	strne	r1, [r3, #4]
 8008fb8:	6863      	ldr	r3, [r4, #4]
 8008fba:	bf08      	it	eq
 8008fbc:	f8c8 1000 	streq.w	r1, [r8]
 8008fc0:	5162      	str	r2, [r4, r5]
 8008fc2:	604b      	str	r3, [r1, #4]
 8008fc4:	4630      	mov	r0, r6
 8008fc6:	f000 f8db 	bl	8009180 <__malloc_unlock>
 8008fca:	f104 000b 	add.w	r0, r4, #11
 8008fce:	1d23      	adds	r3, r4, #4
 8008fd0:	f020 0007 	bic.w	r0, r0, #7
 8008fd4:	1ac2      	subs	r2, r0, r3
 8008fd6:	bf1c      	itt	ne
 8008fd8:	1a1b      	subne	r3, r3, r0
 8008fda:	50a3      	strne	r3, [r4, r2]
 8008fdc:	e7af      	b.n	8008f3e <_malloc_r+0x22>
 8008fde:	6862      	ldr	r2, [r4, #4]
 8008fe0:	42a3      	cmp	r3, r4
 8008fe2:	bf0c      	ite	eq
 8008fe4:	f8c8 2000 	streq.w	r2, [r8]
 8008fe8:	605a      	strne	r2, [r3, #4]
 8008fea:	e7eb      	b.n	8008fc4 <_malloc_r+0xa8>
 8008fec:	4623      	mov	r3, r4
 8008fee:	6864      	ldr	r4, [r4, #4]
 8008ff0:	e7ae      	b.n	8008f50 <_malloc_r+0x34>
 8008ff2:	463c      	mov	r4, r7
 8008ff4:	687f      	ldr	r7, [r7, #4]
 8008ff6:	e7b6      	b.n	8008f66 <_malloc_r+0x4a>
 8008ff8:	461a      	mov	r2, r3
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	42a3      	cmp	r3, r4
 8008ffe:	d1fb      	bne.n	8008ff8 <_malloc_r+0xdc>
 8009000:	2300      	movs	r3, #0
 8009002:	6053      	str	r3, [r2, #4]
 8009004:	e7de      	b.n	8008fc4 <_malloc_r+0xa8>
 8009006:	230c      	movs	r3, #12
 8009008:	6033      	str	r3, [r6, #0]
 800900a:	4630      	mov	r0, r6
 800900c:	f000 f8b8 	bl	8009180 <__malloc_unlock>
 8009010:	e794      	b.n	8008f3c <_malloc_r+0x20>
 8009012:	6005      	str	r5, [r0, #0]
 8009014:	e7d6      	b.n	8008fc4 <_malloc_r+0xa8>
 8009016:	bf00      	nop
 8009018:	20000538 	.word	0x20000538

0800901c <__sflush_r>:
 800901c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009024:	0716      	lsls	r6, r2, #28
 8009026:	4605      	mov	r5, r0
 8009028:	460c      	mov	r4, r1
 800902a:	d454      	bmi.n	80090d6 <__sflush_r+0xba>
 800902c:	684b      	ldr	r3, [r1, #4]
 800902e:	2b00      	cmp	r3, #0
 8009030:	dc02      	bgt.n	8009038 <__sflush_r+0x1c>
 8009032:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009034:	2b00      	cmp	r3, #0
 8009036:	dd48      	ble.n	80090ca <__sflush_r+0xae>
 8009038:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800903a:	2e00      	cmp	r6, #0
 800903c:	d045      	beq.n	80090ca <__sflush_r+0xae>
 800903e:	2300      	movs	r3, #0
 8009040:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009044:	682f      	ldr	r7, [r5, #0]
 8009046:	6a21      	ldr	r1, [r4, #32]
 8009048:	602b      	str	r3, [r5, #0]
 800904a:	d030      	beq.n	80090ae <__sflush_r+0x92>
 800904c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800904e:	89a3      	ldrh	r3, [r4, #12]
 8009050:	0759      	lsls	r1, r3, #29
 8009052:	d505      	bpl.n	8009060 <__sflush_r+0x44>
 8009054:	6863      	ldr	r3, [r4, #4]
 8009056:	1ad2      	subs	r2, r2, r3
 8009058:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800905a:	b10b      	cbz	r3, 8009060 <__sflush_r+0x44>
 800905c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800905e:	1ad2      	subs	r2, r2, r3
 8009060:	2300      	movs	r3, #0
 8009062:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009064:	6a21      	ldr	r1, [r4, #32]
 8009066:	4628      	mov	r0, r5
 8009068:	47b0      	blx	r6
 800906a:	1c43      	adds	r3, r0, #1
 800906c:	89a3      	ldrh	r3, [r4, #12]
 800906e:	d106      	bne.n	800907e <__sflush_r+0x62>
 8009070:	6829      	ldr	r1, [r5, #0]
 8009072:	291d      	cmp	r1, #29
 8009074:	d82b      	bhi.n	80090ce <__sflush_r+0xb2>
 8009076:	4a2a      	ldr	r2, [pc, #168]	@ (8009120 <__sflush_r+0x104>)
 8009078:	40ca      	lsrs	r2, r1
 800907a:	07d6      	lsls	r6, r2, #31
 800907c:	d527      	bpl.n	80090ce <__sflush_r+0xb2>
 800907e:	2200      	movs	r2, #0
 8009080:	6062      	str	r2, [r4, #4]
 8009082:	04d9      	lsls	r1, r3, #19
 8009084:	6922      	ldr	r2, [r4, #16]
 8009086:	6022      	str	r2, [r4, #0]
 8009088:	d504      	bpl.n	8009094 <__sflush_r+0x78>
 800908a:	1c42      	adds	r2, r0, #1
 800908c:	d101      	bne.n	8009092 <__sflush_r+0x76>
 800908e:	682b      	ldr	r3, [r5, #0]
 8009090:	b903      	cbnz	r3, 8009094 <__sflush_r+0x78>
 8009092:	6560      	str	r0, [r4, #84]	@ 0x54
 8009094:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009096:	602f      	str	r7, [r5, #0]
 8009098:	b1b9      	cbz	r1, 80090ca <__sflush_r+0xae>
 800909a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800909e:	4299      	cmp	r1, r3
 80090a0:	d002      	beq.n	80090a8 <__sflush_r+0x8c>
 80090a2:	4628      	mov	r0, r5
 80090a4:	f000 fd0e 	bl	8009ac4 <_free_r>
 80090a8:	2300      	movs	r3, #0
 80090aa:	6363      	str	r3, [r4, #52]	@ 0x34
 80090ac:	e00d      	b.n	80090ca <__sflush_r+0xae>
 80090ae:	2301      	movs	r3, #1
 80090b0:	4628      	mov	r0, r5
 80090b2:	47b0      	blx	r6
 80090b4:	4602      	mov	r2, r0
 80090b6:	1c50      	adds	r0, r2, #1
 80090b8:	d1c9      	bne.n	800904e <__sflush_r+0x32>
 80090ba:	682b      	ldr	r3, [r5, #0]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d0c6      	beq.n	800904e <__sflush_r+0x32>
 80090c0:	2b1d      	cmp	r3, #29
 80090c2:	d001      	beq.n	80090c8 <__sflush_r+0xac>
 80090c4:	2b16      	cmp	r3, #22
 80090c6:	d11e      	bne.n	8009106 <__sflush_r+0xea>
 80090c8:	602f      	str	r7, [r5, #0]
 80090ca:	2000      	movs	r0, #0
 80090cc:	e022      	b.n	8009114 <__sflush_r+0xf8>
 80090ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090d2:	b21b      	sxth	r3, r3
 80090d4:	e01b      	b.n	800910e <__sflush_r+0xf2>
 80090d6:	690f      	ldr	r7, [r1, #16]
 80090d8:	2f00      	cmp	r7, #0
 80090da:	d0f6      	beq.n	80090ca <__sflush_r+0xae>
 80090dc:	0793      	lsls	r3, r2, #30
 80090de:	680e      	ldr	r6, [r1, #0]
 80090e0:	bf08      	it	eq
 80090e2:	694b      	ldreq	r3, [r1, #20]
 80090e4:	600f      	str	r7, [r1, #0]
 80090e6:	bf18      	it	ne
 80090e8:	2300      	movne	r3, #0
 80090ea:	eba6 0807 	sub.w	r8, r6, r7
 80090ee:	608b      	str	r3, [r1, #8]
 80090f0:	f1b8 0f00 	cmp.w	r8, #0
 80090f4:	dde9      	ble.n	80090ca <__sflush_r+0xae>
 80090f6:	6a21      	ldr	r1, [r4, #32]
 80090f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80090fa:	4643      	mov	r3, r8
 80090fc:	463a      	mov	r2, r7
 80090fe:	4628      	mov	r0, r5
 8009100:	47b0      	blx	r6
 8009102:	2800      	cmp	r0, #0
 8009104:	dc08      	bgt.n	8009118 <__sflush_r+0xfc>
 8009106:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800910a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800910e:	81a3      	strh	r3, [r4, #12]
 8009110:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009118:	4407      	add	r7, r0
 800911a:	eba8 0800 	sub.w	r8, r8, r0
 800911e:	e7e7      	b.n	80090f0 <__sflush_r+0xd4>
 8009120:	20400001 	.word	0x20400001

08009124 <_fflush_r>:
 8009124:	b538      	push	{r3, r4, r5, lr}
 8009126:	690b      	ldr	r3, [r1, #16]
 8009128:	4605      	mov	r5, r0
 800912a:	460c      	mov	r4, r1
 800912c:	b913      	cbnz	r3, 8009134 <_fflush_r+0x10>
 800912e:	2500      	movs	r5, #0
 8009130:	4628      	mov	r0, r5
 8009132:	bd38      	pop	{r3, r4, r5, pc}
 8009134:	b118      	cbz	r0, 800913e <_fflush_r+0x1a>
 8009136:	6a03      	ldr	r3, [r0, #32]
 8009138:	b90b      	cbnz	r3, 800913e <_fflush_r+0x1a>
 800913a:	f7fe fea5 	bl	8007e88 <__sinit>
 800913e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d0f3      	beq.n	800912e <_fflush_r+0xa>
 8009146:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009148:	07d0      	lsls	r0, r2, #31
 800914a:	d404      	bmi.n	8009156 <_fflush_r+0x32>
 800914c:	0599      	lsls	r1, r3, #22
 800914e:	d402      	bmi.n	8009156 <_fflush_r+0x32>
 8009150:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009152:	f7fe ff02 	bl	8007f5a <__retarget_lock_acquire_recursive>
 8009156:	4628      	mov	r0, r5
 8009158:	4621      	mov	r1, r4
 800915a:	f7ff ff5f 	bl	800901c <__sflush_r>
 800915e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009160:	07da      	lsls	r2, r3, #31
 8009162:	4605      	mov	r5, r0
 8009164:	d4e4      	bmi.n	8009130 <_fflush_r+0xc>
 8009166:	89a3      	ldrh	r3, [r4, #12]
 8009168:	059b      	lsls	r3, r3, #22
 800916a:	d4e1      	bmi.n	8009130 <_fflush_r+0xc>
 800916c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800916e:	f7fe fef5 	bl	8007f5c <__retarget_lock_release_recursive>
 8009172:	e7dd      	b.n	8009130 <_fflush_r+0xc>

08009174 <__malloc_lock>:
 8009174:	4801      	ldr	r0, [pc, #4]	@ (800917c <__malloc_lock+0x8>)
 8009176:	f7fe bef0 	b.w	8007f5a <__retarget_lock_acquire_recursive>
 800917a:	bf00      	nop
 800917c:	20000530 	.word	0x20000530

08009180 <__malloc_unlock>:
 8009180:	4801      	ldr	r0, [pc, #4]	@ (8009188 <__malloc_unlock+0x8>)
 8009182:	f7fe beeb 	b.w	8007f5c <__retarget_lock_release_recursive>
 8009186:	bf00      	nop
 8009188:	20000530 	.word	0x20000530

0800918c <_Balloc>:
 800918c:	b570      	push	{r4, r5, r6, lr}
 800918e:	69c6      	ldr	r6, [r0, #28]
 8009190:	4604      	mov	r4, r0
 8009192:	460d      	mov	r5, r1
 8009194:	b976      	cbnz	r6, 80091b4 <_Balloc+0x28>
 8009196:	2010      	movs	r0, #16
 8009198:	f7ff fe96 	bl	8008ec8 <malloc>
 800919c:	4602      	mov	r2, r0
 800919e:	61e0      	str	r0, [r4, #28]
 80091a0:	b920      	cbnz	r0, 80091ac <_Balloc+0x20>
 80091a2:	4b18      	ldr	r3, [pc, #96]	@ (8009204 <_Balloc+0x78>)
 80091a4:	4818      	ldr	r0, [pc, #96]	@ (8009208 <_Balloc+0x7c>)
 80091a6:	216b      	movs	r1, #107	@ 0x6b
 80091a8:	f000 fc5a 	bl	8009a60 <__assert_func>
 80091ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80091b0:	6006      	str	r6, [r0, #0]
 80091b2:	60c6      	str	r6, [r0, #12]
 80091b4:	69e6      	ldr	r6, [r4, #28]
 80091b6:	68f3      	ldr	r3, [r6, #12]
 80091b8:	b183      	cbz	r3, 80091dc <_Balloc+0x50>
 80091ba:	69e3      	ldr	r3, [r4, #28]
 80091bc:	68db      	ldr	r3, [r3, #12]
 80091be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80091c2:	b9b8      	cbnz	r0, 80091f4 <_Balloc+0x68>
 80091c4:	2101      	movs	r1, #1
 80091c6:	fa01 f605 	lsl.w	r6, r1, r5
 80091ca:	1d72      	adds	r2, r6, #5
 80091cc:	0092      	lsls	r2, r2, #2
 80091ce:	4620      	mov	r0, r4
 80091d0:	f000 fc64 	bl	8009a9c <_calloc_r>
 80091d4:	b160      	cbz	r0, 80091f0 <_Balloc+0x64>
 80091d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80091da:	e00e      	b.n	80091fa <_Balloc+0x6e>
 80091dc:	2221      	movs	r2, #33	@ 0x21
 80091de:	2104      	movs	r1, #4
 80091e0:	4620      	mov	r0, r4
 80091e2:	f000 fc5b 	bl	8009a9c <_calloc_r>
 80091e6:	69e3      	ldr	r3, [r4, #28]
 80091e8:	60f0      	str	r0, [r6, #12]
 80091ea:	68db      	ldr	r3, [r3, #12]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d1e4      	bne.n	80091ba <_Balloc+0x2e>
 80091f0:	2000      	movs	r0, #0
 80091f2:	bd70      	pop	{r4, r5, r6, pc}
 80091f4:	6802      	ldr	r2, [r0, #0]
 80091f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80091fa:	2300      	movs	r3, #0
 80091fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009200:	e7f7      	b.n	80091f2 <_Balloc+0x66>
 8009202:	bf00      	nop
 8009204:	0800a241 	.word	0x0800a241
 8009208:	0800a2d2 	.word	0x0800a2d2

0800920c <_Bfree>:
 800920c:	b570      	push	{r4, r5, r6, lr}
 800920e:	69c6      	ldr	r6, [r0, #28]
 8009210:	4605      	mov	r5, r0
 8009212:	460c      	mov	r4, r1
 8009214:	b976      	cbnz	r6, 8009234 <_Bfree+0x28>
 8009216:	2010      	movs	r0, #16
 8009218:	f7ff fe56 	bl	8008ec8 <malloc>
 800921c:	4602      	mov	r2, r0
 800921e:	61e8      	str	r0, [r5, #28]
 8009220:	b920      	cbnz	r0, 800922c <_Bfree+0x20>
 8009222:	4b09      	ldr	r3, [pc, #36]	@ (8009248 <_Bfree+0x3c>)
 8009224:	4809      	ldr	r0, [pc, #36]	@ (800924c <_Bfree+0x40>)
 8009226:	218f      	movs	r1, #143	@ 0x8f
 8009228:	f000 fc1a 	bl	8009a60 <__assert_func>
 800922c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009230:	6006      	str	r6, [r0, #0]
 8009232:	60c6      	str	r6, [r0, #12]
 8009234:	b13c      	cbz	r4, 8009246 <_Bfree+0x3a>
 8009236:	69eb      	ldr	r3, [r5, #28]
 8009238:	6862      	ldr	r2, [r4, #4]
 800923a:	68db      	ldr	r3, [r3, #12]
 800923c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009240:	6021      	str	r1, [r4, #0]
 8009242:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009246:	bd70      	pop	{r4, r5, r6, pc}
 8009248:	0800a241 	.word	0x0800a241
 800924c:	0800a2d2 	.word	0x0800a2d2

08009250 <__multadd>:
 8009250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009254:	690d      	ldr	r5, [r1, #16]
 8009256:	4607      	mov	r7, r0
 8009258:	460c      	mov	r4, r1
 800925a:	461e      	mov	r6, r3
 800925c:	f101 0c14 	add.w	ip, r1, #20
 8009260:	2000      	movs	r0, #0
 8009262:	f8dc 3000 	ldr.w	r3, [ip]
 8009266:	b299      	uxth	r1, r3
 8009268:	fb02 6101 	mla	r1, r2, r1, r6
 800926c:	0c1e      	lsrs	r6, r3, #16
 800926e:	0c0b      	lsrs	r3, r1, #16
 8009270:	fb02 3306 	mla	r3, r2, r6, r3
 8009274:	b289      	uxth	r1, r1
 8009276:	3001      	adds	r0, #1
 8009278:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800927c:	4285      	cmp	r5, r0
 800927e:	f84c 1b04 	str.w	r1, [ip], #4
 8009282:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009286:	dcec      	bgt.n	8009262 <__multadd+0x12>
 8009288:	b30e      	cbz	r6, 80092ce <__multadd+0x7e>
 800928a:	68a3      	ldr	r3, [r4, #8]
 800928c:	42ab      	cmp	r3, r5
 800928e:	dc19      	bgt.n	80092c4 <__multadd+0x74>
 8009290:	6861      	ldr	r1, [r4, #4]
 8009292:	4638      	mov	r0, r7
 8009294:	3101      	adds	r1, #1
 8009296:	f7ff ff79 	bl	800918c <_Balloc>
 800929a:	4680      	mov	r8, r0
 800929c:	b928      	cbnz	r0, 80092aa <__multadd+0x5a>
 800929e:	4602      	mov	r2, r0
 80092a0:	4b0c      	ldr	r3, [pc, #48]	@ (80092d4 <__multadd+0x84>)
 80092a2:	480d      	ldr	r0, [pc, #52]	@ (80092d8 <__multadd+0x88>)
 80092a4:	21ba      	movs	r1, #186	@ 0xba
 80092a6:	f000 fbdb 	bl	8009a60 <__assert_func>
 80092aa:	6922      	ldr	r2, [r4, #16]
 80092ac:	3202      	adds	r2, #2
 80092ae:	f104 010c 	add.w	r1, r4, #12
 80092b2:	0092      	lsls	r2, r2, #2
 80092b4:	300c      	adds	r0, #12
 80092b6:	f000 fbc5 	bl	8009a44 <memcpy>
 80092ba:	4621      	mov	r1, r4
 80092bc:	4638      	mov	r0, r7
 80092be:	f7ff ffa5 	bl	800920c <_Bfree>
 80092c2:	4644      	mov	r4, r8
 80092c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80092c8:	3501      	adds	r5, #1
 80092ca:	615e      	str	r6, [r3, #20]
 80092cc:	6125      	str	r5, [r4, #16]
 80092ce:	4620      	mov	r0, r4
 80092d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092d4:	0800a2b0 	.word	0x0800a2b0
 80092d8:	0800a2d2 	.word	0x0800a2d2

080092dc <__hi0bits>:
 80092dc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80092e0:	4603      	mov	r3, r0
 80092e2:	bf36      	itet	cc
 80092e4:	0403      	lslcc	r3, r0, #16
 80092e6:	2000      	movcs	r0, #0
 80092e8:	2010      	movcc	r0, #16
 80092ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80092ee:	bf3c      	itt	cc
 80092f0:	021b      	lslcc	r3, r3, #8
 80092f2:	3008      	addcc	r0, #8
 80092f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80092f8:	bf3c      	itt	cc
 80092fa:	011b      	lslcc	r3, r3, #4
 80092fc:	3004      	addcc	r0, #4
 80092fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009302:	bf3c      	itt	cc
 8009304:	009b      	lslcc	r3, r3, #2
 8009306:	3002      	addcc	r0, #2
 8009308:	2b00      	cmp	r3, #0
 800930a:	db05      	blt.n	8009318 <__hi0bits+0x3c>
 800930c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009310:	f100 0001 	add.w	r0, r0, #1
 8009314:	bf08      	it	eq
 8009316:	2020      	moveq	r0, #32
 8009318:	4770      	bx	lr

0800931a <__lo0bits>:
 800931a:	6803      	ldr	r3, [r0, #0]
 800931c:	4602      	mov	r2, r0
 800931e:	f013 0007 	ands.w	r0, r3, #7
 8009322:	d00b      	beq.n	800933c <__lo0bits+0x22>
 8009324:	07d9      	lsls	r1, r3, #31
 8009326:	d421      	bmi.n	800936c <__lo0bits+0x52>
 8009328:	0798      	lsls	r0, r3, #30
 800932a:	bf49      	itett	mi
 800932c:	085b      	lsrmi	r3, r3, #1
 800932e:	089b      	lsrpl	r3, r3, #2
 8009330:	2001      	movmi	r0, #1
 8009332:	6013      	strmi	r3, [r2, #0]
 8009334:	bf5c      	itt	pl
 8009336:	6013      	strpl	r3, [r2, #0]
 8009338:	2002      	movpl	r0, #2
 800933a:	4770      	bx	lr
 800933c:	b299      	uxth	r1, r3
 800933e:	b909      	cbnz	r1, 8009344 <__lo0bits+0x2a>
 8009340:	0c1b      	lsrs	r3, r3, #16
 8009342:	2010      	movs	r0, #16
 8009344:	b2d9      	uxtb	r1, r3
 8009346:	b909      	cbnz	r1, 800934c <__lo0bits+0x32>
 8009348:	3008      	adds	r0, #8
 800934a:	0a1b      	lsrs	r3, r3, #8
 800934c:	0719      	lsls	r1, r3, #28
 800934e:	bf04      	itt	eq
 8009350:	091b      	lsreq	r3, r3, #4
 8009352:	3004      	addeq	r0, #4
 8009354:	0799      	lsls	r1, r3, #30
 8009356:	bf04      	itt	eq
 8009358:	089b      	lsreq	r3, r3, #2
 800935a:	3002      	addeq	r0, #2
 800935c:	07d9      	lsls	r1, r3, #31
 800935e:	d403      	bmi.n	8009368 <__lo0bits+0x4e>
 8009360:	085b      	lsrs	r3, r3, #1
 8009362:	f100 0001 	add.w	r0, r0, #1
 8009366:	d003      	beq.n	8009370 <__lo0bits+0x56>
 8009368:	6013      	str	r3, [r2, #0]
 800936a:	4770      	bx	lr
 800936c:	2000      	movs	r0, #0
 800936e:	4770      	bx	lr
 8009370:	2020      	movs	r0, #32
 8009372:	4770      	bx	lr

08009374 <__i2b>:
 8009374:	b510      	push	{r4, lr}
 8009376:	460c      	mov	r4, r1
 8009378:	2101      	movs	r1, #1
 800937a:	f7ff ff07 	bl	800918c <_Balloc>
 800937e:	4602      	mov	r2, r0
 8009380:	b928      	cbnz	r0, 800938e <__i2b+0x1a>
 8009382:	4b05      	ldr	r3, [pc, #20]	@ (8009398 <__i2b+0x24>)
 8009384:	4805      	ldr	r0, [pc, #20]	@ (800939c <__i2b+0x28>)
 8009386:	f240 1145 	movw	r1, #325	@ 0x145
 800938a:	f000 fb69 	bl	8009a60 <__assert_func>
 800938e:	2301      	movs	r3, #1
 8009390:	6144      	str	r4, [r0, #20]
 8009392:	6103      	str	r3, [r0, #16]
 8009394:	bd10      	pop	{r4, pc}
 8009396:	bf00      	nop
 8009398:	0800a2b0 	.word	0x0800a2b0
 800939c:	0800a2d2 	.word	0x0800a2d2

080093a0 <__multiply>:
 80093a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093a4:	4617      	mov	r7, r2
 80093a6:	690a      	ldr	r2, [r1, #16]
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	429a      	cmp	r2, r3
 80093ac:	bfa8      	it	ge
 80093ae:	463b      	movge	r3, r7
 80093b0:	4689      	mov	r9, r1
 80093b2:	bfa4      	itt	ge
 80093b4:	460f      	movge	r7, r1
 80093b6:	4699      	movge	r9, r3
 80093b8:	693d      	ldr	r5, [r7, #16]
 80093ba:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	6879      	ldr	r1, [r7, #4]
 80093c2:	eb05 060a 	add.w	r6, r5, sl
 80093c6:	42b3      	cmp	r3, r6
 80093c8:	b085      	sub	sp, #20
 80093ca:	bfb8      	it	lt
 80093cc:	3101      	addlt	r1, #1
 80093ce:	f7ff fedd 	bl	800918c <_Balloc>
 80093d2:	b930      	cbnz	r0, 80093e2 <__multiply+0x42>
 80093d4:	4602      	mov	r2, r0
 80093d6:	4b41      	ldr	r3, [pc, #260]	@ (80094dc <__multiply+0x13c>)
 80093d8:	4841      	ldr	r0, [pc, #260]	@ (80094e0 <__multiply+0x140>)
 80093da:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80093de:	f000 fb3f 	bl	8009a60 <__assert_func>
 80093e2:	f100 0414 	add.w	r4, r0, #20
 80093e6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80093ea:	4623      	mov	r3, r4
 80093ec:	2200      	movs	r2, #0
 80093ee:	4573      	cmp	r3, lr
 80093f0:	d320      	bcc.n	8009434 <__multiply+0x94>
 80093f2:	f107 0814 	add.w	r8, r7, #20
 80093f6:	f109 0114 	add.w	r1, r9, #20
 80093fa:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80093fe:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009402:	9302      	str	r3, [sp, #8]
 8009404:	1beb      	subs	r3, r5, r7
 8009406:	3b15      	subs	r3, #21
 8009408:	f023 0303 	bic.w	r3, r3, #3
 800940c:	3304      	adds	r3, #4
 800940e:	3715      	adds	r7, #21
 8009410:	42bd      	cmp	r5, r7
 8009412:	bf38      	it	cc
 8009414:	2304      	movcc	r3, #4
 8009416:	9301      	str	r3, [sp, #4]
 8009418:	9b02      	ldr	r3, [sp, #8]
 800941a:	9103      	str	r1, [sp, #12]
 800941c:	428b      	cmp	r3, r1
 800941e:	d80c      	bhi.n	800943a <__multiply+0x9a>
 8009420:	2e00      	cmp	r6, #0
 8009422:	dd03      	ble.n	800942c <__multiply+0x8c>
 8009424:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009428:	2b00      	cmp	r3, #0
 800942a:	d055      	beq.n	80094d8 <__multiply+0x138>
 800942c:	6106      	str	r6, [r0, #16]
 800942e:	b005      	add	sp, #20
 8009430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009434:	f843 2b04 	str.w	r2, [r3], #4
 8009438:	e7d9      	b.n	80093ee <__multiply+0x4e>
 800943a:	f8b1 a000 	ldrh.w	sl, [r1]
 800943e:	f1ba 0f00 	cmp.w	sl, #0
 8009442:	d01f      	beq.n	8009484 <__multiply+0xe4>
 8009444:	46c4      	mov	ip, r8
 8009446:	46a1      	mov	r9, r4
 8009448:	2700      	movs	r7, #0
 800944a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800944e:	f8d9 3000 	ldr.w	r3, [r9]
 8009452:	fa1f fb82 	uxth.w	fp, r2
 8009456:	b29b      	uxth	r3, r3
 8009458:	fb0a 330b 	mla	r3, sl, fp, r3
 800945c:	443b      	add	r3, r7
 800945e:	f8d9 7000 	ldr.w	r7, [r9]
 8009462:	0c12      	lsrs	r2, r2, #16
 8009464:	0c3f      	lsrs	r7, r7, #16
 8009466:	fb0a 7202 	mla	r2, sl, r2, r7
 800946a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800946e:	b29b      	uxth	r3, r3
 8009470:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009474:	4565      	cmp	r5, ip
 8009476:	f849 3b04 	str.w	r3, [r9], #4
 800947a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800947e:	d8e4      	bhi.n	800944a <__multiply+0xaa>
 8009480:	9b01      	ldr	r3, [sp, #4]
 8009482:	50e7      	str	r7, [r4, r3]
 8009484:	9b03      	ldr	r3, [sp, #12]
 8009486:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800948a:	3104      	adds	r1, #4
 800948c:	f1b9 0f00 	cmp.w	r9, #0
 8009490:	d020      	beq.n	80094d4 <__multiply+0x134>
 8009492:	6823      	ldr	r3, [r4, #0]
 8009494:	4647      	mov	r7, r8
 8009496:	46a4      	mov	ip, r4
 8009498:	f04f 0a00 	mov.w	sl, #0
 800949c:	f8b7 b000 	ldrh.w	fp, [r7]
 80094a0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80094a4:	fb09 220b 	mla	r2, r9, fp, r2
 80094a8:	4452      	add	r2, sl
 80094aa:	b29b      	uxth	r3, r3
 80094ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80094b0:	f84c 3b04 	str.w	r3, [ip], #4
 80094b4:	f857 3b04 	ldr.w	r3, [r7], #4
 80094b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80094bc:	f8bc 3000 	ldrh.w	r3, [ip]
 80094c0:	fb09 330a 	mla	r3, r9, sl, r3
 80094c4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80094c8:	42bd      	cmp	r5, r7
 80094ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80094ce:	d8e5      	bhi.n	800949c <__multiply+0xfc>
 80094d0:	9a01      	ldr	r2, [sp, #4]
 80094d2:	50a3      	str	r3, [r4, r2]
 80094d4:	3404      	adds	r4, #4
 80094d6:	e79f      	b.n	8009418 <__multiply+0x78>
 80094d8:	3e01      	subs	r6, #1
 80094da:	e7a1      	b.n	8009420 <__multiply+0x80>
 80094dc:	0800a2b0 	.word	0x0800a2b0
 80094e0:	0800a2d2 	.word	0x0800a2d2

080094e4 <__pow5mult>:
 80094e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094e8:	4615      	mov	r5, r2
 80094ea:	f012 0203 	ands.w	r2, r2, #3
 80094ee:	4607      	mov	r7, r0
 80094f0:	460e      	mov	r6, r1
 80094f2:	d007      	beq.n	8009504 <__pow5mult+0x20>
 80094f4:	4c25      	ldr	r4, [pc, #148]	@ (800958c <__pow5mult+0xa8>)
 80094f6:	3a01      	subs	r2, #1
 80094f8:	2300      	movs	r3, #0
 80094fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80094fe:	f7ff fea7 	bl	8009250 <__multadd>
 8009502:	4606      	mov	r6, r0
 8009504:	10ad      	asrs	r5, r5, #2
 8009506:	d03d      	beq.n	8009584 <__pow5mult+0xa0>
 8009508:	69fc      	ldr	r4, [r7, #28]
 800950a:	b97c      	cbnz	r4, 800952c <__pow5mult+0x48>
 800950c:	2010      	movs	r0, #16
 800950e:	f7ff fcdb 	bl	8008ec8 <malloc>
 8009512:	4602      	mov	r2, r0
 8009514:	61f8      	str	r0, [r7, #28]
 8009516:	b928      	cbnz	r0, 8009524 <__pow5mult+0x40>
 8009518:	4b1d      	ldr	r3, [pc, #116]	@ (8009590 <__pow5mult+0xac>)
 800951a:	481e      	ldr	r0, [pc, #120]	@ (8009594 <__pow5mult+0xb0>)
 800951c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009520:	f000 fa9e 	bl	8009a60 <__assert_func>
 8009524:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009528:	6004      	str	r4, [r0, #0]
 800952a:	60c4      	str	r4, [r0, #12]
 800952c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009530:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009534:	b94c      	cbnz	r4, 800954a <__pow5mult+0x66>
 8009536:	f240 2171 	movw	r1, #625	@ 0x271
 800953a:	4638      	mov	r0, r7
 800953c:	f7ff ff1a 	bl	8009374 <__i2b>
 8009540:	2300      	movs	r3, #0
 8009542:	f8c8 0008 	str.w	r0, [r8, #8]
 8009546:	4604      	mov	r4, r0
 8009548:	6003      	str	r3, [r0, #0]
 800954a:	f04f 0900 	mov.w	r9, #0
 800954e:	07eb      	lsls	r3, r5, #31
 8009550:	d50a      	bpl.n	8009568 <__pow5mult+0x84>
 8009552:	4631      	mov	r1, r6
 8009554:	4622      	mov	r2, r4
 8009556:	4638      	mov	r0, r7
 8009558:	f7ff ff22 	bl	80093a0 <__multiply>
 800955c:	4631      	mov	r1, r6
 800955e:	4680      	mov	r8, r0
 8009560:	4638      	mov	r0, r7
 8009562:	f7ff fe53 	bl	800920c <_Bfree>
 8009566:	4646      	mov	r6, r8
 8009568:	106d      	asrs	r5, r5, #1
 800956a:	d00b      	beq.n	8009584 <__pow5mult+0xa0>
 800956c:	6820      	ldr	r0, [r4, #0]
 800956e:	b938      	cbnz	r0, 8009580 <__pow5mult+0x9c>
 8009570:	4622      	mov	r2, r4
 8009572:	4621      	mov	r1, r4
 8009574:	4638      	mov	r0, r7
 8009576:	f7ff ff13 	bl	80093a0 <__multiply>
 800957a:	6020      	str	r0, [r4, #0]
 800957c:	f8c0 9000 	str.w	r9, [r0]
 8009580:	4604      	mov	r4, r0
 8009582:	e7e4      	b.n	800954e <__pow5mult+0x6a>
 8009584:	4630      	mov	r0, r6
 8009586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800958a:	bf00      	nop
 800958c:	0800a374 	.word	0x0800a374
 8009590:	0800a241 	.word	0x0800a241
 8009594:	0800a2d2 	.word	0x0800a2d2

08009598 <__lshift>:
 8009598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800959c:	460c      	mov	r4, r1
 800959e:	6849      	ldr	r1, [r1, #4]
 80095a0:	6923      	ldr	r3, [r4, #16]
 80095a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80095a6:	68a3      	ldr	r3, [r4, #8]
 80095a8:	4607      	mov	r7, r0
 80095aa:	4691      	mov	r9, r2
 80095ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80095b0:	f108 0601 	add.w	r6, r8, #1
 80095b4:	42b3      	cmp	r3, r6
 80095b6:	db0b      	blt.n	80095d0 <__lshift+0x38>
 80095b8:	4638      	mov	r0, r7
 80095ba:	f7ff fde7 	bl	800918c <_Balloc>
 80095be:	4605      	mov	r5, r0
 80095c0:	b948      	cbnz	r0, 80095d6 <__lshift+0x3e>
 80095c2:	4602      	mov	r2, r0
 80095c4:	4b28      	ldr	r3, [pc, #160]	@ (8009668 <__lshift+0xd0>)
 80095c6:	4829      	ldr	r0, [pc, #164]	@ (800966c <__lshift+0xd4>)
 80095c8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80095cc:	f000 fa48 	bl	8009a60 <__assert_func>
 80095d0:	3101      	adds	r1, #1
 80095d2:	005b      	lsls	r3, r3, #1
 80095d4:	e7ee      	b.n	80095b4 <__lshift+0x1c>
 80095d6:	2300      	movs	r3, #0
 80095d8:	f100 0114 	add.w	r1, r0, #20
 80095dc:	f100 0210 	add.w	r2, r0, #16
 80095e0:	4618      	mov	r0, r3
 80095e2:	4553      	cmp	r3, sl
 80095e4:	db33      	blt.n	800964e <__lshift+0xb6>
 80095e6:	6920      	ldr	r0, [r4, #16]
 80095e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80095ec:	f104 0314 	add.w	r3, r4, #20
 80095f0:	f019 091f 	ands.w	r9, r9, #31
 80095f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80095f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80095fc:	d02b      	beq.n	8009656 <__lshift+0xbe>
 80095fe:	f1c9 0e20 	rsb	lr, r9, #32
 8009602:	468a      	mov	sl, r1
 8009604:	2200      	movs	r2, #0
 8009606:	6818      	ldr	r0, [r3, #0]
 8009608:	fa00 f009 	lsl.w	r0, r0, r9
 800960c:	4310      	orrs	r0, r2
 800960e:	f84a 0b04 	str.w	r0, [sl], #4
 8009612:	f853 2b04 	ldr.w	r2, [r3], #4
 8009616:	459c      	cmp	ip, r3
 8009618:	fa22 f20e 	lsr.w	r2, r2, lr
 800961c:	d8f3      	bhi.n	8009606 <__lshift+0x6e>
 800961e:	ebac 0304 	sub.w	r3, ip, r4
 8009622:	3b15      	subs	r3, #21
 8009624:	f023 0303 	bic.w	r3, r3, #3
 8009628:	3304      	adds	r3, #4
 800962a:	f104 0015 	add.w	r0, r4, #21
 800962e:	4560      	cmp	r0, ip
 8009630:	bf88      	it	hi
 8009632:	2304      	movhi	r3, #4
 8009634:	50ca      	str	r2, [r1, r3]
 8009636:	b10a      	cbz	r2, 800963c <__lshift+0xa4>
 8009638:	f108 0602 	add.w	r6, r8, #2
 800963c:	3e01      	subs	r6, #1
 800963e:	4638      	mov	r0, r7
 8009640:	612e      	str	r6, [r5, #16]
 8009642:	4621      	mov	r1, r4
 8009644:	f7ff fde2 	bl	800920c <_Bfree>
 8009648:	4628      	mov	r0, r5
 800964a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800964e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009652:	3301      	adds	r3, #1
 8009654:	e7c5      	b.n	80095e2 <__lshift+0x4a>
 8009656:	3904      	subs	r1, #4
 8009658:	f853 2b04 	ldr.w	r2, [r3], #4
 800965c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009660:	459c      	cmp	ip, r3
 8009662:	d8f9      	bhi.n	8009658 <__lshift+0xc0>
 8009664:	e7ea      	b.n	800963c <__lshift+0xa4>
 8009666:	bf00      	nop
 8009668:	0800a2b0 	.word	0x0800a2b0
 800966c:	0800a2d2 	.word	0x0800a2d2

08009670 <__mcmp>:
 8009670:	690a      	ldr	r2, [r1, #16]
 8009672:	4603      	mov	r3, r0
 8009674:	6900      	ldr	r0, [r0, #16]
 8009676:	1a80      	subs	r0, r0, r2
 8009678:	b530      	push	{r4, r5, lr}
 800967a:	d10e      	bne.n	800969a <__mcmp+0x2a>
 800967c:	3314      	adds	r3, #20
 800967e:	3114      	adds	r1, #20
 8009680:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009684:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009688:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800968c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009690:	4295      	cmp	r5, r2
 8009692:	d003      	beq.n	800969c <__mcmp+0x2c>
 8009694:	d205      	bcs.n	80096a2 <__mcmp+0x32>
 8009696:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800969a:	bd30      	pop	{r4, r5, pc}
 800969c:	42a3      	cmp	r3, r4
 800969e:	d3f3      	bcc.n	8009688 <__mcmp+0x18>
 80096a0:	e7fb      	b.n	800969a <__mcmp+0x2a>
 80096a2:	2001      	movs	r0, #1
 80096a4:	e7f9      	b.n	800969a <__mcmp+0x2a>
	...

080096a8 <__mdiff>:
 80096a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096ac:	4689      	mov	r9, r1
 80096ae:	4606      	mov	r6, r0
 80096b0:	4611      	mov	r1, r2
 80096b2:	4648      	mov	r0, r9
 80096b4:	4614      	mov	r4, r2
 80096b6:	f7ff ffdb 	bl	8009670 <__mcmp>
 80096ba:	1e05      	subs	r5, r0, #0
 80096bc:	d112      	bne.n	80096e4 <__mdiff+0x3c>
 80096be:	4629      	mov	r1, r5
 80096c0:	4630      	mov	r0, r6
 80096c2:	f7ff fd63 	bl	800918c <_Balloc>
 80096c6:	4602      	mov	r2, r0
 80096c8:	b928      	cbnz	r0, 80096d6 <__mdiff+0x2e>
 80096ca:	4b3f      	ldr	r3, [pc, #252]	@ (80097c8 <__mdiff+0x120>)
 80096cc:	f240 2137 	movw	r1, #567	@ 0x237
 80096d0:	483e      	ldr	r0, [pc, #248]	@ (80097cc <__mdiff+0x124>)
 80096d2:	f000 f9c5 	bl	8009a60 <__assert_func>
 80096d6:	2301      	movs	r3, #1
 80096d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80096dc:	4610      	mov	r0, r2
 80096de:	b003      	add	sp, #12
 80096e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096e4:	bfbc      	itt	lt
 80096e6:	464b      	movlt	r3, r9
 80096e8:	46a1      	movlt	r9, r4
 80096ea:	4630      	mov	r0, r6
 80096ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80096f0:	bfba      	itte	lt
 80096f2:	461c      	movlt	r4, r3
 80096f4:	2501      	movlt	r5, #1
 80096f6:	2500      	movge	r5, #0
 80096f8:	f7ff fd48 	bl	800918c <_Balloc>
 80096fc:	4602      	mov	r2, r0
 80096fe:	b918      	cbnz	r0, 8009708 <__mdiff+0x60>
 8009700:	4b31      	ldr	r3, [pc, #196]	@ (80097c8 <__mdiff+0x120>)
 8009702:	f240 2145 	movw	r1, #581	@ 0x245
 8009706:	e7e3      	b.n	80096d0 <__mdiff+0x28>
 8009708:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800970c:	6926      	ldr	r6, [r4, #16]
 800970e:	60c5      	str	r5, [r0, #12]
 8009710:	f109 0310 	add.w	r3, r9, #16
 8009714:	f109 0514 	add.w	r5, r9, #20
 8009718:	f104 0e14 	add.w	lr, r4, #20
 800971c:	f100 0b14 	add.w	fp, r0, #20
 8009720:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009724:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009728:	9301      	str	r3, [sp, #4]
 800972a:	46d9      	mov	r9, fp
 800972c:	f04f 0c00 	mov.w	ip, #0
 8009730:	9b01      	ldr	r3, [sp, #4]
 8009732:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009736:	f853 af04 	ldr.w	sl, [r3, #4]!
 800973a:	9301      	str	r3, [sp, #4]
 800973c:	fa1f f38a 	uxth.w	r3, sl
 8009740:	4619      	mov	r1, r3
 8009742:	b283      	uxth	r3, r0
 8009744:	1acb      	subs	r3, r1, r3
 8009746:	0c00      	lsrs	r0, r0, #16
 8009748:	4463      	add	r3, ip
 800974a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800974e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009752:	b29b      	uxth	r3, r3
 8009754:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009758:	4576      	cmp	r6, lr
 800975a:	f849 3b04 	str.w	r3, [r9], #4
 800975e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009762:	d8e5      	bhi.n	8009730 <__mdiff+0x88>
 8009764:	1b33      	subs	r3, r6, r4
 8009766:	3b15      	subs	r3, #21
 8009768:	f023 0303 	bic.w	r3, r3, #3
 800976c:	3415      	adds	r4, #21
 800976e:	3304      	adds	r3, #4
 8009770:	42a6      	cmp	r6, r4
 8009772:	bf38      	it	cc
 8009774:	2304      	movcc	r3, #4
 8009776:	441d      	add	r5, r3
 8009778:	445b      	add	r3, fp
 800977a:	461e      	mov	r6, r3
 800977c:	462c      	mov	r4, r5
 800977e:	4544      	cmp	r4, r8
 8009780:	d30e      	bcc.n	80097a0 <__mdiff+0xf8>
 8009782:	f108 0103 	add.w	r1, r8, #3
 8009786:	1b49      	subs	r1, r1, r5
 8009788:	f021 0103 	bic.w	r1, r1, #3
 800978c:	3d03      	subs	r5, #3
 800978e:	45a8      	cmp	r8, r5
 8009790:	bf38      	it	cc
 8009792:	2100      	movcc	r1, #0
 8009794:	440b      	add	r3, r1
 8009796:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800979a:	b191      	cbz	r1, 80097c2 <__mdiff+0x11a>
 800979c:	6117      	str	r7, [r2, #16]
 800979e:	e79d      	b.n	80096dc <__mdiff+0x34>
 80097a0:	f854 1b04 	ldr.w	r1, [r4], #4
 80097a4:	46e6      	mov	lr, ip
 80097a6:	0c08      	lsrs	r0, r1, #16
 80097a8:	fa1c fc81 	uxtah	ip, ip, r1
 80097ac:	4471      	add	r1, lr
 80097ae:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80097b2:	b289      	uxth	r1, r1
 80097b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80097b8:	f846 1b04 	str.w	r1, [r6], #4
 80097bc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80097c0:	e7dd      	b.n	800977e <__mdiff+0xd6>
 80097c2:	3f01      	subs	r7, #1
 80097c4:	e7e7      	b.n	8009796 <__mdiff+0xee>
 80097c6:	bf00      	nop
 80097c8:	0800a2b0 	.word	0x0800a2b0
 80097cc:	0800a2d2 	.word	0x0800a2d2

080097d0 <__d2b>:
 80097d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80097d4:	460f      	mov	r7, r1
 80097d6:	2101      	movs	r1, #1
 80097d8:	ec59 8b10 	vmov	r8, r9, d0
 80097dc:	4616      	mov	r6, r2
 80097de:	f7ff fcd5 	bl	800918c <_Balloc>
 80097e2:	4604      	mov	r4, r0
 80097e4:	b930      	cbnz	r0, 80097f4 <__d2b+0x24>
 80097e6:	4602      	mov	r2, r0
 80097e8:	4b23      	ldr	r3, [pc, #140]	@ (8009878 <__d2b+0xa8>)
 80097ea:	4824      	ldr	r0, [pc, #144]	@ (800987c <__d2b+0xac>)
 80097ec:	f240 310f 	movw	r1, #783	@ 0x30f
 80097f0:	f000 f936 	bl	8009a60 <__assert_func>
 80097f4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80097f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80097fc:	b10d      	cbz	r5, 8009802 <__d2b+0x32>
 80097fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009802:	9301      	str	r3, [sp, #4]
 8009804:	f1b8 0300 	subs.w	r3, r8, #0
 8009808:	d023      	beq.n	8009852 <__d2b+0x82>
 800980a:	4668      	mov	r0, sp
 800980c:	9300      	str	r3, [sp, #0]
 800980e:	f7ff fd84 	bl	800931a <__lo0bits>
 8009812:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009816:	b1d0      	cbz	r0, 800984e <__d2b+0x7e>
 8009818:	f1c0 0320 	rsb	r3, r0, #32
 800981c:	fa02 f303 	lsl.w	r3, r2, r3
 8009820:	430b      	orrs	r3, r1
 8009822:	40c2      	lsrs	r2, r0
 8009824:	6163      	str	r3, [r4, #20]
 8009826:	9201      	str	r2, [sp, #4]
 8009828:	9b01      	ldr	r3, [sp, #4]
 800982a:	61a3      	str	r3, [r4, #24]
 800982c:	2b00      	cmp	r3, #0
 800982e:	bf0c      	ite	eq
 8009830:	2201      	moveq	r2, #1
 8009832:	2202      	movne	r2, #2
 8009834:	6122      	str	r2, [r4, #16]
 8009836:	b1a5      	cbz	r5, 8009862 <__d2b+0x92>
 8009838:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800983c:	4405      	add	r5, r0
 800983e:	603d      	str	r5, [r7, #0]
 8009840:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009844:	6030      	str	r0, [r6, #0]
 8009846:	4620      	mov	r0, r4
 8009848:	b003      	add	sp, #12
 800984a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800984e:	6161      	str	r1, [r4, #20]
 8009850:	e7ea      	b.n	8009828 <__d2b+0x58>
 8009852:	a801      	add	r0, sp, #4
 8009854:	f7ff fd61 	bl	800931a <__lo0bits>
 8009858:	9b01      	ldr	r3, [sp, #4]
 800985a:	6163      	str	r3, [r4, #20]
 800985c:	3020      	adds	r0, #32
 800985e:	2201      	movs	r2, #1
 8009860:	e7e8      	b.n	8009834 <__d2b+0x64>
 8009862:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009866:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800986a:	6038      	str	r0, [r7, #0]
 800986c:	6918      	ldr	r0, [r3, #16]
 800986e:	f7ff fd35 	bl	80092dc <__hi0bits>
 8009872:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009876:	e7e5      	b.n	8009844 <__d2b+0x74>
 8009878:	0800a2b0 	.word	0x0800a2b0
 800987c:	0800a2d2 	.word	0x0800a2d2

08009880 <__sread>:
 8009880:	b510      	push	{r4, lr}
 8009882:	460c      	mov	r4, r1
 8009884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009888:	f000 f898 	bl	80099bc <_read_r>
 800988c:	2800      	cmp	r0, #0
 800988e:	bfab      	itete	ge
 8009890:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009892:	89a3      	ldrhlt	r3, [r4, #12]
 8009894:	181b      	addge	r3, r3, r0
 8009896:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800989a:	bfac      	ite	ge
 800989c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800989e:	81a3      	strhlt	r3, [r4, #12]
 80098a0:	bd10      	pop	{r4, pc}

080098a2 <__swrite>:
 80098a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098a6:	461f      	mov	r7, r3
 80098a8:	898b      	ldrh	r3, [r1, #12]
 80098aa:	05db      	lsls	r3, r3, #23
 80098ac:	4605      	mov	r5, r0
 80098ae:	460c      	mov	r4, r1
 80098b0:	4616      	mov	r6, r2
 80098b2:	d505      	bpl.n	80098c0 <__swrite+0x1e>
 80098b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098b8:	2302      	movs	r3, #2
 80098ba:	2200      	movs	r2, #0
 80098bc:	f000 f86c 	bl	8009998 <_lseek_r>
 80098c0:	89a3      	ldrh	r3, [r4, #12]
 80098c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80098ca:	81a3      	strh	r3, [r4, #12]
 80098cc:	4632      	mov	r2, r6
 80098ce:	463b      	mov	r3, r7
 80098d0:	4628      	mov	r0, r5
 80098d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098d6:	f000 b893 	b.w	8009a00 <_write_r>

080098da <__sseek>:
 80098da:	b510      	push	{r4, lr}
 80098dc:	460c      	mov	r4, r1
 80098de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098e2:	f000 f859 	bl	8009998 <_lseek_r>
 80098e6:	1c43      	adds	r3, r0, #1
 80098e8:	89a3      	ldrh	r3, [r4, #12]
 80098ea:	bf15      	itete	ne
 80098ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 80098ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80098f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80098f6:	81a3      	strheq	r3, [r4, #12]
 80098f8:	bf18      	it	ne
 80098fa:	81a3      	strhne	r3, [r4, #12]
 80098fc:	bd10      	pop	{r4, pc}

080098fe <__sclose>:
 80098fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009902:	f000 b88f 	b.w	8009a24 <_close_r>

08009906 <_realloc_r>:
 8009906:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800990a:	4607      	mov	r7, r0
 800990c:	4614      	mov	r4, r2
 800990e:	460d      	mov	r5, r1
 8009910:	b921      	cbnz	r1, 800991c <_realloc_r+0x16>
 8009912:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009916:	4611      	mov	r1, r2
 8009918:	f7ff bb00 	b.w	8008f1c <_malloc_r>
 800991c:	b92a      	cbnz	r2, 800992a <_realloc_r+0x24>
 800991e:	f000 f8d1 	bl	8009ac4 <_free_r>
 8009922:	4625      	mov	r5, r4
 8009924:	4628      	mov	r0, r5
 8009926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800992a:	f000 f927 	bl	8009b7c <_malloc_usable_size_r>
 800992e:	4284      	cmp	r4, r0
 8009930:	4606      	mov	r6, r0
 8009932:	d802      	bhi.n	800993a <_realloc_r+0x34>
 8009934:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009938:	d8f4      	bhi.n	8009924 <_realloc_r+0x1e>
 800993a:	4621      	mov	r1, r4
 800993c:	4638      	mov	r0, r7
 800993e:	f7ff faed 	bl	8008f1c <_malloc_r>
 8009942:	4680      	mov	r8, r0
 8009944:	b908      	cbnz	r0, 800994a <_realloc_r+0x44>
 8009946:	4645      	mov	r5, r8
 8009948:	e7ec      	b.n	8009924 <_realloc_r+0x1e>
 800994a:	42b4      	cmp	r4, r6
 800994c:	4622      	mov	r2, r4
 800994e:	4629      	mov	r1, r5
 8009950:	bf28      	it	cs
 8009952:	4632      	movcs	r2, r6
 8009954:	f000 f876 	bl	8009a44 <memcpy>
 8009958:	4629      	mov	r1, r5
 800995a:	4638      	mov	r0, r7
 800995c:	f000 f8b2 	bl	8009ac4 <_free_r>
 8009960:	e7f1      	b.n	8009946 <_realloc_r+0x40>

08009962 <memmove>:
 8009962:	4288      	cmp	r0, r1
 8009964:	b510      	push	{r4, lr}
 8009966:	eb01 0402 	add.w	r4, r1, r2
 800996a:	d902      	bls.n	8009972 <memmove+0x10>
 800996c:	4284      	cmp	r4, r0
 800996e:	4623      	mov	r3, r4
 8009970:	d807      	bhi.n	8009982 <memmove+0x20>
 8009972:	1e43      	subs	r3, r0, #1
 8009974:	42a1      	cmp	r1, r4
 8009976:	d008      	beq.n	800998a <memmove+0x28>
 8009978:	f811 2b01 	ldrb.w	r2, [r1], #1
 800997c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009980:	e7f8      	b.n	8009974 <memmove+0x12>
 8009982:	4402      	add	r2, r0
 8009984:	4601      	mov	r1, r0
 8009986:	428a      	cmp	r2, r1
 8009988:	d100      	bne.n	800998c <memmove+0x2a>
 800998a:	bd10      	pop	{r4, pc}
 800998c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009990:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009994:	e7f7      	b.n	8009986 <memmove+0x24>
	...

08009998 <_lseek_r>:
 8009998:	b538      	push	{r3, r4, r5, lr}
 800999a:	4d07      	ldr	r5, [pc, #28]	@ (80099b8 <_lseek_r+0x20>)
 800999c:	4604      	mov	r4, r0
 800999e:	4608      	mov	r0, r1
 80099a0:	4611      	mov	r1, r2
 80099a2:	2200      	movs	r2, #0
 80099a4:	602a      	str	r2, [r5, #0]
 80099a6:	461a      	mov	r2, r3
 80099a8:	f7f8 f9ec 	bl	8001d84 <_lseek>
 80099ac:	1c43      	adds	r3, r0, #1
 80099ae:	d102      	bne.n	80099b6 <_lseek_r+0x1e>
 80099b0:	682b      	ldr	r3, [r5, #0]
 80099b2:	b103      	cbz	r3, 80099b6 <_lseek_r+0x1e>
 80099b4:	6023      	str	r3, [r4, #0]
 80099b6:	bd38      	pop	{r3, r4, r5, pc}
 80099b8:	2000053c 	.word	0x2000053c

080099bc <_read_r>:
 80099bc:	b538      	push	{r3, r4, r5, lr}
 80099be:	4d07      	ldr	r5, [pc, #28]	@ (80099dc <_read_r+0x20>)
 80099c0:	4604      	mov	r4, r0
 80099c2:	4608      	mov	r0, r1
 80099c4:	4611      	mov	r1, r2
 80099c6:	2200      	movs	r2, #0
 80099c8:	602a      	str	r2, [r5, #0]
 80099ca:	461a      	mov	r2, r3
 80099cc:	f7f8 f97a 	bl	8001cc4 <_read>
 80099d0:	1c43      	adds	r3, r0, #1
 80099d2:	d102      	bne.n	80099da <_read_r+0x1e>
 80099d4:	682b      	ldr	r3, [r5, #0]
 80099d6:	b103      	cbz	r3, 80099da <_read_r+0x1e>
 80099d8:	6023      	str	r3, [r4, #0]
 80099da:	bd38      	pop	{r3, r4, r5, pc}
 80099dc:	2000053c 	.word	0x2000053c

080099e0 <_sbrk_r>:
 80099e0:	b538      	push	{r3, r4, r5, lr}
 80099e2:	4d06      	ldr	r5, [pc, #24]	@ (80099fc <_sbrk_r+0x1c>)
 80099e4:	2300      	movs	r3, #0
 80099e6:	4604      	mov	r4, r0
 80099e8:	4608      	mov	r0, r1
 80099ea:	602b      	str	r3, [r5, #0]
 80099ec:	f7f8 f9d8 	bl	8001da0 <_sbrk>
 80099f0:	1c43      	adds	r3, r0, #1
 80099f2:	d102      	bne.n	80099fa <_sbrk_r+0x1a>
 80099f4:	682b      	ldr	r3, [r5, #0]
 80099f6:	b103      	cbz	r3, 80099fa <_sbrk_r+0x1a>
 80099f8:	6023      	str	r3, [r4, #0]
 80099fa:	bd38      	pop	{r3, r4, r5, pc}
 80099fc:	2000053c 	.word	0x2000053c

08009a00 <_write_r>:
 8009a00:	b538      	push	{r3, r4, r5, lr}
 8009a02:	4d07      	ldr	r5, [pc, #28]	@ (8009a20 <_write_r+0x20>)
 8009a04:	4604      	mov	r4, r0
 8009a06:	4608      	mov	r0, r1
 8009a08:	4611      	mov	r1, r2
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	602a      	str	r2, [r5, #0]
 8009a0e:	461a      	mov	r2, r3
 8009a10:	f7f8 f975 	bl	8001cfe <_write>
 8009a14:	1c43      	adds	r3, r0, #1
 8009a16:	d102      	bne.n	8009a1e <_write_r+0x1e>
 8009a18:	682b      	ldr	r3, [r5, #0]
 8009a1a:	b103      	cbz	r3, 8009a1e <_write_r+0x1e>
 8009a1c:	6023      	str	r3, [r4, #0]
 8009a1e:	bd38      	pop	{r3, r4, r5, pc}
 8009a20:	2000053c 	.word	0x2000053c

08009a24 <_close_r>:
 8009a24:	b538      	push	{r3, r4, r5, lr}
 8009a26:	4d06      	ldr	r5, [pc, #24]	@ (8009a40 <_close_r+0x1c>)
 8009a28:	2300      	movs	r3, #0
 8009a2a:	4604      	mov	r4, r0
 8009a2c:	4608      	mov	r0, r1
 8009a2e:	602b      	str	r3, [r5, #0]
 8009a30:	f7f8 f981 	bl	8001d36 <_close>
 8009a34:	1c43      	adds	r3, r0, #1
 8009a36:	d102      	bne.n	8009a3e <_close_r+0x1a>
 8009a38:	682b      	ldr	r3, [r5, #0]
 8009a3a:	b103      	cbz	r3, 8009a3e <_close_r+0x1a>
 8009a3c:	6023      	str	r3, [r4, #0]
 8009a3e:	bd38      	pop	{r3, r4, r5, pc}
 8009a40:	2000053c 	.word	0x2000053c

08009a44 <memcpy>:
 8009a44:	440a      	add	r2, r1
 8009a46:	4291      	cmp	r1, r2
 8009a48:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009a4c:	d100      	bne.n	8009a50 <memcpy+0xc>
 8009a4e:	4770      	bx	lr
 8009a50:	b510      	push	{r4, lr}
 8009a52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a5a:	4291      	cmp	r1, r2
 8009a5c:	d1f9      	bne.n	8009a52 <memcpy+0xe>
 8009a5e:	bd10      	pop	{r4, pc}

08009a60 <__assert_func>:
 8009a60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a62:	4614      	mov	r4, r2
 8009a64:	461a      	mov	r2, r3
 8009a66:	4b09      	ldr	r3, [pc, #36]	@ (8009a8c <__assert_func+0x2c>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4605      	mov	r5, r0
 8009a6c:	68d8      	ldr	r0, [r3, #12]
 8009a6e:	b14c      	cbz	r4, 8009a84 <__assert_func+0x24>
 8009a70:	4b07      	ldr	r3, [pc, #28]	@ (8009a90 <__assert_func+0x30>)
 8009a72:	9100      	str	r1, [sp, #0]
 8009a74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a78:	4906      	ldr	r1, [pc, #24]	@ (8009a94 <__assert_func+0x34>)
 8009a7a:	462b      	mov	r3, r5
 8009a7c:	f000 f886 	bl	8009b8c <fiprintf>
 8009a80:	f000 f8a3 	bl	8009bca <abort>
 8009a84:	4b04      	ldr	r3, [pc, #16]	@ (8009a98 <__assert_func+0x38>)
 8009a86:	461c      	mov	r4, r3
 8009a88:	e7f3      	b.n	8009a72 <__assert_func+0x12>
 8009a8a:	bf00      	nop
 8009a8c:	2000001c 	.word	0x2000001c
 8009a90:	0800a335 	.word	0x0800a335
 8009a94:	0800a342 	.word	0x0800a342
 8009a98:	0800a370 	.word	0x0800a370

08009a9c <_calloc_r>:
 8009a9c:	b570      	push	{r4, r5, r6, lr}
 8009a9e:	fba1 5402 	umull	r5, r4, r1, r2
 8009aa2:	b934      	cbnz	r4, 8009ab2 <_calloc_r+0x16>
 8009aa4:	4629      	mov	r1, r5
 8009aa6:	f7ff fa39 	bl	8008f1c <_malloc_r>
 8009aaa:	4606      	mov	r6, r0
 8009aac:	b928      	cbnz	r0, 8009aba <_calloc_r+0x1e>
 8009aae:	4630      	mov	r0, r6
 8009ab0:	bd70      	pop	{r4, r5, r6, pc}
 8009ab2:	220c      	movs	r2, #12
 8009ab4:	6002      	str	r2, [r0, #0]
 8009ab6:	2600      	movs	r6, #0
 8009ab8:	e7f9      	b.n	8009aae <_calloc_r+0x12>
 8009aba:	462a      	mov	r2, r5
 8009abc:	4621      	mov	r1, r4
 8009abe:	f7fe fa19 	bl	8007ef4 <memset>
 8009ac2:	e7f4      	b.n	8009aae <_calloc_r+0x12>

08009ac4 <_free_r>:
 8009ac4:	b538      	push	{r3, r4, r5, lr}
 8009ac6:	4605      	mov	r5, r0
 8009ac8:	2900      	cmp	r1, #0
 8009aca:	d041      	beq.n	8009b50 <_free_r+0x8c>
 8009acc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ad0:	1f0c      	subs	r4, r1, #4
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	bfb8      	it	lt
 8009ad6:	18e4      	addlt	r4, r4, r3
 8009ad8:	f7ff fb4c 	bl	8009174 <__malloc_lock>
 8009adc:	4a1d      	ldr	r2, [pc, #116]	@ (8009b54 <_free_r+0x90>)
 8009ade:	6813      	ldr	r3, [r2, #0]
 8009ae0:	b933      	cbnz	r3, 8009af0 <_free_r+0x2c>
 8009ae2:	6063      	str	r3, [r4, #4]
 8009ae4:	6014      	str	r4, [r2, #0]
 8009ae6:	4628      	mov	r0, r5
 8009ae8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009aec:	f7ff bb48 	b.w	8009180 <__malloc_unlock>
 8009af0:	42a3      	cmp	r3, r4
 8009af2:	d908      	bls.n	8009b06 <_free_r+0x42>
 8009af4:	6820      	ldr	r0, [r4, #0]
 8009af6:	1821      	adds	r1, r4, r0
 8009af8:	428b      	cmp	r3, r1
 8009afa:	bf01      	itttt	eq
 8009afc:	6819      	ldreq	r1, [r3, #0]
 8009afe:	685b      	ldreq	r3, [r3, #4]
 8009b00:	1809      	addeq	r1, r1, r0
 8009b02:	6021      	streq	r1, [r4, #0]
 8009b04:	e7ed      	b.n	8009ae2 <_free_r+0x1e>
 8009b06:	461a      	mov	r2, r3
 8009b08:	685b      	ldr	r3, [r3, #4]
 8009b0a:	b10b      	cbz	r3, 8009b10 <_free_r+0x4c>
 8009b0c:	42a3      	cmp	r3, r4
 8009b0e:	d9fa      	bls.n	8009b06 <_free_r+0x42>
 8009b10:	6811      	ldr	r1, [r2, #0]
 8009b12:	1850      	adds	r0, r2, r1
 8009b14:	42a0      	cmp	r0, r4
 8009b16:	d10b      	bne.n	8009b30 <_free_r+0x6c>
 8009b18:	6820      	ldr	r0, [r4, #0]
 8009b1a:	4401      	add	r1, r0
 8009b1c:	1850      	adds	r0, r2, r1
 8009b1e:	4283      	cmp	r3, r0
 8009b20:	6011      	str	r1, [r2, #0]
 8009b22:	d1e0      	bne.n	8009ae6 <_free_r+0x22>
 8009b24:	6818      	ldr	r0, [r3, #0]
 8009b26:	685b      	ldr	r3, [r3, #4]
 8009b28:	6053      	str	r3, [r2, #4]
 8009b2a:	4408      	add	r0, r1
 8009b2c:	6010      	str	r0, [r2, #0]
 8009b2e:	e7da      	b.n	8009ae6 <_free_r+0x22>
 8009b30:	d902      	bls.n	8009b38 <_free_r+0x74>
 8009b32:	230c      	movs	r3, #12
 8009b34:	602b      	str	r3, [r5, #0]
 8009b36:	e7d6      	b.n	8009ae6 <_free_r+0x22>
 8009b38:	6820      	ldr	r0, [r4, #0]
 8009b3a:	1821      	adds	r1, r4, r0
 8009b3c:	428b      	cmp	r3, r1
 8009b3e:	bf04      	itt	eq
 8009b40:	6819      	ldreq	r1, [r3, #0]
 8009b42:	685b      	ldreq	r3, [r3, #4]
 8009b44:	6063      	str	r3, [r4, #4]
 8009b46:	bf04      	itt	eq
 8009b48:	1809      	addeq	r1, r1, r0
 8009b4a:	6021      	streq	r1, [r4, #0]
 8009b4c:	6054      	str	r4, [r2, #4]
 8009b4e:	e7ca      	b.n	8009ae6 <_free_r+0x22>
 8009b50:	bd38      	pop	{r3, r4, r5, pc}
 8009b52:	bf00      	nop
 8009b54:	20000538 	.word	0x20000538

08009b58 <__ascii_mbtowc>:
 8009b58:	b082      	sub	sp, #8
 8009b5a:	b901      	cbnz	r1, 8009b5e <__ascii_mbtowc+0x6>
 8009b5c:	a901      	add	r1, sp, #4
 8009b5e:	b142      	cbz	r2, 8009b72 <__ascii_mbtowc+0x1a>
 8009b60:	b14b      	cbz	r3, 8009b76 <__ascii_mbtowc+0x1e>
 8009b62:	7813      	ldrb	r3, [r2, #0]
 8009b64:	600b      	str	r3, [r1, #0]
 8009b66:	7812      	ldrb	r2, [r2, #0]
 8009b68:	1e10      	subs	r0, r2, #0
 8009b6a:	bf18      	it	ne
 8009b6c:	2001      	movne	r0, #1
 8009b6e:	b002      	add	sp, #8
 8009b70:	4770      	bx	lr
 8009b72:	4610      	mov	r0, r2
 8009b74:	e7fb      	b.n	8009b6e <__ascii_mbtowc+0x16>
 8009b76:	f06f 0001 	mvn.w	r0, #1
 8009b7a:	e7f8      	b.n	8009b6e <__ascii_mbtowc+0x16>

08009b7c <_malloc_usable_size_r>:
 8009b7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b80:	1f18      	subs	r0, r3, #4
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	bfbc      	itt	lt
 8009b86:	580b      	ldrlt	r3, [r1, r0]
 8009b88:	18c0      	addlt	r0, r0, r3
 8009b8a:	4770      	bx	lr

08009b8c <fiprintf>:
 8009b8c:	b40e      	push	{r1, r2, r3}
 8009b8e:	b503      	push	{r0, r1, lr}
 8009b90:	4601      	mov	r1, r0
 8009b92:	ab03      	add	r3, sp, #12
 8009b94:	4805      	ldr	r0, [pc, #20]	@ (8009bac <fiprintf+0x20>)
 8009b96:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b9a:	6800      	ldr	r0, [r0, #0]
 8009b9c:	9301      	str	r3, [sp, #4]
 8009b9e:	f000 f845 	bl	8009c2c <_vfiprintf_r>
 8009ba2:	b002      	add	sp, #8
 8009ba4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ba8:	b003      	add	sp, #12
 8009baa:	4770      	bx	lr
 8009bac:	2000001c 	.word	0x2000001c

08009bb0 <__ascii_wctomb>:
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	4608      	mov	r0, r1
 8009bb4:	b141      	cbz	r1, 8009bc8 <__ascii_wctomb+0x18>
 8009bb6:	2aff      	cmp	r2, #255	@ 0xff
 8009bb8:	d904      	bls.n	8009bc4 <__ascii_wctomb+0x14>
 8009bba:	228a      	movs	r2, #138	@ 0x8a
 8009bbc:	601a      	str	r2, [r3, #0]
 8009bbe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009bc2:	4770      	bx	lr
 8009bc4:	700a      	strb	r2, [r1, #0]
 8009bc6:	2001      	movs	r0, #1
 8009bc8:	4770      	bx	lr

08009bca <abort>:
 8009bca:	b508      	push	{r3, lr}
 8009bcc:	2006      	movs	r0, #6
 8009bce:	f000 fa63 	bl	800a098 <raise>
 8009bd2:	2001      	movs	r0, #1
 8009bd4:	f7f8 f86b 	bl	8001cae <_exit>

08009bd8 <__sfputc_r>:
 8009bd8:	6893      	ldr	r3, [r2, #8]
 8009bda:	3b01      	subs	r3, #1
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	b410      	push	{r4}
 8009be0:	6093      	str	r3, [r2, #8]
 8009be2:	da08      	bge.n	8009bf6 <__sfputc_r+0x1e>
 8009be4:	6994      	ldr	r4, [r2, #24]
 8009be6:	42a3      	cmp	r3, r4
 8009be8:	db01      	blt.n	8009bee <__sfputc_r+0x16>
 8009bea:	290a      	cmp	r1, #10
 8009bec:	d103      	bne.n	8009bf6 <__sfputc_r+0x1e>
 8009bee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009bf2:	f000 b933 	b.w	8009e5c <__swbuf_r>
 8009bf6:	6813      	ldr	r3, [r2, #0]
 8009bf8:	1c58      	adds	r0, r3, #1
 8009bfa:	6010      	str	r0, [r2, #0]
 8009bfc:	7019      	strb	r1, [r3, #0]
 8009bfe:	4608      	mov	r0, r1
 8009c00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c04:	4770      	bx	lr

08009c06 <__sfputs_r>:
 8009c06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c08:	4606      	mov	r6, r0
 8009c0a:	460f      	mov	r7, r1
 8009c0c:	4614      	mov	r4, r2
 8009c0e:	18d5      	adds	r5, r2, r3
 8009c10:	42ac      	cmp	r4, r5
 8009c12:	d101      	bne.n	8009c18 <__sfputs_r+0x12>
 8009c14:	2000      	movs	r0, #0
 8009c16:	e007      	b.n	8009c28 <__sfputs_r+0x22>
 8009c18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c1c:	463a      	mov	r2, r7
 8009c1e:	4630      	mov	r0, r6
 8009c20:	f7ff ffda 	bl	8009bd8 <__sfputc_r>
 8009c24:	1c43      	adds	r3, r0, #1
 8009c26:	d1f3      	bne.n	8009c10 <__sfputs_r+0xa>
 8009c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009c2c <_vfiprintf_r>:
 8009c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c30:	460d      	mov	r5, r1
 8009c32:	b09d      	sub	sp, #116	@ 0x74
 8009c34:	4614      	mov	r4, r2
 8009c36:	4698      	mov	r8, r3
 8009c38:	4606      	mov	r6, r0
 8009c3a:	b118      	cbz	r0, 8009c44 <_vfiprintf_r+0x18>
 8009c3c:	6a03      	ldr	r3, [r0, #32]
 8009c3e:	b90b      	cbnz	r3, 8009c44 <_vfiprintf_r+0x18>
 8009c40:	f7fe f922 	bl	8007e88 <__sinit>
 8009c44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c46:	07d9      	lsls	r1, r3, #31
 8009c48:	d405      	bmi.n	8009c56 <_vfiprintf_r+0x2a>
 8009c4a:	89ab      	ldrh	r3, [r5, #12]
 8009c4c:	059a      	lsls	r2, r3, #22
 8009c4e:	d402      	bmi.n	8009c56 <_vfiprintf_r+0x2a>
 8009c50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c52:	f7fe f982 	bl	8007f5a <__retarget_lock_acquire_recursive>
 8009c56:	89ab      	ldrh	r3, [r5, #12]
 8009c58:	071b      	lsls	r3, r3, #28
 8009c5a:	d501      	bpl.n	8009c60 <_vfiprintf_r+0x34>
 8009c5c:	692b      	ldr	r3, [r5, #16]
 8009c5e:	b99b      	cbnz	r3, 8009c88 <_vfiprintf_r+0x5c>
 8009c60:	4629      	mov	r1, r5
 8009c62:	4630      	mov	r0, r6
 8009c64:	f000 f938 	bl	8009ed8 <__swsetup_r>
 8009c68:	b170      	cbz	r0, 8009c88 <_vfiprintf_r+0x5c>
 8009c6a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c6c:	07dc      	lsls	r4, r3, #31
 8009c6e:	d504      	bpl.n	8009c7a <_vfiprintf_r+0x4e>
 8009c70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009c74:	b01d      	add	sp, #116	@ 0x74
 8009c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c7a:	89ab      	ldrh	r3, [r5, #12]
 8009c7c:	0598      	lsls	r0, r3, #22
 8009c7e:	d4f7      	bmi.n	8009c70 <_vfiprintf_r+0x44>
 8009c80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c82:	f7fe f96b 	bl	8007f5c <__retarget_lock_release_recursive>
 8009c86:	e7f3      	b.n	8009c70 <_vfiprintf_r+0x44>
 8009c88:	2300      	movs	r3, #0
 8009c8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c8c:	2320      	movs	r3, #32
 8009c8e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009c92:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c96:	2330      	movs	r3, #48	@ 0x30
 8009c98:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009e48 <_vfiprintf_r+0x21c>
 8009c9c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009ca0:	f04f 0901 	mov.w	r9, #1
 8009ca4:	4623      	mov	r3, r4
 8009ca6:	469a      	mov	sl, r3
 8009ca8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cac:	b10a      	cbz	r2, 8009cb2 <_vfiprintf_r+0x86>
 8009cae:	2a25      	cmp	r2, #37	@ 0x25
 8009cb0:	d1f9      	bne.n	8009ca6 <_vfiprintf_r+0x7a>
 8009cb2:	ebba 0b04 	subs.w	fp, sl, r4
 8009cb6:	d00b      	beq.n	8009cd0 <_vfiprintf_r+0xa4>
 8009cb8:	465b      	mov	r3, fp
 8009cba:	4622      	mov	r2, r4
 8009cbc:	4629      	mov	r1, r5
 8009cbe:	4630      	mov	r0, r6
 8009cc0:	f7ff ffa1 	bl	8009c06 <__sfputs_r>
 8009cc4:	3001      	adds	r0, #1
 8009cc6:	f000 80a7 	beq.w	8009e18 <_vfiprintf_r+0x1ec>
 8009cca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ccc:	445a      	add	r2, fp
 8009cce:	9209      	str	r2, [sp, #36]	@ 0x24
 8009cd0:	f89a 3000 	ldrb.w	r3, [sl]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	f000 809f 	beq.w	8009e18 <_vfiprintf_r+0x1ec>
 8009cda:	2300      	movs	r3, #0
 8009cdc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009ce0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ce4:	f10a 0a01 	add.w	sl, sl, #1
 8009ce8:	9304      	str	r3, [sp, #16]
 8009cea:	9307      	str	r3, [sp, #28]
 8009cec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009cf0:	931a      	str	r3, [sp, #104]	@ 0x68
 8009cf2:	4654      	mov	r4, sl
 8009cf4:	2205      	movs	r2, #5
 8009cf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cfa:	4853      	ldr	r0, [pc, #332]	@ (8009e48 <_vfiprintf_r+0x21c>)
 8009cfc:	f7f6 fa68 	bl	80001d0 <memchr>
 8009d00:	9a04      	ldr	r2, [sp, #16]
 8009d02:	b9d8      	cbnz	r0, 8009d3c <_vfiprintf_r+0x110>
 8009d04:	06d1      	lsls	r1, r2, #27
 8009d06:	bf44      	itt	mi
 8009d08:	2320      	movmi	r3, #32
 8009d0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d0e:	0713      	lsls	r3, r2, #28
 8009d10:	bf44      	itt	mi
 8009d12:	232b      	movmi	r3, #43	@ 0x2b
 8009d14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d18:	f89a 3000 	ldrb.w	r3, [sl]
 8009d1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d1e:	d015      	beq.n	8009d4c <_vfiprintf_r+0x120>
 8009d20:	9a07      	ldr	r2, [sp, #28]
 8009d22:	4654      	mov	r4, sl
 8009d24:	2000      	movs	r0, #0
 8009d26:	f04f 0c0a 	mov.w	ip, #10
 8009d2a:	4621      	mov	r1, r4
 8009d2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d30:	3b30      	subs	r3, #48	@ 0x30
 8009d32:	2b09      	cmp	r3, #9
 8009d34:	d94b      	bls.n	8009dce <_vfiprintf_r+0x1a2>
 8009d36:	b1b0      	cbz	r0, 8009d66 <_vfiprintf_r+0x13a>
 8009d38:	9207      	str	r2, [sp, #28]
 8009d3a:	e014      	b.n	8009d66 <_vfiprintf_r+0x13a>
 8009d3c:	eba0 0308 	sub.w	r3, r0, r8
 8009d40:	fa09 f303 	lsl.w	r3, r9, r3
 8009d44:	4313      	orrs	r3, r2
 8009d46:	9304      	str	r3, [sp, #16]
 8009d48:	46a2      	mov	sl, r4
 8009d4a:	e7d2      	b.n	8009cf2 <_vfiprintf_r+0xc6>
 8009d4c:	9b03      	ldr	r3, [sp, #12]
 8009d4e:	1d19      	adds	r1, r3, #4
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	9103      	str	r1, [sp, #12]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	bfbb      	ittet	lt
 8009d58:	425b      	neglt	r3, r3
 8009d5a:	f042 0202 	orrlt.w	r2, r2, #2
 8009d5e:	9307      	strge	r3, [sp, #28]
 8009d60:	9307      	strlt	r3, [sp, #28]
 8009d62:	bfb8      	it	lt
 8009d64:	9204      	strlt	r2, [sp, #16]
 8009d66:	7823      	ldrb	r3, [r4, #0]
 8009d68:	2b2e      	cmp	r3, #46	@ 0x2e
 8009d6a:	d10a      	bne.n	8009d82 <_vfiprintf_r+0x156>
 8009d6c:	7863      	ldrb	r3, [r4, #1]
 8009d6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d70:	d132      	bne.n	8009dd8 <_vfiprintf_r+0x1ac>
 8009d72:	9b03      	ldr	r3, [sp, #12]
 8009d74:	1d1a      	adds	r2, r3, #4
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	9203      	str	r2, [sp, #12]
 8009d7a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009d7e:	3402      	adds	r4, #2
 8009d80:	9305      	str	r3, [sp, #20]
 8009d82:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009e58 <_vfiprintf_r+0x22c>
 8009d86:	7821      	ldrb	r1, [r4, #0]
 8009d88:	2203      	movs	r2, #3
 8009d8a:	4650      	mov	r0, sl
 8009d8c:	f7f6 fa20 	bl	80001d0 <memchr>
 8009d90:	b138      	cbz	r0, 8009da2 <_vfiprintf_r+0x176>
 8009d92:	9b04      	ldr	r3, [sp, #16]
 8009d94:	eba0 000a 	sub.w	r0, r0, sl
 8009d98:	2240      	movs	r2, #64	@ 0x40
 8009d9a:	4082      	lsls	r2, r0
 8009d9c:	4313      	orrs	r3, r2
 8009d9e:	3401      	adds	r4, #1
 8009da0:	9304      	str	r3, [sp, #16]
 8009da2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009da6:	4829      	ldr	r0, [pc, #164]	@ (8009e4c <_vfiprintf_r+0x220>)
 8009da8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009dac:	2206      	movs	r2, #6
 8009dae:	f7f6 fa0f 	bl	80001d0 <memchr>
 8009db2:	2800      	cmp	r0, #0
 8009db4:	d03f      	beq.n	8009e36 <_vfiprintf_r+0x20a>
 8009db6:	4b26      	ldr	r3, [pc, #152]	@ (8009e50 <_vfiprintf_r+0x224>)
 8009db8:	bb1b      	cbnz	r3, 8009e02 <_vfiprintf_r+0x1d6>
 8009dba:	9b03      	ldr	r3, [sp, #12]
 8009dbc:	3307      	adds	r3, #7
 8009dbe:	f023 0307 	bic.w	r3, r3, #7
 8009dc2:	3308      	adds	r3, #8
 8009dc4:	9303      	str	r3, [sp, #12]
 8009dc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dc8:	443b      	add	r3, r7
 8009dca:	9309      	str	r3, [sp, #36]	@ 0x24
 8009dcc:	e76a      	b.n	8009ca4 <_vfiprintf_r+0x78>
 8009dce:	fb0c 3202 	mla	r2, ip, r2, r3
 8009dd2:	460c      	mov	r4, r1
 8009dd4:	2001      	movs	r0, #1
 8009dd6:	e7a8      	b.n	8009d2a <_vfiprintf_r+0xfe>
 8009dd8:	2300      	movs	r3, #0
 8009dda:	3401      	adds	r4, #1
 8009ddc:	9305      	str	r3, [sp, #20]
 8009dde:	4619      	mov	r1, r3
 8009de0:	f04f 0c0a 	mov.w	ip, #10
 8009de4:	4620      	mov	r0, r4
 8009de6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009dea:	3a30      	subs	r2, #48	@ 0x30
 8009dec:	2a09      	cmp	r2, #9
 8009dee:	d903      	bls.n	8009df8 <_vfiprintf_r+0x1cc>
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d0c6      	beq.n	8009d82 <_vfiprintf_r+0x156>
 8009df4:	9105      	str	r1, [sp, #20]
 8009df6:	e7c4      	b.n	8009d82 <_vfiprintf_r+0x156>
 8009df8:	fb0c 2101 	mla	r1, ip, r1, r2
 8009dfc:	4604      	mov	r4, r0
 8009dfe:	2301      	movs	r3, #1
 8009e00:	e7f0      	b.n	8009de4 <_vfiprintf_r+0x1b8>
 8009e02:	ab03      	add	r3, sp, #12
 8009e04:	9300      	str	r3, [sp, #0]
 8009e06:	462a      	mov	r2, r5
 8009e08:	4b12      	ldr	r3, [pc, #72]	@ (8009e54 <_vfiprintf_r+0x228>)
 8009e0a:	a904      	add	r1, sp, #16
 8009e0c:	4630      	mov	r0, r6
 8009e0e:	f7fd fbd7 	bl	80075c0 <_printf_float>
 8009e12:	4607      	mov	r7, r0
 8009e14:	1c78      	adds	r0, r7, #1
 8009e16:	d1d6      	bne.n	8009dc6 <_vfiprintf_r+0x19a>
 8009e18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009e1a:	07d9      	lsls	r1, r3, #31
 8009e1c:	d405      	bmi.n	8009e2a <_vfiprintf_r+0x1fe>
 8009e1e:	89ab      	ldrh	r3, [r5, #12]
 8009e20:	059a      	lsls	r2, r3, #22
 8009e22:	d402      	bmi.n	8009e2a <_vfiprintf_r+0x1fe>
 8009e24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e26:	f7fe f899 	bl	8007f5c <__retarget_lock_release_recursive>
 8009e2a:	89ab      	ldrh	r3, [r5, #12]
 8009e2c:	065b      	lsls	r3, r3, #25
 8009e2e:	f53f af1f 	bmi.w	8009c70 <_vfiprintf_r+0x44>
 8009e32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009e34:	e71e      	b.n	8009c74 <_vfiprintf_r+0x48>
 8009e36:	ab03      	add	r3, sp, #12
 8009e38:	9300      	str	r3, [sp, #0]
 8009e3a:	462a      	mov	r2, r5
 8009e3c:	4b05      	ldr	r3, [pc, #20]	@ (8009e54 <_vfiprintf_r+0x228>)
 8009e3e:	a904      	add	r1, sp, #16
 8009e40:	4630      	mov	r0, r6
 8009e42:	f7fd fe55 	bl	8007af0 <_printf_i>
 8009e46:	e7e4      	b.n	8009e12 <_vfiprintf_r+0x1e6>
 8009e48:	0800a2c1 	.word	0x0800a2c1
 8009e4c:	0800a2cb 	.word	0x0800a2cb
 8009e50:	080075c1 	.word	0x080075c1
 8009e54:	08009c07 	.word	0x08009c07
 8009e58:	0800a2c7 	.word	0x0800a2c7

08009e5c <__swbuf_r>:
 8009e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e5e:	460e      	mov	r6, r1
 8009e60:	4614      	mov	r4, r2
 8009e62:	4605      	mov	r5, r0
 8009e64:	b118      	cbz	r0, 8009e6e <__swbuf_r+0x12>
 8009e66:	6a03      	ldr	r3, [r0, #32]
 8009e68:	b90b      	cbnz	r3, 8009e6e <__swbuf_r+0x12>
 8009e6a:	f7fe f80d 	bl	8007e88 <__sinit>
 8009e6e:	69a3      	ldr	r3, [r4, #24]
 8009e70:	60a3      	str	r3, [r4, #8]
 8009e72:	89a3      	ldrh	r3, [r4, #12]
 8009e74:	071a      	lsls	r2, r3, #28
 8009e76:	d501      	bpl.n	8009e7c <__swbuf_r+0x20>
 8009e78:	6923      	ldr	r3, [r4, #16]
 8009e7a:	b943      	cbnz	r3, 8009e8e <__swbuf_r+0x32>
 8009e7c:	4621      	mov	r1, r4
 8009e7e:	4628      	mov	r0, r5
 8009e80:	f000 f82a 	bl	8009ed8 <__swsetup_r>
 8009e84:	b118      	cbz	r0, 8009e8e <__swbuf_r+0x32>
 8009e86:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009e8a:	4638      	mov	r0, r7
 8009e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e8e:	6823      	ldr	r3, [r4, #0]
 8009e90:	6922      	ldr	r2, [r4, #16]
 8009e92:	1a98      	subs	r0, r3, r2
 8009e94:	6963      	ldr	r3, [r4, #20]
 8009e96:	b2f6      	uxtb	r6, r6
 8009e98:	4283      	cmp	r3, r0
 8009e9a:	4637      	mov	r7, r6
 8009e9c:	dc05      	bgt.n	8009eaa <__swbuf_r+0x4e>
 8009e9e:	4621      	mov	r1, r4
 8009ea0:	4628      	mov	r0, r5
 8009ea2:	f7ff f93f 	bl	8009124 <_fflush_r>
 8009ea6:	2800      	cmp	r0, #0
 8009ea8:	d1ed      	bne.n	8009e86 <__swbuf_r+0x2a>
 8009eaa:	68a3      	ldr	r3, [r4, #8]
 8009eac:	3b01      	subs	r3, #1
 8009eae:	60a3      	str	r3, [r4, #8]
 8009eb0:	6823      	ldr	r3, [r4, #0]
 8009eb2:	1c5a      	adds	r2, r3, #1
 8009eb4:	6022      	str	r2, [r4, #0]
 8009eb6:	701e      	strb	r6, [r3, #0]
 8009eb8:	6962      	ldr	r2, [r4, #20]
 8009eba:	1c43      	adds	r3, r0, #1
 8009ebc:	429a      	cmp	r2, r3
 8009ebe:	d004      	beq.n	8009eca <__swbuf_r+0x6e>
 8009ec0:	89a3      	ldrh	r3, [r4, #12]
 8009ec2:	07db      	lsls	r3, r3, #31
 8009ec4:	d5e1      	bpl.n	8009e8a <__swbuf_r+0x2e>
 8009ec6:	2e0a      	cmp	r6, #10
 8009ec8:	d1df      	bne.n	8009e8a <__swbuf_r+0x2e>
 8009eca:	4621      	mov	r1, r4
 8009ecc:	4628      	mov	r0, r5
 8009ece:	f7ff f929 	bl	8009124 <_fflush_r>
 8009ed2:	2800      	cmp	r0, #0
 8009ed4:	d0d9      	beq.n	8009e8a <__swbuf_r+0x2e>
 8009ed6:	e7d6      	b.n	8009e86 <__swbuf_r+0x2a>

08009ed8 <__swsetup_r>:
 8009ed8:	b538      	push	{r3, r4, r5, lr}
 8009eda:	4b29      	ldr	r3, [pc, #164]	@ (8009f80 <__swsetup_r+0xa8>)
 8009edc:	4605      	mov	r5, r0
 8009ede:	6818      	ldr	r0, [r3, #0]
 8009ee0:	460c      	mov	r4, r1
 8009ee2:	b118      	cbz	r0, 8009eec <__swsetup_r+0x14>
 8009ee4:	6a03      	ldr	r3, [r0, #32]
 8009ee6:	b90b      	cbnz	r3, 8009eec <__swsetup_r+0x14>
 8009ee8:	f7fd ffce 	bl	8007e88 <__sinit>
 8009eec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ef0:	0719      	lsls	r1, r3, #28
 8009ef2:	d422      	bmi.n	8009f3a <__swsetup_r+0x62>
 8009ef4:	06da      	lsls	r2, r3, #27
 8009ef6:	d407      	bmi.n	8009f08 <__swsetup_r+0x30>
 8009ef8:	2209      	movs	r2, #9
 8009efa:	602a      	str	r2, [r5, #0]
 8009efc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f00:	81a3      	strh	r3, [r4, #12]
 8009f02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009f06:	e033      	b.n	8009f70 <__swsetup_r+0x98>
 8009f08:	0758      	lsls	r0, r3, #29
 8009f0a:	d512      	bpl.n	8009f32 <__swsetup_r+0x5a>
 8009f0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009f0e:	b141      	cbz	r1, 8009f22 <__swsetup_r+0x4a>
 8009f10:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009f14:	4299      	cmp	r1, r3
 8009f16:	d002      	beq.n	8009f1e <__swsetup_r+0x46>
 8009f18:	4628      	mov	r0, r5
 8009f1a:	f7ff fdd3 	bl	8009ac4 <_free_r>
 8009f1e:	2300      	movs	r3, #0
 8009f20:	6363      	str	r3, [r4, #52]	@ 0x34
 8009f22:	89a3      	ldrh	r3, [r4, #12]
 8009f24:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009f28:	81a3      	strh	r3, [r4, #12]
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	6063      	str	r3, [r4, #4]
 8009f2e:	6923      	ldr	r3, [r4, #16]
 8009f30:	6023      	str	r3, [r4, #0]
 8009f32:	89a3      	ldrh	r3, [r4, #12]
 8009f34:	f043 0308 	orr.w	r3, r3, #8
 8009f38:	81a3      	strh	r3, [r4, #12]
 8009f3a:	6923      	ldr	r3, [r4, #16]
 8009f3c:	b94b      	cbnz	r3, 8009f52 <__swsetup_r+0x7a>
 8009f3e:	89a3      	ldrh	r3, [r4, #12]
 8009f40:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009f44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f48:	d003      	beq.n	8009f52 <__swsetup_r+0x7a>
 8009f4a:	4621      	mov	r1, r4
 8009f4c:	4628      	mov	r0, r5
 8009f4e:	f000 f83f 	bl	8009fd0 <__smakebuf_r>
 8009f52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f56:	f013 0201 	ands.w	r2, r3, #1
 8009f5a:	d00a      	beq.n	8009f72 <__swsetup_r+0x9a>
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	60a2      	str	r2, [r4, #8]
 8009f60:	6962      	ldr	r2, [r4, #20]
 8009f62:	4252      	negs	r2, r2
 8009f64:	61a2      	str	r2, [r4, #24]
 8009f66:	6922      	ldr	r2, [r4, #16]
 8009f68:	b942      	cbnz	r2, 8009f7c <__swsetup_r+0xa4>
 8009f6a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009f6e:	d1c5      	bne.n	8009efc <__swsetup_r+0x24>
 8009f70:	bd38      	pop	{r3, r4, r5, pc}
 8009f72:	0799      	lsls	r1, r3, #30
 8009f74:	bf58      	it	pl
 8009f76:	6962      	ldrpl	r2, [r4, #20]
 8009f78:	60a2      	str	r2, [r4, #8]
 8009f7a:	e7f4      	b.n	8009f66 <__swsetup_r+0x8e>
 8009f7c:	2000      	movs	r0, #0
 8009f7e:	e7f7      	b.n	8009f70 <__swsetup_r+0x98>
 8009f80:	2000001c 	.word	0x2000001c

08009f84 <__swhatbuf_r>:
 8009f84:	b570      	push	{r4, r5, r6, lr}
 8009f86:	460c      	mov	r4, r1
 8009f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f8c:	2900      	cmp	r1, #0
 8009f8e:	b096      	sub	sp, #88	@ 0x58
 8009f90:	4615      	mov	r5, r2
 8009f92:	461e      	mov	r6, r3
 8009f94:	da0d      	bge.n	8009fb2 <__swhatbuf_r+0x2e>
 8009f96:	89a3      	ldrh	r3, [r4, #12]
 8009f98:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009f9c:	f04f 0100 	mov.w	r1, #0
 8009fa0:	bf14      	ite	ne
 8009fa2:	2340      	movne	r3, #64	@ 0x40
 8009fa4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009fa8:	2000      	movs	r0, #0
 8009faa:	6031      	str	r1, [r6, #0]
 8009fac:	602b      	str	r3, [r5, #0]
 8009fae:	b016      	add	sp, #88	@ 0x58
 8009fb0:	bd70      	pop	{r4, r5, r6, pc}
 8009fb2:	466a      	mov	r2, sp
 8009fb4:	f000 f89c 	bl	800a0f0 <_fstat_r>
 8009fb8:	2800      	cmp	r0, #0
 8009fba:	dbec      	blt.n	8009f96 <__swhatbuf_r+0x12>
 8009fbc:	9901      	ldr	r1, [sp, #4]
 8009fbe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009fc2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009fc6:	4259      	negs	r1, r3
 8009fc8:	4159      	adcs	r1, r3
 8009fca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009fce:	e7eb      	b.n	8009fa8 <__swhatbuf_r+0x24>

08009fd0 <__smakebuf_r>:
 8009fd0:	898b      	ldrh	r3, [r1, #12]
 8009fd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009fd4:	079d      	lsls	r5, r3, #30
 8009fd6:	4606      	mov	r6, r0
 8009fd8:	460c      	mov	r4, r1
 8009fda:	d507      	bpl.n	8009fec <__smakebuf_r+0x1c>
 8009fdc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009fe0:	6023      	str	r3, [r4, #0]
 8009fe2:	6123      	str	r3, [r4, #16]
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	6163      	str	r3, [r4, #20]
 8009fe8:	b003      	add	sp, #12
 8009fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fec:	ab01      	add	r3, sp, #4
 8009fee:	466a      	mov	r2, sp
 8009ff0:	f7ff ffc8 	bl	8009f84 <__swhatbuf_r>
 8009ff4:	9f00      	ldr	r7, [sp, #0]
 8009ff6:	4605      	mov	r5, r0
 8009ff8:	4639      	mov	r1, r7
 8009ffa:	4630      	mov	r0, r6
 8009ffc:	f7fe ff8e 	bl	8008f1c <_malloc_r>
 800a000:	b948      	cbnz	r0, 800a016 <__smakebuf_r+0x46>
 800a002:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a006:	059a      	lsls	r2, r3, #22
 800a008:	d4ee      	bmi.n	8009fe8 <__smakebuf_r+0x18>
 800a00a:	f023 0303 	bic.w	r3, r3, #3
 800a00e:	f043 0302 	orr.w	r3, r3, #2
 800a012:	81a3      	strh	r3, [r4, #12]
 800a014:	e7e2      	b.n	8009fdc <__smakebuf_r+0xc>
 800a016:	89a3      	ldrh	r3, [r4, #12]
 800a018:	6020      	str	r0, [r4, #0]
 800a01a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a01e:	81a3      	strh	r3, [r4, #12]
 800a020:	9b01      	ldr	r3, [sp, #4]
 800a022:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a026:	b15b      	cbz	r3, 800a040 <__smakebuf_r+0x70>
 800a028:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a02c:	4630      	mov	r0, r6
 800a02e:	f000 f83b 	bl	800a0a8 <_isatty_r>
 800a032:	b128      	cbz	r0, 800a040 <__smakebuf_r+0x70>
 800a034:	89a3      	ldrh	r3, [r4, #12]
 800a036:	f023 0303 	bic.w	r3, r3, #3
 800a03a:	f043 0301 	orr.w	r3, r3, #1
 800a03e:	81a3      	strh	r3, [r4, #12]
 800a040:	89a3      	ldrh	r3, [r4, #12]
 800a042:	431d      	orrs	r5, r3
 800a044:	81a5      	strh	r5, [r4, #12]
 800a046:	e7cf      	b.n	8009fe8 <__smakebuf_r+0x18>

0800a048 <_raise_r>:
 800a048:	291f      	cmp	r1, #31
 800a04a:	b538      	push	{r3, r4, r5, lr}
 800a04c:	4605      	mov	r5, r0
 800a04e:	460c      	mov	r4, r1
 800a050:	d904      	bls.n	800a05c <_raise_r+0x14>
 800a052:	2316      	movs	r3, #22
 800a054:	6003      	str	r3, [r0, #0]
 800a056:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a05a:	bd38      	pop	{r3, r4, r5, pc}
 800a05c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a05e:	b112      	cbz	r2, 800a066 <_raise_r+0x1e>
 800a060:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a064:	b94b      	cbnz	r3, 800a07a <_raise_r+0x32>
 800a066:	4628      	mov	r0, r5
 800a068:	f000 f840 	bl	800a0ec <_getpid_r>
 800a06c:	4622      	mov	r2, r4
 800a06e:	4601      	mov	r1, r0
 800a070:	4628      	mov	r0, r5
 800a072:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a076:	f000 b827 	b.w	800a0c8 <_kill_r>
 800a07a:	2b01      	cmp	r3, #1
 800a07c:	d00a      	beq.n	800a094 <_raise_r+0x4c>
 800a07e:	1c59      	adds	r1, r3, #1
 800a080:	d103      	bne.n	800a08a <_raise_r+0x42>
 800a082:	2316      	movs	r3, #22
 800a084:	6003      	str	r3, [r0, #0]
 800a086:	2001      	movs	r0, #1
 800a088:	e7e7      	b.n	800a05a <_raise_r+0x12>
 800a08a:	2100      	movs	r1, #0
 800a08c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a090:	4620      	mov	r0, r4
 800a092:	4798      	blx	r3
 800a094:	2000      	movs	r0, #0
 800a096:	e7e0      	b.n	800a05a <_raise_r+0x12>

0800a098 <raise>:
 800a098:	4b02      	ldr	r3, [pc, #8]	@ (800a0a4 <raise+0xc>)
 800a09a:	4601      	mov	r1, r0
 800a09c:	6818      	ldr	r0, [r3, #0]
 800a09e:	f7ff bfd3 	b.w	800a048 <_raise_r>
 800a0a2:	bf00      	nop
 800a0a4:	2000001c 	.word	0x2000001c

0800a0a8 <_isatty_r>:
 800a0a8:	b538      	push	{r3, r4, r5, lr}
 800a0aa:	4d06      	ldr	r5, [pc, #24]	@ (800a0c4 <_isatty_r+0x1c>)
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	4604      	mov	r4, r0
 800a0b0:	4608      	mov	r0, r1
 800a0b2:	602b      	str	r3, [r5, #0]
 800a0b4:	f7f7 fe5b 	bl	8001d6e <_isatty>
 800a0b8:	1c43      	adds	r3, r0, #1
 800a0ba:	d102      	bne.n	800a0c2 <_isatty_r+0x1a>
 800a0bc:	682b      	ldr	r3, [r5, #0]
 800a0be:	b103      	cbz	r3, 800a0c2 <_isatty_r+0x1a>
 800a0c0:	6023      	str	r3, [r4, #0]
 800a0c2:	bd38      	pop	{r3, r4, r5, pc}
 800a0c4:	2000053c 	.word	0x2000053c

0800a0c8 <_kill_r>:
 800a0c8:	b538      	push	{r3, r4, r5, lr}
 800a0ca:	4d07      	ldr	r5, [pc, #28]	@ (800a0e8 <_kill_r+0x20>)
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	4604      	mov	r4, r0
 800a0d0:	4608      	mov	r0, r1
 800a0d2:	4611      	mov	r1, r2
 800a0d4:	602b      	str	r3, [r5, #0]
 800a0d6:	f7f7 fdda 	bl	8001c8e <_kill>
 800a0da:	1c43      	adds	r3, r0, #1
 800a0dc:	d102      	bne.n	800a0e4 <_kill_r+0x1c>
 800a0de:	682b      	ldr	r3, [r5, #0]
 800a0e0:	b103      	cbz	r3, 800a0e4 <_kill_r+0x1c>
 800a0e2:	6023      	str	r3, [r4, #0]
 800a0e4:	bd38      	pop	{r3, r4, r5, pc}
 800a0e6:	bf00      	nop
 800a0e8:	2000053c 	.word	0x2000053c

0800a0ec <_getpid_r>:
 800a0ec:	f7f7 bdc7 	b.w	8001c7e <_getpid>

0800a0f0 <_fstat_r>:
 800a0f0:	b538      	push	{r3, r4, r5, lr}
 800a0f2:	4d07      	ldr	r5, [pc, #28]	@ (800a110 <_fstat_r+0x20>)
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	4604      	mov	r4, r0
 800a0f8:	4608      	mov	r0, r1
 800a0fa:	4611      	mov	r1, r2
 800a0fc:	602b      	str	r3, [r5, #0]
 800a0fe:	f7f7 fe26 	bl	8001d4e <_fstat>
 800a102:	1c43      	adds	r3, r0, #1
 800a104:	d102      	bne.n	800a10c <_fstat_r+0x1c>
 800a106:	682b      	ldr	r3, [r5, #0]
 800a108:	b103      	cbz	r3, 800a10c <_fstat_r+0x1c>
 800a10a:	6023      	str	r3, [r4, #0]
 800a10c:	bd38      	pop	{r3, r4, r5, pc}
 800a10e:	bf00      	nop
 800a110:	2000053c 	.word	0x2000053c

0800a114 <_init>:
 800a114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a116:	bf00      	nop
 800a118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a11a:	bc08      	pop	{r3}
 800a11c:	469e      	mov	lr, r3
 800a11e:	4770      	bx	lr

0800a120 <_fini>:
 800a120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a122:	bf00      	nop
 800a124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a126:	bc08      	pop	{r3}
 800a128:	469e      	mov	lr, r3
 800a12a:	4770      	bx	lr
