
dradar_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a124  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  0800a2b8  0800a2b8  0000b2b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6fc  0800a6fc  0000c1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a6fc  0800a6fc  0000b6fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a704  0800a704  0000c1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a704  0800a704  0000b704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a708  0800a708  0000b708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800a70c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000370  200001d8  0800a8e4  0000c1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000548  0800a8e4  0000c548  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015eb2  00000000  00000000  0000c208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000305b  00000000  00000000  000220ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001688  00000000  00000000  00025118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000117e  00000000  00000000  000267a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a597  00000000  00000000  0002791e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019941  00000000  00000000  00051eb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107aa5  00000000  00000000  0006b7f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017329b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007168  00000000  00000000  001732e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  0017a448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a29c 	.word	0x0800a29c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800a29c 	.word	0x0800a29c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <Buzzer_Init>:
 */
#include "buzzer.h"

extern TIM_HandleTypeDef htim1; // Change TIM1 to your timer

void Buzzer_Init(void) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000bac:	2100      	movs	r1, #0
 8000bae:	4802      	ldr	r0, [pc, #8]	@ (8000bb8 <Buzzer_Init+0x10>)
 8000bb0:	f005 fe66 	bl	8006880 <HAL_TIM_PWM_Start>
}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20000338 	.word	0x20000338

08000bbc <Buzzer_On>:

void Buzzer_On(uint16_t frequency) {
 8000bbc:	b480      	push	{r7}
 8000bbe:	b087      	sub	sp, #28
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	80fb      	strh	r3, [r7, #6]
    uint32_t timerClock = 80000000; // 80 MHz default APB2
 8000bc6:	4b12      	ldr	r3, [pc, #72]	@ (8000c10 <Buzzer_On+0x54>)
 8000bc8:	617b      	str	r3, [r7, #20]
    uint32_t prescaler = 79;        // Must match CubeMX setting
 8000bca:	234f      	movs	r3, #79	@ 0x4f
 8000bcc:	613b      	str	r3, [r7, #16]
    uint32_t period = (timerClock / (prescaler + 1)) / frequency - 1;
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	697a      	ldr	r2, [r7, #20]
 8000bd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8000bd8:	88fb      	ldrh	r3, [r7, #6]
 8000bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bde:	3b01      	subs	r3, #1
 8000be0:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_AUTORELOAD(&htim1, period);
 8000be2:	4b0c      	ldr	r3, [pc, #48]	@ (8000c14 <Buzzer_On+0x58>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	68fa      	ldr	r2, [r7, #12]
 8000be8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000bea:	4a0a      	ldr	r2, [pc, #40]	@ (8000c14 <Buzzer_On+0x58>)
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, period / 2); // 50% duty
 8000bf0:	4b08      	ldr	r3, [pc, #32]	@ (8000c14 <Buzzer_On+0x58>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	68fa      	ldr	r2, [r7, #12]
 8000bf6:	0852      	lsrs	r2, r2, #1
 8000bf8:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000bfa:	4b06      	ldr	r3, [pc, #24]	@ (8000c14 <Buzzer_On+0x58>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	2200      	movs	r2, #0
 8000c00:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000c02:	bf00      	nop
 8000c04:	371c      	adds	r7, #28
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	04c4b400 	.word	0x04c4b400
 8000c14:	20000338 	.word	0x20000338

08000c18 <Buzzer_Off>:

void Buzzer_Off(void) {
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000c1c:	4b04      	ldr	r3, [pc, #16]	@ (8000c30 <Buzzer_Off+0x18>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2200      	movs	r2, #0
 8000c22:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	20000338 	.word	0x20000338

08000c34 <CC2500_WriteRegister>:
#define CC2500_SWEEP_MAX 43  // Stops sweep at ~2483.5 MHz with 200 kHz spacing

extern SPI_HandleTypeDef hspi1;

//write registers to config
void CC2500_WriteRegister(uint8_t addr, uint8_t value) {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	460a      	mov	r2, r1
 8000c3e:	71fb      	strb	r3, [r7, #7]
 8000c40:	4613      	mov	r3, r2
 8000c42:	71bb      	strb	r3, [r7, #6]
    CC2500_CS_LOW();
 8000c44:	2200      	movs	r2, #0
 8000c46:	2110      	movs	r1, #16
 8000c48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c4c:	f002 ff16 	bl	8003a7c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &addr, 1, HAL_MAX_DELAY);
 8000c50:	1df9      	adds	r1, r7, #7
 8000c52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c56:	2201      	movs	r2, #1
 8000c58:	4809      	ldr	r0, [pc, #36]	@ (8000c80 <CC2500_WriteRegister+0x4c>)
 8000c5a:	f004 ff30 	bl	8005abe <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, &value, 1, HAL_MAX_DELAY);
 8000c5e:	1db9      	adds	r1, r7, #6
 8000c60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c64:	2201      	movs	r2, #1
 8000c66:	4806      	ldr	r0, [pc, #24]	@ (8000c80 <CC2500_WriteRegister+0x4c>)
 8000c68:	f004 ff29 	bl	8005abe <HAL_SPI_Transmit>
    CC2500_CS_HIGH();
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	2110      	movs	r1, #16
 8000c70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c74:	f002 ff02 	bl	8003a7c <HAL_GPIO_WritePin>
}
 8000c78:	bf00      	nop
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	200002d4 	.word	0x200002d4

08000c84 <CC2500_ReadRegister>:

//read current config to write back unmodified values
uint8_t CC2500_ReadRegister(uint8_t addr) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    addr |= 0x80;
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	71fb      	strb	r3, [r7, #7]
    CC2500_CS_LOW();
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2110      	movs	r1, #16
 8000c9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ca0:	f002 feec 	bl	8003a7c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &addr, 1, HAL_MAX_DELAY);
 8000ca4:	1df9      	adds	r1, r7, #7
 8000ca6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000caa:	2201      	movs	r2, #1
 8000cac:	480a      	ldr	r0, [pc, #40]	@ (8000cd8 <CC2500_ReadRegister+0x54>)
 8000cae:	f004 ff06 	bl	8005abe <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, &value, 1, HAL_MAX_DELAY);
 8000cb2:	f107 010f 	add.w	r1, r7, #15
 8000cb6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000cba:	2201      	movs	r2, #1
 8000cbc:	4806      	ldr	r0, [pc, #24]	@ (8000cd8 <CC2500_ReadRegister+0x54>)
 8000cbe:	f005 f874 	bl	8005daa <HAL_SPI_Receive>
    CC2500_CS_HIGH();
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	2110      	movs	r1, #16
 8000cc6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cca:	f002 fed7 	bl	8003a7c <HAL_GPIO_WritePin>
    return value;
 8000cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3710      	adds	r7, #16
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	200002d4 	.word	0x200002d4

08000cdc <CC2500_Strobe>:

//??? TODO
void CC2500_Strobe(uint8_t cmd) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	71fb      	strb	r3, [r7, #7]
    CC2500_CS_LOW();
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2110      	movs	r1, #16
 8000cea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cee:	f002 fec5 	bl	8003a7c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8000cf2:	1df9      	adds	r1, r7, #7
 8000cf4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	4806      	ldr	r0, [pc, #24]	@ (8000d14 <CC2500_Strobe+0x38>)
 8000cfc:	f004 fedf 	bl	8005abe <HAL_SPI_Transmit>
    CC2500_CS_HIGH();
 8000d00:	2201      	movs	r2, #1
 8000d02:	2110      	movs	r1, #16
 8000d04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d08:	f002 feb8 	bl	8003a7c <HAL_GPIO_WritePin>
}
 8000d0c:	bf00      	nop
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	200002d4 	.word	0x200002d4

08000d18 <CC2500_SetChannel>:

//set channel
void CC2500_SetChannel(uint8_t channel) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71fb      	strb	r3, [r7, #7]
    CC2500_WriteRegister(0x0A, channel);
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	4619      	mov	r1, r3
 8000d26:	200a      	movs	r0, #10
 8000d28:	f7ff ff84 	bl	8000c34 <CC2500_WriteRegister>
    CC2500_Strobe(CC2500_SRX);
 8000d2c:	2034      	movs	r0, #52	@ 0x34
 8000d2e:	f7ff ffd5 	bl	8000cdc <CC2500_Strobe>
}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <CC2500_ReadRSSI>:

//Check signal strength through rssi
uint8_t CC2500_ReadRSSI(void) {
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b082      	sub	sp, #8
 8000d3e:	af00      	add	r7, sp, #0
    uint8_t raw = CC2500_ReadRegister(0x34);
 8000d40:	2034      	movs	r0, #52	@ 0x34
 8000d42:	f7ff ff9f 	bl	8000c84 <CC2500_ReadRegister>
 8000d46:	4603      	mov	r3, r0
 8000d48:	71fb      	strb	r3, [r7, #7]
    uint8_t calcValue = (raw >= 128) ? ((int8_t)(raw - 256) / 2 - 74) : (raw / 2 - 74);
 8000d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	da09      	bge.n	8000d66 <CC2500_ReadRSSI+0x2c>
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	0fda      	lsrs	r2, r3, #31
 8000d58:	4413      	add	r3, r2
 8000d5a:	105b      	asrs	r3, r3, #1
 8000d5c:	b25b      	sxtb	r3, r3
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	3b4a      	subs	r3, #74	@ 0x4a
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	e004      	b.n	8000d70 <CC2500_ReadRSSI+0x36>
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	085b      	lsrs	r3, r3, #1
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	3b4a      	subs	r3, #74	@ 0x4a
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	71bb      	strb	r3, [r7, #6]
    return calcValue;
 8000d72:	79bb      	ldrb	r3, [r7, #6]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <CC2500_ApplyConfig>:
| `0x25`        | FSCAL0        | `0x1F`      |                               |
| `0x07`        | PKTCTRL1      | `0x04`      | No address check              |
| `0x08`        | PKTCTRL0      | `0x05`      | Infinite packet length, CRC   |
| `0x3E`        | PATABLE       | `0xC0`      | Max output power              |
 * */
void CC2500_ApplyConfig(void) {
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
    CC2500_WriteRegister(0x00, 0x29);
 8000d80:	2129      	movs	r1, #41	@ 0x29
 8000d82:	2000      	movs	r0, #0
 8000d84:	f7ff ff56 	bl	8000c34 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x02, 0x06);
 8000d88:	2106      	movs	r1, #6
 8000d8a:	2002      	movs	r0, #2
 8000d8c:	f7ff ff52 	bl	8000c34 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x03, 0x07);
 8000d90:	2107      	movs	r1, #7
 8000d92:	2003      	movs	r0, #3
 8000d94:	f7ff ff4e 	bl	8000c34 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x06, 0x00);
 8000d98:	2100      	movs	r1, #0
 8000d9a:	2006      	movs	r0, #6
 8000d9c:	f7ff ff4a 	bl	8000c34 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x07, 0x04);
 8000da0:	2104      	movs	r1, #4
 8000da2:	2007      	movs	r0, #7
 8000da4:	f7ff ff46 	bl	8000c34 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x08, 0x05);
 8000da8:	2105      	movs	r1, #5
 8000daa:	2008      	movs	r0, #8
 8000dac:	f7ff ff42 	bl	8000c34 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x0A, 0x00);
 8000db0:	2100      	movs	r1, #0
 8000db2:	200a      	movs	r0, #10
 8000db4:	f7ff ff3e 	bl	8000c34 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x0B, 0x06);
 8000db8:	2106      	movs	r1, #6
 8000dba:	200b      	movs	r0, #11
 8000dbc:	f7ff ff3a 	bl	8000c34 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x0C, 0x00);
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	200c      	movs	r0, #12
 8000dc4:	f7ff ff36 	bl	8000c34 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x0D, 0x5D);
 8000dc8:	215d      	movs	r1, #93	@ 0x5d
 8000dca:	200d      	movs	r0, #13
 8000dcc:	f7ff ff32 	bl	8000c34 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x0E, 0x93);
 8000dd0:	2193      	movs	r1, #147	@ 0x93
 8000dd2:	200e      	movs	r0, #14
 8000dd4:	f7ff ff2e 	bl	8000c34 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x0F, 0xB1);
 8000dd8:	21b1      	movs	r1, #177	@ 0xb1
 8000dda:	200f      	movs	r0, #15
 8000ddc:	f7ff ff2a 	bl	8000c34 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x10, 0x2D);
 8000de0:	212d      	movs	r1, #45	@ 0x2d
 8000de2:	2010      	movs	r0, #16
 8000de4:	f7ff ff26 	bl	8000c34 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x11, 0x3B);
 8000de8:	213b      	movs	r1, #59	@ 0x3b
 8000dea:	2011      	movs	r0, #17
 8000dec:	f7ff ff22 	bl	8000c34 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x12, 0x73);
 8000df0:	2173      	movs	r1, #115	@ 0x73
 8000df2:	2012      	movs	r0, #18
 8000df4:	f7ff ff1e 	bl	8000c34 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x15, 0x01);
 8000df8:	2101      	movs	r1, #1
 8000dfa:	2015      	movs	r0, #21
 8000dfc:	f7ff ff1a 	bl	8000c34 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x18, 0x18);
 8000e00:	2118      	movs	r1, #24
 8000e02:	2018      	movs	r0, #24
 8000e04:	f7ff ff16 	bl	8000c34 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x19, 0x1D);
 8000e08:	211d      	movs	r1, #29
 8000e0a:	2019      	movs	r0, #25
 8000e0c:	f7ff ff12 	bl	8000c34 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x1A, 0x1C);
 8000e10:	211c      	movs	r1, #28
 8000e12:	201a      	movs	r0, #26
 8000e14:	f7ff ff0e 	bl	8000c34 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x21, 0x11);
 8000e18:	2111      	movs	r1, #17
 8000e1a:	2021      	movs	r0, #33	@ 0x21
 8000e1c:	f7ff ff0a 	bl	8000c34 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x22, 0xE9);
 8000e20:	21e9      	movs	r1, #233	@ 0xe9
 8000e22:	2022      	movs	r0, #34	@ 0x22
 8000e24:	f7ff ff06 	bl	8000c34 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x23, 0x2A);
 8000e28:	212a      	movs	r1, #42	@ 0x2a
 8000e2a:	2023      	movs	r0, #35	@ 0x23
 8000e2c:	f7ff ff02 	bl	8000c34 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x24, 0x00);
 8000e30:	2100      	movs	r1, #0
 8000e32:	2024      	movs	r0, #36	@ 0x24
 8000e34:	f7ff fefe 	bl	8000c34 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x25, 0x1F);
 8000e38:	211f      	movs	r1, #31
 8000e3a:	2025      	movs	r0, #37	@ 0x25
 8000e3c:	f7ff fefa 	bl	8000c34 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x3E, 0xC0);
 8000e40:	21c0      	movs	r1, #192	@ 0xc0
 8000e42:	203e      	movs	r0, #62	@ 0x3e
 8000e44:	f7ff fef6 	bl	8000c34 <CC2500_WriteRegister>
}
 8000e48:	bf00      	nop
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <CC2500_Init>:

//apply configurations and establish first noise floor
void CC2500_Init(void) {
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
    HAL_Delay(100);
 8000e50:	2064      	movs	r0, #100	@ 0x64
 8000e52:	f001 f911 	bl	8002078 <HAL_Delay>
    CC2500_CS_HIGH(); HAL_Delay(1);
 8000e56:	2201      	movs	r2, #1
 8000e58:	2110      	movs	r1, #16
 8000e5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e5e:	f002 fe0d 	bl	8003a7c <HAL_GPIO_WritePin>
 8000e62:	2001      	movs	r0, #1
 8000e64:	f001 f908 	bl	8002078 <HAL_Delay>
    CC2500_CS_LOW();  HAL_Delay(1);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2110      	movs	r1, #16
 8000e6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e70:	f002 fe04 	bl	8003a7c <HAL_GPIO_WritePin>
 8000e74:	2001      	movs	r0, #1
 8000e76:	f001 f8ff 	bl	8002078 <HAL_Delay>
    CC2500_CS_HIGH(); HAL_Delay(1);
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	2110      	movs	r1, #16
 8000e7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e82:	f002 fdfb 	bl	8003a7c <HAL_GPIO_WritePin>
 8000e86:	2001      	movs	r0, #1
 8000e88:	f001 f8f6 	bl	8002078 <HAL_Delay>

    CC2500_Strobe(CC2500_SRES);
 8000e8c:	2030      	movs	r0, #48	@ 0x30
 8000e8e:	f7ff ff25 	bl	8000cdc <CC2500_Strobe>
    HAL_Delay(1);
 8000e92:	2001      	movs	r0, #1
 8000e94:	f001 f8f0 	bl	8002078 <HAL_Delay>

    CC2500_ApplyConfig();
 8000e98:	f7ff ff70 	bl	8000d7c <CC2500_ApplyConfig>
    CC2500_Strobe(CC2500_SRX);
 8000e9c:	2034      	movs	r0, #52	@ 0x34
 8000e9e:	f7ff ff1d 	bl	8000cdc <CC2500_Strobe>

    // Initial noise floor calibration
    CC2500_RecalibrateNoiseFloor();
 8000ea2:	f000 f803 	bl	8000eac <CC2500_RecalibrateNoiseFloor>
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
	...

08000eac <CC2500_RecalibrateNoiseFloor>:

//re calibrate average noise floor.
void CC2500_RecalibrateNoiseFloor(void) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
	CharLCD_Set_Cursor(0,7); // Set cursor to row 1, column 0
 8000eb2:	2107      	movs	r1, #7
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	f000 f9ce 	bl	8001256 <CharLCD_Set_Cursor>
	CharLCD_Write_String("CALBRATNG");
 8000eba:	481e      	ldr	r0, [pc, #120]	@ (8000f34 <CC2500_RecalibrateNoiseFloor+0x88>)
 8000ebc:	f000 f9b6 	bl	800122c <CharLCD_Write_String>

	int32_t sum = 0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60fb      	str	r3, [r7, #12]
    const uint8_t ch_min = 0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	72bb      	strb	r3, [r7, #10]
    const uint8_t ch_max = 100;
 8000ec8:	2364      	movs	r3, #100	@ 0x64
 8000eca:	727b      	strb	r3, [r7, #9]
    const int sweep_count = ch_max - ch_min + 1;
 8000ecc:	7a7a      	ldrb	r2, [r7, #9]
 8000ece:	7abb      	ldrb	r3, [r7, #10]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	607b      	str	r3, [r7, #4]

    for (uint8_t ch = ch_min; ch <= ch_max; ch++) {
 8000ed6:	7abb      	ldrb	r3, [r7, #10]
 8000ed8:	72fb      	strb	r3, [r7, #11]
 8000eda:	e012      	b.n	8000f02 <CC2500_RecalibrateNoiseFloor+0x56>
        CC2500_SetChannel(ch);
 8000edc:	7afb      	ldrb	r3, [r7, #11]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff ff1a 	bl	8000d18 <CC2500_SetChannel>
        HAL_Delay(3);
 8000ee4:	2003      	movs	r0, #3
 8000ee6:	f001 f8c7 	bl	8002078 <HAL_Delay>
        int8_t rssi = CC2500_ReadRSSI();
 8000eea:	f7ff ff26 	bl	8000d3a <CC2500_ReadRSSI>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	70fb      	strb	r3, [r7, #3]
        sum += rssi;
 8000ef2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ef6:	68fa      	ldr	r2, [r7, #12]
 8000ef8:	4413      	add	r3, r2
 8000efa:	60fb      	str	r3, [r7, #12]
    for (uint8_t ch = ch_min; ch <= ch_max; ch++) {
 8000efc:	7afb      	ldrb	r3, [r7, #11]
 8000efe:	3301      	adds	r3, #1
 8000f00:	72fb      	strb	r3, [r7, #11]
 8000f02:	7afa      	ldrb	r2, [r7, #11]
 8000f04:	7a7b      	ldrb	r3, [r7, #9]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d9e8      	bls.n	8000edc <CC2500_RecalibrateNoiseFloor+0x30>
    }

    CC2500_NoiseFloor = sum / sweep_count;
 8000f0a:	68fa      	ldr	r2, [r7, #12]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f12:	b25a      	sxtb	r2, r3
 8000f14:	4b08      	ldr	r3, [pc, #32]	@ (8000f38 <CC2500_RecalibrateNoiseFloor+0x8c>)
 8000f16:	701a      	strb	r2, [r3, #0]
    //starting threshold value:10 increase or deacrease to desired sensitivity. TODO Possibly integrate button to change this value.
    CC2500_DetectionThreshold = CC2500_NoiseFloor + 3;
 8000f18:	4b07      	ldr	r3, [pc, #28]	@ (8000f38 <CC2500_RecalibrateNoiseFloor+0x8c>)
 8000f1a:	f993 3000 	ldrsb.w	r3, [r3]
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	3303      	adds	r3, #3
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	b25a      	sxtb	r2, r3
 8000f26:	4b05      	ldr	r3, [pc, #20]	@ (8000f3c <CC2500_RecalibrateNoiseFloor+0x90>)
 8000f28:	701a      	strb	r2, [r3, #0]

}
 8000f2a:	bf00      	nop
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	0800a2b8 	.word	0x0800a2b8
 8000f38:	20000000 	.word	0x20000000
 8000f3c:	20000001 	.word	0x20000001

08000f40 <CC2500_SweepAndDetect>:

// Use sweep mode and read rssi to see if packets are being recieved on any channels, read strength, alert on noise floor threshold
void CC2500_SweepAndDetect(void) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
	for (uint8_t ch = CC2500_SWEEP_MIN; ch <= CC2500_SWEEP_MAX; ch++) {
 8000f46:	2300      	movs	r3, #0
 8000f48:	71fb      	strb	r3, [r7, #7]
 8000f4a:	e074      	b.n	8001036 <CC2500_SweepAndDetect+0xf6>
        CC2500_SetChannel(ch); //set channel
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff fee2 	bl	8000d18 <CC2500_SetChannel>
        HAL_Delay(3);
 8000f54:	2003      	movs	r0, #3
 8000f56:	f001 f88f 	bl	8002078 <HAL_Delay>
        int8_t rssi = CC2500_ReadRSSI(); //read signal strength on channel
 8000f5a:	f7ff feee 	bl	8000d3a <CC2500_ReadRSSI>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	71bb      	strb	r3, [r7, #6]


        //OUTPUT ON DETECTION
        if (rssi > CC2500_DetectionThreshold) { //only get here when spike is detected
 8000f62:	4b39      	ldr	r3, [pc, #228]	@ (8001048 <CC2500_SweepAndDetect+0x108>)
 8000f64:	f993 3000 	ldrsb.w	r3, [r3]
 8000f68:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	dd48      	ble.n	8001002 <CC2500_SweepAndDetect+0xc2>
        	CharLCD_Clear();
 8000f70:	f000 f996 	bl	80012a0 <CharLCD_Clear>
        	sprintf(chst,"ch:%d",ch);
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	461a      	mov	r2, r3
 8000f78:	4934      	ldr	r1, [pc, #208]	@ (800104c <CC2500_SweepAndDetect+0x10c>)
 8000f7a:	4835      	ldr	r0, [pc, #212]	@ (8001050 <CC2500_SweepAndDetect+0x110>)
 8000f7c:	f006 ff98 	bl	8007eb0 <siprintf>
        	CharLCD_Set_Cursor(0,7);
 8000f80:	2107      	movs	r1, #7
 8000f82:	2000      	movs	r0, #0
 8000f84:	f000 f967 	bl	8001256 <CharLCD_Set_Cursor>
        	CharLCD_Write_String(chst);
 8000f88:	4831      	ldr	r0, [pc, #196]	@ (8001050 <CC2500_SweepAndDetect+0x110>)
 8000f8a:	f000 f94f 	bl	800122c <CharLCD_Write_String>
        	CharLCD_Set_Cursor(1,7); // Set cursor to row 1, column 0
 8000f8e:	2107      	movs	r1, #7
 8000f90:	2001      	movs	r0, #1
 8000f92:	f000 f960 	bl	8001256 <CharLCD_Set_Cursor>
        	CharLCD_Write_String("DT!");
 8000f96:	482f      	ldr	r0, [pc, #188]	@ (8001054 <CC2500_SweepAndDetect+0x114>)
 8000f98:	f000 f948 	bl	800122c <CharLCD_Write_String>
        	HAL_Delay(3);
 8000f9c:	2003      	movs	r0, #3
 8000f9e:	f001 f86b 	bl	8002078 <HAL_Delay>
        	//Trigger alarm
        	Buzzer_On(523); // Tone 2: C5
 8000fa2:	f240 200b 	movw	r0, #523	@ 0x20b
 8000fa6:	f7ff fe09 	bl	8000bbc <Buzzer_On>
        	//scan again
        	CC2500_SetChannel(ch);
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff feb3 	bl	8000d18 <CC2500_SetChannel>
        	HAL_Delay(200);
 8000fb2:	20c8      	movs	r0, #200	@ 0xc8
 8000fb4:	f001 f860 	bl	8002078 <HAL_Delay>
        	rssi = CC2500_ReadRSSI();
 8000fb8:	f7ff febf 	bl	8000d3a <CC2500_ReadRSSI>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	71bb      	strb	r3, [r7, #6]
        	if (rssi > CC2500_DetectionThreshold){ //second round of detection if spike is detected
 8000fc0:	4b21      	ldr	r3, [pc, #132]	@ (8001048 <CC2500_SweepAndDetect+0x108>)
 8000fc2:	f993 3000 	ldrsb.w	r3, [r3]
 8000fc6:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	dd30      	ble.n	8001030 <CC2500_SweepAndDetect+0xf0>
        		CharLCD_Clear();
 8000fce:	f000 f967 	bl	80012a0 <CharLCD_Clear>
        		sprintf(chst,"ch:%d",ch);
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	491d      	ldr	r1, [pc, #116]	@ (800104c <CC2500_SweepAndDetect+0x10c>)
 8000fd8:	481d      	ldr	r0, [pc, #116]	@ (8001050 <CC2500_SweepAndDetect+0x110>)
 8000fda:	f006 ff69 	bl	8007eb0 <siprintf>
            	CharLCD_Set_Cursor(0,8);
 8000fde:	2108      	movs	r1, #8
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	f000 f938 	bl	8001256 <CharLCD_Set_Cursor>
            	CharLCD_Write_String(chst);
 8000fe6:	481a      	ldr	r0, [pc, #104]	@ (8001050 <CC2500_SweepAndDetect+0x110>)
 8000fe8:	f000 f920 	bl	800122c <CharLCD_Write_String>
            	CharLCD_Set_Cursor(1,8); // Set cursor to row 1, column 0
 8000fec:	2108      	movs	r1, #8
 8000fee:	2001      	movs	r0, #1
 8000ff0:	f000 f931 	bl	8001256 <CharLCD_Set_Cursor>
            	CharLCD_Write_String("DT2!");
 8000ff4:	4818      	ldr	r0, [pc, #96]	@ (8001058 <CC2500_SweepAndDetect+0x118>)
 8000ff6:	f000 f919 	bl	800122c <CharLCD_Write_String>
            	HAL_Delay(200);
 8000ffa:	20c8      	movs	r0, #200	@ 0xc8
 8000ffc:	f001 f83c 	bl	8002078 <HAL_Delay>
 8001000:	e016      	b.n	8001030 <CC2500_SweepAndDetect+0xf0>
        	}


        }
        else {
        	CharLCD_Set_Cursor(0,8); // Set cursor to row 0, column 0
 8001002:	2108      	movs	r1, #8
 8001004:	2000      	movs	r0, #0
 8001006:	f000 f926 	bl	8001256 <CharLCD_Set_Cursor>
        	CharLCD_Write_String("2.4GHZ: ");
 800100a:	4814      	ldr	r0, [pc, #80]	@ (800105c <CC2500_SweepAndDetect+0x11c>)
 800100c:	f000 f90e 	bl	800122c <CharLCD_Write_String>
        	CharLCD_Set_Cursor(1,8); // Set cursor to row 1, column 0
 8001010:	2108      	movs	r1, #8
 8001012:	2001      	movs	r0, #1
 8001014:	f000 f91f 	bl	8001256 <CharLCD_Set_Cursor>
        	sprintf(rssiString, "FL:%d", rssi);
 8001018:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800101c:	461a      	mov	r2, r3
 800101e:	4910      	ldr	r1, [pc, #64]	@ (8001060 <CC2500_SweepAndDetect+0x120>)
 8001020:	4810      	ldr	r0, [pc, #64]	@ (8001064 <CC2500_SweepAndDetect+0x124>)
 8001022:	f006 ff45 	bl	8007eb0 <siprintf>
        	CharLCD_Write_String(rssiString);
 8001026:	480f      	ldr	r0, [pc, #60]	@ (8001064 <CC2500_SweepAndDetect+0x124>)
 8001028:	f000 f900 	bl	800122c <CharLCD_Write_String>

        	//turn off alarm
        	Buzzer_Off();
 800102c:	f7ff fdf4 	bl	8000c18 <Buzzer_Off>
	for (uint8_t ch = CC2500_SWEEP_MIN; ch <= CC2500_SWEEP_MAX; ch++) {
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	3301      	adds	r3, #1
 8001034:	71fb      	strb	r3, [r7, #7]
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	2b2b      	cmp	r3, #43	@ 0x2b
 800103a:	d987      	bls.n	8000f4c <CC2500_SweepAndDetect+0xc>
        }
    }
}
 800103c:	bf00      	nop
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000001 	.word	0x20000001
 800104c:	0800a2c4 	.word	0x0800a2c4
 8001050:	20000204 	.word	0x20000204
 8001054:	0800a2cc 	.word	0x0800a2cc
 8001058:	0800a2d0 	.word	0x0800a2d0
 800105c:	0800a2d8 	.word	0x0800a2d8
 8001060:	0800a2e4 	.word	0x0800a2e4
 8001064:	200001f4 	.word	0x200001f4

08001068 <CC2500_RunSignalTest>:

void CC2500_RunSignalTest(void) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
//    CharLCD_Clear();
//    CharLCD_Set_Cursor(0, 0);
//    CharLCD_Write_String("Testing...");

    const uint8_t test_min = CC2500_SWEEP_MIN;
 800106e:	2300      	movs	r3, #0
 8001070:	73bb      	strb	r3, [r7, #14]
    const uint8_t test_max = CC2500_SWEEP_MAX;
 8001072:	232b      	movs	r3, #43	@ 0x2b
 8001074:	737b      	strb	r3, [r7, #13]
    const uint8_t margin = 6;
 8001076:	2306      	movs	r3, #6
 8001078:	733b      	strb	r3, [r7, #12]
    const int threshold = CC2500_NoiseFloor + margin;
 800107a:	4b15      	ldr	r3, [pc, #84]	@ (80010d0 <CC2500_RunSignalTest+0x68>)
 800107c:	f993 3000 	ldrsb.w	r3, [r3]
 8001080:	461a      	mov	r2, r3
 8001082:	7b3b      	ldrb	r3, [r7, #12]
 8001084:	4413      	add	r3, r2
 8001086:	60bb      	str	r3, [r7, #8]
    detected = false;
 8001088:	4b12      	ldr	r3, [pc, #72]	@ (80010d4 <CC2500_RunSignalTest+0x6c>)
 800108a:	2200      	movs	r2, #0
 800108c:	701a      	strb	r2, [r3, #0]

    for (uint8_t ch = test_min; ch <= test_max; ch++) {
 800108e:	7bbb      	ldrb	r3, [r7, #14]
 8001090:	73fb      	strb	r3, [r7, #15]
 8001092:	e013      	b.n	80010bc <CC2500_RunSignalTest+0x54>
        CC2500_SetChannel(ch);
 8001094:	7bfb      	ldrb	r3, [r7, #15]
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff fe3e 	bl	8000d18 <CC2500_SetChannel>
//        for (volatile int i = 0; i < 100000; i++);
        int8_t rssi = CC2500_ReadRSSI();
 800109c:	f7ff fe4d 	bl	8000d3a <CC2500_ReadRSSI>
 80010a0:	4603      	mov	r3, r0
 80010a2:	71fb      	strb	r3, [r7, #7]
        if (rssi > threshold) {
 80010a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a8:	68ba      	ldr	r2, [r7, #8]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	da03      	bge.n	80010b6 <CC2500_RunSignalTest+0x4e>
            detected = true;
 80010ae:	4b09      	ldr	r3, [pc, #36]	@ (80010d4 <CC2500_RunSignalTest+0x6c>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	701a      	strb	r2, [r3, #0]
            break;
 80010b4:	e007      	b.n	80010c6 <CC2500_RunSignalTest+0x5e>
    for (uint8_t ch = test_min; ch <= test_max; ch++) {
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	3301      	adds	r3, #1
 80010ba:	73fb      	strb	r3, [r7, #15]
 80010bc:	7bfa      	ldrb	r2, [r7, #15]
 80010be:	7b7b      	ldrb	r3, [r7, #13]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d9e7      	bls.n	8001094 <CC2500_RunSignalTest+0x2c>
//    if (detected) {
//        CharLCD_Write_String("TEST PASS");
//    } else {
//        CharLCD_Write_String("FAIL: NO SIG");
//    }
}
 80010c4:	bf00      	nop
 80010c6:	bf00      	nop
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000000 	.word	0x20000000
 80010d4:	20000214 	.word	0x20000214

080010d8 <CharLCD_Write_Nibble>:
 * @brief Write a 4-bit nibble to the LCD via I2C
 * @param nibble: 4-bit data to send (lower 4 bits)
 * @param dc: data/command (1 = data, 0 = command)
 * @retval None
 */
void CharLCD_Write_Nibble(uint8_t nibble, uint8_t dc) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af02      	add	r7, sp, #8
 80010de:	4603      	mov	r3, r0
 80010e0:	460a      	mov	r2, r1
 80010e2:	71fb      	strb	r3, [r7, #7]
 80010e4:	4613      	mov	r3, r2
 80010e6:	71bb      	strb	r3, [r7, #6]
 uint8_t data = nibble << D4_BIT; // Shift nibble to D4-D7 position
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	011b      	lsls	r3, r3, #4
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	73fb      	strb	r3, [r7, #15]
 data |= dc << DC_BIT; // Set DC bit for data/command selection
 80010f0:	7bfa      	ldrb	r2, [r7, #15]
 80010f2:	79bb      	ldrb	r3, [r7, #6]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	73fb      	strb	r3, [r7, #15]
 data |= 1 << BL_BIT; // Include backlight state in data
 80010fa:	7bfb      	ldrb	r3, [r7, #15]
 80010fc:	f043 0308 	orr.w	r3, r3, #8
 8001100:	b2db      	uxtb	r3, r3
 8001102:	73fb      	strb	r3, [r7, #15]
 data |= 1 << EN_BIT; // Set enable bit high
 8001104:	7bfb      	ldrb	r3, [r7, #15]
 8001106:	f043 0304 	orr.w	r3, r3, #4
 800110a:	b2db      	uxtb	r3, r3
 800110c:	73fb      	strb	r3, [r7, #15]
 HAL_I2C_Master_Transmit(hi2c, I2C_ADDR << 1, &data, 1, 100); // Send data with EN high
 800110e:	4b10      	ldr	r3, [pc, #64]	@ (8001150 <CharLCD_Write_Nibble+0x78>)
 8001110:	6818      	ldr	r0, [r3, #0]
 8001112:	f107 020f 	add.w	r2, r7, #15
 8001116:	2364      	movs	r3, #100	@ 0x64
 8001118:	9300      	str	r3, [sp, #0]
 800111a:	2301      	movs	r3, #1
 800111c:	214e      	movs	r1, #78	@ 0x4e
 800111e:	f002 fd79 	bl	8003c14 <HAL_I2C_Master_Transmit>
 HAL_Delay(1); // Wait for data setup
 8001122:	2001      	movs	r0, #1
 8001124:	f000 ffa8 	bl	8002078 <HAL_Delay>
 data &= ~(1 << EN_BIT); // Clear enable bit (falling edge triggers LCD)
 8001128:	7bfb      	ldrb	r3, [r7, #15]
 800112a:	f023 0304 	bic.w	r3, r3, #4
 800112e:	b2db      	uxtb	r3, r3
 8001130:	73fb      	strb	r3, [r7, #15]
 HAL_I2C_Master_Transmit(hi2c, I2C_ADDR << 1, &data, 1, 100); // Send data with EN low
 8001132:	4b07      	ldr	r3, [pc, #28]	@ (8001150 <CharLCD_Write_Nibble+0x78>)
 8001134:	6818      	ldr	r0, [r3, #0]
 8001136:	f107 020f 	add.w	r2, r7, #15
 800113a:	2364      	movs	r3, #100	@ 0x64
 800113c:	9300      	str	r3, [sp, #0]
 800113e:	2301      	movs	r3, #1
 8001140:	214e      	movs	r1, #78	@ 0x4e
 8001142:	f002 fd67 	bl	8003c14 <HAL_I2C_Master_Transmit>
}
 8001146:	bf00      	nop
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000218 	.word	0x20000218

08001154 <CharLCD_Send_Cmd>:
/**
 * @brief Send command to LCD
 * @param cmd: 8-bit command to send to LCD controller
 * @retval None
 */
void CharLCD_Send_Cmd(uint8_t cmd) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]
 uint8_t upper_nibble = cmd >> 4; // Extract upper 4 bits
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	091b      	lsrs	r3, r3, #4
 8001162:	73fb      	strb	r3, [r7, #15]
 uint8_t lower_nibble = cmd & 0x0F; // Extract lower 4 bits
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	f003 030f 	and.w	r3, r3, #15
 800116a:	73bb      	strb	r3, [r7, #14]
 CharLCD_Write_Nibble(upper_nibble, 0); // Send upper nibble (DC=0 for command)
 800116c:	7bfb      	ldrb	r3, [r7, #15]
 800116e:	2100      	movs	r1, #0
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ffb1 	bl	80010d8 <CharLCD_Write_Nibble>
 CharLCD_Write_Nibble(lower_nibble, 0); // Send lower nibble (DC=0 for command)
 8001176:	7bbb      	ldrb	r3, [r7, #14]
 8001178:	2100      	movs	r1, #0
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff ffac 	bl	80010d8 <CharLCD_Write_Nibble>
 if (cmd == 0x01 || cmd == 0x02) { // Clear display or return home commands
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d002      	beq.n	800118c <CharLCD_Send_Cmd+0x38>
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	2b02      	cmp	r3, #2
 800118a:	d102      	bne.n	8001192 <CharLCD_Send_Cmd+0x3e>
 HAL_Delay(2); // These commands need extra time
 800118c:	2002      	movs	r0, #2
 800118e:	f000 ff73 	bl	8002078 <HAL_Delay>
 }
}
 8001192:	bf00      	nop
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <CharLCD_Send_Data>:
/**
 * @brief Send data (character) to LCD
 * @param data: 8-bit character data to display
 * @retval None
 */
void CharLCD_Send_Data(uint8_t data) {
 800119a:	b580      	push	{r7, lr}
 800119c:	b084      	sub	sp, #16
 800119e:	af00      	add	r7, sp, #0
 80011a0:	4603      	mov	r3, r0
 80011a2:	71fb      	strb	r3, [r7, #7]
 uint8_t upper_nibble = data >> 4; // Extract upper 4 bits
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	091b      	lsrs	r3, r3, #4
 80011a8:	73fb      	strb	r3, [r7, #15]
 uint8_t lower_nibble = data & 0x0F; // Extract lower 4 bits
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	f003 030f 	and.w	r3, r3, #15
 80011b0:	73bb      	strb	r3, [r7, #14]
 CharLCD_Write_Nibble(upper_nibble, 1); // Send upper nibble (DC=1 for data)
 80011b2:	7bfb      	ldrb	r3, [r7, #15]
 80011b4:	2101      	movs	r1, #1
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff ff8e 	bl	80010d8 <CharLCD_Write_Nibble>
 CharLCD_Write_Nibble(lower_nibble, 1); // Send lower nibble (DC=1 for data)
 80011bc:	7bbb      	ldrb	r3, [r7, #14]
 80011be:	2101      	movs	r1, #1
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff ff89 	bl	80010d8 <CharLCD_Write_Nibble>
}
 80011c6:	bf00      	nop
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <CharLCD_Init>:
/**
 * @brief Initialize LCD in 4-bit mode via I2C
 * @param None
 * @retval None
 */
void CharLCD_Init() {
 80011ce:	b580      	push	{r7, lr}
 80011d0:	af00      	add	r7, sp, #0
 HAL_Delay(50); // Wait for LCD power-on reset (>40ms)
 80011d2:	2032      	movs	r0, #50	@ 0x32
 80011d4:	f000 ff50 	bl	8002078 <HAL_Delay>
 CharLCD_Write_Nibble(0x03, 0); // Function set: 8-bit mode (first attempt)
 80011d8:	2100      	movs	r1, #0
 80011da:	2003      	movs	r0, #3
 80011dc:	f7ff ff7c 	bl	80010d8 <CharLCD_Write_Nibble>
 HAL_Delay(5); // Wait >4.1ms
 80011e0:	2005      	movs	r0, #5
 80011e2:	f000 ff49 	bl	8002078 <HAL_Delay>
 CharLCD_Write_Nibble(0x03, 0); // Function set: 8-bit mode (second attempt)
 80011e6:	2100      	movs	r1, #0
 80011e8:	2003      	movs	r0, #3
 80011ea:	f7ff ff75 	bl	80010d8 <CharLCD_Write_Nibble>
 HAL_Delay(1); // Wait >100us
 80011ee:	2001      	movs	r0, #1
 80011f0:	f000 ff42 	bl	8002078 <HAL_Delay>
 CharLCD_Write_Nibble(0x03, 0); // Function set: 8-bit mode (third attempt)
 80011f4:	2100      	movs	r1, #0
 80011f6:	2003      	movs	r0, #3
 80011f8:	f7ff ff6e 	bl	80010d8 <CharLCD_Write_Nibble>
 HAL_Delay(1); // Wait >100us
 80011fc:	2001      	movs	r0, #1
 80011fe:	f000 ff3b 	bl	8002078 <HAL_Delay>
 CharLCD_Write_Nibble(0x02, 0); // Function set: switch to 4-bit mode
 8001202:	2100      	movs	r1, #0
 8001204:	2002      	movs	r0, #2
 8001206:	f7ff ff67 	bl	80010d8 <CharLCD_Write_Nibble>
 CharLCD_Send_Cmd(0x28); // Function set: 4-bit, 2 lines, 5x8 font
 800120a:	2028      	movs	r0, #40	@ 0x28
 800120c:	f7ff ffa2 	bl	8001154 <CharLCD_Send_Cmd>
 CharLCD_Send_Cmd(0x0C); // Display control: display on/cursor off/blink off
 8001210:	200c      	movs	r0, #12
 8001212:	f7ff ff9f 	bl	8001154 <CharLCD_Send_Cmd>
 CharLCD_Send_Cmd(0x06); // Entry mode: increment cursor, no shift
 8001216:	2006      	movs	r0, #6
 8001218:	f7ff ff9c 	bl	8001154 <CharLCD_Send_Cmd>
 CharLCD_Send_Cmd(0x01); // Clear display
 800121c:	2001      	movs	r0, #1
 800121e:	f7ff ff99 	bl	8001154 <CharLCD_Send_Cmd>
 HAL_Delay(2); // Wait for clear display command
 8001222:	2002      	movs	r0, #2
 8001224:	f000 ff28 	bl	8002078 <HAL_Delay>
}
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}

0800122c <CharLCD_Write_String>:
/**
 * @brief Write string to LCD at current cursor position
 * @param str: Pointer to null-terminated string
 * @retval None
 */
void CharLCD_Write_String(char *str) {
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 while (*str) { // Loop until null terminator
 8001234:	e006      	b.n	8001244 <CharLCD_Write_String+0x18>
 CharLCD_Send_Data(*str++); // Send each character and increment pointer
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	1c5a      	adds	r2, r3, #1
 800123a:	607a      	str	r2, [r7, #4]
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff ffab 	bl	800119a <CharLCD_Send_Data>
 while (*str) { // Loop until null terminator
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d1f4      	bne.n	8001236 <CharLCD_Write_String+0xa>
 }
}
 800124c:	bf00      	nop
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <CharLCD_Set_Cursor>:
 * @brief Set cursor position on LCD
 * @param row: Row number (0 or 1 for 2-line display)
 * @param column: Column number (0 to display width - 1)
 * @retval None
 */
void CharLCD_Set_Cursor(uint8_t row, uint8_t column) {
 8001256:	b580      	push	{r7, lr}
 8001258:	b084      	sub	sp, #16
 800125a:	af00      	add	r7, sp, #0
 800125c:	4603      	mov	r3, r0
 800125e:	460a      	mov	r2, r1
 8001260:	71fb      	strb	r3, [r7, #7]
 8001262:	4613      	mov	r3, r2
 8001264:	71bb      	strb	r3, [r7, #6]
 uint8_t address;
 switch (row) {
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d002      	beq.n	8001272 <CharLCD_Set_Cursor+0x1c>
 800126c:	2b01      	cmp	r3, #1
 800126e:	d003      	beq.n	8001278 <CharLCD_Set_Cursor+0x22>
 8001270:	e005      	b.n	800127e <CharLCD_Set_Cursor+0x28>
 case 0:
 address = 0x00; break; // First line starts at address 0x00
 8001272:	2300      	movs	r3, #0
 8001274:	73fb      	strb	r3, [r7, #15]
 8001276:	e004      	b.n	8001282 <CharLCD_Set_Cursor+0x2c>
 case 1:
 address = 0x40; break; // Second line starts at address 0x40
 8001278:	2340      	movs	r3, #64	@ 0x40
 800127a:	73fb      	strb	r3, [r7, #15]
 800127c:	e001      	b.n	8001282 <CharLCD_Set_Cursor+0x2c>
 default:
 address = 0x00; // Default to first line for invalid row
 800127e:	2300      	movs	r3, #0
 8001280:	73fb      	strb	r3, [r7, #15]
 }
 address += column; // Add column offset
 8001282:	7bfa      	ldrb	r2, [r7, #15]
 8001284:	79bb      	ldrb	r3, [r7, #6]
 8001286:	4413      	add	r3, r2
 8001288:	73fb      	strb	r3, [r7, #15]
 CharLCD_Send_Cmd(0x80 | address); // Set DDRAM address command (0x80 + address)
 800128a:	7bfb      	ldrb	r3, [r7, #15]
 800128c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001290:	b2db      	uxtb	r3, r3
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff ff5e 	bl	8001154 <CharLCD_Send_Cmd>
}
 8001298:	bf00      	nop
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <CharLCD_Clear>:
/**
 * @brief Clear LCD display and return cursor to home position
 * @param None
 * @retval None
 */
void CharLCD_Clear(void) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
 CharLCD_Send_Cmd(0x01); // Clear display command
 80012a4:	2001      	movs	r0, #1
 80012a6:	f7ff ff55 	bl	8001154 <CharLCD_Send_Cmd>
 HAL_Delay(2); // Wait for command execution
 80012aa:	2002      	movs	r0, #2
 80012ac:	f000 fee4 	bl	8002078 <HAL_Delay>
}
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <RecieveHandles>:

//pass handles in from main
void RecieveHandles(I2C_HandleTypeDef* handle){
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
	hi2c = handle;
 80012bc:	4a04      	ldr	r2, [pc, #16]	@ (80012d0 <RecieveHandles+0x1c>)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6013      	str	r3, [r2, #0]
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	20000218 	.word	0x20000218

080012d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012da:	f000 fe51 	bl	8001f80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012de:	f000 f8c7 	bl	8001470 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  RecieveHandles(&hi2c1);
 80012e2:	4857      	ldr	r0, [pc, #348]	@ (8001440 <main+0x16c>)
 80012e4:	f7ff ffe6 	bl	80012b4 <RecieveHandles>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012e8:	f000 fa98 	bl	800181c <MX_GPIO_Init>
  MX_ADC1_Init();
 80012ec:	f000 f912 	bl	8001514 <MX_ADC1_Init>
  MX_I2C1_Init();
 80012f0:	f000 f986 	bl	8001600 <MX_I2C1_Init>
  MX_SPI1_Init();
 80012f4:	f000 f9c4 	bl	8001680 <MX_SPI1_Init>
  MX_TIM1_Init();
 80012f8:	f000 fa00 	bl	80016fc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  Buzzer_Init();
 80012fc:	f7ff fc54 	bl	8000ba8 <Buzzer_Init>
  //play tone to signal turn on
  Buzzer_On(440); // Tone 1: A4
 8001300:	f44f 70dc 	mov.w	r0, #440	@ 0x1b8
 8001304:	f7ff fc5a 	bl	8000bbc <Buzzer_On>
  HAL_Delay(100);
 8001308:	2064      	movs	r0, #100	@ 0x64
 800130a:	f000 feb5 	bl	8002078 <HAL_Delay>
  Buzzer_Off();
 800130e:	f7ff fc83 	bl	8000c18 <Buzzer_Off>

  Buzzer_On(523); // Tone 2: C5
 8001312:	f240 200b 	movw	r0, #523	@ 0x20b
 8001316:	f7ff fc51 	bl	8000bbc <Buzzer_On>
  HAL_Delay(100);
 800131a:	2064      	movs	r0, #100	@ 0x64
 800131c:	f000 feac 	bl	8002078 <HAL_Delay>
  Buzzer_Off();
 8001320:	f7ff fc7a 	bl	8000c18 <Buzzer_Off>

  Buzzer_On(659); // Tone 3: E5
 8001324:	f240 2093 	movw	r0, #659	@ 0x293
 8001328:	f7ff fc48 	bl	8000bbc <Buzzer_On>
  HAL_Delay(100);
 800132c:	2064      	movs	r0, #100	@ 0x64
 800132e:	f000 fea3 	bl	8002078 <HAL_Delay>
  Buzzer_Off();
 8001332:	f7ff fc71 	bl	8000c18 <Buzzer_Off>

  Buzzer_On(784); // Tone 4: G5
 8001336:	f44f 7044 	mov.w	r0, #784	@ 0x310
 800133a:	f7ff fc3f 	bl	8000bbc <Buzzer_On>
  HAL_Delay(100);
 800133e:	2064      	movs	r0, #100	@ 0x64
 8001340:	f000 fe9a 	bl	8002078 <HAL_Delay>
  Buzzer_Off();
 8001344:	f7ff fc68 	bl	8000c18 <Buzzer_Off>

  CharLCD_Clear();
 8001348:	f7ff ffaa 	bl	80012a0 <CharLCD_Clear>
  CharLCD_Init(); // Initialize the LCD
 800134c:	f7ff ff3f 	bl	80011ce <CharLCD_Init>
  CharLCD_Set_Cursor(0,0); // Set cursor to row 0, column 0
 8001350:	2100      	movs	r1, #0
 8001352:	2000      	movs	r0, #0
 8001354:	f7ff ff7f 	bl	8001256 <CharLCD_Set_Cursor>
  CharLCD_Write_String("INITLZING...");
 8001358:	483a      	ldr	r0, [pc, #232]	@ (8001444 <main+0x170>)
 800135a:	f7ff ff67 	bl	800122c <CharLCD_Write_String>
  CharLCD_Set_Cursor(1,0); // Set cursor to row 1, column 0
 800135e:	2100      	movs	r1, #0
 8001360:	2001      	movs	r0, #1
 8001362:	f7ff ff78 	bl	8001256 <CharLCD_Set_Cursor>
  CharLCD_Write_String("CLIBRTING...");
 8001366:	4838      	ldr	r0, [pc, #224]	@ (8001448 <main+0x174>)
 8001368:	f7ff ff60 	bl	800122c <CharLCD_Write_String>

  //initialize the cc2500 chip
  CharLCD_Clear();
 800136c:	f7ff ff98 	bl	80012a0 <CharLCD_Clear>
  CC2500_Init(); //includes initial calibration
 8001370:	f7ff fd6c 	bl	8000e4c <CC2500_Init>

  //calibrate log noise floor
  LogDetector_RecalibrateNoiseFloor();
 8001374:	f000 fac0 	bl	80018f8 <LogDetector_RecalibrateNoiseFloor>

  CharLCD_Clear();
 8001378:	f7ff ff92 	bl	80012a0 <CharLCD_Clear>
  CharLCD_Set_Cursor(0,0); // Set cursor to row 0, column 0
 800137c:	2100      	movs	r1, #0
 800137e:	2000      	movs	r0, #0
 8001380:	f7ff ff69 	bl	8001256 <CharLCD_Set_Cursor>
  CharLCD_Write_String("5.8GHZ:  2.4GHZ:");
 8001384:	4831      	ldr	r0, [pc, #196]	@ (800144c <main+0x178>)
 8001386:	f7ff ff51 	bl	800122c <CharLCD_Write_String>
  CharLCD_Set_Cursor(1,0); // Set cursor to row 1, column 0
 800138a:	2100      	movs	r1, #0
 800138c:	2001      	movs	r0, #1
 800138e:	f7ff ff62 	bl	8001256 <CharLCD_Set_Cursor>
  CharLCD_Write_String("0.0V");
 8001392:	482f      	ldr	r0, [pc, #188]	@ (8001450 <main+0x17c>)
 8001394:	f7ff ff4a 	bl	800122c <CharLCD_Write_String>
  while (1)
  {
	  //TODO make timer to re calibrate noise floors.
	  //Detect with log detector
	  // Start the ADC
	  HAL_ADC_Start(&hadc1);
 8001398:	482e      	ldr	r0, [pc, #184]	@ (8001454 <main+0x180>)
 800139a:	f001 f9c5 	bl	8002728 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800139e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80013a2:	482c      	ldr	r0, [pc, #176]	@ (8001454 <main+0x180>)
 80013a4:	f001 fa7a 	bl	800289c <HAL_ADC_PollForConversion>

	  // Read ADC value and convert to voltage
	  uint16_t logInputValue = HAL_ADC_GetValue(&hadc1);
 80013a8:	482a      	ldr	r0, [pc, #168]	@ (8001454 <main+0x180>)
 80013aa:	f001 fb4f 	bl	8002a4c <HAL_ADC_GetValue>
 80013ae:	4603      	mov	r3, r0
 80013b0:	80fb      	strh	r3, [r7, #6]
	  float voltage = (logInputValue / 4095.0f) * 3.3f;
 80013b2:	88fb      	ldrh	r3, [r7, #6]
 80013b4:	ee07 3a90 	vmov	s15, r3
 80013b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013bc:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8001458 <main+0x184>
 80013c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013c4:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 800145c <main+0x188>
 80013c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013cc:	edc7 7a00 	vstr	s15, [r7]

	  // Check against calibrated threshold
	  if (voltage >= LogDetector_DetectionThreshold) {
 80013d0:	4b23      	ldr	r3, [pc, #140]	@ (8001460 <main+0x18c>)
 80013d2:	edd3 7a00 	vldr	s15, [r3]
 80013d6:	ed97 7a00 	vldr	s14, [r7]
 80013da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e2:	db18      	blt.n	8001416 <main+0x142>
	      sprintf(logMessage, "DT!:%.1f", voltage);
 80013e4:	6838      	ldr	r0, [r7, #0]
 80013e6:	f7ff f8af 	bl	8000548 <__aeabi_f2d>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	491d      	ldr	r1, [pc, #116]	@ (8001464 <main+0x190>)
 80013f0:	481d      	ldr	r0, [pc, #116]	@ (8001468 <main+0x194>)
 80013f2:	f006 fd5d 	bl	8007eb0 <siprintf>
	      CharLCD_Set_Cursor(1, 0);
 80013f6:	2100      	movs	r1, #0
 80013f8:	2001      	movs	r0, #1
 80013fa:	f7ff ff2c 	bl	8001256 <CharLCD_Set_Cursor>
	      CharLCD_Write_String(logMessage);
 80013fe:	481a      	ldr	r0, [pc, #104]	@ (8001468 <main+0x194>)
 8001400:	f7ff ff14 	bl	800122c <CharLCD_Write_String>
	      //BUZZER ON TILL NEXT CYCLE
	      Buzzer_On(440); // Tone 1: A4
 8001404:	f44f 70dc 	mov.w	r0, #440	@ 0x1b8
 8001408:	f7ff fbd8 	bl	8000bbc <Buzzer_On>
	      HAL_Delay(300);
 800140c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001410:	f000 fe32 	bl	8002078 <HAL_Delay>
 8001414:	e011      	b.n	800143a <main+0x166>
	  }
	  else{
	      sprintf(logMessage, "FL:%.2f ", voltage);
 8001416:	6838      	ldr	r0, [r7, #0]
 8001418:	f7ff f896 	bl	8000548 <__aeabi_f2d>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	4912      	ldr	r1, [pc, #72]	@ (800146c <main+0x198>)
 8001422:	4811      	ldr	r0, [pc, #68]	@ (8001468 <main+0x194>)
 8001424:	f006 fd44 	bl	8007eb0 <siprintf>
	      CharLCD_Set_Cursor(1, 0);
 8001428:	2100      	movs	r1, #0
 800142a:	2001      	movs	r0, #1
 800142c:	f7ff ff13 	bl	8001256 <CharLCD_Set_Cursor>
	      CharLCD_Write_String(logMessage);
 8001430:	480d      	ldr	r0, [pc, #52]	@ (8001468 <main+0x194>)
 8001432:	f7ff fefb 	bl	800122c <CharLCD_Write_String>
	      //BUZZER OFF TILL NEXT DETECT
	      Buzzer_Off();
 8001436:	f7ff fbef 	bl	8000c18 <Buzzer_Off>
	  }

	  //Sweep and detect with cc2500 chip
	  CC2500_SweepAndDetect();
 800143a:	f7ff fd81 	bl	8000f40 <CC2500_SweepAndDetect>
  {
 800143e:	e7ab      	b.n	8001398 <main+0xc4>
 8001440:	20000280 	.word	0x20000280
 8001444:	0800a2ec 	.word	0x0800a2ec
 8001448:	0800a2fc 	.word	0x0800a2fc
 800144c:	0800a30c 	.word	0x0800a30c
 8001450:	0800a320 	.word	0x0800a320
 8001454:	2000021c 	.word	0x2000021c
 8001458:	457ff000 	.word	0x457ff000
 800145c:	40533333 	.word	0x40533333
 8001460:	200003ec 	.word	0x200003ec
 8001464:	0800a328 	.word	0x0800a328
 8001468:	20000384 	.word	0x20000384
 800146c:	0800a334 	.word	0x0800a334

08001470 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b096      	sub	sp, #88	@ 0x58
 8001474:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001476:	f107 0314 	add.w	r3, r7, #20
 800147a:	2244      	movs	r2, #68	@ 0x44
 800147c:	2100      	movs	r1, #0
 800147e:	4618      	mov	r0, r3
 8001480:	f006 fdfa 	bl	8008078 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001484:	463b      	mov	r3, r7
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	605a      	str	r2, [r3, #4]
 800148c:	609a      	str	r2, [r3, #8]
 800148e:	60da      	str	r2, [r3, #12]
 8001490:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001492:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001496:	f002 ff95 	bl	80043c4 <HAL_PWREx_ControlVoltageScaling>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80014a0:	f000 fa8c 	bl	80019bc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014a4:	2302      	movs	r3, #2
 80014a6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014ac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014ae:	2310      	movs	r3, #16
 80014b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014b2:	2302      	movs	r3, #2
 80014b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014b6:	2302      	movs	r3, #2
 80014b8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80014ba:	2301      	movs	r3, #1
 80014bc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80014be:	230a      	movs	r3, #10
 80014c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80014c2:	2307      	movs	r3, #7
 80014c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014c6:	2302      	movs	r3, #2
 80014c8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014ca:	2302      	movs	r3, #2
 80014cc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	4618      	mov	r0, r3
 80014d4:	f002 ffcc 	bl	8004470 <HAL_RCC_OscConfig>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80014de:	f000 fa6d 	bl	80019bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014e2:	230f      	movs	r3, #15
 80014e4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014e6:	2303      	movs	r3, #3
 80014e8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ea:	2300      	movs	r3, #0
 80014ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014f2:	2300      	movs	r3, #0
 80014f4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014f6:	463b      	mov	r3, r7
 80014f8:	2104      	movs	r1, #4
 80014fa:	4618      	mov	r0, r3
 80014fc:	f003 fb94 	bl	8004c28 <HAL_RCC_ClockConfig>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001506:	f000 fa59 	bl	80019bc <Error_Handler>
  }
}
 800150a:	bf00      	nop
 800150c:	3758      	adds	r7, #88	@ 0x58
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
	...

08001514 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08a      	sub	sp, #40	@ 0x28
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800151a:	f107 031c 	add.w	r3, r7, #28
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
 8001534:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001536:	4b2f      	ldr	r3, [pc, #188]	@ (80015f4 <MX_ADC1_Init+0xe0>)
 8001538:	4a2f      	ldr	r2, [pc, #188]	@ (80015f8 <MX_ADC1_Init+0xe4>)
 800153a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800153c:	4b2d      	ldr	r3, [pc, #180]	@ (80015f4 <MX_ADC1_Init+0xe0>)
 800153e:	2200      	movs	r2, #0
 8001540:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001542:	4b2c      	ldr	r3, [pc, #176]	@ (80015f4 <MX_ADC1_Init+0xe0>)
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001548:	4b2a      	ldr	r3, [pc, #168]	@ (80015f4 <MX_ADC1_Init+0xe0>)
 800154a:	2200      	movs	r2, #0
 800154c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800154e:	4b29      	ldr	r3, [pc, #164]	@ (80015f4 <MX_ADC1_Init+0xe0>)
 8001550:	2200      	movs	r2, #0
 8001552:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001554:	4b27      	ldr	r3, [pc, #156]	@ (80015f4 <MX_ADC1_Init+0xe0>)
 8001556:	2204      	movs	r2, #4
 8001558:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800155a:	4b26      	ldr	r3, [pc, #152]	@ (80015f4 <MX_ADC1_Init+0xe0>)
 800155c:	2200      	movs	r2, #0
 800155e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001560:	4b24      	ldr	r3, [pc, #144]	@ (80015f4 <MX_ADC1_Init+0xe0>)
 8001562:	2200      	movs	r2, #0
 8001564:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001566:	4b23      	ldr	r3, [pc, #140]	@ (80015f4 <MX_ADC1_Init+0xe0>)
 8001568:	2201      	movs	r2, #1
 800156a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800156c:	4b21      	ldr	r3, [pc, #132]	@ (80015f4 <MX_ADC1_Init+0xe0>)
 800156e:	2200      	movs	r2, #0
 8001570:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001574:	4b1f      	ldr	r3, [pc, #124]	@ (80015f4 <MX_ADC1_Init+0xe0>)
 8001576:	2200      	movs	r2, #0
 8001578:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800157a:	4b1e      	ldr	r3, [pc, #120]	@ (80015f4 <MX_ADC1_Init+0xe0>)
 800157c:	2200      	movs	r2, #0
 800157e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001580:	4b1c      	ldr	r3, [pc, #112]	@ (80015f4 <MX_ADC1_Init+0xe0>)
 8001582:	2200      	movs	r2, #0
 8001584:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001588:	4b1a      	ldr	r3, [pc, #104]	@ (80015f4 <MX_ADC1_Init+0xe0>)
 800158a:	2200      	movs	r2, #0
 800158c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800158e:	4b19      	ldr	r3, [pc, #100]	@ (80015f4 <MX_ADC1_Init+0xe0>)
 8001590:	2200      	movs	r2, #0
 8001592:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001596:	4817      	ldr	r0, [pc, #92]	@ (80015f4 <MX_ADC1_Init+0xe0>)
 8001598:	f000 ff76 	bl	8002488 <HAL_ADC_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80015a2:	f000 fa0b 	bl	80019bc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80015a6:	2300      	movs	r3, #0
 80015a8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80015aa:	f107 031c 	add.w	r3, r7, #28
 80015ae:	4619      	mov	r1, r3
 80015b0:	4810      	ldr	r0, [pc, #64]	@ (80015f4 <MX_ADC1_Init+0xe0>)
 80015b2:	f001 fef7 	bl	80033a4 <HAL_ADCEx_MultiModeConfigChannel>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80015bc:	f000 f9fe 	bl	80019bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80015c0:	4b0e      	ldr	r3, [pc, #56]	@ (80015fc <MX_ADC1_Init+0xe8>)
 80015c2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015c4:	2306      	movs	r3, #6
 80015c6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80015c8:	2300      	movs	r3, #0
 80015ca:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80015cc:	237f      	movs	r3, #127	@ 0x7f
 80015ce:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015d0:	2304      	movs	r3, #4
 80015d2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015d8:	1d3b      	adds	r3, r7, #4
 80015da:	4619      	mov	r1, r3
 80015dc:	4805      	ldr	r0, [pc, #20]	@ (80015f4 <MX_ADC1_Init+0xe0>)
 80015de:	f001 fa43 	bl	8002a68 <HAL_ADC_ConfigChannel>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80015e8:	f000 f9e8 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015ec:	bf00      	nop
 80015ee:	3728      	adds	r7, #40	@ 0x28
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	2000021c 	.word	0x2000021c
 80015f8:	50040000 	.word	0x50040000
 80015fc:	14f00020 	.word	0x14f00020

08001600 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001604:	4b1b      	ldr	r3, [pc, #108]	@ (8001674 <MX_I2C1_Init+0x74>)
 8001606:	4a1c      	ldr	r2, [pc, #112]	@ (8001678 <MX_I2C1_Init+0x78>)
 8001608:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 800160a:	4b1a      	ldr	r3, [pc, #104]	@ (8001674 <MX_I2C1_Init+0x74>)
 800160c:	4a1b      	ldr	r2, [pc, #108]	@ (800167c <MX_I2C1_Init+0x7c>)
 800160e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001610:	4b18      	ldr	r3, [pc, #96]	@ (8001674 <MX_I2C1_Init+0x74>)
 8001612:	2200      	movs	r2, #0
 8001614:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001616:	4b17      	ldr	r3, [pc, #92]	@ (8001674 <MX_I2C1_Init+0x74>)
 8001618:	2201      	movs	r2, #1
 800161a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800161c:	4b15      	ldr	r3, [pc, #84]	@ (8001674 <MX_I2C1_Init+0x74>)
 800161e:	2200      	movs	r2, #0
 8001620:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001622:	4b14      	ldr	r3, [pc, #80]	@ (8001674 <MX_I2C1_Init+0x74>)
 8001624:	2200      	movs	r2, #0
 8001626:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001628:	4b12      	ldr	r3, [pc, #72]	@ (8001674 <MX_I2C1_Init+0x74>)
 800162a:	2200      	movs	r2, #0
 800162c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800162e:	4b11      	ldr	r3, [pc, #68]	@ (8001674 <MX_I2C1_Init+0x74>)
 8001630:	2200      	movs	r2, #0
 8001632:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001634:	4b0f      	ldr	r3, [pc, #60]	@ (8001674 <MX_I2C1_Init+0x74>)
 8001636:	2200      	movs	r2, #0
 8001638:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800163a:	480e      	ldr	r0, [pc, #56]	@ (8001674 <MX_I2C1_Init+0x74>)
 800163c:	f002 fa4e 	bl	8003adc <HAL_I2C_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001646:	f000 f9b9 	bl	80019bc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800164a:	2100      	movs	r1, #0
 800164c:	4809      	ldr	r0, [pc, #36]	@ (8001674 <MX_I2C1_Init+0x74>)
 800164e:	f002 fe13 	bl	8004278 <HAL_I2CEx_ConfigAnalogFilter>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001658:	f000 f9b0 	bl	80019bc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800165c:	2100      	movs	r1, #0
 800165e:	4805      	ldr	r0, [pc, #20]	@ (8001674 <MX_I2C1_Init+0x74>)
 8001660:	f002 fe55 	bl	800430e <HAL_I2CEx_ConfigDigitalFilter>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800166a:	f000 f9a7 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20000280 	.word	0x20000280
 8001678:	40005400 	.word	0x40005400
 800167c:	10d19ce4 	.word	0x10d19ce4

08001680 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001684:	4b1b      	ldr	r3, [pc, #108]	@ (80016f4 <MX_SPI1_Init+0x74>)
 8001686:	4a1c      	ldr	r2, [pc, #112]	@ (80016f8 <MX_SPI1_Init+0x78>)
 8001688:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800168a:	4b1a      	ldr	r3, [pc, #104]	@ (80016f4 <MX_SPI1_Init+0x74>)
 800168c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001690:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001692:	4b18      	ldr	r3, [pc, #96]	@ (80016f4 <MX_SPI1_Init+0x74>)
 8001694:	2200      	movs	r2, #0
 8001696:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001698:	4b16      	ldr	r3, [pc, #88]	@ (80016f4 <MX_SPI1_Init+0x74>)
 800169a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800169e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016a0:	4b14      	ldr	r3, [pc, #80]	@ (80016f4 <MX_SPI1_Init+0x74>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016a6:	4b13      	ldr	r3, [pc, #76]	@ (80016f4 <MX_SPI1_Init+0x74>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016ac:	4b11      	ldr	r3, [pc, #68]	@ (80016f4 <MX_SPI1_Init+0x74>)
 80016ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016b2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80016b4:	4b0f      	ldr	r3, [pc, #60]	@ (80016f4 <MX_SPI1_Init+0x74>)
 80016b6:	2220      	movs	r2, #32
 80016b8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016ba:	4b0e      	ldr	r3, [pc, #56]	@ (80016f4 <MX_SPI1_Init+0x74>)
 80016bc:	2200      	movs	r2, #0
 80016be:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016c0:	4b0c      	ldr	r3, [pc, #48]	@ (80016f4 <MX_SPI1_Init+0x74>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016c6:	4b0b      	ldr	r3, [pc, #44]	@ (80016f4 <MX_SPI1_Init+0x74>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80016cc:	4b09      	ldr	r3, [pc, #36]	@ (80016f4 <MX_SPI1_Init+0x74>)
 80016ce:	2207      	movs	r2, #7
 80016d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80016d2:	4b08      	ldr	r3, [pc, #32]	@ (80016f4 <MX_SPI1_Init+0x74>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016d8:	4b06      	ldr	r3, [pc, #24]	@ (80016f4 <MX_SPI1_Init+0x74>)
 80016da:	2208      	movs	r2, #8
 80016dc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016de:	4805      	ldr	r0, [pc, #20]	@ (80016f4 <MX_SPI1_Init+0x74>)
 80016e0:	f004 f94a 	bl	8005978 <HAL_SPI_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80016ea:	f000 f967 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	200002d4 	.word	0x200002d4
 80016f8:	40013000 	.word	0x40013000

080016fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b096      	sub	sp, #88	@ 0x58
 8001700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001702:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800170e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	609a      	str	r2, [r3, #8]
 800171a:	60da      	str	r2, [r3, #12]
 800171c:	611a      	str	r2, [r3, #16]
 800171e:	615a      	str	r2, [r3, #20]
 8001720:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001722:	1d3b      	adds	r3, r7, #4
 8001724:	222c      	movs	r2, #44	@ 0x2c
 8001726:	2100      	movs	r1, #0
 8001728:	4618      	mov	r0, r3
 800172a:	f006 fca5 	bl	8008078 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800172e:	4b39      	ldr	r3, [pc, #228]	@ (8001814 <MX_TIM1_Init+0x118>)
 8001730:	4a39      	ldr	r2, [pc, #228]	@ (8001818 <MX_TIM1_Init+0x11c>)
 8001732:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 8001734:	4b37      	ldr	r3, [pc, #220]	@ (8001814 <MX_TIM1_Init+0x118>)
 8001736:	224f      	movs	r2, #79	@ 0x4f
 8001738:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800173a:	4b36      	ldr	r3, [pc, #216]	@ (8001814 <MX_TIM1_Init+0x118>)
 800173c:	2200      	movs	r2, #0
 800173e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001740:	4b34      	ldr	r3, [pc, #208]	@ (8001814 <MX_TIM1_Init+0x118>)
 8001742:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001746:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001748:	4b32      	ldr	r3, [pc, #200]	@ (8001814 <MX_TIM1_Init+0x118>)
 800174a:	2200      	movs	r2, #0
 800174c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800174e:	4b31      	ldr	r3, [pc, #196]	@ (8001814 <MX_TIM1_Init+0x118>)
 8001750:	2200      	movs	r2, #0
 8001752:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001754:	4b2f      	ldr	r3, [pc, #188]	@ (8001814 <MX_TIM1_Init+0x118>)
 8001756:	2200      	movs	r2, #0
 8001758:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800175a:	482e      	ldr	r0, [pc, #184]	@ (8001814 <MX_TIM1_Init+0x118>)
 800175c:	f005 f838 	bl	80067d0 <HAL_TIM_PWM_Init>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001766:	f000 f929 	bl	80019bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800176a:	2300      	movs	r3, #0
 800176c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800176e:	2300      	movs	r3, #0
 8001770:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001772:	2300      	movs	r3, #0
 8001774:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001776:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800177a:	4619      	mov	r1, r3
 800177c:	4825      	ldr	r0, [pc, #148]	@ (8001814 <MX_TIM1_Init+0x118>)
 800177e:	f005 fe3b 	bl	80073f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001788:	f000 f918 	bl	80019bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800178c:	2360      	movs	r3, #96	@ 0x60
 800178e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001790:	2300      	movs	r3, #0
 8001792:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001794:	2300      	movs	r3, #0
 8001796:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001798:	2300      	movs	r3, #0
 800179a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800179c:	2300      	movs	r3, #0
 800179e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017a0:	2300      	movs	r3, #0
 80017a2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017a4:	2300      	movs	r3, #0
 80017a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017a8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80017ac:	2200      	movs	r2, #0
 80017ae:	4619      	mov	r1, r3
 80017b0:	4818      	ldr	r0, [pc, #96]	@ (8001814 <MX_TIM1_Init+0x118>)
 80017b2:	f005 f96b 	bl	8006a8c <HAL_TIM_PWM_ConfigChannel>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80017bc:	f000 f8fe 	bl	80019bc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017c0:	2300      	movs	r3, #0
 80017c2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017c4:	2300      	movs	r3, #0
 80017c6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017c8:	2300      	movs	r3, #0
 80017ca:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017d8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80017da:	2300      	movs	r3, #0
 80017dc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80017de:	2300      	movs	r3, #0
 80017e0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80017e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80017e6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017ec:	2300      	movs	r3, #0
 80017ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80017f0:	1d3b      	adds	r3, r7, #4
 80017f2:	4619      	mov	r1, r3
 80017f4:	4807      	ldr	r0, [pc, #28]	@ (8001814 <MX_TIM1_Init+0x118>)
 80017f6:	f005 fe87 	bl	8007508 <HAL_TIMEx_ConfigBreakDeadTime>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001800:	f000 f8dc 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001804:	4803      	ldr	r0, [pc, #12]	@ (8001814 <MX_TIM1_Init+0x118>)
 8001806:	f000 fa2b 	bl	8001c60 <HAL_TIM_MspPostInit>

}
 800180a:	bf00      	nop
 800180c:	3758      	adds	r7, #88	@ 0x58
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000338 	.word	0x20000338
 8001818:	40012c00 	.word	0x40012c00

0800181c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b08a      	sub	sp, #40	@ 0x28
 8001820:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001822:	f107 0314 	add.w	r3, r7, #20
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]
 800182c:	609a      	str	r2, [r3, #8]
 800182e:	60da      	str	r2, [r3, #12]
 8001830:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001832:	4b2f      	ldr	r3, [pc, #188]	@ (80018f0 <MX_GPIO_Init+0xd4>)
 8001834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001836:	4a2e      	ldr	r2, [pc, #184]	@ (80018f0 <MX_GPIO_Init+0xd4>)
 8001838:	f043 0304 	orr.w	r3, r3, #4
 800183c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800183e:	4b2c      	ldr	r3, [pc, #176]	@ (80018f0 <MX_GPIO_Init+0xd4>)
 8001840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001842:	f003 0304 	and.w	r3, r3, #4
 8001846:	613b      	str	r3, [r7, #16]
 8001848:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800184a:	4b29      	ldr	r3, [pc, #164]	@ (80018f0 <MX_GPIO_Init+0xd4>)
 800184c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800184e:	4a28      	ldr	r2, [pc, #160]	@ (80018f0 <MX_GPIO_Init+0xd4>)
 8001850:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001854:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001856:	4b26      	ldr	r3, [pc, #152]	@ (80018f0 <MX_GPIO_Init+0xd4>)
 8001858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800185a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001862:	4b23      	ldr	r3, [pc, #140]	@ (80018f0 <MX_GPIO_Init+0xd4>)
 8001864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001866:	4a22      	ldr	r2, [pc, #136]	@ (80018f0 <MX_GPIO_Init+0xd4>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800186e:	4b20      	ldr	r3, [pc, #128]	@ (80018f0 <MX_GPIO_Init+0xd4>)
 8001870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	60bb      	str	r3, [r7, #8]
 8001878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800187a:	4b1d      	ldr	r3, [pc, #116]	@ (80018f0 <MX_GPIO_Init+0xd4>)
 800187c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800187e:	4a1c      	ldr	r2, [pc, #112]	@ (80018f0 <MX_GPIO_Init+0xd4>)
 8001880:	f043 0302 	orr.w	r3, r3, #2
 8001884:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001886:	4b1a      	ldr	r3, [pc, #104]	@ (80018f0 <MX_GPIO_Init+0xd4>)
 8001888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	607b      	str	r3, [r7, #4]
 8001890:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001892:	2200      	movs	r2, #0
 8001894:	2110      	movs	r1, #16
 8001896:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800189a:	f002 f8ef 	bl	8003a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800189e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018a4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80018a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ae:	f107 0314 	add.w	r3, r7, #20
 80018b2:	4619      	mov	r1, r3
 80018b4:	480f      	ldr	r0, [pc, #60]	@ (80018f4 <MX_GPIO_Init+0xd8>)
 80018b6:	f001 ff37 	bl	8003728 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018ba:	2310      	movs	r3, #16
 80018bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018be:	2301      	movs	r3, #1
 80018c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018c6:	2302      	movs	r3, #2
 80018c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ca:	f107 0314 	add.w	r3, r7, #20
 80018ce:	4619      	mov	r1, r3
 80018d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018d4:	f001 ff28 	bl	8003728 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80018d8:	2200      	movs	r2, #0
 80018da:	2100      	movs	r1, #0
 80018dc:	2028      	movs	r0, #40	@ 0x28
 80018de:	f001 feec 	bl	80036ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80018e2:	2028      	movs	r0, #40	@ 0x28
 80018e4:	f001 ff05 	bl	80036f2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80018e8:	bf00      	nop
 80018ea:	3728      	adds	r7, #40	@ 0x28
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40021000 	.word	0x40021000
 80018f4:	48000800 	.word	0x48000800

080018f8 <LogDetector_RecalibrateNoiseFloor>:

/* USER CODE BEGIN 4 */
void LogDetector_RecalibrateNoiseFloor(void) {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
    const int sample_count = 100;
 80018fe:	2364      	movs	r3, #100	@ 0x64
 8001900:	607b      	str	r3, [r7, #4]
    uint32_t sum = 0;
 8001902:	2300      	movs	r3, #0
 8001904:	60fb      	str	r3, [r7, #12]

    CharLCD_Set_Cursor(1, 0);
 8001906:	2100      	movs	r1, #0
 8001908:	2001      	movs	r0, #1
 800190a:	f7ff fca4 	bl	8001256 <CharLCD_Set_Cursor>
    CharLCD_Write_String("LOG CAL");
 800190e:	4824      	ldr	r0, [pc, #144]	@ (80019a0 <LogDetector_RecalibrateNoiseFloor+0xa8>)
 8001910:	f7ff fc8c 	bl	800122c <CharLCD_Write_String>

    for (int i = 0; i < sample_count; i++) {
 8001914:	2300      	movs	r3, #0
 8001916:	60bb      	str	r3, [r7, #8]
 8001918:	e014      	b.n	8001944 <LogDetector_RecalibrateNoiseFloor+0x4c>
        HAL_ADC_Start(&hadc1);
 800191a:	4822      	ldr	r0, [pc, #136]	@ (80019a4 <LogDetector_RecalibrateNoiseFloor+0xac>)
 800191c:	f000 ff04 	bl	8002728 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001920:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001924:	481f      	ldr	r0, [pc, #124]	@ (80019a4 <LogDetector_RecalibrateNoiseFloor+0xac>)
 8001926:	f000 ffb9 	bl	800289c <HAL_ADC_PollForConversion>
        sum += HAL_ADC_GetValue(&hadc1);
 800192a:	481e      	ldr	r0, [pc, #120]	@ (80019a4 <LogDetector_RecalibrateNoiseFloor+0xac>)
 800192c:	f001 f88e 	bl	8002a4c <HAL_ADC_GetValue>
 8001930:	4602      	mov	r2, r0
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	4413      	add	r3, r2
 8001936:	60fb      	str	r3, [r7, #12]
        HAL_Delay(5); // Small delay between samples
 8001938:	2005      	movs	r0, #5
 800193a:	f000 fb9d 	bl	8002078 <HAL_Delay>
    for (int i = 0; i < sample_count; i++) {
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	3301      	adds	r3, #1
 8001942:	60bb      	str	r3, [r7, #8]
 8001944:	68ba      	ldr	r2, [r7, #8]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	429a      	cmp	r2, r3
 800194a:	dbe6      	blt.n	800191a <LogDetector_RecalibrateNoiseFloor+0x22>
    }

    float avg_adc = sum / (float)sample_count;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	ee07 3a90 	vmov	s15, r3
 8001952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	ee07 3a90 	vmov	s15, r3
 800195c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001960:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001964:	edc7 7a00 	vstr	s15, [r7]
    LogDetector_NoiseFloor = (avg_adc / 4095.0f) * 3.3f;
 8001968:	ed97 7a00 	vldr	s14, [r7]
 800196c:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80019a8 <LogDetector_RecalibrateNoiseFloor+0xb0>
 8001970:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001974:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80019ac <LogDetector_RecalibrateNoiseFloor+0xb4>
 8001978:	ee67 7a87 	vmul.f32	s15, s15, s14
 800197c:	4b0c      	ldr	r3, [pc, #48]	@ (80019b0 <LogDetector_RecalibrateNoiseFloor+0xb8>)
 800197e:	edc3 7a00 	vstr	s15, [r3]

    // TODO Set threshold (e.g., 0.15V above floor, tune as needed)
    LogDetector_DetectionThreshold = LogDetector_NoiseFloor + 0.07f;
 8001982:	4b0b      	ldr	r3, [pc, #44]	@ (80019b0 <LogDetector_RecalibrateNoiseFloor+0xb8>)
 8001984:	edd3 7a00 	vldr	s15, [r3]
 8001988:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80019b4 <LogDetector_RecalibrateNoiseFloor+0xbc>
 800198c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001990:	4b09      	ldr	r3, [pc, #36]	@ (80019b8 <LogDetector_RecalibrateNoiseFloor+0xc0>)
 8001992:	edc3 7a00 	vstr	s15, [r3]
}
 8001996:	bf00      	nop
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	0800a340 	.word	0x0800a340
 80019a4:	2000021c 	.word	0x2000021c
 80019a8:	457ff000 	.word	0x457ff000
 80019ac:	40533333 	.word	0x40533333
 80019b0:	200003e8 	.word	0x200003e8
 80019b4:	3d8f5c29 	.word	0x3d8f5c29
 80019b8:	200003ec 	.word	0x200003ec

080019bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019c0:	b672      	cpsid	i
}
 80019c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019c4:	bf00      	nop
 80019c6:	e7fd      	b.n	80019c4 <Error_Handler+0x8>

080019c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ce:	4b0f      	ldr	r3, [pc, #60]	@ (8001a0c <HAL_MspInit+0x44>)
 80019d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019d2:	4a0e      	ldr	r2, [pc, #56]	@ (8001a0c <HAL_MspInit+0x44>)
 80019d4:	f043 0301 	orr.w	r3, r3, #1
 80019d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80019da:	4b0c      	ldr	r3, [pc, #48]	@ (8001a0c <HAL_MspInit+0x44>)
 80019dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	607b      	str	r3, [r7, #4]
 80019e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019e6:	4b09      	ldr	r3, [pc, #36]	@ (8001a0c <HAL_MspInit+0x44>)
 80019e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ea:	4a08      	ldr	r2, [pc, #32]	@ (8001a0c <HAL_MspInit+0x44>)
 80019ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80019f2:	4b06      	ldr	r3, [pc, #24]	@ (8001a0c <HAL_MspInit+0x44>)
 80019f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019fa:	603b      	str	r3, [r7, #0]
 80019fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	40021000 	.word	0x40021000

08001a10 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b0ac      	sub	sp, #176	@ 0xb0
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a18:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]
 8001a26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a28:	f107 0314 	add.w	r3, r7, #20
 8001a2c:	2288      	movs	r2, #136	@ 0x88
 8001a2e:	2100      	movs	r1, #0
 8001a30:	4618      	mov	r0, r3
 8001a32:	f006 fb21 	bl	8008078 <memset>
  if(hadc->Instance==ADC1)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a27      	ldr	r2, [pc, #156]	@ (8001ad8 <HAL_ADC_MspInit+0xc8>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d147      	bne.n	8001ad0 <HAL_ADC_MspInit+0xc0>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001a40:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001a44:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001a46:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001a4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001a52:	2301      	movs	r3, #1
 8001a54:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001a56:	2308      	movs	r3, #8
 8001a58:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001a5a:	2307      	movs	r3, #7
 8001a5c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001a62:	2302      	movs	r3, #2
 8001a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001a66:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a6a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a6c:	f107 0314 	add.w	r3, r7, #20
 8001a70:	4618      	mov	r0, r3
 8001a72:	f003 fac5 	bl	8005000 <HAL_RCCEx_PeriphCLKConfig>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001a7c:	f7ff ff9e 	bl	80019bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001a80:	4b16      	ldr	r3, [pc, #88]	@ (8001adc <HAL_ADC_MspInit+0xcc>)
 8001a82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a84:	4a15      	ldr	r2, [pc, #84]	@ (8001adc <HAL_ADC_MspInit+0xcc>)
 8001a86:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a8c:	4b13      	ldr	r3, [pc, #76]	@ (8001adc <HAL_ADC_MspInit+0xcc>)
 8001a8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a94:	613b      	str	r3, [r7, #16]
 8001a96:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a98:	4b10      	ldr	r3, [pc, #64]	@ (8001adc <HAL_ADC_MspInit+0xcc>)
 8001a9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a9c:	4a0f      	ldr	r2, [pc, #60]	@ (8001adc <HAL_ADC_MspInit+0xcc>)
 8001a9e:	f043 0301 	orr.w	r3, r3, #1
 8001aa2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aa4:	4b0d      	ldr	r3, [pc, #52]	@ (8001adc <HAL_ADC_MspInit+0xcc>)
 8001aa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = LOG_IN_Pin;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001ab6:	230b      	movs	r3, #11
 8001ab8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(LOG_IN_GPIO_Port, &GPIO_InitStruct);
 8001ac2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001acc:	f001 fe2c 	bl	8003728 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001ad0:	bf00      	nop
 8001ad2:	37b0      	adds	r7, #176	@ 0xb0
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	50040000 	.word	0x50040000
 8001adc:	40021000 	.word	0x40021000

08001ae0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b0ac      	sub	sp, #176	@ 0xb0
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
 8001af6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	2288      	movs	r2, #136	@ 0x88
 8001afe:	2100      	movs	r1, #0
 8001b00:	4618      	mov	r0, r3
 8001b02:	f006 fab9 	bl	8008078 <memset>
  if(hi2c->Instance==I2C1)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a21      	ldr	r2, [pc, #132]	@ (8001b90 <HAL_I2C_MspInit+0xb0>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d13b      	bne.n	8001b88 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001b10:	2340      	movs	r3, #64	@ 0x40
 8001b12:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b14:	2300      	movs	r3, #0
 8001b16:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b18:	f107 0314 	add.w	r3, r7, #20
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f003 fa6f 	bl	8005000 <HAL_RCCEx_PeriphCLKConfig>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001b28:	f7ff ff48 	bl	80019bc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b2c:	4b19      	ldr	r3, [pc, #100]	@ (8001b94 <HAL_I2C_MspInit+0xb4>)
 8001b2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b30:	4a18      	ldr	r2, [pc, #96]	@ (8001b94 <HAL_I2C_MspInit+0xb4>)
 8001b32:	f043 0302 	orr.w	r3, r3, #2
 8001b36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b38:	4b16      	ldr	r3, [pc, #88]	@ (8001b94 <HAL_I2C_MspInit+0xb4>)
 8001b3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	613b      	str	r3, [r7, #16]
 8001b42:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_D15_Pin|SDA_D14_Pin;
 8001b44:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b4c:	2312      	movs	r3, #18
 8001b4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b52:	2301      	movs	r3, #1
 8001b54:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b5e:	2304      	movs	r3, #4
 8001b60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b64:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001b68:	4619      	mov	r1, r3
 8001b6a:	480b      	ldr	r0, [pc, #44]	@ (8001b98 <HAL_I2C_MspInit+0xb8>)
 8001b6c:	f001 fddc 	bl	8003728 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b70:	4b08      	ldr	r3, [pc, #32]	@ (8001b94 <HAL_I2C_MspInit+0xb4>)
 8001b72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b74:	4a07      	ldr	r2, [pc, #28]	@ (8001b94 <HAL_I2C_MspInit+0xb4>)
 8001b76:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b7c:	4b05      	ldr	r3, [pc, #20]	@ (8001b94 <HAL_I2C_MspInit+0xb4>)
 8001b7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001b88:	bf00      	nop
 8001b8a:	37b0      	adds	r7, #176	@ 0xb0
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40005400 	.word	0x40005400
 8001b94:	40021000 	.word	0x40021000
 8001b98:	48000400 	.word	0x48000400

08001b9c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b08a      	sub	sp, #40	@ 0x28
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba4:	f107 0314 	add.w	r3, r7, #20
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	609a      	str	r2, [r3, #8]
 8001bb0:	60da      	str	r2, [r3, #12]
 8001bb2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a17      	ldr	r2, [pc, #92]	@ (8001c18 <HAL_SPI_MspInit+0x7c>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d128      	bne.n	8001c10 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bbe:	4b17      	ldr	r3, [pc, #92]	@ (8001c1c <HAL_SPI_MspInit+0x80>)
 8001bc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bc2:	4a16      	ldr	r2, [pc, #88]	@ (8001c1c <HAL_SPI_MspInit+0x80>)
 8001bc4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001bc8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001bca:	4b14      	ldr	r3, [pc, #80]	@ (8001c1c <HAL_SPI_MspInit+0x80>)
 8001bcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bd2:	613b      	str	r3, [r7, #16]
 8001bd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd6:	4b11      	ldr	r3, [pc, #68]	@ (8001c1c <HAL_SPI_MspInit+0x80>)
 8001bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bda:	4a10      	ldr	r2, [pc, #64]	@ (8001c1c <HAL_SPI_MspInit+0x80>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001be2:	4b0e      	ldr	r3, [pc, #56]	@ (8001c1c <HAL_SPI_MspInit+0x80>)
 8001be4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001bee:	23e0      	movs	r3, #224	@ 0xe0
 8001bf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bfe:	2305      	movs	r3, #5
 8001c00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c02:	f107 0314 	add.w	r3, r7, #20
 8001c06:	4619      	mov	r1, r3
 8001c08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c0c:	f001 fd8c 	bl	8003728 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001c10:	bf00      	nop
 8001c12:	3728      	adds	r7, #40	@ 0x28
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40013000 	.word	0x40013000
 8001c1c:	40021000 	.word	0x40021000

08001c20 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a0a      	ldr	r2, [pc, #40]	@ (8001c58 <HAL_TIM_PWM_MspInit+0x38>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d10b      	bne.n	8001c4a <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c32:	4b0a      	ldr	r3, [pc, #40]	@ (8001c5c <HAL_TIM_PWM_MspInit+0x3c>)
 8001c34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c36:	4a09      	ldr	r2, [pc, #36]	@ (8001c5c <HAL_TIM_PWM_MspInit+0x3c>)
 8001c38:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c3c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c3e:	4b07      	ldr	r3, [pc, #28]	@ (8001c5c <HAL_TIM_PWM_MspInit+0x3c>)
 8001c40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001c4a:	bf00      	nop
 8001c4c:	3714      	adds	r7, #20
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	40012c00 	.word	0x40012c00
 8001c5c:	40021000 	.word	0x40021000

08001c60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b088      	sub	sp, #32
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c68:	f107 030c 	add.w	r3, r7, #12
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	605a      	str	r2, [r3, #4]
 8001c72:	609a      	str	r2, [r3, #8]
 8001c74:	60da      	str	r2, [r3, #12]
 8001c76:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a12      	ldr	r2, [pc, #72]	@ (8001cc8 <HAL_TIM_MspPostInit+0x68>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d11d      	bne.n	8001cbe <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c82:	4b12      	ldr	r3, [pc, #72]	@ (8001ccc <HAL_TIM_MspPostInit+0x6c>)
 8001c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c86:	4a11      	ldr	r2, [pc, #68]	@ (8001ccc <HAL_TIM_MspPostInit+0x6c>)
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c8e:	4b0f      	ldr	r3, [pc, #60]	@ (8001ccc <HAL_TIM_MspPostInit+0x6c>)
 8001c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	60bb      	str	r3, [r7, #8]
 8001c98:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c9a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c9e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001cac:	2301      	movs	r3, #1
 8001cae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb0:	f107 030c 	add.w	r3, r7, #12
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cba:	f001 fd35 	bl	8003728 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001cbe:	bf00      	nop
 8001cc0:	3720      	adds	r7, #32
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40012c00 	.word	0x40012c00
 8001ccc:	40021000 	.word	0x40021000

08001cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cd4:	bf00      	nop
 8001cd6:	e7fd      	b.n	8001cd4 <NMI_Handler+0x4>

08001cd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cdc:	bf00      	nop
 8001cde:	e7fd      	b.n	8001cdc <HardFault_Handler+0x4>

08001ce0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ce4:	bf00      	nop
 8001ce6:	e7fd      	b.n	8001ce4 <MemManage_Handler+0x4>

08001ce8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cec:	bf00      	nop
 8001cee:	e7fd      	b.n	8001cec <BusFault_Handler+0x4>

08001cf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cf4:	bf00      	nop
 8001cf6:	e7fd      	b.n	8001cf4 <UsageFault_Handler+0x4>

08001cf8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d06:	b480      	push	{r7}
 8001d08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d26:	f000 f987 	bl	8002038 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001d32:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001d36:	f001 feb9 	bl	8003aac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
	...

08001d40 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	80fb      	strh	r3, [r7, #6]
    static uint32_t last_press = 0;
    if (GPIO_Pin == GPIO_PIN_13) {
 8001d4a:	88fb      	ldrh	r3, [r7, #6]
 8001d4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d50:	d10e      	bne.n	8001d70 <HAL_GPIO_EXTI_Callback+0x30>
        uint32_t now = HAL_GetTick();
 8001d52:	f000 f985 	bl	8002060 <HAL_GetTick>
 8001d56:	60f8      	str	r0, [r7, #12]
        if ((now - last_press) > 300) { // 300 ms debounce
 8001d58:	4b07      	ldr	r3, [pc, #28]	@ (8001d78 <HAL_GPIO_EXTI_Callback+0x38>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001d64:	d904      	bls.n	8001d70 <HAL_GPIO_EXTI_Callback+0x30>
            last_press = now;
 8001d66:	4a04      	ldr	r2, [pc, #16]	@ (8001d78 <HAL_GPIO_EXTI_Callback+0x38>)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6013      	str	r3, [r2, #0]
            //Buzzer_On(440);  // very short tone
            //for (volatile int i = 0; i < 100000; i++);
            //Buzzer_Off();
            CC2500_RunSignalTest();
 8001d6c:	f7ff f97c 	bl	8001068 <CC2500_RunSignalTest>
        }
    }
}
 8001d70:	bf00      	nop
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	200003f0 	.word	0x200003f0

08001d7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  return 1;
 8001d80:	2301      	movs	r3, #1
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <_kill>:

int _kill(int pid, int sig)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d96:	f006 f977 	bl	8008088 <__errno>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2216      	movs	r2, #22
 8001d9e:	601a      	str	r2, [r3, #0]
  return -1;
 8001da0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <_exit>:

void _exit (int status)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001db4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f7ff ffe7 	bl	8001d8c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001dbe:	bf00      	nop
 8001dc0:	e7fd      	b.n	8001dbe <_exit+0x12>

08001dc2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b086      	sub	sp, #24
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	60f8      	str	r0, [r7, #12]
 8001dca:	60b9      	str	r1, [r7, #8]
 8001dcc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dce:	2300      	movs	r3, #0
 8001dd0:	617b      	str	r3, [r7, #20]
 8001dd2:	e00a      	b.n	8001dea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001dd4:	f3af 8000 	nop.w
 8001dd8:	4601      	mov	r1, r0
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	1c5a      	adds	r2, r3, #1
 8001dde:	60ba      	str	r2, [r7, #8]
 8001de0:	b2ca      	uxtb	r2, r1
 8001de2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	3301      	adds	r3, #1
 8001de8:	617b      	str	r3, [r7, #20]
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	dbf0      	blt.n	8001dd4 <_read+0x12>
  }

  return len;
 8001df2:	687b      	ldr	r3, [r7, #4]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3718      	adds	r7, #24
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]
 8001e0c:	e009      	b.n	8001e22 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	1c5a      	adds	r2, r3, #1
 8001e12:	60ba      	str	r2, [r7, #8]
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	617b      	str	r3, [r7, #20]
 8001e22:	697a      	ldr	r2, [r7, #20]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	dbf1      	blt.n	8001e0e <_write+0x12>
  }
  return len;
 8001e2a:	687b      	ldr	r3, [r7, #4]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3718      	adds	r7, #24
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <_close>:

int _close(int file)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e5c:	605a      	str	r2, [r3, #4]
  return 0;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <_isatty>:

int _isatty(int file)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e74:	2301      	movs	r3, #1
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e82:	b480      	push	{r7}
 8001e84:	b085      	sub	sp, #20
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	60f8      	str	r0, [r7, #12]
 8001e8a:	60b9      	str	r1, [r7, #8]
 8001e8c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3714      	adds	r7, #20
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ea4:	4a14      	ldr	r2, [pc, #80]	@ (8001ef8 <_sbrk+0x5c>)
 8001ea6:	4b15      	ldr	r3, [pc, #84]	@ (8001efc <_sbrk+0x60>)
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001eb0:	4b13      	ldr	r3, [pc, #76]	@ (8001f00 <_sbrk+0x64>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d102      	bne.n	8001ebe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001eb8:	4b11      	ldr	r3, [pc, #68]	@ (8001f00 <_sbrk+0x64>)
 8001eba:	4a12      	ldr	r2, [pc, #72]	@ (8001f04 <_sbrk+0x68>)
 8001ebc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ebe:	4b10      	ldr	r3, [pc, #64]	@ (8001f00 <_sbrk+0x64>)
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d207      	bcs.n	8001edc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ecc:	f006 f8dc 	bl	8008088 <__errno>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	220c      	movs	r2, #12
 8001ed4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ed6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001eda:	e009      	b.n	8001ef0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001edc:	4b08      	ldr	r3, [pc, #32]	@ (8001f00 <_sbrk+0x64>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ee2:	4b07      	ldr	r3, [pc, #28]	@ (8001f00 <_sbrk+0x64>)
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4413      	add	r3, r2
 8001eea:	4a05      	ldr	r2, [pc, #20]	@ (8001f00 <_sbrk+0x64>)
 8001eec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eee:	68fb      	ldr	r3, [r7, #12]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3718      	adds	r7, #24
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	20018000 	.word	0x20018000
 8001efc:	00000400 	.word	0x00000400
 8001f00:	200003f4 	.word	0x200003f4
 8001f04:	20000548 	.word	0x20000548

08001f08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f0c:	4b06      	ldr	r3, [pc, #24]	@ (8001f28 <SystemInit+0x20>)
 8001f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f12:	4a05      	ldr	r2, [pc, #20]	@ (8001f28 <SystemInit+0x20>)
 8001f14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001f1c:	bf00      	nop
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f64 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f30:	f7ff ffea 	bl	8001f08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f34:	480c      	ldr	r0, [pc, #48]	@ (8001f68 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f36:	490d      	ldr	r1, [pc, #52]	@ (8001f6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f38:	4a0d      	ldr	r2, [pc, #52]	@ (8001f70 <LoopForever+0xe>)
  movs r3, #0
 8001f3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f3c:	e002      	b.n	8001f44 <LoopCopyDataInit>

08001f3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f42:	3304      	adds	r3, #4

08001f44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f48:	d3f9      	bcc.n	8001f3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f4c:	4c0a      	ldr	r4, [pc, #40]	@ (8001f78 <LoopForever+0x16>)
  movs r3, #0
 8001f4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f50:	e001      	b.n	8001f56 <LoopFillZerobss>

08001f52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f54:	3204      	adds	r2, #4

08001f56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f58:	d3fb      	bcc.n	8001f52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f5a:	f006 f89b 	bl	8008094 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f5e:	f7ff f9b9 	bl	80012d4 <main>

08001f62 <LoopForever>:

LoopForever:
    b LoopForever
 8001f62:	e7fe      	b.n	8001f62 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f64:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001f68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f6c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001f70:	0800a70c 	.word	0x0800a70c
  ldr r2, =_sbss
 8001f74:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001f78:	20000548 	.word	0x20000548

08001f7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f7c:	e7fe      	b.n	8001f7c <ADC1_2_IRQHandler>
	...

08001f80 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f86:	2300      	movs	r3, #0
 8001f88:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f8a:	4b0c      	ldr	r3, [pc, #48]	@ (8001fbc <HAL_Init+0x3c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a0b      	ldr	r2, [pc, #44]	@ (8001fbc <HAL_Init+0x3c>)
 8001f90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f94:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f96:	2003      	movs	r0, #3
 8001f98:	f001 fb84 	bl	80036a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f9c:	2000      	movs	r0, #0
 8001f9e:	f000 f80f 	bl	8001fc0 <HAL_InitTick>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d002      	beq.n	8001fae <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	71fb      	strb	r3, [r7, #7]
 8001fac:	e001      	b.n	8001fb2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001fae:	f7ff fd0b 	bl	80019c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fb2:	79fb      	ldrb	r3, [r7, #7]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40022000 	.word	0x40022000

08001fc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001fcc:	4b17      	ldr	r3, [pc, #92]	@ (800202c <HAL_InitTick+0x6c>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d023      	beq.n	800201c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001fd4:	4b16      	ldr	r3, [pc, #88]	@ (8002030 <HAL_InitTick+0x70>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	4b14      	ldr	r3, [pc, #80]	@ (800202c <HAL_InitTick+0x6c>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	4619      	mov	r1, r3
 8001fde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fe2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fea:	4618      	mov	r0, r3
 8001fec:	f001 fb8f 	bl	800370e <HAL_SYSTICK_Config>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d10f      	bne.n	8002016 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2b0f      	cmp	r3, #15
 8001ffa:	d809      	bhi.n	8002010 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	6879      	ldr	r1, [r7, #4]
 8002000:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002004:	f001 fb59 	bl	80036ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002008:	4a0a      	ldr	r2, [pc, #40]	@ (8002034 <HAL_InitTick+0x74>)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6013      	str	r3, [r2, #0]
 800200e:	e007      	b.n	8002020 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	73fb      	strb	r3, [r7, #15]
 8002014:	e004      	b.n	8002020 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	73fb      	strb	r3, [r7, #15]
 800201a:	e001      	b.n	8002020 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002020:	7bfb      	ldrb	r3, [r7, #15]
}
 8002022:	4618      	mov	r0, r3
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	2000000c 	.word	0x2000000c
 8002030:	20000004 	.word	0x20000004
 8002034:	20000008 	.word	0x20000008

08002038 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800203c:	4b06      	ldr	r3, [pc, #24]	@ (8002058 <HAL_IncTick+0x20>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	461a      	mov	r2, r3
 8002042:	4b06      	ldr	r3, [pc, #24]	@ (800205c <HAL_IncTick+0x24>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4413      	add	r3, r2
 8002048:	4a04      	ldr	r2, [pc, #16]	@ (800205c <HAL_IncTick+0x24>)
 800204a:	6013      	str	r3, [r2, #0]
}
 800204c:	bf00      	nop
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	2000000c 	.word	0x2000000c
 800205c:	200003f8 	.word	0x200003f8

08002060 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  return uwTick;
 8002064:	4b03      	ldr	r3, [pc, #12]	@ (8002074 <HAL_GetTick+0x14>)
 8002066:	681b      	ldr	r3, [r3, #0]
}
 8002068:	4618      	mov	r0, r3
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	200003f8 	.word	0x200003f8

08002078 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002080:	f7ff ffee 	bl	8002060 <HAL_GetTick>
 8002084:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002090:	d005      	beq.n	800209e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002092:	4b0a      	ldr	r3, [pc, #40]	@ (80020bc <HAL_Delay+0x44>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	461a      	mov	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	4413      	add	r3, r2
 800209c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800209e:	bf00      	nop
 80020a0:	f7ff ffde 	bl	8002060 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d8f7      	bhi.n	80020a0 <HAL_Delay+0x28>
  {
  }
}
 80020b0:	bf00      	nop
 80020b2:	bf00      	nop
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	2000000c 	.word	0x2000000c

080020c0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	431a      	orrs	r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	609a      	str	r2, [r3, #8]
}
 80020da:	bf00      	nop
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b083      	sub	sp, #12
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
 80020ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	431a      	orrs	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	609a      	str	r2, [r3, #8]
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800211c:	4618      	mov	r0, r3
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002128:	b480      	push	{r7}
 800212a:	b087      	sub	sp, #28
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
 8002134:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	3360      	adds	r3, #96	@ 0x60
 800213a:	461a      	mov	r2, r3
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4413      	add	r3, r2
 8002142:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	4b08      	ldr	r3, [pc, #32]	@ (800216c <LL_ADC_SetOffset+0x44>)
 800214a:	4013      	ands	r3, r2
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	430a      	orrs	r2, r1
 8002156:	4313      	orrs	r3, r2
 8002158:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002160:	bf00      	nop
 8002162:	371c      	adds	r7, #28
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	03fff000 	.word	0x03fff000

08002170 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	3360      	adds	r3, #96	@ 0x60
 800217e:	461a      	mov	r2, r3
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4413      	add	r3, r2
 8002186:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002190:	4618      	mov	r0, r3
 8002192:	3714      	adds	r7, #20
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800219c:	b480      	push	{r7}
 800219e:	b087      	sub	sp, #28
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	3360      	adds	r3, #96	@ 0x60
 80021ac:	461a      	mov	r2, r3
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	4413      	add	r3, r2
 80021b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	431a      	orrs	r2, r3
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80021c6:	bf00      	nop
 80021c8:	371c      	adds	r7, #28
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr

080021d2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80021d2:	b480      	push	{r7}
 80021d4:	b083      	sub	sp, #12
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80021e6:	2301      	movs	r3, #1
 80021e8:	e000      	b.n	80021ec <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b087      	sub	sp, #28
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	3330      	adds	r3, #48	@ 0x30
 8002208:	461a      	mov	r2, r3
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	0a1b      	lsrs	r3, r3, #8
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	f003 030c 	and.w	r3, r3, #12
 8002214:	4413      	add	r3, r2
 8002216:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	f003 031f 	and.w	r3, r3, #31
 8002222:	211f      	movs	r1, #31
 8002224:	fa01 f303 	lsl.w	r3, r1, r3
 8002228:	43db      	mvns	r3, r3
 800222a:	401a      	ands	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	0e9b      	lsrs	r3, r3, #26
 8002230:	f003 011f 	and.w	r1, r3, #31
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	f003 031f 	and.w	r3, r3, #31
 800223a:	fa01 f303 	lsl.w	r3, r1, r3
 800223e:	431a      	orrs	r2, r3
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002244:	bf00      	nop
 8002246:	371c      	adds	r7, #28
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002250:	b480      	push	{r7}
 8002252:	b087      	sub	sp, #28
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	3314      	adds	r3, #20
 8002260:	461a      	mov	r2, r3
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	0e5b      	lsrs	r3, r3, #25
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	f003 0304 	and.w	r3, r3, #4
 800226c:	4413      	add	r3, r2
 800226e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	0d1b      	lsrs	r3, r3, #20
 8002278:	f003 031f 	and.w	r3, r3, #31
 800227c:	2107      	movs	r1, #7
 800227e:	fa01 f303 	lsl.w	r3, r1, r3
 8002282:	43db      	mvns	r3, r3
 8002284:	401a      	ands	r2, r3
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	0d1b      	lsrs	r3, r3, #20
 800228a:	f003 031f 	and.w	r3, r3, #31
 800228e:	6879      	ldr	r1, [r7, #4]
 8002290:	fa01 f303 	lsl.w	r3, r1, r3
 8002294:	431a      	orrs	r2, r3
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800229a:	bf00      	nop
 800229c:	371c      	adds	r7, #28
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
	...

080022a8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022c0:	43db      	mvns	r3, r3
 80022c2:	401a      	ands	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f003 0318 	and.w	r3, r3, #24
 80022ca:	4908      	ldr	r1, [pc, #32]	@ (80022ec <LL_ADC_SetChannelSingleDiff+0x44>)
 80022cc:	40d9      	lsrs	r1, r3
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	400b      	ands	r3, r1
 80022d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022d6:	431a      	orrs	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80022de:	bf00      	nop
 80022e0:	3714      	adds	r7, #20
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	0007ffff 	.word	0x0007ffff

080022f0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f003 031f 	and.w	r3, r3, #31
}
 8002300:	4618      	mov	r0, r3
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800231c:	4618      	mov	r0, r3
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002338:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	6093      	str	r3, [r2, #8]
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800235c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002360:	d101      	bne.n	8002366 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002362:	2301      	movs	r3, #1
 8002364:	e000      	b.n	8002368 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002384:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002388:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80023b0:	d101      	bne.n	80023b6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80023b2:	2301      	movs	r3, #1
 80023b4:	e000      	b.n	80023b8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80023d4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80023d8:	f043 0201 	orr.w	r2, r3, #1
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d101      	bne.n	8002404 <LL_ADC_IsEnabled+0x18>
 8002400:	2301      	movs	r3, #1
 8002402:	e000      	b.n	8002406 <LL_ADC_IsEnabled+0x1a>
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002412:	b480      	push	{r7}
 8002414:	b083      	sub	sp, #12
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002422:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002426:	f043 0204 	orr.w	r2, r3, #4
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr

0800243a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800243a:	b480      	push	{r7}
 800243c:	b083      	sub	sp, #12
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 0304 	and.w	r3, r3, #4
 800244a:	2b04      	cmp	r3, #4
 800244c:	d101      	bne.n	8002452 <LL_ADC_REG_IsConversionOngoing+0x18>
 800244e:	2301      	movs	r3, #1
 8002450:	e000      	b.n	8002454 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f003 0308 	and.w	r3, r3, #8
 8002470:	2b08      	cmp	r3, #8
 8002472:	d101      	bne.n	8002478 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002474:	2301      	movs	r3, #1
 8002476:	e000      	b.n	800247a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
	...

08002488 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002488:	b590      	push	{r4, r7, lr}
 800248a:	b089      	sub	sp, #36	@ 0x24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002490:	2300      	movs	r3, #0
 8002492:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002494:	2300      	movs	r3, #0
 8002496:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e130      	b.n	8002704 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d109      	bne.n	80024c4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7ff faad 	bl	8001a10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff ff3f 	bl	800234c <LL_ADC_IsDeepPowerDownEnabled>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d004      	beq.n	80024de <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff ff25 	bl	8002328 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7ff ff5a 	bl	800239c <LL_ADC_IsInternalRegulatorEnabled>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d115      	bne.n	800251a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff ff3e 	bl	8002374 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024f8:	4b84      	ldr	r3, [pc, #528]	@ (800270c <HAL_ADC_Init+0x284>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	099b      	lsrs	r3, r3, #6
 80024fe:	4a84      	ldr	r2, [pc, #528]	@ (8002710 <HAL_ADC_Init+0x288>)
 8002500:	fba2 2303 	umull	r2, r3, r2, r3
 8002504:	099b      	lsrs	r3, r3, #6
 8002506:	3301      	adds	r3, #1
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800250c:	e002      	b.n	8002514 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	3b01      	subs	r3, #1
 8002512:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1f9      	bne.n	800250e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff ff3c 	bl	800239c <LL_ADC_IsInternalRegulatorEnabled>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10d      	bne.n	8002546 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800252e:	f043 0210 	orr.w	r2, r3, #16
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800253a:	f043 0201 	orr.w	r2, r3, #1
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff ff75 	bl	800243a <LL_ADC_REG_IsConversionOngoing>
 8002550:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002556:	f003 0310 	and.w	r3, r3, #16
 800255a:	2b00      	cmp	r3, #0
 800255c:	f040 80c9 	bne.w	80026f2 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	2b00      	cmp	r3, #0
 8002564:	f040 80c5 	bne.w	80026f2 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800256c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002570:	f043 0202 	orr.w	r2, r3, #2
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff ff35 	bl	80023ec <LL_ADC_IsEnabled>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d115      	bne.n	80025b4 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002588:	4862      	ldr	r0, [pc, #392]	@ (8002714 <HAL_ADC_Init+0x28c>)
 800258a:	f7ff ff2f 	bl	80023ec <LL_ADC_IsEnabled>
 800258e:	4604      	mov	r4, r0
 8002590:	4861      	ldr	r0, [pc, #388]	@ (8002718 <HAL_ADC_Init+0x290>)
 8002592:	f7ff ff2b 	bl	80023ec <LL_ADC_IsEnabled>
 8002596:	4603      	mov	r3, r0
 8002598:	431c      	orrs	r4, r3
 800259a:	4860      	ldr	r0, [pc, #384]	@ (800271c <HAL_ADC_Init+0x294>)
 800259c:	f7ff ff26 	bl	80023ec <LL_ADC_IsEnabled>
 80025a0:	4603      	mov	r3, r0
 80025a2:	4323      	orrs	r3, r4
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d105      	bne.n	80025b4 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	4619      	mov	r1, r3
 80025ae:	485c      	ldr	r0, [pc, #368]	@ (8002720 <HAL_ADC_Init+0x298>)
 80025b0:	f7ff fd86 	bl	80020c0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	7e5b      	ldrb	r3, [r3, #25]
 80025b8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025be:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80025c4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80025ca:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025d2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025d4:	4313      	orrs	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d106      	bne.n	80025f0 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e6:	3b01      	subs	r3, #1
 80025e8:	045b      	lsls	r3, r3, #17
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d009      	beq.n	800260c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025fc:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002604:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4313      	orrs	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68da      	ldr	r2, [r3, #12]
 8002612:	4b44      	ldr	r3, [pc, #272]	@ (8002724 <HAL_ADC_Init+0x29c>)
 8002614:	4013      	ands	r3, r2
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	6812      	ldr	r2, [r2, #0]
 800261a:	69b9      	ldr	r1, [r7, #24]
 800261c:	430b      	orrs	r3, r1
 800261e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff ff1b 	bl	8002460 <LL_ADC_INJ_IsConversionOngoing>
 800262a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d13d      	bne.n	80026ae <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d13a      	bne.n	80026ae <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800263c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002644:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002646:	4313      	orrs	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002654:	f023 0302 	bic.w	r3, r3, #2
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	6812      	ldr	r2, [r2, #0]
 800265c:	69b9      	ldr	r1, [r7, #24]
 800265e:	430b      	orrs	r3, r1
 8002660:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002668:	2b01      	cmp	r3, #1
 800266a:	d118      	bne.n	800269e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002676:	f023 0304 	bic.w	r3, r3, #4
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002682:	4311      	orrs	r1, r2
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002688:	4311      	orrs	r1, r2
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800268e:	430a      	orrs	r2, r1
 8002690:	431a      	orrs	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 0201 	orr.w	r2, r2, #1
 800269a:	611a      	str	r2, [r3, #16]
 800269c:	e007      	b.n	80026ae <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	691a      	ldr	r2, [r3, #16]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 0201 	bic.w	r2, r2, #1
 80026ac:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d10c      	bne.n	80026d0 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026bc:	f023 010f 	bic.w	r1, r3, #15
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	69db      	ldr	r3, [r3, #28]
 80026c4:	1e5a      	subs	r2, r3, #1
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	430a      	orrs	r2, r1
 80026cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80026ce:	e007      	b.n	80026e0 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 020f 	bic.w	r2, r2, #15
 80026de:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026e4:	f023 0303 	bic.w	r3, r3, #3
 80026e8:	f043 0201 	orr.w	r2, r3, #1
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	655a      	str	r2, [r3, #84]	@ 0x54
 80026f0:	e007      	b.n	8002702 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026f6:	f043 0210 	orr.w	r2, r3, #16
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002702:	7ffb      	ldrb	r3, [r7, #31]
}
 8002704:	4618      	mov	r0, r3
 8002706:	3724      	adds	r7, #36	@ 0x24
 8002708:	46bd      	mov	sp, r7
 800270a:	bd90      	pop	{r4, r7, pc}
 800270c:	20000004 	.word	0x20000004
 8002710:	053e2d63 	.word	0x053e2d63
 8002714:	50040000 	.word	0x50040000
 8002718:	50040100 	.word	0x50040100
 800271c:	50040200 	.word	0x50040200
 8002720:	50040300 	.word	0x50040300
 8002724:	fff0c007 	.word	0xfff0c007

08002728 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002730:	4857      	ldr	r0, [pc, #348]	@ (8002890 <HAL_ADC_Start+0x168>)
 8002732:	f7ff fddd 	bl	80022f0 <LL_ADC_GetMultimode>
 8002736:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff fe7c 	bl	800243a <LL_ADC_REG_IsConversionOngoing>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	f040 809c 	bne.w	8002882 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002750:	2b01      	cmp	r3, #1
 8002752:	d101      	bne.n	8002758 <HAL_ADC_Start+0x30>
 8002754:	2302      	movs	r3, #2
 8002756:	e097      	b.n	8002888 <HAL_ADC_Start+0x160>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 fd73 	bl	800324c <ADC_Enable>
 8002766:	4603      	mov	r3, r0
 8002768:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800276a:	7dfb      	ldrb	r3, [r7, #23]
 800276c:	2b00      	cmp	r3, #0
 800276e:	f040 8083 	bne.w	8002878 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002776:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800277a:	f023 0301 	bic.w	r3, r3, #1
 800277e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a42      	ldr	r2, [pc, #264]	@ (8002894 <HAL_ADC_Start+0x16c>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d002      	beq.n	8002796 <HAL_ADC_Start+0x6e>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	e000      	b.n	8002798 <HAL_ADC_Start+0x70>
 8002796:	4b40      	ldr	r3, [pc, #256]	@ (8002898 <HAL_ADC_Start+0x170>)
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	6812      	ldr	r2, [r2, #0]
 800279c:	4293      	cmp	r3, r2
 800279e:	d002      	beq.n	80027a6 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d105      	bne.n	80027b2 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027aa:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027be:	d106      	bne.n	80027ce <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c4:	f023 0206 	bic.w	r2, r3, #6
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	659a      	str	r2, [r3, #88]	@ 0x58
 80027cc:	e002      	b.n	80027d4 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	221c      	movs	r2, #28
 80027da:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a2a      	ldr	r2, [pc, #168]	@ (8002894 <HAL_ADC_Start+0x16c>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d002      	beq.n	80027f4 <HAL_ADC_Start+0xcc>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	e000      	b.n	80027f6 <HAL_ADC_Start+0xce>
 80027f4:	4b28      	ldr	r3, [pc, #160]	@ (8002898 <HAL_ADC_Start+0x170>)
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	6812      	ldr	r2, [r2, #0]
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d008      	beq.n	8002810 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d005      	beq.n	8002810 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	2b05      	cmp	r3, #5
 8002808:	d002      	beq.n	8002810 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	2b09      	cmp	r3, #9
 800280e:	d114      	bne.n	800283a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d007      	beq.n	800282e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002822:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002826:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4618      	mov	r0, r3
 8002834:	f7ff fded 	bl	8002412 <LL_ADC_REG_StartConversion>
 8002838:	e025      	b.n	8002886 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800283e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a12      	ldr	r2, [pc, #72]	@ (8002894 <HAL_ADC_Start+0x16c>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d002      	beq.n	8002856 <HAL_ADC_Start+0x12e>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	e000      	b.n	8002858 <HAL_ADC_Start+0x130>
 8002856:	4b10      	ldr	r3, [pc, #64]	@ (8002898 <HAL_ADC_Start+0x170>)
 8002858:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00f      	beq.n	8002886 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800286a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800286e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	655a      	str	r2, [r3, #84]	@ 0x54
 8002876:	e006      	b.n	8002886 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002880:	e001      	b.n	8002886 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002882:	2302      	movs	r3, #2
 8002884:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002886:	7dfb      	ldrb	r3, [r7, #23]
}
 8002888:	4618      	mov	r0, r3
 800288a:	3718      	adds	r7, #24
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	50040300 	.word	0x50040300
 8002894:	50040100 	.word	0x50040100
 8002898:	50040000 	.word	0x50040000

0800289c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b088      	sub	sp, #32
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028a6:	4866      	ldr	r0, [pc, #408]	@ (8002a40 <HAL_ADC_PollForConversion+0x1a4>)
 80028a8:	f7ff fd22 	bl	80022f0 <LL_ADC_GetMultimode>
 80028ac:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	2b08      	cmp	r3, #8
 80028b4:	d102      	bne.n	80028bc <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80028b6:	2308      	movs	r3, #8
 80028b8:	61fb      	str	r3, [r7, #28]
 80028ba:	e02a      	b.n	8002912 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d005      	beq.n	80028ce <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	2b05      	cmp	r3, #5
 80028c6:	d002      	beq.n	80028ce <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	2b09      	cmp	r3, #9
 80028cc:	d111      	bne.n	80028f2 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d007      	beq.n	80028ec <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028e0:	f043 0220 	orr.w	r2, r3, #32
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e0a4      	b.n	8002a36 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80028ec:	2304      	movs	r3, #4
 80028ee:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80028f0:	e00f      	b.n	8002912 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80028f2:	4853      	ldr	r0, [pc, #332]	@ (8002a40 <HAL_ADC_PollForConversion+0x1a4>)
 80028f4:	f7ff fd0a 	bl	800230c <LL_ADC_GetMultiDMATransfer>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d007      	beq.n	800290e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002902:	f043 0220 	orr.w	r2, r3, #32
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e093      	b.n	8002a36 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800290e:	2304      	movs	r3, #4
 8002910:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002912:	f7ff fba5 	bl	8002060 <HAL_GetTick>
 8002916:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002918:	e021      	b.n	800295e <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002920:	d01d      	beq.n	800295e <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002922:	f7ff fb9d 	bl	8002060 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	429a      	cmp	r2, r3
 8002930:	d302      	bcc.n	8002938 <HAL_ADC_PollForConversion+0x9c>
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d112      	bne.n	800295e <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	4013      	ands	r3, r2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10b      	bne.n	800295e <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800294a:	f043 0204 	orr.w	r2, r3, #4
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e06b      	b.n	8002a36 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	4013      	ands	r3, r2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d0d6      	beq.n	800291a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002970:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff fc28 	bl	80021d2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d01c      	beq.n	80029c2 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	7e5b      	ldrb	r3, [r3, #25]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d118      	bne.n	80029c2 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0308 	and.w	r3, r3, #8
 800299a:	2b08      	cmp	r3, #8
 800299c:	d111      	bne.n	80029c2 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029a2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d105      	bne.n	80029c2 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ba:	f043 0201 	orr.w	r2, r3, #1
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a1f      	ldr	r2, [pc, #124]	@ (8002a44 <HAL_ADC_PollForConversion+0x1a8>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d002      	beq.n	80029d2 <HAL_ADC_PollForConversion+0x136>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	e000      	b.n	80029d4 <HAL_ADC_PollForConversion+0x138>
 80029d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002a48 <HAL_ADC_PollForConversion+0x1ac>)
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	6812      	ldr	r2, [r2, #0]
 80029d8:	4293      	cmp	r3, r2
 80029da:	d008      	beq.n	80029ee <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d005      	beq.n	80029ee <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	2b05      	cmp	r3, #5
 80029e6:	d002      	beq.n	80029ee <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	2b09      	cmp	r3, #9
 80029ec:	d104      	bne.n	80029f8 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	61bb      	str	r3, [r7, #24]
 80029f6:	e00c      	b.n	8002a12 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a11      	ldr	r2, [pc, #68]	@ (8002a44 <HAL_ADC_PollForConversion+0x1a8>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d002      	beq.n	8002a08 <HAL_ADC_PollForConversion+0x16c>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	e000      	b.n	8002a0a <HAL_ADC_PollForConversion+0x16e>
 8002a08:	4b0f      	ldr	r3, [pc, #60]	@ (8002a48 <HAL_ADC_PollForConversion+0x1ac>)
 8002a0a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	2b08      	cmp	r3, #8
 8002a16:	d104      	bne.n	8002a22 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2208      	movs	r2, #8
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	e008      	b.n	8002a34 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d103      	bne.n	8002a34 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	220c      	movs	r2, #12
 8002a32:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3720      	adds	r7, #32
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	50040300 	.word	0x50040300
 8002a44:	50040100 	.word	0x50040100
 8002a48:	50040000 	.word	0x50040000

08002a4c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
	...

08002a68 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b0b6      	sub	sp, #216	@ 0xd8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a72:	2300      	movs	r3, #0
 8002a74:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d101      	bne.n	8002a8a <HAL_ADC_ConfigChannel+0x22>
 8002a86:	2302      	movs	r3, #2
 8002a88:	e3c9      	b.n	800321e <HAL_ADC_ConfigChannel+0x7b6>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff fccf 	bl	800243a <LL_ADC_REG_IsConversionOngoing>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f040 83aa 	bne.w	80031f8 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	2b05      	cmp	r3, #5
 8002ab2:	d824      	bhi.n	8002afe <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	3b02      	subs	r3, #2
 8002aba:	2b03      	cmp	r3, #3
 8002abc:	d81b      	bhi.n	8002af6 <HAL_ADC_ConfigChannel+0x8e>
 8002abe:	a201      	add	r2, pc, #4	@ (adr r2, 8002ac4 <HAL_ADC_ConfigChannel+0x5c>)
 8002ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ac4:	08002ad5 	.word	0x08002ad5
 8002ac8:	08002add 	.word	0x08002add
 8002acc:	08002ae5 	.word	0x08002ae5
 8002ad0:	08002aed 	.word	0x08002aed
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002ad4:	230c      	movs	r3, #12
 8002ad6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002ada:	e010      	b.n	8002afe <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002adc:	2312      	movs	r3, #18
 8002ade:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002ae2:	e00c      	b.n	8002afe <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002ae4:	2318      	movs	r3, #24
 8002ae6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002aea:	e008      	b.n	8002afe <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002aec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002af0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002af4:	e003      	b.n	8002afe <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002af6:	2306      	movs	r3, #6
 8002af8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002afc:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6818      	ldr	r0, [r3, #0]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	461a      	mov	r2, r3
 8002b08:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002b0c:	f7ff fb74 	bl	80021f8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff fc90 	bl	800243a <LL_ADC_REG_IsConversionOngoing>
 8002b1a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7ff fc9c 	bl	8002460 <LL_ADC_INJ_IsConversionOngoing>
 8002b28:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f040 81a4 	bne.w	8002e7e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	f040 819f 	bne.w	8002e7e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6818      	ldr	r0, [r3, #0]
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	6819      	ldr	r1, [r3, #0]
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	f7ff fb7f 	bl	8002250 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	695a      	ldr	r2, [r3, #20]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	08db      	lsrs	r3, r3, #3
 8002b5e:	f003 0303 	and.w	r3, r3, #3
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	2b04      	cmp	r3, #4
 8002b72:	d00a      	beq.n	8002b8a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6818      	ldr	r0, [r3, #0]
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	6919      	ldr	r1, [r3, #16]
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b84:	f7ff fad0 	bl	8002128 <LL_ADC_SetOffset>
 8002b88:	e179      	b.n	8002e7e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2100      	movs	r1, #0
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7ff faed 	bl	8002170 <LL_ADC_GetOffsetChannel>
 8002b96:	4603      	mov	r3, r0
 8002b98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d10a      	bne.n	8002bb6 <HAL_ADC_ConfigChannel+0x14e>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7ff fae2 	bl	8002170 <LL_ADC_GetOffsetChannel>
 8002bac:	4603      	mov	r3, r0
 8002bae:	0e9b      	lsrs	r3, r3, #26
 8002bb0:	f003 021f 	and.w	r2, r3, #31
 8002bb4:	e01e      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0x18c>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2100      	movs	r1, #0
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7ff fad7 	bl	8002170 <LL_ADC_GetOffsetChannel>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002bcc:	fa93 f3a3 	rbit	r3, r3
 8002bd0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002bd4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002bd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002bdc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002be4:	2320      	movs	r3, #32
 8002be6:	e004      	b.n	8002bf2 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002be8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002bec:	fab3 f383 	clz	r3, r3
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d105      	bne.n	8002c0c <HAL_ADC_ConfigChannel+0x1a4>
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	0e9b      	lsrs	r3, r3, #26
 8002c06:	f003 031f 	and.w	r3, r3, #31
 8002c0a:	e018      	b.n	8002c3e <HAL_ADC_ConfigChannel+0x1d6>
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c18:	fa93 f3a3 	rbit	r3, r3
 8002c1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002c20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002c24:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002c28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002c30:	2320      	movs	r3, #32
 8002c32:	e004      	b.n	8002c3e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002c34:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002c38:	fab3 f383 	clz	r3, r3
 8002c3c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d106      	bne.n	8002c50 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2200      	movs	r2, #0
 8002c48:	2100      	movs	r1, #0
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff faa6 	bl	800219c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2101      	movs	r1, #1
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7ff fa8a 	bl	8002170 <LL_ADC_GetOffsetChannel>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d10a      	bne.n	8002c7c <HAL_ADC_ConfigChannel+0x214>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff fa7f 	bl	8002170 <LL_ADC_GetOffsetChannel>
 8002c72:	4603      	mov	r3, r0
 8002c74:	0e9b      	lsrs	r3, r3, #26
 8002c76:	f003 021f 	and.w	r2, r3, #31
 8002c7a:	e01e      	b.n	8002cba <HAL_ADC_ConfigChannel+0x252>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2101      	movs	r1, #1
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7ff fa74 	bl	8002170 <LL_ADC_GetOffsetChannel>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c92:	fa93 f3a3 	rbit	r3, r3
 8002c96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002c9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002ca2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002caa:	2320      	movs	r3, #32
 8002cac:	e004      	b.n	8002cb8 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002cae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002cb2:	fab3 f383 	clz	r3, r3
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d105      	bne.n	8002cd2 <HAL_ADC_ConfigChannel+0x26a>
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	0e9b      	lsrs	r3, r3, #26
 8002ccc:	f003 031f 	and.w	r3, r3, #31
 8002cd0:	e018      	b.n	8002d04 <HAL_ADC_ConfigChannel+0x29c>
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cda:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002cde:	fa93 f3a3 	rbit	r3, r3
 8002ce2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002ce6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002cea:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002cee:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002cf6:	2320      	movs	r3, #32
 8002cf8:	e004      	b.n	8002d04 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002cfa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002cfe:	fab3 f383 	clz	r3, r3
 8002d02:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d106      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	2101      	movs	r1, #1
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff fa43 	bl	800219c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2102      	movs	r1, #2
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff fa27 	bl	8002170 <LL_ADC_GetOffsetChannel>
 8002d22:	4603      	mov	r3, r0
 8002d24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10a      	bne.n	8002d42 <HAL_ADC_ConfigChannel+0x2da>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2102      	movs	r1, #2
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7ff fa1c 	bl	8002170 <LL_ADC_GetOffsetChannel>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	0e9b      	lsrs	r3, r3, #26
 8002d3c:	f003 021f 	and.w	r2, r3, #31
 8002d40:	e01e      	b.n	8002d80 <HAL_ADC_ConfigChannel+0x318>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2102      	movs	r1, #2
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7ff fa11 	bl	8002170 <LL_ADC_GetOffsetChannel>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d54:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d58:	fa93 f3a3 	rbit	r3, r3
 8002d5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002d60:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d64:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002d68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d101      	bne.n	8002d74 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002d70:	2320      	movs	r3, #32
 8002d72:	e004      	b.n	8002d7e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002d74:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d78:	fab3 f383 	clz	r3, r3
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d105      	bne.n	8002d98 <HAL_ADC_ConfigChannel+0x330>
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	0e9b      	lsrs	r3, r3, #26
 8002d92:	f003 031f 	and.w	r3, r3, #31
 8002d96:	e014      	b.n	8002dc2 <HAL_ADC_ConfigChannel+0x35a>
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002da0:	fa93 f3a3 	rbit	r3, r3
 8002da4:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002da6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002da8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002dac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d101      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002db4:	2320      	movs	r3, #32
 8002db6:	e004      	b.n	8002dc2 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002db8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002dbc:	fab3 f383 	clz	r3, r3
 8002dc0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d106      	bne.n	8002dd4 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	2102      	movs	r1, #2
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7ff f9e4 	bl	800219c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2103      	movs	r1, #3
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff f9c8 	bl	8002170 <LL_ADC_GetOffsetChannel>
 8002de0:	4603      	mov	r3, r0
 8002de2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10a      	bne.n	8002e00 <HAL_ADC_ConfigChannel+0x398>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2103      	movs	r1, #3
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7ff f9bd 	bl	8002170 <LL_ADC_GetOffsetChannel>
 8002df6:	4603      	mov	r3, r0
 8002df8:	0e9b      	lsrs	r3, r3, #26
 8002dfa:	f003 021f 	and.w	r2, r3, #31
 8002dfe:	e017      	b.n	8002e30 <HAL_ADC_ConfigChannel+0x3c8>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2103      	movs	r1, #3
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7ff f9b2 	bl	8002170 <LL_ADC_GetOffsetChannel>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e10:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e12:	fa93 f3a3 	rbit	r3, r3
 8002e16:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002e18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e1a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002e1c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002e22:	2320      	movs	r3, #32
 8002e24:	e003      	b.n	8002e2e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002e26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e28:	fab3 f383 	clz	r3, r3
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d105      	bne.n	8002e48 <HAL_ADC_ConfigChannel+0x3e0>
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	0e9b      	lsrs	r3, r3, #26
 8002e42:	f003 031f 	and.w	r3, r3, #31
 8002e46:	e011      	b.n	8002e6c <HAL_ADC_ConfigChannel+0x404>
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e50:	fa93 f3a3 	rbit	r3, r3
 8002e54:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002e56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e58:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002e5a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d101      	bne.n	8002e64 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002e60:	2320      	movs	r3, #32
 8002e62:	e003      	b.n	8002e6c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002e64:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e66:	fab3 f383 	clz	r3, r3
 8002e6a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d106      	bne.n	8002e7e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2200      	movs	r2, #0
 8002e76:	2103      	movs	r1, #3
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff f98f 	bl	800219c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7ff fab2 	bl	80023ec <LL_ADC_IsEnabled>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f040 8140 	bne.w	8003110 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6818      	ldr	r0, [r3, #0]
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	6819      	ldr	r1, [r3, #0]
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	f7ff fa03 	bl	80022a8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	4a8f      	ldr	r2, [pc, #572]	@ (80030e4 <HAL_ADC_ConfigChannel+0x67c>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	f040 8131 	bne.w	8003110 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10b      	bne.n	8002ed6 <HAL_ADC_ConfigChannel+0x46e>
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	0e9b      	lsrs	r3, r3, #26
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	f003 031f 	and.w	r3, r3, #31
 8002eca:	2b09      	cmp	r3, #9
 8002ecc:	bf94      	ite	ls
 8002ece:	2301      	movls	r3, #1
 8002ed0:	2300      	movhi	r3, #0
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	e019      	b.n	8002f0a <HAL_ADC_ConfigChannel+0x4a2>
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002edc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ede:	fa93 f3a3 	rbit	r3, r3
 8002ee2:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002ee4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ee6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002ee8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002eee:	2320      	movs	r3, #32
 8002ef0:	e003      	b.n	8002efa <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002ef2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ef4:	fab3 f383 	clz	r3, r3
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	3301      	adds	r3, #1
 8002efc:	f003 031f 	and.w	r3, r3, #31
 8002f00:	2b09      	cmp	r3, #9
 8002f02:	bf94      	ite	ls
 8002f04:	2301      	movls	r3, #1
 8002f06:	2300      	movhi	r3, #0
 8002f08:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d079      	beq.n	8003002 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d107      	bne.n	8002f2a <HAL_ADC_ConfigChannel+0x4c2>
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	0e9b      	lsrs	r3, r3, #26
 8002f20:	3301      	adds	r3, #1
 8002f22:	069b      	lsls	r3, r3, #26
 8002f24:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f28:	e015      	b.n	8002f56 <HAL_ADC_ConfigChannel+0x4ee>
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f32:	fa93 f3a3 	rbit	r3, r3
 8002f36:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002f38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f3a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002f3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002f42:	2320      	movs	r3, #32
 8002f44:	e003      	b.n	8002f4e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002f46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f48:	fab3 f383 	clz	r3, r3
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	3301      	adds	r3, #1
 8002f50:	069b      	lsls	r3, r3, #26
 8002f52:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d109      	bne.n	8002f76 <HAL_ADC_ConfigChannel+0x50e>
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	0e9b      	lsrs	r3, r3, #26
 8002f68:	3301      	adds	r3, #1
 8002f6a:	f003 031f 	and.w	r3, r3, #31
 8002f6e:	2101      	movs	r1, #1
 8002f70:	fa01 f303 	lsl.w	r3, r1, r3
 8002f74:	e017      	b.n	8002fa6 <HAL_ADC_ConfigChannel+0x53e>
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f7e:	fa93 f3a3 	rbit	r3, r3
 8002f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002f84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f86:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002f88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002f8e:	2320      	movs	r3, #32
 8002f90:	e003      	b.n	8002f9a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002f92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f94:	fab3 f383 	clz	r3, r3
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	f003 031f 	and.w	r3, r3, #31
 8002fa0:	2101      	movs	r1, #1
 8002fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa6:	ea42 0103 	orr.w	r1, r2, r3
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10a      	bne.n	8002fcc <HAL_ADC_ConfigChannel+0x564>
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	0e9b      	lsrs	r3, r3, #26
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	f003 021f 	and.w	r2, r3, #31
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	4413      	add	r3, r2
 8002fc8:	051b      	lsls	r3, r3, #20
 8002fca:	e018      	b.n	8002ffe <HAL_ADC_ConfigChannel+0x596>
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fd4:	fa93 f3a3 	rbit	r3, r3
 8002fd8:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fdc:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d101      	bne.n	8002fe8 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002fe4:	2320      	movs	r3, #32
 8002fe6:	e003      	b.n	8002ff0 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fea:	fab3 f383 	clz	r3, r3
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	f003 021f 	and.w	r2, r3, #31
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	4413      	add	r3, r2
 8002ffc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ffe:	430b      	orrs	r3, r1
 8003000:	e081      	b.n	8003106 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800300a:	2b00      	cmp	r3, #0
 800300c:	d107      	bne.n	800301e <HAL_ADC_ConfigChannel+0x5b6>
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	0e9b      	lsrs	r3, r3, #26
 8003014:	3301      	adds	r3, #1
 8003016:	069b      	lsls	r3, r3, #26
 8003018:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800301c:	e015      	b.n	800304a <HAL_ADC_ConfigChannel+0x5e2>
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003026:	fa93 f3a3 	rbit	r3, r3
 800302a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800302c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800302e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8003036:	2320      	movs	r3, #32
 8003038:	e003      	b.n	8003042 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800303a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800303c:	fab3 f383 	clz	r3, r3
 8003040:	b2db      	uxtb	r3, r3
 8003042:	3301      	adds	r3, #1
 8003044:	069b      	lsls	r3, r3, #26
 8003046:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003052:	2b00      	cmp	r3, #0
 8003054:	d109      	bne.n	800306a <HAL_ADC_ConfigChannel+0x602>
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	0e9b      	lsrs	r3, r3, #26
 800305c:	3301      	adds	r3, #1
 800305e:	f003 031f 	and.w	r3, r3, #31
 8003062:	2101      	movs	r1, #1
 8003064:	fa01 f303 	lsl.w	r3, r1, r3
 8003068:	e017      	b.n	800309a <HAL_ADC_ConfigChannel+0x632>
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	fa93 f3a3 	rbit	r3, r3
 8003076:	61bb      	str	r3, [r7, #24]
  return result;
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800307c:	6a3b      	ldr	r3, [r7, #32]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8003082:	2320      	movs	r3, #32
 8003084:	e003      	b.n	800308e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8003086:	6a3b      	ldr	r3, [r7, #32]
 8003088:	fab3 f383 	clz	r3, r3
 800308c:	b2db      	uxtb	r3, r3
 800308e:	3301      	adds	r3, #1
 8003090:	f003 031f 	and.w	r3, r3, #31
 8003094:	2101      	movs	r1, #1
 8003096:	fa01 f303 	lsl.w	r3, r1, r3
 800309a:	ea42 0103 	orr.w	r1, r2, r3
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10d      	bne.n	80030c6 <HAL_ADC_ConfigChannel+0x65e>
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	0e9b      	lsrs	r3, r3, #26
 80030b0:	3301      	adds	r3, #1
 80030b2:	f003 021f 	and.w	r2, r3, #31
 80030b6:	4613      	mov	r3, r2
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	4413      	add	r3, r2
 80030bc:	3b1e      	subs	r3, #30
 80030be:	051b      	lsls	r3, r3, #20
 80030c0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80030c4:	e01e      	b.n	8003104 <HAL_ADC_ConfigChannel+0x69c>
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	fa93 f3a3 	rbit	r3, r3
 80030d2:	60fb      	str	r3, [r7, #12]
  return result;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d104      	bne.n	80030e8 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80030de:	2320      	movs	r3, #32
 80030e0:	e006      	b.n	80030f0 <HAL_ADC_ConfigChannel+0x688>
 80030e2:	bf00      	nop
 80030e4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	fab3 f383 	clz	r3, r3
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	3301      	adds	r3, #1
 80030f2:	f003 021f 	and.w	r2, r3, #31
 80030f6:	4613      	mov	r3, r2
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	4413      	add	r3, r2
 80030fc:	3b1e      	subs	r3, #30
 80030fe:	051b      	lsls	r3, r3, #20
 8003100:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003104:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800310a:	4619      	mov	r1, r3
 800310c:	f7ff f8a0 	bl	8002250 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	4b44      	ldr	r3, [pc, #272]	@ (8003228 <HAL_ADC_ConfigChannel+0x7c0>)
 8003116:	4013      	ands	r3, r2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d07a      	beq.n	8003212 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800311c:	4843      	ldr	r0, [pc, #268]	@ (800322c <HAL_ADC_ConfigChannel+0x7c4>)
 800311e:	f7fe fff5 	bl	800210c <LL_ADC_GetCommonPathInternalCh>
 8003122:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a41      	ldr	r2, [pc, #260]	@ (8003230 <HAL_ADC_ConfigChannel+0x7c8>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d12c      	bne.n	800318a <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003130:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003134:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d126      	bne.n	800318a <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a3c      	ldr	r2, [pc, #240]	@ (8003234 <HAL_ADC_ConfigChannel+0x7cc>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d004      	beq.n	8003150 <HAL_ADC_ConfigChannel+0x6e8>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a3b      	ldr	r2, [pc, #236]	@ (8003238 <HAL_ADC_ConfigChannel+0x7d0>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d15d      	bne.n	800320c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003150:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003154:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003158:	4619      	mov	r1, r3
 800315a:	4834      	ldr	r0, [pc, #208]	@ (800322c <HAL_ADC_ConfigChannel+0x7c4>)
 800315c:	f7fe ffc3 	bl	80020e6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003160:	4b36      	ldr	r3, [pc, #216]	@ (800323c <HAL_ADC_ConfigChannel+0x7d4>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	099b      	lsrs	r3, r3, #6
 8003166:	4a36      	ldr	r2, [pc, #216]	@ (8003240 <HAL_ADC_ConfigChannel+0x7d8>)
 8003168:	fba2 2303 	umull	r2, r3, r2, r3
 800316c:	099b      	lsrs	r3, r3, #6
 800316e:	1c5a      	adds	r2, r3, #1
 8003170:	4613      	mov	r3, r2
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	4413      	add	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800317a:	e002      	b.n	8003182 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	3b01      	subs	r3, #1
 8003180:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1f9      	bne.n	800317c <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003188:	e040      	b.n	800320c <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a2d      	ldr	r2, [pc, #180]	@ (8003244 <HAL_ADC_ConfigChannel+0x7dc>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d118      	bne.n	80031c6 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003194:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003198:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d112      	bne.n	80031c6 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a23      	ldr	r2, [pc, #140]	@ (8003234 <HAL_ADC_ConfigChannel+0x7cc>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d004      	beq.n	80031b4 <HAL_ADC_ConfigChannel+0x74c>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a22      	ldr	r2, [pc, #136]	@ (8003238 <HAL_ADC_ConfigChannel+0x7d0>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d12d      	bne.n	8003210 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80031b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031bc:	4619      	mov	r1, r3
 80031be:	481b      	ldr	r0, [pc, #108]	@ (800322c <HAL_ADC_ConfigChannel+0x7c4>)
 80031c0:	f7fe ff91 	bl	80020e6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031c4:	e024      	b.n	8003210 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a1f      	ldr	r2, [pc, #124]	@ (8003248 <HAL_ADC_ConfigChannel+0x7e0>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d120      	bne.n	8003212 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80031d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80031d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d11a      	bne.n	8003212 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a14      	ldr	r2, [pc, #80]	@ (8003234 <HAL_ADC_ConfigChannel+0x7cc>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d115      	bne.n	8003212 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80031ea:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80031ee:	4619      	mov	r1, r3
 80031f0:	480e      	ldr	r0, [pc, #56]	@ (800322c <HAL_ADC_ConfigChannel+0x7c4>)
 80031f2:	f7fe ff78 	bl	80020e6 <LL_ADC_SetCommonPathInternalCh>
 80031f6:	e00c      	b.n	8003212 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031fc:	f043 0220 	orr.w	r2, r3, #32
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800320a:	e002      	b.n	8003212 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800320c:	bf00      	nop
 800320e:	e000      	b.n	8003212 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003210:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800321a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800321e:	4618      	mov	r0, r3
 8003220:	37d8      	adds	r7, #216	@ 0xd8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	80080000 	.word	0x80080000
 800322c:	50040300 	.word	0x50040300
 8003230:	c7520000 	.word	0xc7520000
 8003234:	50040000 	.word	0x50040000
 8003238:	50040200 	.word	0x50040200
 800323c:	20000004 	.word	0x20000004
 8003240:	053e2d63 	.word	0x053e2d63
 8003244:	cb840000 	.word	0xcb840000
 8003248:	80000001 	.word	0x80000001

0800324c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003254:	2300      	movs	r3, #0
 8003256:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff f8c5 	bl	80023ec <LL_ADC_IsEnabled>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d169      	bne.n	800333c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689a      	ldr	r2, [r3, #8]
 800326e:	4b36      	ldr	r3, [pc, #216]	@ (8003348 <ADC_Enable+0xfc>)
 8003270:	4013      	ands	r3, r2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00d      	beq.n	8003292 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800327a:	f043 0210 	orr.w	r2, r3, #16
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003286:	f043 0201 	orr.w	r2, r3, #1
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e055      	b.n	800333e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f7ff f894 	bl	80023c4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800329c:	482b      	ldr	r0, [pc, #172]	@ (800334c <ADC_Enable+0x100>)
 800329e:	f7fe ff35 	bl	800210c <LL_ADC_GetCommonPathInternalCh>
 80032a2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80032a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d013      	beq.n	80032d4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032ac:	4b28      	ldr	r3, [pc, #160]	@ (8003350 <ADC_Enable+0x104>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	099b      	lsrs	r3, r3, #6
 80032b2:	4a28      	ldr	r2, [pc, #160]	@ (8003354 <ADC_Enable+0x108>)
 80032b4:	fba2 2303 	umull	r2, r3, r2, r3
 80032b8:	099b      	lsrs	r3, r3, #6
 80032ba:	1c5a      	adds	r2, r3, #1
 80032bc:	4613      	mov	r3, r2
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	4413      	add	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80032c6:	e002      	b.n	80032ce <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	3b01      	subs	r3, #1
 80032cc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1f9      	bne.n	80032c8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80032d4:	f7fe fec4 	bl	8002060 <HAL_GetTick>
 80032d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032da:	e028      	b.n	800332e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7ff f883 	bl	80023ec <LL_ADC_IsEnabled>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d104      	bne.n	80032f6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff f867 	bl	80023c4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80032f6:	f7fe feb3 	bl	8002060 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d914      	bls.n	800332e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	2b01      	cmp	r3, #1
 8003310:	d00d      	beq.n	800332e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003316:	f043 0210 	orr.w	r2, r3, #16
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003322:	f043 0201 	orr.w	r2, r3, #1
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e007      	b.n	800333e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b01      	cmp	r3, #1
 800333a:	d1cf      	bne.n	80032dc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	8000003f 	.word	0x8000003f
 800334c:	50040300 	.word	0x50040300
 8003350:	20000004 	.word	0x20000004
 8003354:	053e2d63 	.word	0x053e2d63

08003358 <LL_ADC_IsEnabled>:
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	2b01      	cmp	r3, #1
 800336a:	d101      	bne.n	8003370 <LL_ADC_IsEnabled+0x18>
 800336c:	2301      	movs	r3, #1
 800336e:	e000      	b.n	8003372 <LL_ADC_IsEnabled+0x1a>
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr

0800337e <LL_ADC_REG_IsConversionOngoing>:
{
 800337e:	b480      	push	{r7}
 8003380:	b083      	sub	sp, #12
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 0304 	and.w	r3, r3, #4
 800338e:	2b04      	cmp	r3, #4
 8003390:	d101      	bne.n	8003396 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003392:	2301      	movs	r3, #1
 8003394:	e000      	b.n	8003398 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80033a4:	b590      	push	{r4, r7, lr}
 80033a6:	b09f      	sub	sp, #124	@ 0x7c
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033ae:	2300      	movs	r3, #0
 80033b0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d101      	bne.n	80033c2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80033be:	2302      	movs	r3, #2
 80033c0:	e093      	b.n	80034ea <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80033ca:	2300      	movs	r3, #0
 80033cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80033ce:	2300      	movs	r3, #0
 80033d0:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a47      	ldr	r2, [pc, #284]	@ (80034f4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d102      	bne.n	80033e2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80033dc:	4b46      	ldr	r3, [pc, #280]	@ (80034f8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80033de:	60bb      	str	r3, [r7, #8]
 80033e0:	e001      	b.n	80033e6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80033e2:	2300      	movs	r3, #0
 80033e4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10b      	bne.n	8003404 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033f0:	f043 0220 	orr.w	r2, r3, #32
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e072      	b.n	80034ea <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	4618      	mov	r0, r3
 8003408:	f7ff ffb9 	bl	800337e <LL_ADC_REG_IsConversionOngoing>
 800340c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4618      	mov	r0, r3
 8003414:	f7ff ffb3 	bl	800337e <LL_ADC_REG_IsConversionOngoing>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d154      	bne.n	80034c8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800341e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003420:	2b00      	cmp	r3, #0
 8003422:	d151      	bne.n	80034c8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003424:	4b35      	ldr	r3, [pc, #212]	@ (80034fc <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003426:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d02c      	beq.n	800348a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003430:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	6859      	ldr	r1, [r3, #4]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003442:	035b      	lsls	r3, r3, #13
 8003444:	430b      	orrs	r3, r1
 8003446:	431a      	orrs	r2, r3
 8003448:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800344a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800344c:	4829      	ldr	r0, [pc, #164]	@ (80034f4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800344e:	f7ff ff83 	bl	8003358 <LL_ADC_IsEnabled>
 8003452:	4604      	mov	r4, r0
 8003454:	4828      	ldr	r0, [pc, #160]	@ (80034f8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003456:	f7ff ff7f 	bl	8003358 <LL_ADC_IsEnabled>
 800345a:	4603      	mov	r3, r0
 800345c:	431c      	orrs	r4, r3
 800345e:	4828      	ldr	r0, [pc, #160]	@ (8003500 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003460:	f7ff ff7a 	bl	8003358 <LL_ADC_IsEnabled>
 8003464:	4603      	mov	r3, r0
 8003466:	4323      	orrs	r3, r4
 8003468:	2b00      	cmp	r3, #0
 800346a:	d137      	bne.n	80034dc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800346c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003474:	f023 030f 	bic.w	r3, r3, #15
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	6811      	ldr	r1, [r2, #0]
 800347c:	683a      	ldr	r2, [r7, #0]
 800347e:	6892      	ldr	r2, [r2, #8]
 8003480:	430a      	orrs	r2, r1
 8003482:	431a      	orrs	r2, r3
 8003484:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003486:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003488:	e028      	b.n	80034dc <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800348a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003492:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003494:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003496:	4817      	ldr	r0, [pc, #92]	@ (80034f4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003498:	f7ff ff5e 	bl	8003358 <LL_ADC_IsEnabled>
 800349c:	4604      	mov	r4, r0
 800349e:	4816      	ldr	r0, [pc, #88]	@ (80034f8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80034a0:	f7ff ff5a 	bl	8003358 <LL_ADC_IsEnabled>
 80034a4:	4603      	mov	r3, r0
 80034a6:	431c      	orrs	r4, r3
 80034a8:	4815      	ldr	r0, [pc, #84]	@ (8003500 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80034aa:	f7ff ff55 	bl	8003358 <LL_ADC_IsEnabled>
 80034ae:	4603      	mov	r3, r0
 80034b0:	4323      	orrs	r3, r4
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d112      	bne.n	80034dc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80034b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80034be:	f023 030f 	bic.w	r3, r3, #15
 80034c2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80034c4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80034c6:	e009      	b.n	80034dc <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034cc:	f043 0220 	orr.w	r2, r3, #32
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80034da:	e000      	b.n	80034de <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80034dc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80034e6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	377c      	adds	r7, #124	@ 0x7c
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd90      	pop	{r4, r7, pc}
 80034f2:	bf00      	nop
 80034f4:	50040000 	.word	0x50040000
 80034f8:	50040100 	.word	0x50040100
 80034fc:	50040300 	.word	0x50040300
 8003500:	50040200 	.word	0x50040200

08003504 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f003 0307 	and.w	r3, r3, #7
 8003512:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003514:	4b0c      	ldr	r3, [pc, #48]	@ (8003548 <__NVIC_SetPriorityGrouping+0x44>)
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003520:	4013      	ands	r3, r2
 8003522:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800352c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003530:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003534:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003536:	4a04      	ldr	r2, [pc, #16]	@ (8003548 <__NVIC_SetPriorityGrouping+0x44>)
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	60d3      	str	r3, [r2, #12]
}
 800353c:	bf00      	nop
 800353e:	3714      	adds	r7, #20
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr
 8003548:	e000ed00 	.word	0xe000ed00

0800354c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003550:	4b04      	ldr	r3, [pc, #16]	@ (8003564 <__NVIC_GetPriorityGrouping+0x18>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	0a1b      	lsrs	r3, r3, #8
 8003556:	f003 0307 	and.w	r3, r3, #7
}
 800355a:	4618      	mov	r0, r3
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr
 8003564:	e000ed00 	.word	0xe000ed00

08003568 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	4603      	mov	r3, r0
 8003570:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003576:	2b00      	cmp	r3, #0
 8003578:	db0b      	blt.n	8003592 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800357a:	79fb      	ldrb	r3, [r7, #7]
 800357c:	f003 021f 	and.w	r2, r3, #31
 8003580:	4907      	ldr	r1, [pc, #28]	@ (80035a0 <__NVIC_EnableIRQ+0x38>)
 8003582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003586:	095b      	lsrs	r3, r3, #5
 8003588:	2001      	movs	r0, #1
 800358a:	fa00 f202 	lsl.w	r2, r0, r2
 800358e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003592:	bf00      	nop
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	e000e100 	.word	0xe000e100

080035a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	4603      	mov	r3, r0
 80035ac:	6039      	str	r1, [r7, #0]
 80035ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	db0a      	blt.n	80035ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	b2da      	uxtb	r2, r3
 80035bc:	490c      	ldr	r1, [pc, #48]	@ (80035f0 <__NVIC_SetPriority+0x4c>)
 80035be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c2:	0112      	lsls	r2, r2, #4
 80035c4:	b2d2      	uxtb	r2, r2
 80035c6:	440b      	add	r3, r1
 80035c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035cc:	e00a      	b.n	80035e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	b2da      	uxtb	r2, r3
 80035d2:	4908      	ldr	r1, [pc, #32]	@ (80035f4 <__NVIC_SetPriority+0x50>)
 80035d4:	79fb      	ldrb	r3, [r7, #7]
 80035d6:	f003 030f 	and.w	r3, r3, #15
 80035da:	3b04      	subs	r3, #4
 80035dc:	0112      	lsls	r2, r2, #4
 80035de:	b2d2      	uxtb	r2, r2
 80035e0:	440b      	add	r3, r1
 80035e2:	761a      	strb	r2, [r3, #24]
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr
 80035f0:	e000e100 	.word	0xe000e100
 80035f4:	e000ed00 	.word	0xe000ed00

080035f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b089      	sub	sp, #36	@ 0x24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f003 0307 	and.w	r3, r3, #7
 800360a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	f1c3 0307 	rsb	r3, r3, #7
 8003612:	2b04      	cmp	r3, #4
 8003614:	bf28      	it	cs
 8003616:	2304      	movcs	r3, #4
 8003618:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	3304      	adds	r3, #4
 800361e:	2b06      	cmp	r3, #6
 8003620:	d902      	bls.n	8003628 <NVIC_EncodePriority+0x30>
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	3b03      	subs	r3, #3
 8003626:	e000      	b.n	800362a <NVIC_EncodePriority+0x32>
 8003628:	2300      	movs	r3, #0
 800362a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800362c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	fa02 f303 	lsl.w	r3, r2, r3
 8003636:	43da      	mvns	r2, r3
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	401a      	ands	r2, r3
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003640:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	fa01 f303 	lsl.w	r3, r1, r3
 800364a:	43d9      	mvns	r1, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003650:	4313      	orrs	r3, r2
         );
}
 8003652:	4618      	mov	r0, r3
 8003654:	3724      	adds	r7, #36	@ 0x24
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
	...

08003660 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	3b01      	subs	r3, #1
 800366c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003670:	d301      	bcc.n	8003676 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003672:	2301      	movs	r3, #1
 8003674:	e00f      	b.n	8003696 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003676:	4a0a      	ldr	r2, [pc, #40]	@ (80036a0 <SysTick_Config+0x40>)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3b01      	subs	r3, #1
 800367c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800367e:	210f      	movs	r1, #15
 8003680:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003684:	f7ff ff8e 	bl	80035a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003688:	4b05      	ldr	r3, [pc, #20]	@ (80036a0 <SysTick_Config+0x40>)
 800368a:	2200      	movs	r2, #0
 800368c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800368e:	4b04      	ldr	r3, [pc, #16]	@ (80036a0 <SysTick_Config+0x40>)
 8003690:	2207      	movs	r2, #7
 8003692:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	e000e010 	.word	0xe000e010

080036a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f7ff ff29 	bl	8003504 <__NVIC_SetPriorityGrouping>
}
 80036b2:	bf00      	nop
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b086      	sub	sp, #24
 80036be:	af00      	add	r7, sp, #0
 80036c0:	4603      	mov	r3, r0
 80036c2:	60b9      	str	r1, [r7, #8]
 80036c4:	607a      	str	r2, [r7, #4]
 80036c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80036c8:	2300      	movs	r3, #0
 80036ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80036cc:	f7ff ff3e 	bl	800354c <__NVIC_GetPriorityGrouping>
 80036d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	68b9      	ldr	r1, [r7, #8]
 80036d6:	6978      	ldr	r0, [r7, #20]
 80036d8:	f7ff ff8e 	bl	80035f8 <NVIC_EncodePriority>
 80036dc:	4602      	mov	r2, r0
 80036de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036e2:	4611      	mov	r1, r2
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff ff5d 	bl	80035a4 <__NVIC_SetPriority>
}
 80036ea:	bf00      	nop
 80036ec:	3718      	adds	r7, #24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b082      	sub	sp, #8
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	4603      	mov	r3, r0
 80036fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003700:	4618      	mov	r0, r3
 8003702:	f7ff ff31 	bl	8003568 <__NVIC_EnableIRQ>
}
 8003706:	bf00      	nop
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b082      	sub	sp, #8
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7ff ffa2 	bl	8003660 <SysTick_Config>
 800371c:	4603      	mov	r3, r0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
	...

08003728 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003728:	b480      	push	{r7}
 800372a:	b087      	sub	sp, #28
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003732:	2300      	movs	r3, #0
 8003734:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003736:	e17f      	b.n	8003a38 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	2101      	movs	r1, #1
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	fa01 f303 	lsl.w	r3, r1, r3
 8003744:	4013      	ands	r3, r2
 8003746:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2b00      	cmp	r3, #0
 800374c:	f000 8171 	beq.w	8003a32 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f003 0303 	and.w	r3, r3, #3
 8003758:	2b01      	cmp	r3, #1
 800375a:	d005      	beq.n	8003768 <HAL_GPIO_Init+0x40>
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f003 0303 	and.w	r3, r3, #3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d130      	bne.n	80037ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	2203      	movs	r2, #3
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	43db      	mvns	r3, r3
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	4013      	ands	r3, r2
 800377e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	68da      	ldr	r2, [r3, #12]
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	4313      	orrs	r3, r2
 8003790:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800379e:	2201      	movs	r2, #1
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	fa02 f303 	lsl.w	r3, r2, r3
 80037a6:	43db      	mvns	r3, r3
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	4013      	ands	r3, r2
 80037ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	091b      	lsrs	r3, r3, #4
 80037b4:	f003 0201 	and.w	r2, r3, #1
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	fa02 f303 	lsl.w	r3, r2, r3
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f003 0303 	and.w	r3, r3, #3
 80037d2:	2b03      	cmp	r3, #3
 80037d4:	d118      	bne.n	8003808 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80037dc:	2201      	movs	r2, #1
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	fa02 f303 	lsl.w	r3, r2, r3
 80037e4:	43db      	mvns	r3, r3
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	4013      	ands	r3, r2
 80037ea:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	08db      	lsrs	r3, r3, #3
 80037f2:	f003 0201 	and.w	r2, r3, #1
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	fa02 f303 	lsl.w	r3, r2, r3
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	4313      	orrs	r3, r2
 8003800:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f003 0303 	and.w	r3, r3, #3
 8003810:	2b03      	cmp	r3, #3
 8003812:	d017      	beq.n	8003844 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	2203      	movs	r2, #3
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	43db      	mvns	r3, r3
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	4013      	ands	r3, r2
 800382a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	689a      	ldr	r2, [r3, #8]
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	005b      	lsls	r3, r3, #1
 8003834:	fa02 f303 	lsl.w	r3, r2, r3
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	4313      	orrs	r3, r2
 800383c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f003 0303 	and.w	r3, r3, #3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d123      	bne.n	8003898 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	08da      	lsrs	r2, r3, #3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3208      	adds	r2, #8
 8003858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800385c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	220f      	movs	r2, #15
 8003868:	fa02 f303 	lsl.w	r3, r2, r3
 800386c:	43db      	mvns	r3, r3
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	4013      	ands	r3, r2
 8003872:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	691a      	ldr	r2, [r3, #16]
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	f003 0307 	and.w	r3, r3, #7
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	4313      	orrs	r3, r2
 8003888:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	08da      	lsrs	r2, r3, #3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	3208      	adds	r2, #8
 8003892:	6939      	ldr	r1, [r7, #16]
 8003894:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	2203      	movs	r2, #3
 80038a4:	fa02 f303 	lsl.w	r3, r2, r3
 80038a8:	43db      	mvns	r3, r3
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	4013      	ands	r3, r2
 80038ae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f003 0203 	and.w	r2, r3, #3
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 80ac 	beq.w	8003a32 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038da:	4b5f      	ldr	r3, [pc, #380]	@ (8003a58 <HAL_GPIO_Init+0x330>)
 80038dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038de:	4a5e      	ldr	r2, [pc, #376]	@ (8003a58 <HAL_GPIO_Init+0x330>)
 80038e0:	f043 0301 	orr.w	r3, r3, #1
 80038e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80038e6:	4b5c      	ldr	r3, [pc, #368]	@ (8003a58 <HAL_GPIO_Init+0x330>)
 80038e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	60bb      	str	r3, [r7, #8]
 80038f0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80038f2:	4a5a      	ldr	r2, [pc, #360]	@ (8003a5c <HAL_GPIO_Init+0x334>)
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	089b      	lsrs	r3, r3, #2
 80038f8:	3302      	adds	r3, #2
 80038fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	f003 0303 	and.w	r3, r3, #3
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	220f      	movs	r2, #15
 800390a:	fa02 f303 	lsl.w	r3, r2, r3
 800390e:	43db      	mvns	r3, r3
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	4013      	ands	r3, r2
 8003914:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800391c:	d025      	beq.n	800396a <HAL_GPIO_Init+0x242>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a4f      	ldr	r2, [pc, #316]	@ (8003a60 <HAL_GPIO_Init+0x338>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d01f      	beq.n	8003966 <HAL_GPIO_Init+0x23e>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a4e      	ldr	r2, [pc, #312]	@ (8003a64 <HAL_GPIO_Init+0x33c>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d019      	beq.n	8003962 <HAL_GPIO_Init+0x23a>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a4d      	ldr	r2, [pc, #308]	@ (8003a68 <HAL_GPIO_Init+0x340>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d013      	beq.n	800395e <HAL_GPIO_Init+0x236>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a4c      	ldr	r2, [pc, #304]	@ (8003a6c <HAL_GPIO_Init+0x344>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d00d      	beq.n	800395a <HAL_GPIO_Init+0x232>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a4b      	ldr	r2, [pc, #300]	@ (8003a70 <HAL_GPIO_Init+0x348>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d007      	beq.n	8003956 <HAL_GPIO_Init+0x22e>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a4a      	ldr	r2, [pc, #296]	@ (8003a74 <HAL_GPIO_Init+0x34c>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d101      	bne.n	8003952 <HAL_GPIO_Init+0x22a>
 800394e:	2306      	movs	r3, #6
 8003950:	e00c      	b.n	800396c <HAL_GPIO_Init+0x244>
 8003952:	2307      	movs	r3, #7
 8003954:	e00a      	b.n	800396c <HAL_GPIO_Init+0x244>
 8003956:	2305      	movs	r3, #5
 8003958:	e008      	b.n	800396c <HAL_GPIO_Init+0x244>
 800395a:	2304      	movs	r3, #4
 800395c:	e006      	b.n	800396c <HAL_GPIO_Init+0x244>
 800395e:	2303      	movs	r3, #3
 8003960:	e004      	b.n	800396c <HAL_GPIO_Init+0x244>
 8003962:	2302      	movs	r3, #2
 8003964:	e002      	b.n	800396c <HAL_GPIO_Init+0x244>
 8003966:	2301      	movs	r3, #1
 8003968:	e000      	b.n	800396c <HAL_GPIO_Init+0x244>
 800396a:	2300      	movs	r3, #0
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	f002 0203 	and.w	r2, r2, #3
 8003972:	0092      	lsls	r2, r2, #2
 8003974:	4093      	lsls	r3, r2
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	4313      	orrs	r3, r2
 800397a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800397c:	4937      	ldr	r1, [pc, #220]	@ (8003a5c <HAL_GPIO_Init+0x334>)
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	089b      	lsrs	r3, r3, #2
 8003982:	3302      	adds	r3, #2
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800398a:	4b3b      	ldr	r3, [pc, #236]	@ (8003a78 <HAL_GPIO_Init+0x350>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	43db      	mvns	r3, r3
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	4013      	ands	r3, r2
 8003998:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d003      	beq.n	80039ae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80039ae:	4a32      	ldr	r2, [pc, #200]	@ (8003a78 <HAL_GPIO_Init+0x350>)
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80039b4:	4b30      	ldr	r3, [pc, #192]	@ (8003a78 <HAL_GPIO_Init+0x350>)
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	43db      	mvns	r3, r3
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	4013      	ands	r3, r2
 80039c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d003      	beq.n	80039d8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80039d8:	4a27      	ldr	r2, [pc, #156]	@ (8003a78 <HAL_GPIO_Init+0x350>)
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80039de:	4b26      	ldr	r3, [pc, #152]	@ (8003a78 <HAL_GPIO_Init+0x350>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	43db      	mvns	r3, r3
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	4013      	ands	r3, r2
 80039ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d003      	beq.n	8003a02 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a02:	4a1d      	ldr	r2, [pc, #116]	@ (8003a78 <HAL_GPIO_Init+0x350>)
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003a08:	4b1b      	ldr	r3, [pc, #108]	@ (8003a78 <HAL_GPIO_Init+0x350>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	43db      	mvns	r3, r3
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	4013      	ands	r3, r2
 8003a16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d003      	beq.n	8003a2c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a2c:	4a12      	ldr	r2, [pc, #72]	@ (8003a78 <HAL_GPIO_Init+0x350>)
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	3301      	adds	r3, #1
 8003a36:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f47f ae78 	bne.w	8003738 <HAL_GPIO_Init+0x10>
  }
}
 8003a48:	bf00      	nop
 8003a4a:	bf00      	nop
 8003a4c:	371c      	adds	r7, #28
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	40021000 	.word	0x40021000
 8003a5c:	40010000 	.word	0x40010000
 8003a60:	48000400 	.word	0x48000400
 8003a64:	48000800 	.word	0x48000800
 8003a68:	48000c00 	.word	0x48000c00
 8003a6c:	48001000 	.word	0x48001000
 8003a70:	48001400 	.word	0x48001400
 8003a74:	48001800 	.word	0x48001800
 8003a78:	40010400 	.word	0x40010400

08003a7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	460b      	mov	r3, r1
 8003a86:	807b      	strh	r3, [r7, #2]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a8c:	787b      	ldrb	r3, [r7, #1]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d003      	beq.n	8003a9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a92:	887a      	ldrh	r2, [r7, #2]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a98:	e002      	b.n	8003aa0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a9a:	887a      	ldrh	r2, [r7, #2]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003ab6:	4b08      	ldr	r3, [pc, #32]	@ (8003ad8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ab8:	695a      	ldr	r2, [r3, #20]
 8003aba:	88fb      	ldrh	r3, [r7, #6]
 8003abc:	4013      	ands	r3, r2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d006      	beq.n	8003ad0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ac2:	4a05      	ldr	r2, [pc, #20]	@ (8003ad8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ac4:	88fb      	ldrh	r3, [r7, #6]
 8003ac6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ac8:	88fb      	ldrh	r3, [r7, #6]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7fe f938 	bl	8001d40 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ad0:	bf00      	nop
 8003ad2:	3708      	adds	r7, #8
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	40010400 	.word	0x40010400

08003adc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e08d      	b.n	8003c0a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d106      	bne.n	8003b08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7fd ffec 	bl	8001ae0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2224      	movs	r2, #36	@ 0x24
 8003b0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 0201 	bic.w	r2, r2, #1
 8003b1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685a      	ldr	r2, [r3, #4]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003b2c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689a      	ldr	r2, [r3, #8]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b3c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d107      	bne.n	8003b56 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	689a      	ldr	r2, [r3, #8]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b52:	609a      	str	r2, [r3, #8]
 8003b54:	e006      	b.n	8003b64 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	689a      	ldr	r2, [r3, #8]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003b62:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d108      	bne.n	8003b7e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b7a:	605a      	str	r2, [r3, #4]
 8003b7c:	e007      	b.n	8003b8e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	685a      	ldr	r2, [r3, #4]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b8c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	6812      	ldr	r2, [r2, #0]
 8003b98:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003b9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ba0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68da      	ldr	r2, [r3, #12]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003bb0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	691a      	ldr	r2, [r3, #16]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	69d9      	ldr	r1, [r3, #28]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a1a      	ldr	r2, [r3, #32]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f042 0201 	orr.w	r2, r2, #1
 8003bea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2220      	movs	r2, #32
 8003bf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3708      	adds	r7, #8
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
	...

08003c14 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b088      	sub	sp, #32
 8003c18:	af02      	add	r7, sp, #8
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	607a      	str	r2, [r7, #4]
 8003c1e:	461a      	mov	r2, r3
 8003c20:	460b      	mov	r3, r1
 8003c22:	817b      	strh	r3, [r7, #10]
 8003c24:	4613      	mov	r3, r2
 8003c26:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2b20      	cmp	r3, #32
 8003c32:	f040 80fd 	bne.w	8003e30 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d101      	bne.n	8003c44 <HAL_I2C_Master_Transmit+0x30>
 8003c40:	2302      	movs	r3, #2
 8003c42:	e0f6      	b.n	8003e32 <HAL_I2C_Master_Transmit+0x21e>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c4c:	f7fe fa08 	bl	8002060 <HAL_GetTick>
 8003c50:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	9300      	str	r3, [sp, #0]
 8003c56:	2319      	movs	r3, #25
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	f000 f914 	bl	8003e8c <I2C_WaitOnFlagUntilTimeout>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e0e1      	b.n	8003e32 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2221      	movs	r2, #33	@ 0x21
 8003c72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2210      	movs	r2, #16
 8003c7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	893a      	ldrh	r2, [r7, #8]
 8003c8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	2bff      	cmp	r3, #255	@ 0xff
 8003c9e:	d906      	bls.n	8003cae <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	22ff      	movs	r2, #255	@ 0xff
 8003ca4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003ca6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003caa:	617b      	str	r3, [r7, #20]
 8003cac:	e007      	b.n	8003cbe <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003cb8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003cbc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d024      	beq.n	8003d10 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cca:	781a      	ldrb	r2, [r3, #0]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd6:	1c5a      	adds	r2, r3, #1
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	b2da      	uxtb	r2, r3
 8003d00:	8979      	ldrh	r1, [r7, #10]
 8003d02:	4b4e      	ldr	r3, [pc, #312]	@ (8003e3c <HAL_I2C_Master_Transmit+0x228>)
 8003d04:	9300      	str	r3, [sp, #0]
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	f000 fa83 	bl	8004214 <I2C_TransferConfig>
 8003d0e:	e066      	b.n	8003dde <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d14:	b2da      	uxtb	r2, r3
 8003d16:	8979      	ldrh	r1, [r7, #10]
 8003d18:	4b48      	ldr	r3, [pc, #288]	@ (8003e3c <HAL_I2C_Master_Transmit+0x228>)
 8003d1a:	9300      	str	r3, [sp, #0]
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	f000 fa78 	bl	8004214 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003d24:	e05b      	b.n	8003dde <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	6a39      	ldr	r1, [r7, #32]
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f000 f907 	bl	8003f3e <I2C_WaitOnTXISFlagUntilTimeout>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e07b      	b.n	8003e32 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d3e:	781a      	ldrb	r2, [r3, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d4a:	1c5a      	adds	r2, r3, #1
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	3b01      	subs	r3, #1
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d62:	3b01      	subs	r3, #1
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d034      	beq.n	8003dde <HAL_I2C_Master_Transmit+0x1ca>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d130      	bne.n	8003dde <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	9300      	str	r3, [sp, #0]
 8003d80:	6a3b      	ldr	r3, [r7, #32]
 8003d82:	2200      	movs	r2, #0
 8003d84:	2180      	movs	r1, #128	@ 0x80
 8003d86:	68f8      	ldr	r0, [r7, #12]
 8003d88:	f000 f880 	bl	8003e8c <I2C_WaitOnFlagUntilTimeout>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e04d      	b.n	8003e32 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	2bff      	cmp	r3, #255	@ 0xff
 8003d9e:	d90e      	bls.n	8003dbe <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	22ff      	movs	r2, #255	@ 0xff
 8003da4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003daa:	b2da      	uxtb	r2, r3
 8003dac:	8979      	ldrh	r1, [r7, #10]
 8003dae:	2300      	movs	r3, #0
 8003db0:	9300      	str	r3, [sp, #0]
 8003db2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f000 fa2c 	bl	8004214 <I2C_TransferConfig>
 8003dbc:	e00f      	b.n	8003dde <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dcc:	b2da      	uxtb	r2, r3
 8003dce:	8979      	ldrh	r1, [r7, #10]
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f000 fa1b 	bl	8004214 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d19e      	bne.n	8003d26 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	6a39      	ldr	r1, [r7, #32]
 8003dec:	68f8      	ldr	r0, [r7, #12]
 8003dee:	f000 f8ed 	bl	8003fcc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d001      	beq.n	8003dfc <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e01a      	b.n	8003e32 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2220      	movs	r2, #32
 8003e02:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	6859      	ldr	r1, [r3, #4]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	4b0c      	ldr	r3, [pc, #48]	@ (8003e40 <HAL_I2C_Master_Transmit+0x22c>)
 8003e10:	400b      	ands	r3, r1
 8003e12:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2220      	movs	r2, #32
 8003e18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	e000      	b.n	8003e32 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003e30:	2302      	movs	r3, #2
  }
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3718      	adds	r7, #24
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	80002000 	.word	0x80002000
 8003e40:	fe00e800 	.word	0xfe00e800

08003e44 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d103      	bne.n	8003e62 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	f003 0301 	and.w	r3, r3, #1
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d007      	beq.n	8003e80 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	699a      	ldr	r2, [r3, #24]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f042 0201 	orr.w	r2, r2, #1
 8003e7e:	619a      	str	r2, [r3, #24]
  }
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	603b      	str	r3, [r7, #0]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e9c:	e03b      	b.n	8003f16 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e9e:	69ba      	ldr	r2, [r7, #24]
 8003ea0:	6839      	ldr	r1, [r7, #0]
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	f000 f8d6 	bl	8004054 <I2C_IsErrorOccurred>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d001      	beq.n	8003eb2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e041      	b.n	8003f36 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003eb8:	d02d      	beq.n	8003f16 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eba:	f7fe f8d1 	bl	8002060 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d302      	bcc.n	8003ed0 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d122      	bne.n	8003f16 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	699a      	ldr	r2, [r3, #24]
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	4013      	ands	r3, r2
 8003eda:	68ba      	ldr	r2, [r7, #8]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	bf0c      	ite	eq
 8003ee0:	2301      	moveq	r3, #1
 8003ee2:	2300      	movne	r3, #0
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	79fb      	ldrb	r3, [r7, #7]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d113      	bne.n	8003f16 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ef2:	f043 0220 	orr.w	r2, r3, #32
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2220      	movs	r2, #32
 8003efe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e00f      	b.n	8003f36 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	699a      	ldr	r2, [r3, #24]
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	4013      	ands	r3, r2
 8003f20:	68ba      	ldr	r2, [r7, #8]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	bf0c      	ite	eq
 8003f26:	2301      	moveq	r3, #1
 8003f28:	2300      	movne	r3, #0
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	79fb      	ldrb	r3, [r7, #7]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d0b4      	beq.n	8003e9e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b084      	sub	sp, #16
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	60f8      	str	r0, [r7, #12]
 8003f46:	60b9      	str	r1, [r7, #8]
 8003f48:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f4a:	e033      	b.n	8003fb4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	68b9      	ldr	r1, [r7, #8]
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f000 f87f 	bl	8004054 <I2C_IsErrorOccurred>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e031      	b.n	8003fc4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f66:	d025      	beq.n	8003fb4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f68:	f7fe f87a 	bl	8002060 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	68ba      	ldr	r2, [r7, #8]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d302      	bcc.n	8003f7e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d11a      	bne.n	8003fb4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	f003 0302 	and.w	r3, r3, #2
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d013      	beq.n	8003fb4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f90:	f043 0220 	orr.w	r2, r3, #32
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e007      	b.n	8003fc4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d1c4      	bne.n	8003f4c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3710      	adds	r7, #16
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fd8:	e02f      	b.n	800403a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	68b9      	ldr	r1, [r7, #8]
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f000 f838 	bl	8004054 <I2C_IsErrorOccurred>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e02d      	b.n	800404a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fee:	f7fe f837 	bl	8002060 <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	68ba      	ldr	r2, [r7, #8]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d302      	bcc.n	8004004 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d11a      	bne.n	800403a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	f003 0320 	and.w	r3, r3, #32
 800400e:	2b20      	cmp	r3, #32
 8004010:	d013      	beq.n	800403a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004016:	f043 0220 	orr.w	r2, r3, #32
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2220      	movs	r2, #32
 8004022:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e007      	b.n	800404a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	f003 0320 	and.w	r3, r3, #32
 8004044:	2b20      	cmp	r3, #32
 8004046:	d1c8      	bne.n	8003fda <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
	...

08004054 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b08a      	sub	sp, #40	@ 0x28
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004060:	2300      	movs	r3, #0
 8004062:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800406e:	2300      	movs	r3, #0
 8004070:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	f003 0310 	and.w	r3, r3, #16
 800407c:	2b00      	cmp	r3, #0
 800407e:	d068      	beq.n	8004152 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2210      	movs	r2, #16
 8004086:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004088:	e049      	b.n	800411e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004090:	d045      	beq.n	800411e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004092:	f7fd ffe5 	bl	8002060 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	68ba      	ldr	r2, [r7, #8]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d302      	bcc.n	80040a8 <I2C_IsErrorOccurred+0x54>
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d13a      	bne.n	800411e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040b2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80040ba:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040ca:	d121      	bne.n	8004110 <I2C_IsErrorOccurred+0xbc>
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040d2:	d01d      	beq.n	8004110 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80040d4:	7cfb      	ldrb	r3, [r7, #19]
 80040d6:	2b20      	cmp	r3, #32
 80040d8:	d01a      	beq.n	8004110 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80040e8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80040ea:	f7fd ffb9 	bl	8002060 <HAL_GetTick>
 80040ee:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040f0:	e00e      	b.n	8004110 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80040f2:	f7fd ffb5 	bl	8002060 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	2b19      	cmp	r3, #25
 80040fe:	d907      	bls.n	8004110 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004100:	6a3b      	ldr	r3, [r7, #32]
 8004102:	f043 0320 	orr.w	r3, r3, #32
 8004106:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800410e:	e006      	b.n	800411e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	f003 0320 	and.w	r3, r3, #32
 800411a:	2b20      	cmp	r3, #32
 800411c:	d1e9      	bne.n	80040f2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	f003 0320 	and.w	r3, r3, #32
 8004128:	2b20      	cmp	r3, #32
 800412a:	d003      	beq.n	8004134 <I2C_IsErrorOccurred+0xe0>
 800412c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004130:	2b00      	cmp	r3, #0
 8004132:	d0aa      	beq.n	800408a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004134:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004138:	2b00      	cmp	r3, #0
 800413a:	d103      	bne.n	8004144 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2220      	movs	r2, #32
 8004142:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004144:	6a3b      	ldr	r3, [r7, #32]
 8004146:	f043 0304 	orr.w	r3, r3, #4
 800414a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00b      	beq.n	800417c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004164:	6a3b      	ldr	r3, [r7, #32]
 8004166:	f043 0301 	orr.w	r3, r3, #1
 800416a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004174:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00b      	beq.n	800419e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004186:	6a3b      	ldr	r3, [r7, #32]
 8004188:	f043 0308 	orr.w	r3, r3, #8
 800418c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004196:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00b      	beq.n	80041c0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80041a8:	6a3b      	ldr	r3, [r7, #32]
 80041aa:	f043 0302 	orr.w	r3, r3, #2
 80041ae:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80041c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d01c      	beq.n	8004202 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80041c8:	68f8      	ldr	r0, [r7, #12]
 80041ca:	f7ff fe3b 	bl	8003e44 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	6859      	ldr	r1, [r3, #4]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	4b0d      	ldr	r3, [pc, #52]	@ (8004210 <I2C_IsErrorOccurred+0x1bc>)
 80041da:	400b      	ands	r3, r1
 80041dc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041e2:	6a3b      	ldr	r3, [r7, #32]
 80041e4:	431a      	orrs	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2220      	movs	r2, #32
 80041ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004202:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004206:	4618      	mov	r0, r3
 8004208:	3728      	adds	r7, #40	@ 0x28
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	fe00e800 	.word	0xfe00e800

08004214 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004214:	b480      	push	{r7}
 8004216:	b087      	sub	sp, #28
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	607b      	str	r3, [r7, #4]
 800421e:	460b      	mov	r3, r1
 8004220:	817b      	strh	r3, [r7, #10]
 8004222:	4613      	mov	r3, r2
 8004224:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004226:	897b      	ldrh	r3, [r7, #10]
 8004228:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800422c:	7a7b      	ldrb	r3, [r7, #9]
 800422e:	041b      	lsls	r3, r3, #16
 8004230:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004234:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800423a:	6a3b      	ldr	r3, [r7, #32]
 800423c:	4313      	orrs	r3, r2
 800423e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004242:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	685a      	ldr	r2, [r3, #4]
 800424a:	6a3b      	ldr	r3, [r7, #32]
 800424c:	0d5b      	lsrs	r3, r3, #21
 800424e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004252:	4b08      	ldr	r3, [pc, #32]	@ (8004274 <I2C_TransferConfig+0x60>)
 8004254:	430b      	orrs	r3, r1
 8004256:	43db      	mvns	r3, r3
 8004258:	ea02 0103 	and.w	r1, r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	697a      	ldr	r2, [r7, #20]
 8004262:	430a      	orrs	r2, r1
 8004264:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004266:	bf00      	nop
 8004268:	371c      	adds	r7, #28
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	03ff63ff 	.word	0x03ff63ff

08004278 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b20      	cmp	r3, #32
 800428c:	d138      	bne.n	8004300 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004294:	2b01      	cmp	r3, #1
 8004296:	d101      	bne.n	800429c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004298:	2302      	movs	r3, #2
 800429a:	e032      	b.n	8004302 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2224      	movs	r2, #36	@ 0x24
 80042a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f022 0201 	bic.w	r2, r2, #1
 80042ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80042ca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6819      	ldr	r1, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	430a      	orrs	r2, r1
 80042da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f042 0201 	orr.w	r2, r2, #1
 80042ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2220      	movs	r2, #32
 80042f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80042fc:	2300      	movs	r3, #0
 80042fe:	e000      	b.n	8004302 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004300:	2302      	movs	r3, #2
  }
}
 8004302:	4618      	mov	r0, r3
 8004304:	370c      	adds	r7, #12
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr

0800430e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800430e:	b480      	push	{r7}
 8004310:	b085      	sub	sp, #20
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
 8004316:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b20      	cmp	r3, #32
 8004322:	d139      	bne.n	8004398 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800432a:	2b01      	cmp	r3, #1
 800432c:	d101      	bne.n	8004332 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800432e:	2302      	movs	r3, #2
 8004330:	e033      	b.n	800439a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2224      	movs	r2, #36	@ 0x24
 800433e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 0201 	bic.w	r2, r2, #1
 8004350:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004360:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	021b      	lsls	r3, r3, #8
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	4313      	orrs	r3, r2
 800436a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f042 0201 	orr.w	r2, r2, #1
 8004382:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2220      	movs	r2, #32
 8004388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004394:	2300      	movs	r3, #0
 8004396:	e000      	b.n	800439a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004398:	2302      	movs	r3, #2
  }
}
 800439a:	4618      	mov	r0, r3
 800439c:	3714      	adds	r7, #20
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
	...

080043a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80043a8:	b480      	push	{r7}
 80043aa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80043ac:	4b04      	ldr	r3, [pc, #16]	@ (80043c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	40007000 	.word	0x40007000

080043c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b085      	sub	sp, #20
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043d2:	d130      	bne.n	8004436 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80043d4:	4b23      	ldr	r3, [pc, #140]	@ (8004464 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80043dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043e0:	d038      	beq.n	8004454 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043e2:	4b20      	ldr	r3, [pc, #128]	@ (8004464 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80043ea:	4a1e      	ldr	r2, [pc, #120]	@ (8004464 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043ec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80043f0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80043f2:	4b1d      	ldr	r3, [pc, #116]	@ (8004468 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2232      	movs	r2, #50	@ 0x32
 80043f8:	fb02 f303 	mul.w	r3, r2, r3
 80043fc:	4a1b      	ldr	r2, [pc, #108]	@ (800446c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80043fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004402:	0c9b      	lsrs	r3, r3, #18
 8004404:	3301      	adds	r3, #1
 8004406:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004408:	e002      	b.n	8004410 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	3b01      	subs	r3, #1
 800440e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004410:	4b14      	ldr	r3, [pc, #80]	@ (8004464 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004412:	695b      	ldr	r3, [r3, #20]
 8004414:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004418:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800441c:	d102      	bne.n	8004424 <HAL_PWREx_ControlVoltageScaling+0x60>
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1f2      	bne.n	800440a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004424:	4b0f      	ldr	r3, [pc, #60]	@ (8004464 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800442c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004430:	d110      	bne.n	8004454 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e00f      	b.n	8004456 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004436:	4b0b      	ldr	r3, [pc, #44]	@ (8004464 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800443e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004442:	d007      	beq.n	8004454 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004444:	4b07      	ldr	r3, [pc, #28]	@ (8004464 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800444c:	4a05      	ldr	r2, [pc, #20]	@ (8004464 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800444e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004452:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3714      	adds	r7, #20
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	40007000 	.word	0x40007000
 8004468:	20000004 	.word	0x20000004
 800446c:	431bde83 	.word	0x431bde83

08004470 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b088      	sub	sp, #32
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d101      	bne.n	8004482 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e3ca      	b.n	8004c18 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004482:	4b97      	ldr	r3, [pc, #604]	@ (80046e0 <HAL_RCC_OscConfig+0x270>)
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f003 030c 	and.w	r3, r3, #12
 800448a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800448c:	4b94      	ldr	r3, [pc, #592]	@ (80046e0 <HAL_RCC_OscConfig+0x270>)
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	f003 0303 	and.w	r3, r3, #3
 8004494:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0310 	and.w	r3, r3, #16
 800449e:	2b00      	cmp	r3, #0
 80044a0:	f000 80e4 	beq.w	800466c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d007      	beq.n	80044ba <HAL_RCC_OscConfig+0x4a>
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	2b0c      	cmp	r3, #12
 80044ae:	f040 808b 	bne.w	80045c8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	f040 8087 	bne.w	80045c8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044ba:	4b89      	ldr	r3, [pc, #548]	@ (80046e0 <HAL_RCC_OscConfig+0x270>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d005      	beq.n	80044d2 <HAL_RCC_OscConfig+0x62>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d101      	bne.n	80044d2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e3a2      	b.n	8004c18 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a1a      	ldr	r2, [r3, #32]
 80044d6:	4b82      	ldr	r3, [pc, #520]	@ (80046e0 <HAL_RCC_OscConfig+0x270>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0308 	and.w	r3, r3, #8
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d004      	beq.n	80044ec <HAL_RCC_OscConfig+0x7c>
 80044e2:	4b7f      	ldr	r3, [pc, #508]	@ (80046e0 <HAL_RCC_OscConfig+0x270>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044ea:	e005      	b.n	80044f8 <HAL_RCC_OscConfig+0x88>
 80044ec:	4b7c      	ldr	r3, [pc, #496]	@ (80046e0 <HAL_RCC_OscConfig+0x270>)
 80044ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044f2:	091b      	lsrs	r3, r3, #4
 80044f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d223      	bcs.n	8004544 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a1b      	ldr	r3, [r3, #32]
 8004500:	4618      	mov	r0, r3
 8004502:	f000 fd1d 	bl	8004f40 <RCC_SetFlashLatencyFromMSIRange>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d001      	beq.n	8004510 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e383      	b.n	8004c18 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004510:	4b73      	ldr	r3, [pc, #460]	@ (80046e0 <HAL_RCC_OscConfig+0x270>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a72      	ldr	r2, [pc, #456]	@ (80046e0 <HAL_RCC_OscConfig+0x270>)
 8004516:	f043 0308 	orr.w	r3, r3, #8
 800451a:	6013      	str	r3, [r2, #0]
 800451c:	4b70      	ldr	r3, [pc, #448]	@ (80046e0 <HAL_RCC_OscConfig+0x270>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a1b      	ldr	r3, [r3, #32]
 8004528:	496d      	ldr	r1, [pc, #436]	@ (80046e0 <HAL_RCC_OscConfig+0x270>)
 800452a:	4313      	orrs	r3, r2
 800452c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800452e:	4b6c      	ldr	r3, [pc, #432]	@ (80046e0 <HAL_RCC_OscConfig+0x270>)
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	69db      	ldr	r3, [r3, #28]
 800453a:	021b      	lsls	r3, r3, #8
 800453c:	4968      	ldr	r1, [pc, #416]	@ (80046e0 <HAL_RCC_OscConfig+0x270>)
 800453e:	4313      	orrs	r3, r2
 8004540:	604b      	str	r3, [r1, #4]
 8004542:	e025      	b.n	8004590 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004544:	4b66      	ldr	r3, [pc, #408]	@ (80046e0 <HAL_RCC_OscConfig+0x270>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a65      	ldr	r2, [pc, #404]	@ (80046e0 <HAL_RCC_OscConfig+0x270>)
 800454a:	f043 0308 	orr.w	r3, r3, #8
 800454e:	6013      	str	r3, [r2, #0]
 8004550:	4b63      	ldr	r3, [pc, #396]	@ (80046e0 <HAL_RCC_OscConfig+0x270>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a1b      	ldr	r3, [r3, #32]
 800455c:	4960      	ldr	r1, [pc, #384]	@ (80046e0 <HAL_RCC_OscConfig+0x270>)
 800455e:	4313      	orrs	r3, r2
 8004560:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004562:	4b5f      	ldr	r3, [pc, #380]	@ (80046e0 <HAL_RCC_OscConfig+0x270>)
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	69db      	ldr	r3, [r3, #28]
 800456e:	021b      	lsls	r3, r3, #8
 8004570:	495b      	ldr	r1, [pc, #364]	@ (80046e0 <HAL_RCC_OscConfig+0x270>)
 8004572:	4313      	orrs	r3, r2
 8004574:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d109      	bne.n	8004590 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a1b      	ldr	r3, [r3, #32]
 8004580:	4618      	mov	r0, r3
 8004582:	f000 fcdd 	bl	8004f40 <RCC_SetFlashLatencyFromMSIRange>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d001      	beq.n	8004590 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e343      	b.n	8004c18 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004590:	f000 fc4a 	bl	8004e28 <HAL_RCC_GetSysClockFreq>
 8004594:	4602      	mov	r2, r0
 8004596:	4b52      	ldr	r3, [pc, #328]	@ (80046e0 <HAL_RCC_OscConfig+0x270>)
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	091b      	lsrs	r3, r3, #4
 800459c:	f003 030f 	and.w	r3, r3, #15
 80045a0:	4950      	ldr	r1, [pc, #320]	@ (80046e4 <HAL_RCC_OscConfig+0x274>)
 80045a2:	5ccb      	ldrb	r3, [r1, r3]
 80045a4:	f003 031f 	and.w	r3, r3, #31
 80045a8:	fa22 f303 	lsr.w	r3, r2, r3
 80045ac:	4a4e      	ldr	r2, [pc, #312]	@ (80046e8 <HAL_RCC_OscConfig+0x278>)
 80045ae:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80045b0:	4b4e      	ldr	r3, [pc, #312]	@ (80046ec <HAL_RCC_OscConfig+0x27c>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7fd fd03 	bl	8001fc0 <HAL_InitTick>
 80045ba:	4603      	mov	r3, r0
 80045bc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80045be:	7bfb      	ldrb	r3, [r7, #15]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d052      	beq.n	800466a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80045c4:	7bfb      	ldrb	r3, [r7, #15]
 80045c6:	e327      	b.n	8004c18 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d032      	beq.n	8004636 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80045d0:	4b43      	ldr	r3, [pc, #268]	@ (80046e0 <HAL_RCC_OscConfig+0x270>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a42      	ldr	r2, [pc, #264]	@ (80046e0 <HAL_RCC_OscConfig+0x270>)
 80045d6:	f043 0301 	orr.w	r3, r3, #1
 80045da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80045dc:	f7fd fd40 	bl	8002060 <HAL_GetTick>
 80045e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045e2:	e008      	b.n	80045f6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045e4:	f7fd fd3c 	bl	8002060 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e310      	b.n	8004c18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045f6:	4b3a      	ldr	r3, [pc, #232]	@ (80046e0 <HAL_RCC_OscConfig+0x270>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d0f0      	beq.n	80045e4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004602:	4b37      	ldr	r3, [pc, #220]	@ (80046e0 <HAL_RCC_OscConfig+0x270>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a36      	ldr	r2, [pc, #216]	@ (80046e0 <HAL_RCC_OscConfig+0x270>)
 8004608:	f043 0308 	orr.w	r3, r3, #8
 800460c:	6013      	str	r3, [r2, #0]
 800460e:	4b34      	ldr	r3, [pc, #208]	@ (80046e0 <HAL_RCC_OscConfig+0x270>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	4931      	ldr	r1, [pc, #196]	@ (80046e0 <HAL_RCC_OscConfig+0x270>)
 800461c:	4313      	orrs	r3, r2
 800461e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004620:	4b2f      	ldr	r3, [pc, #188]	@ (80046e0 <HAL_RCC_OscConfig+0x270>)
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	69db      	ldr	r3, [r3, #28]
 800462c:	021b      	lsls	r3, r3, #8
 800462e:	492c      	ldr	r1, [pc, #176]	@ (80046e0 <HAL_RCC_OscConfig+0x270>)
 8004630:	4313      	orrs	r3, r2
 8004632:	604b      	str	r3, [r1, #4]
 8004634:	e01a      	b.n	800466c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004636:	4b2a      	ldr	r3, [pc, #168]	@ (80046e0 <HAL_RCC_OscConfig+0x270>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a29      	ldr	r2, [pc, #164]	@ (80046e0 <HAL_RCC_OscConfig+0x270>)
 800463c:	f023 0301 	bic.w	r3, r3, #1
 8004640:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004642:	f7fd fd0d 	bl	8002060 <HAL_GetTick>
 8004646:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004648:	e008      	b.n	800465c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800464a:	f7fd fd09 	bl	8002060 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2b02      	cmp	r3, #2
 8004656:	d901      	bls.n	800465c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e2dd      	b.n	8004c18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800465c:	4b20      	ldr	r3, [pc, #128]	@ (80046e0 <HAL_RCC_OscConfig+0x270>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0302 	and.w	r3, r3, #2
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1f0      	bne.n	800464a <HAL_RCC_OscConfig+0x1da>
 8004668:	e000      	b.n	800466c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800466a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	2b00      	cmp	r3, #0
 8004676:	d074      	beq.n	8004762 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	2b08      	cmp	r3, #8
 800467c:	d005      	beq.n	800468a <HAL_RCC_OscConfig+0x21a>
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	2b0c      	cmp	r3, #12
 8004682:	d10e      	bne.n	80046a2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	2b03      	cmp	r3, #3
 8004688:	d10b      	bne.n	80046a2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800468a:	4b15      	ldr	r3, [pc, #84]	@ (80046e0 <HAL_RCC_OscConfig+0x270>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d064      	beq.n	8004760 <HAL_RCC_OscConfig+0x2f0>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d160      	bne.n	8004760 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e2ba      	b.n	8004c18 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046aa:	d106      	bne.n	80046ba <HAL_RCC_OscConfig+0x24a>
 80046ac:	4b0c      	ldr	r3, [pc, #48]	@ (80046e0 <HAL_RCC_OscConfig+0x270>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a0b      	ldr	r2, [pc, #44]	@ (80046e0 <HAL_RCC_OscConfig+0x270>)
 80046b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046b6:	6013      	str	r3, [r2, #0]
 80046b8:	e026      	b.n	8004708 <HAL_RCC_OscConfig+0x298>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046c2:	d115      	bne.n	80046f0 <HAL_RCC_OscConfig+0x280>
 80046c4:	4b06      	ldr	r3, [pc, #24]	@ (80046e0 <HAL_RCC_OscConfig+0x270>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a05      	ldr	r2, [pc, #20]	@ (80046e0 <HAL_RCC_OscConfig+0x270>)
 80046ca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046ce:	6013      	str	r3, [r2, #0]
 80046d0:	4b03      	ldr	r3, [pc, #12]	@ (80046e0 <HAL_RCC_OscConfig+0x270>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a02      	ldr	r2, [pc, #8]	@ (80046e0 <HAL_RCC_OscConfig+0x270>)
 80046d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046da:	6013      	str	r3, [r2, #0]
 80046dc:	e014      	b.n	8004708 <HAL_RCC_OscConfig+0x298>
 80046de:	bf00      	nop
 80046e0:	40021000 	.word	0x40021000
 80046e4:	0800a348 	.word	0x0800a348
 80046e8:	20000004 	.word	0x20000004
 80046ec:	20000008 	.word	0x20000008
 80046f0:	4ba0      	ldr	r3, [pc, #640]	@ (8004974 <HAL_RCC_OscConfig+0x504>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a9f      	ldr	r2, [pc, #636]	@ (8004974 <HAL_RCC_OscConfig+0x504>)
 80046f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046fa:	6013      	str	r3, [r2, #0]
 80046fc:	4b9d      	ldr	r3, [pc, #628]	@ (8004974 <HAL_RCC_OscConfig+0x504>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a9c      	ldr	r2, [pc, #624]	@ (8004974 <HAL_RCC_OscConfig+0x504>)
 8004702:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004706:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d013      	beq.n	8004738 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004710:	f7fd fca6 	bl	8002060 <HAL_GetTick>
 8004714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004716:	e008      	b.n	800472a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004718:	f7fd fca2 	bl	8002060 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b64      	cmp	r3, #100	@ 0x64
 8004724:	d901      	bls.n	800472a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e276      	b.n	8004c18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800472a:	4b92      	ldr	r3, [pc, #584]	@ (8004974 <HAL_RCC_OscConfig+0x504>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d0f0      	beq.n	8004718 <HAL_RCC_OscConfig+0x2a8>
 8004736:	e014      	b.n	8004762 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004738:	f7fd fc92 	bl	8002060 <HAL_GetTick>
 800473c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800473e:	e008      	b.n	8004752 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004740:	f7fd fc8e 	bl	8002060 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	2b64      	cmp	r3, #100	@ 0x64
 800474c:	d901      	bls.n	8004752 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e262      	b.n	8004c18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004752:	4b88      	ldr	r3, [pc, #544]	@ (8004974 <HAL_RCC_OscConfig+0x504>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1f0      	bne.n	8004740 <HAL_RCC_OscConfig+0x2d0>
 800475e:	e000      	b.n	8004762 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004760:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d060      	beq.n	8004830 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	2b04      	cmp	r3, #4
 8004772:	d005      	beq.n	8004780 <HAL_RCC_OscConfig+0x310>
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	2b0c      	cmp	r3, #12
 8004778:	d119      	bne.n	80047ae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	2b02      	cmp	r3, #2
 800477e:	d116      	bne.n	80047ae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004780:	4b7c      	ldr	r3, [pc, #496]	@ (8004974 <HAL_RCC_OscConfig+0x504>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004788:	2b00      	cmp	r3, #0
 800478a:	d005      	beq.n	8004798 <HAL_RCC_OscConfig+0x328>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d101      	bne.n	8004798 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e23f      	b.n	8004c18 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004798:	4b76      	ldr	r3, [pc, #472]	@ (8004974 <HAL_RCC_OscConfig+0x504>)
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	061b      	lsls	r3, r3, #24
 80047a6:	4973      	ldr	r1, [pc, #460]	@ (8004974 <HAL_RCC_OscConfig+0x504>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047ac:	e040      	b.n	8004830 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d023      	beq.n	80047fe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047b6:	4b6f      	ldr	r3, [pc, #444]	@ (8004974 <HAL_RCC_OscConfig+0x504>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a6e      	ldr	r2, [pc, #440]	@ (8004974 <HAL_RCC_OscConfig+0x504>)
 80047bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c2:	f7fd fc4d 	bl	8002060 <HAL_GetTick>
 80047c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047c8:	e008      	b.n	80047dc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047ca:	f7fd fc49 	bl	8002060 <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d901      	bls.n	80047dc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e21d      	b.n	8004c18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047dc:	4b65      	ldr	r3, [pc, #404]	@ (8004974 <HAL_RCC_OscConfig+0x504>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d0f0      	beq.n	80047ca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047e8:	4b62      	ldr	r3, [pc, #392]	@ (8004974 <HAL_RCC_OscConfig+0x504>)
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	061b      	lsls	r3, r3, #24
 80047f6:	495f      	ldr	r1, [pc, #380]	@ (8004974 <HAL_RCC_OscConfig+0x504>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	604b      	str	r3, [r1, #4]
 80047fc:	e018      	b.n	8004830 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047fe:	4b5d      	ldr	r3, [pc, #372]	@ (8004974 <HAL_RCC_OscConfig+0x504>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a5c      	ldr	r2, [pc, #368]	@ (8004974 <HAL_RCC_OscConfig+0x504>)
 8004804:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004808:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800480a:	f7fd fc29 	bl	8002060 <HAL_GetTick>
 800480e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004810:	e008      	b.n	8004824 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004812:	f7fd fc25 	bl	8002060 <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	2b02      	cmp	r3, #2
 800481e:	d901      	bls.n	8004824 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e1f9      	b.n	8004c18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004824:	4b53      	ldr	r3, [pc, #332]	@ (8004974 <HAL_RCC_OscConfig+0x504>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800482c:	2b00      	cmp	r3, #0
 800482e:	d1f0      	bne.n	8004812 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0308 	and.w	r3, r3, #8
 8004838:	2b00      	cmp	r3, #0
 800483a:	d03c      	beq.n	80048b6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	695b      	ldr	r3, [r3, #20]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d01c      	beq.n	800487e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004844:	4b4b      	ldr	r3, [pc, #300]	@ (8004974 <HAL_RCC_OscConfig+0x504>)
 8004846:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800484a:	4a4a      	ldr	r2, [pc, #296]	@ (8004974 <HAL_RCC_OscConfig+0x504>)
 800484c:	f043 0301 	orr.w	r3, r3, #1
 8004850:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004854:	f7fd fc04 	bl	8002060 <HAL_GetTick>
 8004858:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800485a:	e008      	b.n	800486e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800485c:	f7fd fc00 	bl	8002060 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b02      	cmp	r3, #2
 8004868:	d901      	bls.n	800486e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e1d4      	b.n	8004c18 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800486e:	4b41      	ldr	r3, [pc, #260]	@ (8004974 <HAL_RCC_OscConfig+0x504>)
 8004870:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004874:	f003 0302 	and.w	r3, r3, #2
 8004878:	2b00      	cmp	r3, #0
 800487a:	d0ef      	beq.n	800485c <HAL_RCC_OscConfig+0x3ec>
 800487c:	e01b      	b.n	80048b6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800487e:	4b3d      	ldr	r3, [pc, #244]	@ (8004974 <HAL_RCC_OscConfig+0x504>)
 8004880:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004884:	4a3b      	ldr	r2, [pc, #236]	@ (8004974 <HAL_RCC_OscConfig+0x504>)
 8004886:	f023 0301 	bic.w	r3, r3, #1
 800488a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800488e:	f7fd fbe7 	bl	8002060 <HAL_GetTick>
 8004892:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004894:	e008      	b.n	80048a8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004896:	f7fd fbe3 	bl	8002060 <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d901      	bls.n	80048a8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e1b7      	b.n	8004c18 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048a8:	4b32      	ldr	r3, [pc, #200]	@ (8004974 <HAL_RCC_OscConfig+0x504>)
 80048aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048ae:	f003 0302 	and.w	r3, r3, #2
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1ef      	bne.n	8004896 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0304 	and.w	r3, r3, #4
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f000 80a6 	beq.w	8004a10 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048c4:	2300      	movs	r3, #0
 80048c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80048c8:	4b2a      	ldr	r3, [pc, #168]	@ (8004974 <HAL_RCC_OscConfig+0x504>)
 80048ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d10d      	bne.n	80048f0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048d4:	4b27      	ldr	r3, [pc, #156]	@ (8004974 <HAL_RCC_OscConfig+0x504>)
 80048d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048d8:	4a26      	ldr	r2, [pc, #152]	@ (8004974 <HAL_RCC_OscConfig+0x504>)
 80048da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048de:	6593      	str	r3, [r2, #88]	@ 0x58
 80048e0:	4b24      	ldr	r3, [pc, #144]	@ (8004974 <HAL_RCC_OscConfig+0x504>)
 80048e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048e8:	60bb      	str	r3, [r7, #8]
 80048ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048ec:	2301      	movs	r3, #1
 80048ee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048f0:	4b21      	ldr	r3, [pc, #132]	@ (8004978 <HAL_RCC_OscConfig+0x508>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d118      	bne.n	800492e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048fc:	4b1e      	ldr	r3, [pc, #120]	@ (8004978 <HAL_RCC_OscConfig+0x508>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a1d      	ldr	r2, [pc, #116]	@ (8004978 <HAL_RCC_OscConfig+0x508>)
 8004902:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004906:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004908:	f7fd fbaa 	bl	8002060 <HAL_GetTick>
 800490c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800490e:	e008      	b.n	8004922 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004910:	f7fd fba6 	bl	8002060 <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	2b02      	cmp	r3, #2
 800491c:	d901      	bls.n	8004922 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e17a      	b.n	8004c18 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004922:	4b15      	ldr	r3, [pc, #84]	@ (8004978 <HAL_RCC_OscConfig+0x508>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800492a:	2b00      	cmp	r3, #0
 800492c:	d0f0      	beq.n	8004910 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d108      	bne.n	8004948 <HAL_RCC_OscConfig+0x4d8>
 8004936:	4b0f      	ldr	r3, [pc, #60]	@ (8004974 <HAL_RCC_OscConfig+0x504>)
 8004938:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800493c:	4a0d      	ldr	r2, [pc, #52]	@ (8004974 <HAL_RCC_OscConfig+0x504>)
 800493e:	f043 0301 	orr.w	r3, r3, #1
 8004942:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004946:	e029      	b.n	800499c <HAL_RCC_OscConfig+0x52c>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	2b05      	cmp	r3, #5
 800494e:	d115      	bne.n	800497c <HAL_RCC_OscConfig+0x50c>
 8004950:	4b08      	ldr	r3, [pc, #32]	@ (8004974 <HAL_RCC_OscConfig+0x504>)
 8004952:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004956:	4a07      	ldr	r2, [pc, #28]	@ (8004974 <HAL_RCC_OscConfig+0x504>)
 8004958:	f043 0304 	orr.w	r3, r3, #4
 800495c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004960:	4b04      	ldr	r3, [pc, #16]	@ (8004974 <HAL_RCC_OscConfig+0x504>)
 8004962:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004966:	4a03      	ldr	r2, [pc, #12]	@ (8004974 <HAL_RCC_OscConfig+0x504>)
 8004968:	f043 0301 	orr.w	r3, r3, #1
 800496c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004970:	e014      	b.n	800499c <HAL_RCC_OscConfig+0x52c>
 8004972:	bf00      	nop
 8004974:	40021000 	.word	0x40021000
 8004978:	40007000 	.word	0x40007000
 800497c:	4b9c      	ldr	r3, [pc, #624]	@ (8004bf0 <HAL_RCC_OscConfig+0x780>)
 800497e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004982:	4a9b      	ldr	r2, [pc, #620]	@ (8004bf0 <HAL_RCC_OscConfig+0x780>)
 8004984:	f023 0301 	bic.w	r3, r3, #1
 8004988:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800498c:	4b98      	ldr	r3, [pc, #608]	@ (8004bf0 <HAL_RCC_OscConfig+0x780>)
 800498e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004992:	4a97      	ldr	r2, [pc, #604]	@ (8004bf0 <HAL_RCC_OscConfig+0x780>)
 8004994:	f023 0304 	bic.w	r3, r3, #4
 8004998:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d016      	beq.n	80049d2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049a4:	f7fd fb5c 	bl	8002060 <HAL_GetTick>
 80049a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049aa:	e00a      	b.n	80049c2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049ac:	f7fd fb58 	bl	8002060 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e12a      	b.n	8004c18 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049c2:	4b8b      	ldr	r3, [pc, #556]	@ (8004bf0 <HAL_RCC_OscConfig+0x780>)
 80049c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049c8:	f003 0302 	and.w	r3, r3, #2
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d0ed      	beq.n	80049ac <HAL_RCC_OscConfig+0x53c>
 80049d0:	e015      	b.n	80049fe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049d2:	f7fd fb45 	bl	8002060 <HAL_GetTick>
 80049d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049d8:	e00a      	b.n	80049f0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049da:	f7fd fb41 	bl	8002060 <HAL_GetTick>
 80049de:	4602      	mov	r2, r0
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d901      	bls.n	80049f0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e113      	b.n	8004c18 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049f0:	4b7f      	ldr	r3, [pc, #508]	@ (8004bf0 <HAL_RCC_OscConfig+0x780>)
 80049f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049f6:	f003 0302 	and.w	r3, r3, #2
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d1ed      	bne.n	80049da <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049fe:	7ffb      	ldrb	r3, [r7, #31]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d105      	bne.n	8004a10 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a04:	4b7a      	ldr	r3, [pc, #488]	@ (8004bf0 <HAL_RCC_OscConfig+0x780>)
 8004a06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a08:	4a79      	ldr	r2, [pc, #484]	@ (8004bf0 <HAL_RCC_OscConfig+0x780>)
 8004a0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a0e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	f000 80fe 	beq.w	8004c16 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	f040 80d0 	bne.w	8004bc4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004a24:	4b72      	ldr	r3, [pc, #456]	@ (8004bf0 <HAL_RCC_OscConfig+0x780>)
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	f003 0203 	and.w	r2, r3, #3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d130      	bne.n	8004a9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a42:	3b01      	subs	r3, #1
 8004a44:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d127      	bne.n	8004a9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a54:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d11f      	bne.n	8004a9a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004a64:	2a07      	cmp	r2, #7
 8004a66:	bf14      	ite	ne
 8004a68:	2201      	movne	r2, #1
 8004a6a:	2200      	moveq	r2, #0
 8004a6c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d113      	bne.n	8004a9a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a7c:	085b      	lsrs	r3, r3, #1
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d109      	bne.n	8004a9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a90:	085b      	lsrs	r3, r3, #1
 8004a92:	3b01      	subs	r3, #1
 8004a94:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d06e      	beq.n	8004b78 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	2b0c      	cmp	r3, #12
 8004a9e:	d069      	beq.n	8004b74 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004aa0:	4b53      	ldr	r3, [pc, #332]	@ (8004bf0 <HAL_RCC_OscConfig+0x780>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d105      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004aac:	4b50      	ldr	r3, [pc, #320]	@ (8004bf0 <HAL_RCC_OscConfig+0x780>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d001      	beq.n	8004abc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e0ad      	b.n	8004c18 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004abc:	4b4c      	ldr	r3, [pc, #304]	@ (8004bf0 <HAL_RCC_OscConfig+0x780>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a4b      	ldr	r2, [pc, #300]	@ (8004bf0 <HAL_RCC_OscConfig+0x780>)
 8004ac2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ac6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ac8:	f7fd faca 	bl	8002060 <HAL_GetTick>
 8004acc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ace:	e008      	b.n	8004ae2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ad0:	f7fd fac6 	bl	8002060 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d901      	bls.n	8004ae2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e09a      	b.n	8004c18 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ae2:	4b43      	ldr	r3, [pc, #268]	@ (8004bf0 <HAL_RCC_OscConfig+0x780>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1f0      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004aee:	4b40      	ldr	r3, [pc, #256]	@ (8004bf0 <HAL_RCC_OscConfig+0x780>)
 8004af0:	68da      	ldr	r2, [r3, #12]
 8004af2:	4b40      	ldr	r3, [pc, #256]	@ (8004bf4 <HAL_RCC_OscConfig+0x784>)
 8004af4:	4013      	ands	r3, r2
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004afe:	3a01      	subs	r2, #1
 8004b00:	0112      	lsls	r2, r2, #4
 8004b02:	4311      	orrs	r1, r2
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004b08:	0212      	lsls	r2, r2, #8
 8004b0a:	4311      	orrs	r1, r2
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004b10:	0852      	lsrs	r2, r2, #1
 8004b12:	3a01      	subs	r2, #1
 8004b14:	0552      	lsls	r2, r2, #21
 8004b16:	4311      	orrs	r1, r2
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004b1c:	0852      	lsrs	r2, r2, #1
 8004b1e:	3a01      	subs	r2, #1
 8004b20:	0652      	lsls	r2, r2, #25
 8004b22:	4311      	orrs	r1, r2
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004b28:	0912      	lsrs	r2, r2, #4
 8004b2a:	0452      	lsls	r2, r2, #17
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	4930      	ldr	r1, [pc, #192]	@ (8004bf0 <HAL_RCC_OscConfig+0x780>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004b34:	4b2e      	ldr	r3, [pc, #184]	@ (8004bf0 <HAL_RCC_OscConfig+0x780>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a2d      	ldr	r2, [pc, #180]	@ (8004bf0 <HAL_RCC_OscConfig+0x780>)
 8004b3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b3e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b40:	4b2b      	ldr	r3, [pc, #172]	@ (8004bf0 <HAL_RCC_OscConfig+0x780>)
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	4a2a      	ldr	r2, [pc, #168]	@ (8004bf0 <HAL_RCC_OscConfig+0x780>)
 8004b46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b4a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b4c:	f7fd fa88 	bl	8002060 <HAL_GetTick>
 8004b50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b52:	e008      	b.n	8004b66 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b54:	f7fd fa84 	bl	8002060 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e058      	b.n	8004c18 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b66:	4b22      	ldr	r3, [pc, #136]	@ (8004bf0 <HAL_RCC_OscConfig+0x780>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d0f0      	beq.n	8004b54 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b72:	e050      	b.n	8004c16 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e04f      	b.n	8004c18 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b78:	4b1d      	ldr	r3, [pc, #116]	@ (8004bf0 <HAL_RCC_OscConfig+0x780>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d148      	bne.n	8004c16 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004b84:	4b1a      	ldr	r3, [pc, #104]	@ (8004bf0 <HAL_RCC_OscConfig+0x780>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a19      	ldr	r2, [pc, #100]	@ (8004bf0 <HAL_RCC_OscConfig+0x780>)
 8004b8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b8e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b90:	4b17      	ldr	r3, [pc, #92]	@ (8004bf0 <HAL_RCC_OscConfig+0x780>)
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	4a16      	ldr	r2, [pc, #88]	@ (8004bf0 <HAL_RCC_OscConfig+0x780>)
 8004b96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b9a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b9c:	f7fd fa60 	bl	8002060 <HAL_GetTick>
 8004ba0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ba2:	e008      	b.n	8004bb6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ba4:	f7fd fa5c 	bl	8002060 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e030      	b.n	8004c18 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8004bf0 <HAL_RCC_OscConfig+0x780>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d0f0      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x734>
 8004bc2:	e028      	b.n	8004c16 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	2b0c      	cmp	r3, #12
 8004bc8:	d023      	beq.n	8004c12 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bca:	4b09      	ldr	r3, [pc, #36]	@ (8004bf0 <HAL_RCC_OscConfig+0x780>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a08      	ldr	r2, [pc, #32]	@ (8004bf0 <HAL_RCC_OscConfig+0x780>)
 8004bd0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004bd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd6:	f7fd fa43 	bl	8002060 <HAL_GetTick>
 8004bda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bdc:	e00c      	b.n	8004bf8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bde:	f7fd fa3f 	bl	8002060 <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d905      	bls.n	8004bf8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e013      	b.n	8004c18 <HAL_RCC_OscConfig+0x7a8>
 8004bf0:	40021000 	.word	0x40021000
 8004bf4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bf8:	4b09      	ldr	r3, [pc, #36]	@ (8004c20 <HAL_RCC_OscConfig+0x7b0>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1ec      	bne.n	8004bde <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004c04:	4b06      	ldr	r3, [pc, #24]	@ (8004c20 <HAL_RCC_OscConfig+0x7b0>)
 8004c06:	68da      	ldr	r2, [r3, #12]
 8004c08:	4905      	ldr	r1, [pc, #20]	@ (8004c20 <HAL_RCC_OscConfig+0x7b0>)
 8004c0a:	4b06      	ldr	r3, [pc, #24]	@ (8004c24 <HAL_RCC_OscConfig+0x7b4>)
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	60cb      	str	r3, [r1, #12]
 8004c10:	e001      	b.n	8004c16 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e000      	b.n	8004c18 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3720      	adds	r7, #32
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	40021000 	.word	0x40021000
 8004c24:	feeefffc 	.word	0xfeeefffc

08004c28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d101      	bne.n	8004c3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e0e7      	b.n	8004e0c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c3c:	4b75      	ldr	r3, [pc, #468]	@ (8004e14 <HAL_RCC_ClockConfig+0x1ec>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0307 	and.w	r3, r3, #7
 8004c44:	683a      	ldr	r2, [r7, #0]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d910      	bls.n	8004c6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c4a:	4b72      	ldr	r3, [pc, #456]	@ (8004e14 <HAL_RCC_ClockConfig+0x1ec>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f023 0207 	bic.w	r2, r3, #7
 8004c52:	4970      	ldr	r1, [pc, #448]	@ (8004e14 <HAL_RCC_ClockConfig+0x1ec>)
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c5a:	4b6e      	ldr	r3, [pc, #440]	@ (8004e14 <HAL_RCC_ClockConfig+0x1ec>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0307 	and.w	r3, r3, #7
 8004c62:	683a      	ldr	r2, [r7, #0]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d001      	beq.n	8004c6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e0cf      	b.n	8004e0c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0302 	and.w	r3, r3, #2
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d010      	beq.n	8004c9a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	689a      	ldr	r2, [r3, #8]
 8004c7c:	4b66      	ldr	r3, [pc, #408]	@ (8004e18 <HAL_RCC_ClockConfig+0x1f0>)
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d908      	bls.n	8004c9a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c88:	4b63      	ldr	r3, [pc, #396]	@ (8004e18 <HAL_RCC_ClockConfig+0x1f0>)
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	4960      	ldr	r1, [pc, #384]	@ (8004e18 <HAL_RCC_ClockConfig+0x1f0>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d04c      	beq.n	8004d40 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	2b03      	cmp	r3, #3
 8004cac:	d107      	bne.n	8004cbe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cae:	4b5a      	ldr	r3, [pc, #360]	@ (8004e18 <HAL_RCC_ClockConfig+0x1f0>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d121      	bne.n	8004cfe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e0a6      	b.n	8004e0c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d107      	bne.n	8004cd6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cc6:	4b54      	ldr	r3, [pc, #336]	@ (8004e18 <HAL_RCC_ClockConfig+0x1f0>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d115      	bne.n	8004cfe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e09a      	b.n	8004e0c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d107      	bne.n	8004cee <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004cde:	4b4e      	ldr	r3, [pc, #312]	@ (8004e18 <HAL_RCC_ClockConfig+0x1f0>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0302 	and.w	r3, r3, #2
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d109      	bne.n	8004cfe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e08e      	b.n	8004e0c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cee:	4b4a      	ldr	r3, [pc, #296]	@ (8004e18 <HAL_RCC_ClockConfig+0x1f0>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d101      	bne.n	8004cfe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e086      	b.n	8004e0c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004cfe:	4b46      	ldr	r3, [pc, #280]	@ (8004e18 <HAL_RCC_ClockConfig+0x1f0>)
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f023 0203 	bic.w	r2, r3, #3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	4943      	ldr	r1, [pc, #268]	@ (8004e18 <HAL_RCC_ClockConfig+0x1f0>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d10:	f7fd f9a6 	bl	8002060 <HAL_GetTick>
 8004d14:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d16:	e00a      	b.n	8004d2e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d18:	f7fd f9a2 	bl	8002060 <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d901      	bls.n	8004d2e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e06e      	b.n	8004e0c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d2e:	4b3a      	ldr	r3, [pc, #232]	@ (8004e18 <HAL_RCC_ClockConfig+0x1f0>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f003 020c 	and.w	r2, r3, #12
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d1eb      	bne.n	8004d18 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0302 	and.w	r3, r3, #2
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d010      	beq.n	8004d6e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	689a      	ldr	r2, [r3, #8]
 8004d50:	4b31      	ldr	r3, [pc, #196]	@ (8004e18 <HAL_RCC_ClockConfig+0x1f0>)
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d208      	bcs.n	8004d6e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d5c:	4b2e      	ldr	r3, [pc, #184]	@ (8004e18 <HAL_RCC_ClockConfig+0x1f0>)
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	492b      	ldr	r1, [pc, #172]	@ (8004e18 <HAL_RCC_ClockConfig+0x1f0>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d6e:	4b29      	ldr	r3, [pc, #164]	@ (8004e14 <HAL_RCC_ClockConfig+0x1ec>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0307 	and.w	r3, r3, #7
 8004d76:	683a      	ldr	r2, [r7, #0]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d210      	bcs.n	8004d9e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d7c:	4b25      	ldr	r3, [pc, #148]	@ (8004e14 <HAL_RCC_ClockConfig+0x1ec>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f023 0207 	bic.w	r2, r3, #7
 8004d84:	4923      	ldr	r1, [pc, #140]	@ (8004e14 <HAL_RCC_ClockConfig+0x1ec>)
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d8c:	4b21      	ldr	r3, [pc, #132]	@ (8004e14 <HAL_RCC_ClockConfig+0x1ec>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0307 	and.w	r3, r3, #7
 8004d94:	683a      	ldr	r2, [r7, #0]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d001      	beq.n	8004d9e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e036      	b.n	8004e0c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0304 	and.w	r3, r3, #4
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d008      	beq.n	8004dbc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004daa:	4b1b      	ldr	r3, [pc, #108]	@ (8004e18 <HAL_RCC_ClockConfig+0x1f0>)
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	4918      	ldr	r1, [pc, #96]	@ (8004e18 <HAL_RCC_ClockConfig+0x1f0>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0308 	and.w	r3, r3, #8
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d009      	beq.n	8004ddc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004dc8:	4b13      	ldr	r3, [pc, #76]	@ (8004e18 <HAL_RCC_ClockConfig+0x1f0>)
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	00db      	lsls	r3, r3, #3
 8004dd6:	4910      	ldr	r1, [pc, #64]	@ (8004e18 <HAL_RCC_ClockConfig+0x1f0>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ddc:	f000 f824 	bl	8004e28 <HAL_RCC_GetSysClockFreq>
 8004de0:	4602      	mov	r2, r0
 8004de2:	4b0d      	ldr	r3, [pc, #52]	@ (8004e18 <HAL_RCC_ClockConfig+0x1f0>)
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	091b      	lsrs	r3, r3, #4
 8004de8:	f003 030f 	and.w	r3, r3, #15
 8004dec:	490b      	ldr	r1, [pc, #44]	@ (8004e1c <HAL_RCC_ClockConfig+0x1f4>)
 8004dee:	5ccb      	ldrb	r3, [r1, r3]
 8004df0:	f003 031f 	and.w	r3, r3, #31
 8004df4:	fa22 f303 	lsr.w	r3, r2, r3
 8004df8:	4a09      	ldr	r2, [pc, #36]	@ (8004e20 <HAL_RCC_ClockConfig+0x1f8>)
 8004dfa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004dfc:	4b09      	ldr	r3, [pc, #36]	@ (8004e24 <HAL_RCC_ClockConfig+0x1fc>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4618      	mov	r0, r3
 8004e02:	f7fd f8dd 	bl	8001fc0 <HAL_InitTick>
 8004e06:	4603      	mov	r3, r0
 8004e08:	72fb      	strb	r3, [r7, #11]

  return status;
 8004e0a:	7afb      	ldrb	r3, [r7, #11]
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3710      	adds	r7, #16
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	40022000 	.word	0x40022000
 8004e18:	40021000 	.word	0x40021000
 8004e1c:	0800a348 	.word	0x0800a348
 8004e20:	20000004 	.word	0x20000004
 8004e24:	20000008 	.word	0x20000008

08004e28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b089      	sub	sp, #36	@ 0x24
 8004e2c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	61fb      	str	r3, [r7, #28]
 8004e32:	2300      	movs	r3, #0
 8004e34:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e36:	4b3e      	ldr	r3, [pc, #248]	@ (8004f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f003 030c 	and.w	r3, r3, #12
 8004e3e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e40:	4b3b      	ldr	r3, [pc, #236]	@ (8004f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	f003 0303 	and.w	r3, r3, #3
 8004e48:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d005      	beq.n	8004e5c <HAL_RCC_GetSysClockFreq+0x34>
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	2b0c      	cmp	r3, #12
 8004e54:	d121      	bne.n	8004e9a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d11e      	bne.n	8004e9a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004e5c:	4b34      	ldr	r3, [pc, #208]	@ (8004f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0308 	and.w	r3, r3, #8
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d107      	bne.n	8004e78 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004e68:	4b31      	ldr	r3, [pc, #196]	@ (8004f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e6e:	0a1b      	lsrs	r3, r3, #8
 8004e70:	f003 030f 	and.w	r3, r3, #15
 8004e74:	61fb      	str	r3, [r7, #28]
 8004e76:	e005      	b.n	8004e84 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004e78:	4b2d      	ldr	r3, [pc, #180]	@ (8004f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	091b      	lsrs	r3, r3, #4
 8004e7e:	f003 030f 	and.w	r3, r3, #15
 8004e82:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004e84:	4a2b      	ldr	r2, [pc, #172]	@ (8004f34 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e8c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d10d      	bne.n	8004eb0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e98:	e00a      	b.n	8004eb0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	2b04      	cmp	r3, #4
 8004e9e:	d102      	bne.n	8004ea6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004ea0:	4b25      	ldr	r3, [pc, #148]	@ (8004f38 <HAL_RCC_GetSysClockFreq+0x110>)
 8004ea2:	61bb      	str	r3, [r7, #24]
 8004ea4:	e004      	b.n	8004eb0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	2b08      	cmp	r3, #8
 8004eaa:	d101      	bne.n	8004eb0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004eac:	4b23      	ldr	r3, [pc, #140]	@ (8004f3c <HAL_RCC_GetSysClockFreq+0x114>)
 8004eae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	2b0c      	cmp	r3, #12
 8004eb4:	d134      	bne.n	8004f20 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004eb6:	4b1e      	ldr	r3, [pc, #120]	@ (8004f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	f003 0303 	and.w	r3, r3, #3
 8004ebe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d003      	beq.n	8004ece <HAL_RCC_GetSysClockFreq+0xa6>
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	2b03      	cmp	r3, #3
 8004eca:	d003      	beq.n	8004ed4 <HAL_RCC_GetSysClockFreq+0xac>
 8004ecc:	e005      	b.n	8004eda <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004ece:	4b1a      	ldr	r3, [pc, #104]	@ (8004f38 <HAL_RCC_GetSysClockFreq+0x110>)
 8004ed0:	617b      	str	r3, [r7, #20]
      break;
 8004ed2:	e005      	b.n	8004ee0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004ed4:	4b19      	ldr	r3, [pc, #100]	@ (8004f3c <HAL_RCC_GetSysClockFreq+0x114>)
 8004ed6:	617b      	str	r3, [r7, #20]
      break;
 8004ed8:	e002      	b.n	8004ee0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	617b      	str	r3, [r7, #20]
      break;
 8004ede:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ee0:	4b13      	ldr	r3, [pc, #76]	@ (8004f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	091b      	lsrs	r3, r3, #4
 8004ee6:	f003 0307 	and.w	r3, r3, #7
 8004eea:	3301      	adds	r3, #1
 8004eec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004eee:	4b10      	ldr	r3, [pc, #64]	@ (8004f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	0a1b      	lsrs	r3, r3, #8
 8004ef4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ef8:	697a      	ldr	r2, [r7, #20]
 8004efa:	fb03 f202 	mul.w	r2, r3, r2
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f04:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f06:	4b0a      	ldr	r3, [pc, #40]	@ (8004f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	0e5b      	lsrs	r3, r3, #25
 8004f0c:	f003 0303 	and.w	r3, r3, #3
 8004f10:	3301      	adds	r3, #1
 8004f12:	005b      	lsls	r3, r3, #1
 8004f14:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004f16:	697a      	ldr	r2, [r7, #20]
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f1e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004f20:	69bb      	ldr	r3, [r7, #24]
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3724      	adds	r7, #36	@ 0x24
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop
 8004f30:	40021000 	.word	0x40021000
 8004f34:	0800a358 	.word	0x0800a358
 8004f38:	00f42400 	.word	0x00f42400
 8004f3c:	007a1200 	.word	0x007a1200

08004f40 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b086      	sub	sp, #24
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004f48:	2300      	movs	r3, #0
 8004f4a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004f4c:	4b2a      	ldr	r3, [pc, #168]	@ (8004ff8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d003      	beq.n	8004f60 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004f58:	f7ff fa26 	bl	80043a8 <HAL_PWREx_GetVoltageRange>
 8004f5c:	6178      	str	r0, [r7, #20]
 8004f5e:	e014      	b.n	8004f8a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f60:	4b25      	ldr	r3, [pc, #148]	@ (8004ff8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f64:	4a24      	ldr	r2, [pc, #144]	@ (8004ff8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f6c:	4b22      	ldr	r3, [pc, #136]	@ (8004ff8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f74:	60fb      	str	r3, [r7, #12]
 8004f76:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004f78:	f7ff fa16 	bl	80043a8 <HAL_PWREx_GetVoltageRange>
 8004f7c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004f7e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ff8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f82:	4a1d      	ldr	r2, [pc, #116]	@ (8004ff8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f88:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f90:	d10b      	bne.n	8004faa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2b80      	cmp	r3, #128	@ 0x80
 8004f96:	d919      	bls.n	8004fcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2ba0      	cmp	r3, #160	@ 0xa0
 8004f9c:	d902      	bls.n	8004fa4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f9e:	2302      	movs	r3, #2
 8004fa0:	613b      	str	r3, [r7, #16]
 8004fa2:	e013      	b.n	8004fcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	613b      	str	r3, [r7, #16]
 8004fa8:	e010      	b.n	8004fcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2b80      	cmp	r3, #128	@ 0x80
 8004fae:	d902      	bls.n	8004fb6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	613b      	str	r3, [r7, #16]
 8004fb4:	e00a      	b.n	8004fcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2b80      	cmp	r3, #128	@ 0x80
 8004fba:	d102      	bne.n	8004fc2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004fbc:	2302      	movs	r3, #2
 8004fbe:	613b      	str	r3, [r7, #16]
 8004fc0:	e004      	b.n	8004fcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2b70      	cmp	r3, #112	@ 0x70
 8004fc6:	d101      	bne.n	8004fcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004fc8:	2301      	movs	r3, #1
 8004fca:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8004ffc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f023 0207 	bic.w	r2, r3, #7
 8004fd4:	4909      	ldr	r1, [pc, #36]	@ (8004ffc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004fdc:	4b07      	ldr	r3, [pc, #28]	@ (8004ffc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0307 	and.w	r3, r3, #7
 8004fe4:	693a      	ldr	r2, [r7, #16]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d001      	beq.n	8004fee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e000      	b.n	8004ff0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3718      	adds	r7, #24
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	40021000 	.word	0x40021000
 8004ffc:	40022000 	.word	0x40022000

08005000 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b086      	sub	sp, #24
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005008:	2300      	movs	r3, #0
 800500a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800500c:	2300      	movs	r3, #0
 800500e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005018:	2b00      	cmp	r3, #0
 800501a:	d041      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005020:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005024:	d02a      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005026:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800502a:	d824      	bhi.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800502c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005030:	d008      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005032:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005036:	d81e      	bhi.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005038:	2b00      	cmp	r3, #0
 800503a:	d00a      	beq.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800503c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005040:	d010      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005042:	e018      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005044:	4b86      	ldr	r3, [pc, #536]	@ (8005260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	4a85      	ldr	r2, [pc, #532]	@ (8005260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800504a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800504e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005050:	e015      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	3304      	adds	r3, #4
 8005056:	2100      	movs	r1, #0
 8005058:	4618      	mov	r0, r3
 800505a:	f000 fabb 	bl	80055d4 <RCCEx_PLLSAI1_Config>
 800505e:	4603      	mov	r3, r0
 8005060:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005062:	e00c      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	3320      	adds	r3, #32
 8005068:	2100      	movs	r1, #0
 800506a:	4618      	mov	r0, r3
 800506c:	f000 fba6 	bl	80057bc <RCCEx_PLLSAI2_Config>
 8005070:	4603      	mov	r3, r0
 8005072:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005074:	e003      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	74fb      	strb	r3, [r7, #19]
      break;
 800507a:	e000      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800507c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800507e:	7cfb      	ldrb	r3, [r7, #19]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d10b      	bne.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005084:	4b76      	ldr	r3, [pc, #472]	@ (8005260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800508a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005092:	4973      	ldr	r1, [pc, #460]	@ (8005260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005094:	4313      	orrs	r3, r2
 8005096:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800509a:	e001      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800509c:	7cfb      	ldrb	r3, [r7, #19]
 800509e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d041      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80050b0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80050b4:	d02a      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80050b6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80050ba:	d824      	bhi.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80050bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80050c0:	d008      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80050c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80050c6:	d81e      	bhi.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00a      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80050cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80050d0:	d010      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80050d2:	e018      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80050d4:	4b62      	ldr	r3, [pc, #392]	@ (8005260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	4a61      	ldr	r2, [pc, #388]	@ (8005260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050de:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80050e0:	e015      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	3304      	adds	r3, #4
 80050e6:	2100      	movs	r1, #0
 80050e8:	4618      	mov	r0, r3
 80050ea:	f000 fa73 	bl	80055d4 <RCCEx_PLLSAI1_Config>
 80050ee:	4603      	mov	r3, r0
 80050f0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80050f2:	e00c      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	3320      	adds	r3, #32
 80050f8:	2100      	movs	r1, #0
 80050fa:	4618      	mov	r0, r3
 80050fc:	f000 fb5e 	bl	80057bc <RCCEx_PLLSAI2_Config>
 8005100:	4603      	mov	r3, r0
 8005102:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005104:	e003      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	74fb      	strb	r3, [r7, #19]
      break;
 800510a:	e000      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800510c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800510e:	7cfb      	ldrb	r3, [r7, #19]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d10b      	bne.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005114:	4b52      	ldr	r3, [pc, #328]	@ (8005260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005116:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800511a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005122:	494f      	ldr	r1, [pc, #316]	@ (8005260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005124:	4313      	orrs	r3, r2
 8005126:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800512a:	e001      	b.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800512c:	7cfb      	ldrb	r3, [r7, #19]
 800512e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005138:	2b00      	cmp	r3, #0
 800513a:	f000 80a0 	beq.w	800527e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800513e:	2300      	movs	r3, #0
 8005140:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005142:	4b47      	ldr	r3, [pc, #284]	@ (8005260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005146:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800514e:	2301      	movs	r3, #1
 8005150:	e000      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005152:	2300      	movs	r3, #0
 8005154:	2b00      	cmp	r3, #0
 8005156:	d00d      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005158:	4b41      	ldr	r3, [pc, #260]	@ (8005260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800515a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800515c:	4a40      	ldr	r2, [pc, #256]	@ (8005260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800515e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005162:	6593      	str	r3, [r2, #88]	@ 0x58
 8005164:	4b3e      	ldr	r3, [pc, #248]	@ (8005260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005166:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005168:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800516c:	60bb      	str	r3, [r7, #8]
 800516e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005170:	2301      	movs	r3, #1
 8005172:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005174:	4b3b      	ldr	r3, [pc, #236]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a3a      	ldr	r2, [pc, #232]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800517a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800517e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005180:	f7fc ff6e 	bl	8002060 <HAL_GetTick>
 8005184:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005186:	e009      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005188:	f7fc ff6a 	bl	8002060 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	2b02      	cmp	r3, #2
 8005194:	d902      	bls.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	74fb      	strb	r3, [r7, #19]
        break;
 800519a:	e005      	b.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800519c:	4b31      	ldr	r3, [pc, #196]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d0ef      	beq.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80051a8:	7cfb      	ldrb	r3, [r7, #19]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d15c      	bne.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80051ae:	4b2c      	ldr	r3, [pc, #176]	@ (8005260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051b8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d01f      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d019      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80051cc:	4b24      	ldr	r3, [pc, #144]	@ (8005260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80051d8:	4b21      	ldr	r3, [pc, #132]	@ (8005260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051de:	4a20      	ldr	r2, [pc, #128]	@ (8005260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80051e8:	4b1d      	ldr	r3, [pc, #116]	@ (8005260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051ee:	4a1c      	ldr	r2, [pc, #112]	@ (8005260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80051f8:	4a19      	ldr	r2, [pc, #100]	@ (8005260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	2b00      	cmp	r3, #0
 8005208:	d016      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800520a:	f7fc ff29 	bl	8002060 <HAL_GetTick>
 800520e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005210:	e00b      	b.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005212:	f7fc ff25 	bl	8002060 <HAL_GetTick>
 8005216:	4602      	mov	r2, r0
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005220:	4293      	cmp	r3, r2
 8005222:	d902      	bls.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	74fb      	strb	r3, [r7, #19]
            break;
 8005228:	e006      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800522a:	4b0d      	ldr	r3, [pc, #52]	@ (8005260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800522c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005230:	f003 0302 	and.w	r3, r3, #2
 8005234:	2b00      	cmp	r3, #0
 8005236:	d0ec      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005238:	7cfb      	ldrb	r3, [r7, #19]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d10c      	bne.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800523e:	4b08      	ldr	r3, [pc, #32]	@ (8005260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005240:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005244:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800524e:	4904      	ldr	r1, [pc, #16]	@ (8005260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005250:	4313      	orrs	r3, r2
 8005252:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005256:	e009      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005258:	7cfb      	ldrb	r3, [r7, #19]
 800525a:	74bb      	strb	r3, [r7, #18]
 800525c:	e006      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800525e:	bf00      	nop
 8005260:	40021000 	.word	0x40021000
 8005264:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005268:	7cfb      	ldrb	r3, [r7, #19]
 800526a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800526c:	7c7b      	ldrb	r3, [r7, #17]
 800526e:	2b01      	cmp	r3, #1
 8005270:	d105      	bne.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005272:	4b9e      	ldr	r3, [pc, #632]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005276:	4a9d      	ldr	r2, [pc, #628]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005278:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800527c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0301 	and.w	r3, r3, #1
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00a      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800528a:	4b98      	ldr	r3, [pc, #608]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800528c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005290:	f023 0203 	bic.w	r2, r3, #3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005298:	4994      	ldr	r1, [pc, #592]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800529a:	4313      	orrs	r3, r2
 800529c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0302 	and.w	r3, r3, #2
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d00a      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80052ac:	4b8f      	ldr	r3, [pc, #572]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052b2:	f023 020c 	bic.w	r2, r3, #12
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052ba:	498c      	ldr	r1, [pc, #560]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0304 	and.w	r3, r3, #4
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00a      	beq.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80052ce:	4b87      	ldr	r3, [pc, #540]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052d4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052dc:	4983      	ldr	r1, [pc, #524]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0308 	and.w	r3, r3, #8
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d00a      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80052f0:	4b7e      	ldr	r3, [pc, #504]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052f6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052fe:	497b      	ldr	r1, [pc, #492]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005300:	4313      	orrs	r3, r2
 8005302:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0310 	and.w	r3, r3, #16
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00a      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005312:	4b76      	ldr	r3, [pc, #472]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005314:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005318:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005320:	4972      	ldr	r1, [pc, #456]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005322:	4313      	orrs	r3, r2
 8005324:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0320 	and.w	r3, r3, #32
 8005330:	2b00      	cmp	r3, #0
 8005332:	d00a      	beq.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005334:	4b6d      	ldr	r3, [pc, #436]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005336:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800533a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005342:	496a      	ldr	r1, [pc, #424]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005344:	4313      	orrs	r3, r2
 8005346:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00a      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005356:	4b65      	ldr	r3, [pc, #404]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005358:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800535c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005364:	4961      	ldr	r1, [pc, #388]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005366:	4313      	orrs	r3, r2
 8005368:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00a      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005378:	4b5c      	ldr	r3, [pc, #368]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800537a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800537e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005386:	4959      	ldr	r1, [pc, #356]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005388:	4313      	orrs	r3, r2
 800538a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00a      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800539a:	4b54      	ldr	r3, [pc, #336]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800539c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053a0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053a8:	4950      	ldr	r1, [pc, #320]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d00a      	beq.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80053bc:	4b4b      	ldr	r3, [pc, #300]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053c2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053ca:	4948      	ldr	r1, [pc, #288]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053cc:	4313      	orrs	r3, r2
 80053ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00a      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80053de:	4b43      	ldr	r3, [pc, #268]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053ec:	493f      	ldr	r1, [pc, #252]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d028      	beq.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005400:	4b3a      	ldr	r3, [pc, #232]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005406:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800540e:	4937      	ldr	r1, [pc, #220]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005410:	4313      	orrs	r3, r2
 8005412:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800541a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800541e:	d106      	bne.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005420:	4b32      	ldr	r3, [pc, #200]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	4a31      	ldr	r2, [pc, #196]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005426:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800542a:	60d3      	str	r3, [r2, #12]
 800542c:	e011      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005432:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005436:	d10c      	bne.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	3304      	adds	r3, #4
 800543c:	2101      	movs	r1, #1
 800543e:	4618      	mov	r0, r3
 8005440:	f000 f8c8 	bl	80055d4 <RCCEx_PLLSAI1_Config>
 8005444:	4603      	mov	r3, r0
 8005446:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005448:	7cfb      	ldrb	r3, [r7, #19]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d001      	beq.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800544e:	7cfb      	ldrb	r3, [r7, #19]
 8005450:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d028      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800545e:	4b23      	ldr	r3, [pc, #140]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005460:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005464:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800546c:	491f      	ldr	r1, [pc, #124]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800546e:	4313      	orrs	r3, r2
 8005470:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005478:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800547c:	d106      	bne.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800547e:	4b1b      	ldr	r3, [pc, #108]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	4a1a      	ldr	r2, [pc, #104]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005484:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005488:	60d3      	str	r3, [r2, #12]
 800548a:	e011      	b.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005490:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005494:	d10c      	bne.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	3304      	adds	r3, #4
 800549a:	2101      	movs	r1, #1
 800549c:	4618      	mov	r0, r3
 800549e:	f000 f899 	bl	80055d4 <RCCEx_PLLSAI1_Config>
 80054a2:	4603      	mov	r3, r0
 80054a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054a6:	7cfb      	ldrb	r3, [r7, #19]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d001      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80054ac:	7cfb      	ldrb	r3, [r7, #19]
 80054ae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d02b      	beq.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80054bc:	4b0b      	ldr	r3, [pc, #44]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054c2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054ca:	4908      	ldr	r1, [pc, #32]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054da:	d109      	bne.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054dc:	4b03      	ldr	r3, [pc, #12]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	4a02      	ldr	r2, [pc, #8]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80054e6:	60d3      	str	r3, [r2, #12]
 80054e8:	e014      	b.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80054ea:	bf00      	nop
 80054ec:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80054f8:	d10c      	bne.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	3304      	adds	r3, #4
 80054fe:	2101      	movs	r1, #1
 8005500:	4618      	mov	r0, r3
 8005502:	f000 f867 	bl	80055d4 <RCCEx_PLLSAI1_Config>
 8005506:	4603      	mov	r3, r0
 8005508:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800550a:	7cfb      	ldrb	r3, [r7, #19]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d001      	beq.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005510:	7cfb      	ldrb	r3, [r7, #19]
 8005512:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d02f      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005520:	4b2b      	ldr	r3, [pc, #172]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005522:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005526:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800552e:	4928      	ldr	r1, [pc, #160]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005530:	4313      	orrs	r3, r2
 8005532:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800553a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800553e:	d10d      	bne.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	3304      	adds	r3, #4
 8005544:	2102      	movs	r1, #2
 8005546:	4618      	mov	r0, r3
 8005548:	f000 f844 	bl	80055d4 <RCCEx_PLLSAI1_Config>
 800554c:	4603      	mov	r3, r0
 800554e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005550:	7cfb      	ldrb	r3, [r7, #19]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d014      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005556:	7cfb      	ldrb	r3, [r7, #19]
 8005558:	74bb      	strb	r3, [r7, #18]
 800555a:	e011      	b.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005560:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005564:	d10c      	bne.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	3320      	adds	r3, #32
 800556a:	2102      	movs	r1, #2
 800556c:	4618      	mov	r0, r3
 800556e:	f000 f925 	bl	80057bc <RCCEx_PLLSAI2_Config>
 8005572:	4603      	mov	r3, r0
 8005574:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005576:	7cfb      	ldrb	r3, [r7, #19]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d001      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800557c:	7cfb      	ldrb	r3, [r7, #19]
 800557e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00a      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800558c:	4b10      	ldr	r3, [pc, #64]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800558e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005592:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800559a:	490d      	ldr	r1, [pc, #52]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800559c:	4313      	orrs	r3, r2
 800559e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00b      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80055ae:	4b08      	ldr	r3, [pc, #32]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80055b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055b4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055be:	4904      	ldr	r1, [pc, #16]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80055c0:	4313      	orrs	r3, r2
 80055c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80055c6:	7cbb      	ldrb	r3, [r7, #18]
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3718      	adds	r7, #24
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	40021000 	.word	0x40021000

080055d4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055de:	2300      	movs	r3, #0
 80055e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80055e2:	4b75      	ldr	r3, [pc, #468]	@ (80057b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	f003 0303 	and.w	r3, r3, #3
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d018      	beq.n	8005620 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80055ee:	4b72      	ldr	r3, [pc, #456]	@ (80057b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	f003 0203 	and.w	r2, r3, #3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d10d      	bne.n	800561a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
       ||
 8005602:	2b00      	cmp	r3, #0
 8005604:	d009      	beq.n	800561a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005606:	4b6c      	ldr	r3, [pc, #432]	@ (80057b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	091b      	lsrs	r3, r3, #4
 800560c:	f003 0307 	and.w	r3, r3, #7
 8005610:	1c5a      	adds	r2, r3, #1
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685b      	ldr	r3, [r3, #4]
       ||
 8005616:	429a      	cmp	r2, r3
 8005618:	d047      	beq.n	80056aa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	73fb      	strb	r3, [r7, #15]
 800561e:	e044      	b.n	80056aa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2b03      	cmp	r3, #3
 8005626:	d018      	beq.n	800565a <RCCEx_PLLSAI1_Config+0x86>
 8005628:	2b03      	cmp	r3, #3
 800562a:	d825      	bhi.n	8005678 <RCCEx_PLLSAI1_Config+0xa4>
 800562c:	2b01      	cmp	r3, #1
 800562e:	d002      	beq.n	8005636 <RCCEx_PLLSAI1_Config+0x62>
 8005630:	2b02      	cmp	r3, #2
 8005632:	d009      	beq.n	8005648 <RCCEx_PLLSAI1_Config+0x74>
 8005634:	e020      	b.n	8005678 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005636:	4b60      	ldr	r3, [pc, #384]	@ (80057b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	2b00      	cmp	r3, #0
 8005640:	d11d      	bne.n	800567e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005646:	e01a      	b.n	800567e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005648:	4b5b      	ldr	r3, [pc, #364]	@ (80057b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005650:	2b00      	cmp	r3, #0
 8005652:	d116      	bne.n	8005682 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005658:	e013      	b.n	8005682 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800565a:	4b57      	ldr	r3, [pc, #348]	@ (80057b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d10f      	bne.n	8005686 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005666:	4b54      	ldr	r3, [pc, #336]	@ (80057b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800566e:	2b00      	cmp	r3, #0
 8005670:	d109      	bne.n	8005686 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005676:	e006      	b.n	8005686 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	73fb      	strb	r3, [r7, #15]
      break;
 800567c:	e004      	b.n	8005688 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800567e:	bf00      	nop
 8005680:	e002      	b.n	8005688 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005682:	bf00      	nop
 8005684:	e000      	b.n	8005688 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005686:	bf00      	nop
    }

    if(status == HAL_OK)
 8005688:	7bfb      	ldrb	r3, [r7, #15]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d10d      	bne.n	80056aa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800568e:	4b4a      	ldr	r3, [pc, #296]	@ (80057b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6819      	ldr	r1, [r3, #0]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	3b01      	subs	r3, #1
 80056a0:	011b      	lsls	r3, r3, #4
 80056a2:	430b      	orrs	r3, r1
 80056a4:	4944      	ldr	r1, [pc, #272]	@ (80057b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80056aa:	7bfb      	ldrb	r3, [r7, #15]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d17d      	bne.n	80057ac <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80056b0:	4b41      	ldr	r3, [pc, #260]	@ (80057b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a40      	ldr	r2, [pc, #256]	@ (80057b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80056ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056bc:	f7fc fcd0 	bl	8002060 <HAL_GetTick>
 80056c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80056c2:	e009      	b.n	80056d8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80056c4:	f7fc fccc 	bl	8002060 <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d902      	bls.n	80056d8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80056d2:	2303      	movs	r3, #3
 80056d4:	73fb      	strb	r3, [r7, #15]
        break;
 80056d6:	e005      	b.n	80056e4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80056d8:	4b37      	ldr	r3, [pc, #220]	@ (80057b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1ef      	bne.n	80056c4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80056e4:	7bfb      	ldrb	r3, [r7, #15]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d160      	bne.n	80057ac <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d111      	bne.n	8005714 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056f0:	4b31      	ldr	r3, [pc, #196]	@ (80057b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80056f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	6892      	ldr	r2, [r2, #8]
 8005700:	0211      	lsls	r1, r2, #8
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	68d2      	ldr	r2, [r2, #12]
 8005706:	0912      	lsrs	r2, r2, #4
 8005708:	0452      	lsls	r2, r2, #17
 800570a:	430a      	orrs	r2, r1
 800570c:	492a      	ldr	r1, [pc, #168]	@ (80057b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800570e:	4313      	orrs	r3, r2
 8005710:	610b      	str	r3, [r1, #16]
 8005712:	e027      	b.n	8005764 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	2b01      	cmp	r3, #1
 8005718:	d112      	bne.n	8005740 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800571a:	4b27      	ldr	r3, [pc, #156]	@ (80057b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005722:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	6892      	ldr	r2, [r2, #8]
 800572a:	0211      	lsls	r1, r2, #8
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	6912      	ldr	r2, [r2, #16]
 8005730:	0852      	lsrs	r2, r2, #1
 8005732:	3a01      	subs	r2, #1
 8005734:	0552      	lsls	r2, r2, #21
 8005736:	430a      	orrs	r2, r1
 8005738:	491f      	ldr	r1, [pc, #124]	@ (80057b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800573a:	4313      	orrs	r3, r2
 800573c:	610b      	str	r3, [r1, #16]
 800573e:	e011      	b.n	8005764 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005740:	4b1d      	ldr	r3, [pc, #116]	@ (80057b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005748:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	6892      	ldr	r2, [r2, #8]
 8005750:	0211      	lsls	r1, r2, #8
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	6952      	ldr	r2, [r2, #20]
 8005756:	0852      	lsrs	r2, r2, #1
 8005758:	3a01      	subs	r2, #1
 800575a:	0652      	lsls	r2, r2, #25
 800575c:	430a      	orrs	r2, r1
 800575e:	4916      	ldr	r1, [pc, #88]	@ (80057b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005760:	4313      	orrs	r3, r2
 8005762:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005764:	4b14      	ldr	r3, [pc, #80]	@ (80057b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a13      	ldr	r2, [pc, #76]	@ (80057b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800576a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800576e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005770:	f7fc fc76 	bl	8002060 <HAL_GetTick>
 8005774:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005776:	e009      	b.n	800578c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005778:	f7fc fc72 	bl	8002060 <HAL_GetTick>
 800577c:	4602      	mov	r2, r0
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	2b02      	cmp	r3, #2
 8005784:	d902      	bls.n	800578c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	73fb      	strb	r3, [r7, #15]
          break;
 800578a:	e005      	b.n	8005798 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800578c:	4b0a      	ldr	r3, [pc, #40]	@ (80057b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d0ef      	beq.n	8005778 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005798:	7bfb      	ldrb	r3, [r7, #15]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d106      	bne.n	80057ac <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800579e:	4b06      	ldr	r3, [pc, #24]	@ (80057b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057a0:	691a      	ldr	r2, [r3, #16]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	4904      	ldr	r1, [pc, #16]	@ (80057b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057a8:	4313      	orrs	r3, r2
 80057aa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80057ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3710      	adds	r7, #16
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	40021000 	.word	0x40021000

080057bc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057c6:	2300      	movs	r3, #0
 80057c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80057ca:	4b6a      	ldr	r3, [pc, #424]	@ (8005974 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	f003 0303 	and.w	r3, r3, #3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d018      	beq.n	8005808 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80057d6:	4b67      	ldr	r3, [pc, #412]	@ (8005974 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	f003 0203 	and.w	r2, r3, #3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d10d      	bne.n	8005802 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
       ||
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d009      	beq.n	8005802 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80057ee:	4b61      	ldr	r3, [pc, #388]	@ (8005974 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	091b      	lsrs	r3, r3, #4
 80057f4:	f003 0307 	and.w	r3, r3, #7
 80057f8:	1c5a      	adds	r2, r3, #1
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
       ||
 80057fe:	429a      	cmp	r2, r3
 8005800:	d047      	beq.n	8005892 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	73fb      	strb	r3, [r7, #15]
 8005806:	e044      	b.n	8005892 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2b03      	cmp	r3, #3
 800580e:	d018      	beq.n	8005842 <RCCEx_PLLSAI2_Config+0x86>
 8005810:	2b03      	cmp	r3, #3
 8005812:	d825      	bhi.n	8005860 <RCCEx_PLLSAI2_Config+0xa4>
 8005814:	2b01      	cmp	r3, #1
 8005816:	d002      	beq.n	800581e <RCCEx_PLLSAI2_Config+0x62>
 8005818:	2b02      	cmp	r3, #2
 800581a:	d009      	beq.n	8005830 <RCCEx_PLLSAI2_Config+0x74>
 800581c:	e020      	b.n	8005860 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800581e:	4b55      	ldr	r3, [pc, #340]	@ (8005974 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 0302 	and.w	r3, r3, #2
 8005826:	2b00      	cmp	r3, #0
 8005828:	d11d      	bne.n	8005866 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800582e:	e01a      	b.n	8005866 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005830:	4b50      	ldr	r3, [pc, #320]	@ (8005974 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005838:	2b00      	cmp	r3, #0
 800583a:	d116      	bne.n	800586a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005840:	e013      	b.n	800586a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005842:	4b4c      	ldr	r3, [pc, #304]	@ (8005974 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800584a:	2b00      	cmp	r3, #0
 800584c:	d10f      	bne.n	800586e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800584e:	4b49      	ldr	r3, [pc, #292]	@ (8005974 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005856:	2b00      	cmp	r3, #0
 8005858:	d109      	bne.n	800586e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800585e:	e006      	b.n	800586e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	73fb      	strb	r3, [r7, #15]
      break;
 8005864:	e004      	b.n	8005870 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005866:	bf00      	nop
 8005868:	e002      	b.n	8005870 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800586a:	bf00      	nop
 800586c:	e000      	b.n	8005870 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800586e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005870:	7bfb      	ldrb	r3, [r7, #15]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d10d      	bne.n	8005892 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005876:	4b3f      	ldr	r3, [pc, #252]	@ (8005974 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6819      	ldr	r1, [r3, #0]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	3b01      	subs	r3, #1
 8005888:	011b      	lsls	r3, r3, #4
 800588a:	430b      	orrs	r3, r1
 800588c:	4939      	ldr	r1, [pc, #228]	@ (8005974 <RCCEx_PLLSAI2_Config+0x1b8>)
 800588e:	4313      	orrs	r3, r2
 8005890:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005892:	7bfb      	ldrb	r3, [r7, #15]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d167      	bne.n	8005968 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005898:	4b36      	ldr	r3, [pc, #216]	@ (8005974 <RCCEx_PLLSAI2_Config+0x1b8>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a35      	ldr	r2, [pc, #212]	@ (8005974 <RCCEx_PLLSAI2_Config+0x1b8>)
 800589e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058a4:	f7fc fbdc 	bl	8002060 <HAL_GetTick>
 80058a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80058aa:	e009      	b.n	80058c0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80058ac:	f7fc fbd8 	bl	8002060 <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d902      	bls.n	80058c0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	73fb      	strb	r3, [r7, #15]
        break;
 80058be:	e005      	b.n	80058cc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80058c0:	4b2c      	ldr	r3, [pc, #176]	@ (8005974 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d1ef      	bne.n	80058ac <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80058cc:	7bfb      	ldrb	r3, [r7, #15]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d14a      	bne.n	8005968 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d111      	bne.n	80058fc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80058d8:	4b26      	ldr	r3, [pc, #152]	@ (8005974 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058da:	695b      	ldr	r3, [r3, #20]
 80058dc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80058e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	6892      	ldr	r2, [r2, #8]
 80058e8:	0211      	lsls	r1, r2, #8
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	68d2      	ldr	r2, [r2, #12]
 80058ee:	0912      	lsrs	r2, r2, #4
 80058f0:	0452      	lsls	r2, r2, #17
 80058f2:	430a      	orrs	r2, r1
 80058f4:	491f      	ldr	r1, [pc, #124]	@ (8005974 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058f6:	4313      	orrs	r3, r2
 80058f8:	614b      	str	r3, [r1, #20]
 80058fa:	e011      	b.n	8005920 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80058fc:	4b1d      	ldr	r3, [pc, #116]	@ (8005974 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058fe:	695b      	ldr	r3, [r3, #20]
 8005900:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005904:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	6892      	ldr	r2, [r2, #8]
 800590c:	0211      	lsls	r1, r2, #8
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	6912      	ldr	r2, [r2, #16]
 8005912:	0852      	lsrs	r2, r2, #1
 8005914:	3a01      	subs	r2, #1
 8005916:	0652      	lsls	r2, r2, #25
 8005918:	430a      	orrs	r2, r1
 800591a:	4916      	ldr	r1, [pc, #88]	@ (8005974 <RCCEx_PLLSAI2_Config+0x1b8>)
 800591c:	4313      	orrs	r3, r2
 800591e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005920:	4b14      	ldr	r3, [pc, #80]	@ (8005974 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a13      	ldr	r2, [pc, #76]	@ (8005974 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005926:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800592a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800592c:	f7fc fb98 	bl	8002060 <HAL_GetTick>
 8005930:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005932:	e009      	b.n	8005948 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005934:	f7fc fb94 	bl	8002060 <HAL_GetTick>
 8005938:	4602      	mov	r2, r0
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	2b02      	cmp	r3, #2
 8005940:	d902      	bls.n	8005948 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	73fb      	strb	r3, [r7, #15]
          break;
 8005946:	e005      	b.n	8005954 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005948:	4b0a      	ldr	r3, [pc, #40]	@ (8005974 <RCCEx_PLLSAI2_Config+0x1b8>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005950:	2b00      	cmp	r3, #0
 8005952:	d0ef      	beq.n	8005934 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005954:	7bfb      	ldrb	r3, [r7, #15]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d106      	bne.n	8005968 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800595a:	4b06      	ldr	r3, [pc, #24]	@ (8005974 <RCCEx_PLLSAI2_Config+0x1b8>)
 800595c:	695a      	ldr	r2, [r3, #20]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	4904      	ldr	r1, [pc, #16]	@ (8005974 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005964:	4313      	orrs	r3, r2
 8005966:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005968:	7bfb      	ldrb	r3, [r7, #15]
}
 800596a:	4618      	mov	r0, r3
 800596c:	3710      	adds	r7, #16
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	40021000 	.word	0x40021000

08005978 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d101      	bne.n	800598a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e095      	b.n	8005ab6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800598e:	2b00      	cmp	r3, #0
 8005990:	d108      	bne.n	80059a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800599a:	d009      	beq.n	80059b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	61da      	str	r2, [r3, #28]
 80059a2:	e005      	b.n	80059b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d106      	bne.n	80059d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f7fc f8e6 	bl	8001b9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2202      	movs	r2, #2
 80059d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059e6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80059f0:	d902      	bls.n	80059f8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80059f2:	2300      	movs	r3, #0
 80059f4:	60fb      	str	r3, [r7, #12]
 80059f6:	e002      	b.n	80059fe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80059f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80059fc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005a06:	d007      	beq.n	8005a18 <HAL_SPI_Init+0xa0>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005a10:	d002      	beq.n	8005a18 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005a28:	431a      	orrs	r2, r3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	f003 0302 	and.w	r3, r3, #2
 8005a32:	431a      	orrs	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	695b      	ldr	r3, [r3, #20]
 8005a38:	f003 0301 	and.w	r3, r3, #1
 8005a3c:	431a      	orrs	r2, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a46:	431a      	orrs	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	69db      	ldr	r3, [r3, #28]
 8005a4c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a50:	431a      	orrs	r2, r3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a1b      	ldr	r3, [r3, #32]
 8005a56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a5a:	ea42 0103 	orr.w	r1, r2, r3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a62:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	430a      	orrs	r2, r1
 8005a6c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	699b      	ldr	r3, [r3, #24]
 8005a72:	0c1b      	lsrs	r3, r3, #16
 8005a74:	f003 0204 	and.w	r2, r3, #4
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a7c:	f003 0310 	and.w	r3, r3, #16
 8005a80:	431a      	orrs	r2, r3
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a86:	f003 0308 	and.w	r3, r3, #8
 8005a8a:	431a      	orrs	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005a94:	ea42 0103 	orr.w	r1, r2, r3
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	430a      	orrs	r2, r1
 8005aa4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3710      	adds	r7, #16
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}

08005abe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005abe:	b580      	push	{r7, lr}
 8005ac0:	b088      	sub	sp, #32
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	60f8      	str	r0, [r7, #12]
 8005ac6:	60b9      	str	r1, [r7, #8]
 8005ac8:	603b      	str	r3, [r7, #0]
 8005aca:	4613      	mov	r3, r2
 8005acc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ace:	f7fc fac7 	bl	8002060 <HAL_GetTick>
 8005ad2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005ad4:	88fb      	ldrh	r3, [r7, #6]
 8005ad6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d001      	beq.n	8005ae8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005ae4:	2302      	movs	r3, #2
 8005ae6:	e15c      	b.n	8005da2 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d002      	beq.n	8005af4 <HAL_SPI_Transmit+0x36>
 8005aee:	88fb      	ldrh	r3, [r7, #6]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d101      	bne.n	8005af8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e154      	b.n	8005da2 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d101      	bne.n	8005b06 <HAL_SPI_Transmit+0x48>
 8005b02:	2302      	movs	r3, #2
 8005b04:	e14d      	b.n	8005da2 <HAL_SPI_Transmit+0x2e4>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2203      	movs	r2, #3
 8005b12:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	68ba      	ldr	r2, [r7, #8]
 8005b20:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	88fa      	ldrh	r2, [r7, #6]
 8005b26:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	88fa      	ldrh	r2, [r7, #6]
 8005b2c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b58:	d10f      	bne.n	8005b7a <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b68:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b78:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b84:	2b40      	cmp	r3, #64	@ 0x40
 8005b86:	d007      	beq.n	8005b98 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b96:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005ba0:	d952      	bls.n	8005c48 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d002      	beq.n	8005bb0 <HAL_SPI_Transmit+0xf2>
 8005baa:	8b7b      	ldrh	r3, [r7, #26]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d145      	bne.n	8005c3c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bb4:	881a      	ldrh	r2, [r3, #0]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bc0:	1c9a      	adds	r2, r3, #2
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	3b01      	subs	r3, #1
 8005bce:	b29a      	uxth	r2, r3
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005bd4:	e032      	b.n	8005c3c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	f003 0302 	and.w	r3, r3, #2
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	d112      	bne.n	8005c0a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005be8:	881a      	ldrh	r2, [r3, #0]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bf4:	1c9a      	adds	r2, r3, #2
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	3b01      	subs	r3, #1
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005c08:	e018      	b.n	8005c3c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c0a:	f7fc fa29 	bl	8002060 <HAL_GetTick>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	683a      	ldr	r2, [r7, #0]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d803      	bhi.n	8005c22 <HAL_SPI_Transmit+0x164>
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c20:	d102      	bne.n	8005c28 <HAL_SPI_Transmit+0x16a>
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d109      	bne.n	8005c3c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	e0b2      	b.n	8005da2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d1c7      	bne.n	8005bd6 <HAL_SPI_Transmit+0x118>
 8005c46:	e083      	b.n	8005d50 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d002      	beq.n	8005c56 <HAL_SPI_Transmit+0x198>
 8005c50:	8b7b      	ldrh	r3, [r7, #26]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d177      	bne.n	8005d46 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d912      	bls.n	8005c86 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c64:	881a      	ldrh	r2, [r3, #0]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c70:	1c9a      	adds	r2, r3, #2
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	3b02      	subs	r3, #2
 8005c7e:	b29a      	uxth	r2, r3
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005c84:	e05f      	b.n	8005d46 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	330c      	adds	r3, #12
 8005c90:	7812      	ldrb	r2, [r2, #0]
 8005c92:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c98:	1c5a      	adds	r2, r3, #1
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	3b01      	subs	r3, #1
 8005ca6:	b29a      	uxth	r2, r3
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005cac:	e04b      	b.n	8005d46 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	f003 0302 	and.w	r3, r3, #2
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d12b      	bne.n	8005d14 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d912      	bls.n	8005cec <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cca:	881a      	ldrh	r2, [r3, #0]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cd6:	1c9a      	adds	r2, r3, #2
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	3b02      	subs	r3, #2
 8005ce4:	b29a      	uxth	r2, r3
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005cea:	e02c      	b.n	8005d46 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	330c      	adds	r3, #12
 8005cf6:	7812      	ldrb	r2, [r2, #0]
 8005cf8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cfe:	1c5a      	adds	r2, r3, #1
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	3b01      	subs	r3, #1
 8005d0c:	b29a      	uxth	r2, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005d12:	e018      	b.n	8005d46 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d14:	f7fc f9a4 	bl	8002060 <HAL_GetTick>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	683a      	ldr	r2, [r7, #0]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d803      	bhi.n	8005d2c <HAL_SPI_Transmit+0x26e>
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d2a:	d102      	bne.n	8005d32 <HAL_SPI_Transmit+0x274>
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d109      	bne.n	8005d46 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2201      	movs	r2, #1
 8005d36:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e02d      	b.n	8005da2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d1ae      	bne.n	8005cae <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d50:	69fa      	ldr	r2, [r7, #28]
 8005d52:	6839      	ldr	r1, [r7, #0]
 8005d54:	68f8      	ldr	r0, [r7, #12]
 8005d56:	f000 fcf5 	bl	8006744 <SPI_EndRxTxTransaction>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d002      	beq.n	8005d66 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2220      	movs	r2, #32
 8005d64:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d10a      	bne.n	8005d84 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d6e:	2300      	movs	r3, #0
 8005d70:	617b      	str	r3, [r7, #20]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	617b      	str	r3, [r7, #20]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	617b      	str	r3, [r7, #20]
 8005d82:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d001      	beq.n	8005da0 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e000      	b.n	8005da2 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8005da0:	2300      	movs	r3, #0
  }
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3720      	adds	r7, #32
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}

08005daa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005daa:	b580      	push	{r7, lr}
 8005dac:	b088      	sub	sp, #32
 8005dae:	af02      	add	r7, sp, #8
 8005db0:	60f8      	str	r0, [r7, #12]
 8005db2:	60b9      	str	r1, [r7, #8]
 8005db4:	603b      	str	r3, [r7, #0]
 8005db6:	4613      	mov	r3, r2
 8005db8:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d001      	beq.n	8005dca <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8005dc6:	2302      	movs	r3, #2
 8005dc8:	e123      	b.n	8006012 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005dd2:	d112      	bne.n	8005dfa <HAL_SPI_Receive+0x50>
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d10e      	bne.n	8005dfa <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2204      	movs	r2, #4
 8005de0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005de4:	88fa      	ldrh	r2, [r7, #6]
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	9300      	str	r3, [sp, #0]
 8005dea:	4613      	mov	r3, r2
 8005dec:	68ba      	ldr	r2, [r7, #8]
 8005dee:	68b9      	ldr	r1, [r7, #8]
 8005df0:	68f8      	ldr	r0, [r7, #12]
 8005df2:	f000 f912 	bl	800601a <HAL_SPI_TransmitReceive>
 8005df6:	4603      	mov	r3, r0
 8005df8:	e10b      	b.n	8006012 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005dfa:	f7fc f931 	bl	8002060 <HAL_GetTick>
 8005dfe:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d002      	beq.n	8005e0c <HAL_SPI_Receive+0x62>
 8005e06:	88fb      	ldrh	r3, [r7, #6]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d101      	bne.n	8005e10 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e100      	b.n	8006012 <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d101      	bne.n	8005e1e <HAL_SPI_Receive+0x74>
 8005e1a:	2302      	movs	r3, #2
 8005e1c:	e0f9      	b.n	8006012 <HAL_SPI_Receive+0x268>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2204      	movs	r2, #4
 8005e2a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2200      	movs	r2, #0
 8005e32:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	68ba      	ldr	r2, [r7, #8]
 8005e38:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	88fa      	ldrh	r2, [r7, #6]
 8005e3e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	88fa      	ldrh	r2, [r7, #6]
 8005e46:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2200      	movs	r2, #0
 8005e54:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005e70:	d908      	bls.n	8005e84 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	685a      	ldr	r2, [r3, #4]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005e80:	605a      	str	r2, [r3, #4]
 8005e82:	e007      	b.n	8005e94 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	685a      	ldr	r2, [r3, #4]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005e92:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e9c:	d10f      	bne.n	8005ebe <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005eac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005ebc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ec8:	2b40      	cmp	r3, #64	@ 0x40
 8005eca:	d007      	beq.n	8005edc <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005eda:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005ee4:	d875      	bhi.n	8005fd2 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005ee6:	e037      	b.n	8005f58 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	f003 0301 	and.w	r3, r3, #1
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d117      	bne.n	8005f26 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f103 020c 	add.w	r2, r3, #12
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f02:	7812      	ldrb	r2, [r2, #0]
 8005f04:	b2d2      	uxtb	r2, r2
 8005f06:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f0c:	1c5a      	adds	r2, r3, #1
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	b29a      	uxth	r2, r3
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005f24:	e018      	b.n	8005f58 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f26:	f7fc f89b 	bl	8002060 <HAL_GetTick>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	683a      	ldr	r2, [r7, #0]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d803      	bhi.n	8005f3e <HAL_SPI_Receive+0x194>
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f3c:	d102      	bne.n	8005f44 <HAL_SPI_Receive+0x19a>
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d109      	bne.n	8005f58 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005f54:	2303      	movs	r3, #3
 8005f56:	e05c      	b.n	8006012 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d1c1      	bne.n	8005ee8 <HAL_SPI_Receive+0x13e>
 8005f64:	e03b      	b.n	8005fde <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	f003 0301 	and.w	r3, r3, #1
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d115      	bne.n	8005fa0 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	68da      	ldr	r2, [r3, #12]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f7e:	b292      	uxth	r2, r2
 8005f80:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f86:	1c9a      	adds	r2, r3, #2
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	3b01      	subs	r3, #1
 8005f96:	b29a      	uxth	r2, r3
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005f9e:	e018      	b.n	8005fd2 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fa0:	f7fc f85e 	bl	8002060 <HAL_GetTick>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	683a      	ldr	r2, [r7, #0]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d803      	bhi.n	8005fb8 <HAL_SPI_Receive+0x20e>
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005fb6:	d102      	bne.n	8005fbe <HAL_SPI_Receive+0x214>
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d109      	bne.n	8005fd2 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	e01f      	b.n	8006012 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d1c3      	bne.n	8005f66 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005fde:	697a      	ldr	r2, [r7, #20]
 8005fe0:	6839      	ldr	r1, [r7, #0]
 8005fe2:	68f8      	ldr	r0, [r7, #12]
 8005fe4:	f000 fb56 	bl	8006694 <SPI_EndRxTransaction>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d002      	beq.n	8005ff4 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2220      	movs	r2, #32
 8005ff2:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006008:	2b00      	cmp	r3, #0
 800600a:	d001      	beq.n	8006010 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e000      	b.n	8006012 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8006010:	2300      	movs	r3, #0
  }
}
 8006012:	4618      	mov	r0, r3
 8006014:	3718      	adds	r7, #24
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800601a:	b580      	push	{r7, lr}
 800601c:	b08a      	sub	sp, #40	@ 0x28
 800601e:	af00      	add	r7, sp, #0
 8006020:	60f8      	str	r0, [r7, #12]
 8006022:	60b9      	str	r1, [r7, #8]
 8006024:	607a      	str	r2, [r7, #4]
 8006026:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006028:	2301      	movs	r3, #1
 800602a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800602c:	f7fc f818 	bl	8002060 <HAL_GetTick>
 8006030:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006038:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006040:	887b      	ldrh	r3, [r7, #2]
 8006042:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8006044:	887b      	ldrh	r3, [r7, #2]
 8006046:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006048:	7ffb      	ldrb	r3, [r7, #31]
 800604a:	2b01      	cmp	r3, #1
 800604c:	d00c      	beq.n	8006068 <HAL_SPI_TransmitReceive+0x4e>
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006054:	d106      	bne.n	8006064 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d102      	bne.n	8006064 <HAL_SPI_TransmitReceive+0x4a>
 800605e:	7ffb      	ldrb	r3, [r7, #31]
 8006060:	2b04      	cmp	r3, #4
 8006062:	d001      	beq.n	8006068 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006064:	2302      	movs	r3, #2
 8006066:	e1f3      	b.n	8006450 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d005      	beq.n	800607a <HAL_SPI_TransmitReceive+0x60>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d002      	beq.n	800607a <HAL_SPI_TransmitReceive+0x60>
 8006074:	887b      	ldrh	r3, [r7, #2]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d101      	bne.n	800607e <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e1e8      	b.n	8006450 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006084:	2b01      	cmp	r3, #1
 8006086:	d101      	bne.n	800608c <HAL_SPI_TransmitReceive+0x72>
 8006088:	2302      	movs	r3, #2
 800608a:	e1e1      	b.n	8006450 <HAL_SPI_TransmitReceive+0x436>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800609a:	b2db      	uxtb	r3, r3
 800609c:	2b04      	cmp	r3, #4
 800609e:	d003      	beq.n	80060a8 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2205      	movs	r2, #5
 80060a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2200      	movs	r2, #0
 80060ac:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	887a      	ldrh	r2, [r7, #2]
 80060b8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	887a      	ldrh	r2, [r7, #2]
 80060c0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	68ba      	ldr	r2, [r7, #8]
 80060c8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	887a      	ldrh	r2, [r7, #2]
 80060ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	887a      	ldrh	r2, [r7, #2]
 80060d4:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2200      	movs	r2, #0
 80060e0:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80060ea:	d802      	bhi.n	80060f2 <HAL_SPI_TransmitReceive+0xd8>
 80060ec:	8abb      	ldrh	r3, [r7, #20]
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d908      	bls.n	8006104 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	685a      	ldr	r2, [r3, #4]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006100:	605a      	str	r2, [r3, #4]
 8006102:	e007      	b.n	8006114 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	685a      	ldr	r2, [r3, #4]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006112:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800611e:	2b40      	cmp	r3, #64	@ 0x40
 8006120:	d007      	beq.n	8006132 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006130:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800613a:	f240 8083 	bls.w	8006244 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d002      	beq.n	800614c <HAL_SPI_TransmitReceive+0x132>
 8006146:	8afb      	ldrh	r3, [r7, #22]
 8006148:	2b01      	cmp	r3, #1
 800614a:	d16f      	bne.n	800622c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006150:	881a      	ldrh	r2, [r3, #0]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800615c:	1c9a      	adds	r2, r3, #2
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006166:	b29b      	uxth	r3, r3
 8006168:	3b01      	subs	r3, #1
 800616a:	b29a      	uxth	r2, r3
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006170:	e05c      	b.n	800622c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	f003 0302 	and.w	r3, r3, #2
 800617c:	2b02      	cmp	r3, #2
 800617e:	d11b      	bne.n	80061b8 <HAL_SPI_TransmitReceive+0x19e>
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006184:	b29b      	uxth	r3, r3
 8006186:	2b00      	cmp	r3, #0
 8006188:	d016      	beq.n	80061b8 <HAL_SPI_TransmitReceive+0x19e>
 800618a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800618c:	2b01      	cmp	r3, #1
 800618e:	d113      	bne.n	80061b8 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006194:	881a      	ldrh	r2, [r3, #0]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061a0:	1c9a      	adds	r2, r3, #2
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	3b01      	subs	r3, #1
 80061ae:	b29a      	uxth	r2, r3
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80061b4:	2300      	movs	r3, #0
 80061b6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	f003 0301 	and.w	r3, r3, #1
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d11c      	bne.n	8006200 <HAL_SPI_TransmitReceive+0x1e6>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d016      	beq.n	8006200 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68da      	ldr	r2, [r3, #12]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061dc:	b292      	uxth	r2, r2
 80061de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061e4:	1c9a      	adds	r2, r3, #2
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	3b01      	subs	r3, #1
 80061f4:	b29a      	uxth	r2, r3
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80061fc:	2301      	movs	r3, #1
 80061fe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006200:	f7fb ff2e 	bl	8002060 <HAL_GetTick>
 8006204:	4602      	mov	r2, r0
 8006206:	6a3b      	ldr	r3, [r7, #32]
 8006208:	1ad3      	subs	r3, r2, r3
 800620a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800620c:	429a      	cmp	r2, r3
 800620e:	d80d      	bhi.n	800622c <HAL_SPI_TransmitReceive+0x212>
 8006210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006212:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006216:	d009      	beq.n	800622c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006228:	2303      	movs	r3, #3
 800622a:	e111      	b.n	8006450 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006230:	b29b      	uxth	r3, r3
 8006232:	2b00      	cmp	r3, #0
 8006234:	d19d      	bne.n	8006172 <HAL_SPI_TransmitReceive+0x158>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800623c:	b29b      	uxth	r3, r3
 800623e:	2b00      	cmp	r3, #0
 8006240:	d197      	bne.n	8006172 <HAL_SPI_TransmitReceive+0x158>
 8006242:	e0e5      	b.n	8006410 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d003      	beq.n	8006254 <HAL_SPI_TransmitReceive+0x23a>
 800624c:	8afb      	ldrh	r3, [r7, #22]
 800624e:	2b01      	cmp	r3, #1
 8006250:	f040 80d1 	bne.w	80063f6 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006258:	b29b      	uxth	r3, r3
 800625a:	2b01      	cmp	r3, #1
 800625c:	d912      	bls.n	8006284 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006262:	881a      	ldrh	r2, [r3, #0]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800626e:	1c9a      	adds	r2, r3, #2
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006278:	b29b      	uxth	r3, r3
 800627a:	3b02      	subs	r3, #2
 800627c:	b29a      	uxth	r2, r3
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006282:	e0b8      	b.n	80063f6 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	330c      	adds	r3, #12
 800628e:	7812      	ldrb	r2, [r2, #0]
 8006290:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006296:	1c5a      	adds	r2, r3, #1
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	3b01      	subs	r3, #1
 80062a4:	b29a      	uxth	r2, r3
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062aa:	e0a4      	b.n	80063f6 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	f003 0302 	and.w	r3, r3, #2
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d134      	bne.n	8006324 <HAL_SPI_TransmitReceive+0x30a>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062be:	b29b      	uxth	r3, r3
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d02f      	beq.n	8006324 <HAL_SPI_TransmitReceive+0x30a>
 80062c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d12c      	bne.n	8006324 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d912      	bls.n	80062fa <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062d8:	881a      	ldrh	r2, [r3, #0]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062e4:	1c9a      	adds	r2, r3, #2
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	3b02      	subs	r3, #2
 80062f2:	b29a      	uxth	r2, r3
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80062f8:	e012      	b.n	8006320 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	330c      	adds	r3, #12
 8006304:	7812      	ldrb	r2, [r2, #0]
 8006306:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800630c:	1c5a      	adds	r2, r3, #1
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006316:	b29b      	uxth	r3, r3
 8006318:	3b01      	subs	r3, #1
 800631a:	b29a      	uxth	r2, r3
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006320:	2300      	movs	r3, #0
 8006322:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	f003 0301 	and.w	r3, r3, #1
 800632e:	2b01      	cmp	r3, #1
 8006330:	d148      	bne.n	80063c4 <HAL_SPI_TransmitReceive+0x3aa>
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006338:	b29b      	uxth	r3, r3
 800633a:	2b00      	cmp	r3, #0
 800633c:	d042      	beq.n	80063c4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006344:	b29b      	uxth	r3, r3
 8006346:	2b01      	cmp	r3, #1
 8006348:	d923      	bls.n	8006392 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	68da      	ldr	r2, [r3, #12]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006354:	b292      	uxth	r2, r2
 8006356:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800635c:	1c9a      	adds	r2, r3, #2
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006368:	b29b      	uxth	r3, r3
 800636a:	3b02      	subs	r3, #2
 800636c:	b29a      	uxth	r2, r3
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800637a:	b29b      	uxth	r3, r3
 800637c:	2b01      	cmp	r3, #1
 800637e:	d81f      	bhi.n	80063c0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	685a      	ldr	r2, [r3, #4]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800638e:	605a      	str	r2, [r3, #4]
 8006390:	e016      	b.n	80063c0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f103 020c 	add.w	r2, r3, #12
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800639e:	7812      	ldrb	r2, [r2, #0]
 80063a0:	b2d2      	uxtb	r2, r2
 80063a2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063a8:	1c5a      	adds	r2, r3, #1
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	3b01      	subs	r3, #1
 80063b8:	b29a      	uxth	r2, r3
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80063c0:	2301      	movs	r3, #1
 80063c2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80063c4:	f7fb fe4c 	bl	8002060 <HAL_GetTick>
 80063c8:	4602      	mov	r2, r0
 80063ca:	6a3b      	ldr	r3, [r7, #32]
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d803      	bhi.n	80063dc <HAL_SPI_TransmitReceive+0x3c2>
 80063d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80063da:	d102      	bne.n	80063e2 <HAL_SPI_TransmitReceive+0x3c8>
 80063dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d109      	bne.n	80063f6 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2201      	movs	r2, #1
 80063e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80063f2:	2303      	movs	r3, #3
 80063f4:	e02c      	b.n	8006450 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	f47f af55 	bne.w	80062ac <HAL_SPI_TransmitReceive+0x292>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006408:	b29b      	uxth	r3, r3
 800640a:	2b00      	cmp	r3, #0
 800640c:	f47f af4e 	bne.w	80062ac <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006410:	6a3a      	ldr	r2, [r7, #32]
 8006412:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006414:	68f8      	ldr	r0, [r7, #12]
 8006416:	f000 f995 	bl	8006744 <SPI_EndRxTxTransaction>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d008      	beq.n	8006432 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2220      	movs	r2, #32
 8006424:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2200      	movs	r2, #0
 800642a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e00e      	b.n	8006450 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2201      	movs	r2, #1
 8006436:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2200      	movs	r2, #0
 800643e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006446:	2b00      	cmp	r3, #0
 8006448:	d001      	beq.n	800644e <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e000      	b.n	8006450 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800644e:	2300      	movs	r3, #0
  }
}
 8006450:	4618      	mov	r0, r3
 8006452:	3728      	adds	r7, #40	@ 0x28
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b088      	sub	sp, #32
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	603b      	str	r3, [r7, #0]
 8006464:	4613      	mov	r3, r2
 8006466:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006468:	f7fb fdfa 	bl	8002060 <HAL_GetTick>
 800646c:	4602      	mov	r2, r0
 800646e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006470:	1a9b      	subs	r3, r3, r2
 8006472:	683a      	ldr	r2, [r7, #0]
 8006474:	4413      	add	r3, r2
 8006476:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006478:	f7fb fdf2 	bl	8002060 <HAL_GetTick>
 800647c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800647e:	4b39      	ldr	r3, [pc, #228]	@ (8006564 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	015b      	lsls	r3, r3, #5
 8006484:	0d1b      	lsrs	r3, r3, #20
 8006486:	69fa      	ldr	r2, [r7, #28]
 8006488:	fb02 f303 	mul.w	r3, r2, r3
 800648c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800648e:	e054      	b.n	800653a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006496:	d050      	beq.n	800653a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006498:	f7fb fde2 	bl	8002060 <HAL_GetTick>
 800649c:	4602      	mov	r2, r0
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	1ad3      	subs	r3, r2, r3
 80064a2:	69fa      	ldr	r2, [r7, #28]
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d902      	bls.n	80064ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d13d      	bne.n	800652a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	685a      	ldr	r2, [r3, #4]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80064bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80064c6:	d111      	bne.n	80064ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064d0:	d004      	beq.n	80064dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064da:	d107      	bne.n	80064ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80064ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064f4:	d10f      	bne.n	8006516 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006504:	601a      	str	r2, [r3, #0]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006514:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2201      	movs	r2, #1
 800651a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006526:	2303      	movs	r3, #3
 8006528:	e017      	b.n	800655a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d101      	bne.n	8006534 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006530:	2300      	movs	r3, #0
 8006532:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	3b01      	subs	r3, #1
 8006538:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	689a      	ldr	r2, [r3, #8]
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	4013      	ands	r3, r2
 8006544:	68ba      	ldr	r2, [r7, #8]
 8006546:	429a      	cmp	r2, r3
 8006548:	bf0c      	ite	eq
 800654a:	2301      	moveq	r3, #1
 800654c:	2300      	movne	r3, #0
 800654e:	b2db      	uxtb	r3, r3
 8006550:	461a      	mov	r2, r3
 8006552:	79fb      	ldrb	r3, [r7, #7]
 8006554:	429a      	cmp	r2, r3
 8006556:	d19b      	bne.n	8006490 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006558:	2300      	movs	r3, #0
}
 800655a:	4618      	mov	r0, r3
 800655c:	3720      	adds	r7, #32
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop
 8006564:	20000004 	.word	0x20000004

08006568 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b08a      	sub	sp, #40	@ 0x28
 800656c:	af00      	add	r7, sp, #0
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	60b9      	str	r1, [r7, #8]
 8006572:	607a      	str	r2, [r7, #4]
 8006574:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006576:	2300      	movs	r3, #0
 8006578:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800657a:	f7fb fd71 	bl	8002060 <HAL_GetTick>
 800657e:	4602      	mov	r2, r0
 8006580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006582:	1a9b      	subs	r3, r3, r2
 8006584:	683a      	ldr	r2, [r7, #0]
 8006586:	4413      	add	r3, r2
 8006588:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800658a:	f7fb fd69 	bl	8002060 <HAL_GetTick>
 800658e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	330c      	adds	r3, #12
 8006596:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006598:	4b3d      	ldr	r3, [pc, #244]	@ (8006690 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	4613      	mov	r3, r2
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	4413      	add	r3, r2
 80065a2:	00da      	lsls	r2, r3, #3
 80065a4:	1ad3      	subs	r3, r2, r3
 80065a6:	0d1b      	lsrs	r3, r3, #20
 80065a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065aa:	fb02 f303 	mul.w	r3, r2, r3
 80065ae:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80065b0:	e060      	b.n	8006674 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80065b8:	d107      	bne.n	80065ca <SPI_WaitFifoStateUntilTimeout+0x62>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d104      	bne.n	80065ca <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80065c8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80065d0:	d050      	beq.n	8006674 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80065d2:	f7fb fd45 	bl	8002060 <HAL_GetTick>
 80065d6:	4602      	mov	r2, r0
 80065d8:	6a3b      	ldr	r3, [r7, #32]
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065de:	429a      	cmp	r2, r3
 80065e0:	d902      	bls.n	80065e8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80065e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d13d      	bne.n	8006664 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	685a      	ldr	r2, [r3, #4]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80065f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006600:	d111      	bne.n	8006626 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800660a:	d004      	beq.n	8006616 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006614:	d107      	bne.n	8006626 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006624:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800662a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800662e:	d10f      	bne.n	8006650 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800663e:	601a      	str	r2, [r3, #0]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800664e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2200      	movs	r2, #0
 800665c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006660:	2303      	movs	r3, #3
 8006662:	e010      	b.n	8006686 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006664:	69bb      	ldr	r3, [r7, #24]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d101      	bne.n	800666e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800666a:	2300      	movs	r3, #0
 800666c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	3b01      	subs	r3, #1
 8006672:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	689a      	ldr	r2, [r3, #8]
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	4013      	ands	r3, r2
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	429a      	cmp	r2, r3
 8006682:	d196      	bne.n	80065b2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3728      	adds	r7, #40	@ 0x28
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	20000004 	.word	0x20000004

08006694 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b086      	sub	sp, #24
 8006698:	af02      	add	r7, sp, #8
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80066a8:	d111      	bne.n	80066ce <SPI_EndRxTransaction+0x3a>
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066b2:	d004      	beq.n	80066be <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066bc:	d107      	bne.n	80066ce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80066cc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	9300      	str	r3, [sp, #0]
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	2200      	movs	r2, #0
 80066d6:	2180      	movs	r1, #128	@ 0x80
 80066d8:	68f8      	ldr	r0, [r7, #12]
 80066da:	f7ff febd 	bl	8006458 <SPI_WaitFlagStateUntilTimeout>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d007      	beq.n	80066f4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066e8:	f043 0220 	orr.w	r2, r3, #32
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80066f0:	2303      	movs	r3, #3
 80066f2:	e023      	b.n	800673c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80066fc:	d11d      	bne.n	800673a <SPI_EndRxTransaction+0xa6>
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006706:	d004      	beq.n	8006712 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006710:	d113      	bne.n	800673a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	9300      	str	r3, [sp, #0]
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	2200      	movs	r2, #0
 800671a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800671e:	68f8      	ldr	r0, [r7, #12]
 8006720:	f7ff ff22 	bl	8006568 <SPI_WaitFifoStateUntilTimeout>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d007      	beq.n	800673a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800672e:	f043 0220 	orr.w	r2, r3, #32
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8006736:	2303      	movs	r3, #3
 8006738:	e000      	b.n	800673c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800673a:	2300      	movs	r3, #0
}
 800673c:	4618      	mov	r0, r3
 800673e:	3710      	adds	r7, #16
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b086      	sub	sp, #24
 8006748:	af02      	add	r7, sp, #8
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	9300      	str	r3, [sp, #0]
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	2200      	movs	r2, #0
 8006758:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	f7ff ff03 	bl	8006568 <SPI_WaitFifoStateUntilTimeout>
 8006762:	4603      	mov	r3, r0
 8006764:	2b00      	cmp	r3, #0
 8006766:	d007      	beq.n	8006778 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800676c:	f043 0220 	orr.w	r2, r3, #32
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006774:	2303      	movs	r3, #3
 8006776:	e027      	b.n	80067c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	9300      	str	r3, [sp, #0]
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	2200      	movs	r2, #0
 8006780:	2180      	movs	r1, #128	@ 0x80
 8006782:	68f8      	ldr	r0, [r7, #12]
 8006784:	f7ff fe68 	bl	8006458 <SPI_WaitFlagStateUntilTimeout>
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d007      	beq.n	800679e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006792:	f043 0220 	orr.w	r2, r3, #32
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800679a:	2303      	movs	r3, #3
 800679c:	e014      	b.n	80067c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	9300      	str	r3, [sp, #0]
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80067aa:	68f8      	ldr	r0, [r7, #12]
 80067ac:	f7ff fedc 	bl	8006568 <SPI_WaitFifoStateUntilTimeout>
 80067b0:	4603      	mov	r3, r0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d007      	beq.n	80067c6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067ba:	f043 0220 	orr.w	r2, r3, #32
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80067c2:	2303      	movs	r3, #3
 80067c4:	e000      	b.n	80067c8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80067c6:	2300      	movs	r3, #0
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3710      	adds	r7, #16
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d101      	bne.n	80067e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e049      	b.n	8006876 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d106      	bne.n	80067fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f7fb fa12 	bl	8001c20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2202      	movs	r2, #2
 8006800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	3304      	adds	r3, #4
 800680c:	4619      	mov	r1, r3
 800680e:	4610      	mov	r0, r2
 8006810:	f000 fa50 	bl	8006cb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	3708      	adds	r7, #8
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
	...

08006880 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d109      	bne.n	80068a4 <HAL_TIM_PWM_Start+0x24>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006896:	b2db      	uxtb	r3, r3
 8006898:	2b01      	cmp	r3, #1
 800689a:	bf14      	ite	ne
 800689c:	2301      	movne	r3, #1
 800689e:	2300      	moveq	r3, #0
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	e03c      	b.n	800691e <HAL_TIM_PWM_Start+0x9e>
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	2b04      	cmp	r3, #4
 80068a8:	d109      	bne.n	80068be <HAL_TIM_PWM_Start+0x3e>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	bf14      	ite	ne
 80068b6:	2301      	movne	r3, #1
 80068b8:	2300      	moveq	r3, #0
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	e02f      	b.n	800691e <HAL_TIM_PWM_Start+0x9e>
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	2b08      	cmp	r3, #8
 80068c2:	d109      	bne.n	80068d8 <HAL_TIM_PWM_Start+0x58>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	bf14      	ite	ne
 80068d0:	2301      	movne	r3, #1
 80068d2:	2300      	moveq	r3, #0
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	e022      	b.n	800691e <HAL_TIM_PWM_Start+0x9e>
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	2b0c      	cmp	r3, #12
 80068dc:	d109      	bne.n	80068f2 <HAL_TIM_PWM_Start+0x72>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	bf14      	ite	ne
 80068ea:	2301      	movne	r3, #1
 80068ec:	2300      	moveq	r3, #0
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	e015      	b.n	800691e <HAL_TIM_PWM_Start+0x9e>
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	2b10      	cmp	r3, #16
 80068f6:	d109      	bne.n	800690c <HAL_TIM_PWM_Start+0x8c>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	2b01      	cmp	r3, #1
 8006902:	bf14      	ite	ne
 8006904:	2301      	movne	r3, #1
 8006906:	2300      	moveq	r3, #0
 8006908:	b2db      	uxtb	r3, r3
 800690a:	e008      	b.n	800691e <HAL_TIM_PWM_Start+0x9e>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006912:	b2db      	uxtb	r3, r3
 8006914:	2b01      	cmp	r3, #1
 8006916:	bf14      	ite	ne
 8006918:	2301      	movne	r3, #1
 800691a:	2300      	moveq	r3, #0
 800691c:	b2db      	uxtb	r3, r3
 800691e:	2b00      	cmp	r3, #0
 8006920:	d001      	beq.n	8006926 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e09c      	b.n	8006a60 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d104      	bne.n	8006936 <HAL_TIM_PWM_Start+0xb6>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2202      	movs	r2, #2
 8006930:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006934:	e023      	b.n	800697e <HAL_TIM_PWM_Start+0xfe>
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	2b04      	cmp	r3, #4
 800693a:	d104      	bne.n	8006946 <HAL_TIM_PWM_Start+0xc6>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2202      	movs	r2, #2
 8006940:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006944:	e01b      	b.n	800697e <HAL_TIM_PWM_Start+0xfe>
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	2b08      	cmp	r3, #8
 800694a:	d104      	bne.n	8006956 <HAL_TIM_PWM_Start+0xd6>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2202      	movs	r2, #2
 8006950:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006954:	e013      	b.n	800697e <HAL_TIM_PWM_Start+0xfe>
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	2b0c      	cmp	r3, #12
 800695a:	d104      	bne.n	8006966 <HAL_TIM_PWM_Start+0xe6>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2202      	movs	r2, #2
 8006960:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006964:	e00b      	b.n	800697e <HAL_TIM_PWM_Start+0xfe>
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	2b10      	cmp	r3, #16
 800696a:	d104      	bne.n	8006976 <HAL_TIM_PWM_Start+0xf6>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2202      	movs	r2, #2
 8006970:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006974:	e003      	b.n	800697e <HAL_TIM_PWM_Start+0xfe>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2202      	movs	r2, #2
 800697a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2201      	movs	r2, #1
 8006984:	6839      	ldr	r1, [r7, #0]
 8006986:	4618      	mov	r0, r3
 8006988:	f000 fd10 	bl	80073ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a35      	ldr	r2, [pc, #212]	@ (8006a68 <HAL_TIM_PWM_Start+0x1e8>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d013      	beq.n	80069be <HAL_TIM_PWM_Start+0x13e>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a34      	ldr	r2, [pc, #208]	@ (8006a6c <HAL_TIM_PWM_Start+0x1ec>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d00e      	beq.n	80069be <HAL_TIM_PWM_Start+0x13e>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a32      	ldr	r2, [pc, #200]	@ (8006a70 <HAL_TIM_PWM_Start+0x1f0>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d009      	beq.n	80069be <HAL_TIM_PWM_Start+0x13e>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a31      	ldr	r2, [pc, #196]	@ (8006a74 <HAL_TIM_PWM_Start+0x1f4>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d004      	beq.n	80069be <HAL_TIM_PWM_Start+0x13e>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a2f      	ldr	r2, [pc, #188]	@ (8006a78 <HAL_TIM_PWM_Start+0x1f8>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d101      	bne.n	80069c2 <HAL_TIM_PWM_Start+0x142>
 80069be:	2301      	movs	r3, #1
 80069c0:	e000      	b.n	80069c4 <HAL_TIM_PWM_Start+0x144>
 80069c2:	2300      	movs	r3, #0
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d007      	beq.n	80069d8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80069d6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a22      	ldr	r2, [pc, #136]	@ (8006a68 <HAL_TIM_PWM_Start+0x1e8>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d01d      	beq.n	8006a1e <HAL_TIM_PWM_Start+0x19e>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069ea:	d018      	beq.n	8006a1e <HAL_TIM_PWM_Start+0x19e>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a22      	ldr	r2, [pc, #136]	@ (8006a7c <HAL_TIM_PWM_Start+0x1fc>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d013      	beq.n	8006a1e <HAL_TIM_PWM_Start+0x19e>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a21      	ldr	r2, [pc, #132]	@ (8006a80 <HAL_TIM_PWM_Start+0x200>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d00e      	beq.n	8006a1e <HAL_TIM_PWM_Start+0x19e>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a1f      	ldr	r2, [pc, #124]	@ (8006a84 <HAL_TIM_PWM_Start+0x204>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d009      	beq.n	8006a1e <HAL_TIM_PWM_Start+0x19e>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a17      	ldr	r2, [pc, #92]	@ (8006a6c <HAL_TIM_PWM_Start+0x1ec>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d004      	beq.n	8006a1e <HAL_TIM_PWM_Start+0x19e>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a15      	ldr	r2, [pc, #84]	@ (8006a70 <HAL_TIM_PWM_Start+0x1f0>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d115      	bne.n	8006a4a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	689a      	ldr	r2, [r3, #8]
 8006a24:	4b18      	ldr	r3, [pc, #96]	@ (8006a88 <HAL_TIM_PWM_Start+0x208>)
 8006a26:	4013      	ands	r3, r2
 8006a28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2b06      	cmp	r3, #6
 8006a2e:	d015      	beq.n	8006a5c <HAL_TIM_PWM_Start+0x1dc>
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a36:	d011      	beq.n	8006a5c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f042 0201 	orr.w	r2, r2, #1
 8006a46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a48:	e008      	b.n	8006a5c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f042 0201 	orr.w	r2, r2, #1
 8006a58:	601a      	str	r2, [r3, #0]
 8006a5a:	e000      	b.n	8006a5e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a5c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a5e:	2300      	movs	r3, #0
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3710      	adds	r7, #16
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	40012c00 	.word	0x40012c00
 8006a6c:	40013400 	.word	0x40013400
 8006a70:	40014000 	.word	0x40014000
 8006a74:	40014400 	.word	0x40014400
 8006a78:	40014800 	.word	0x40014800
 8006a7c:	40000400 	.word	0x40000400
 8006a80:	40000800 	.word	0x40000800
 8006a84:	40000c00 	.word	0x40000c00
 8006a88:	00010007 	.word	0x00010007

08006a8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b086      	sub	sp, #24
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d101      	bne.n	8006aaa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006aa6:	2302      	movs	r3, #2
 8006aa8:	e0ff      	b.n	8006caa <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2201      	movs	r2, #1
 8006aae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2b14      	cmp	r3, #20
 8006ab6:	f200 80f0 	bhi.w	8006c9a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006aba:	a201      	add	r2, pc, #4	@ (adr r2, 8006ac0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac0:	08006b15 	.word	0x08006b15
 8006ac4:	08006c9b 	.word	0x08006c9b
 8006ac8:	08006c9b 	.word	0x08006c9b
 8006acc:	08006c9b 	.word	0x08006c9b
 8006ad0:	08006b55 	.word	0x08006b55
 8006ad4:	08006c9b 	.word	0x08006c9b
 8006ad8:	08006c9b 	.word	0x08006c9b
 8006adc:	08006c9b 	.word	0x08006c9b
 8006ae0:	08006b97 	.word	0x08006b97
 8006ae4:	08006c9b 	.word	0x08006c9b
 8006ae8:	08006c9b 	.word	0x08006c9b
 8006aec:	08006c9b 	.word	0x08006c9b
 8006af0:	08006bd7 	.word	0x08006bd7
 8006af4:	08006c9b 	.word	0x08006c9b
 8006af8:	08006c9b 	.word	0x08006c9b
 8006afc:	08006c9b 	.word	0x08006c9b
 8006b00:	08006c19 	.word	0x08006c19
 8006b04:	08006c9b 	.word	0x08006c9b
 8006b08:	08006c9b 	.word	0x08006c9b
 8006b0c:	08006c9b 	.word	0x08006c9b
 8006b10:	08006c59 	.word	0x08006c59
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	68b9      	ldr	r1, [r7, #8]
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f000 f970 	bl	8006e00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	699a      	ldr	r2, [r3, #24]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f042 0208 	orr.w	r2, r2, #8
 8006b2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	699a      	ldr	r2, [r3, #24]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f022 0204 	bic.w	r2, r2, #4
 8006b3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	6999      	ldr	r1, [r3, #24]
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	691a      	ldr	r2, [r3, #16]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	430a      	orrs	r2, r1
 8006b50:	619a      	str	r2, [r3, #24]
      break;
 8006b52:	e0a5      	b.n	8006ca0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	68b9      	ldr	r1, [r7, #8]
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f000 f9e0 	bl	8006f20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	699a      	ldr	r2, [r3, #24]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	699a      	ldr	r2, [r3, #24]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	6999      	ldr	r1, [r3, #24]
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	021a      	lsls	r2, r3, #8
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	430a      	orrs	r2, r1
 8006b92:	619a      	str	r2, [r3, #24]
      break;
 8006b94:	e084      	b.n	8006ca0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	68b9      	ldr	r1, [r7, #8]
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f000 fa49 	bl	8007034 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	69da      	ldr	r2, [r3, #28]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f042 0208 	orr.w	r2, r2, #8
 8006bb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	69da      	ldr	r2, [r3, #28]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f022 0204 	bic.w	r2, r2, #4
 8006bc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	69d9      	ldr	r1, [r3, #28]
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	691a      	ldr	r2, [r3, #16]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	430a      	orrs	r2, r1
 8006bd2:	61da      	str	r2, [r3, #28]
      break;
 8006bd4:	e064      	b.n	8006ca0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	68b9      	ldr	r1, [r7, #8]
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f000 fab1 	bl	8007144 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	69da      	ldr	r2, [r3, #28]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006bf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	69da      	ldr	r2, [r3, #28]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	69d9      	ldr	r1, [r3, #28]
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	021a      	lsls	r2, r3, #8
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	430a      	orrs	r2, r1
 8006c14:	61da      	str	r2, [r3, #28]
      break;
 8006c16:	e043      	b.n	8006ca0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	68b9      	ldr	r1, [r7, #8]
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f000 fafa 	bl	8007218 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f042 0208 	orr.w	r2, r2, #8
 8006c32:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f022 0204 	bic.w	r2, r2, #4
 8006c42:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	691a      	ldr	r2, [r3, #16]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	430a      	orrs	r2, r1
 8006c54:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006c56:	e023      	b.n	8006ca0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	68b9      	ldr	r1, [r7, #8]
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f000 fb3e 	bl	80072e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c72:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c82:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	691b      	ldr	r3, [r3, #16]
 8006c8e:	021a      	lsls	r2, r3, #8
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	430a      	orrs	r2, r1
 8006c96:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006c98:	e002      	b.n	8006ca0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	75fb      	strb	r3, [r7, #23]
      break;
 8006c9e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006ca8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3718      	adds	r7, #24
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop

08006cb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b085      	sub	sp, #20
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	4a46      	ldr	r2, [pc, #280]	@ (8006de0 <TIM_Base_SetConfig+0x12c>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d013      	beq.n	8006cf4 <TIM_Base_SetConfig+0x40>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cd2:	d00f      	beq.n	8006cf4 <TIM_Base_SetConfig+0x40>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	4a43      	ldr	r2, [pc, #268]	@ (8006de4 <TIM_Base_SetConfig+0x130>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d00b      	beq.n	8006cf4 <TIM_Base_SetConfig+0x40>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	4a42      	ldr	r2, [pc, #264]	@ (8006de8 <TIM_Base_SetConfig+0x134>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d007      	beq.n	8006cf4 <TIM_Base_SetConfig+0x40>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4a41      	ldr	r2, [pc, #260]	@ (8006dec <TIM_Base_SetConfig+0x138>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d003      	beq.n	8006cf4 <TIM_Base_SetConfig+0x40>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	4a40      	ldr	r2, [pc, #256]	@ (8006df0 <TIM_Base_SetConfig+0x13c>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d108      	bne.n	8006d06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	68fa      	ldr	r2, [r7, #12]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	4a35      	ldr	r2, [pc, #212]	@ (8006de0 <TIM_Base_SetConfig+0x12c>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d01f      	beq.n	8006d4e <TIM_Base_SetConfig+0x9a>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d14:	d01b      	beq.n	8006d4e <TIM_Base_SetConfig+0x9a>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	4a32      	ldr	r2, [pc, #200]	@ (8006de4 <TIM_Base_SetConfig+0x130>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d017      	beq.n	8006d4e <TIM_Base_SetConfig+0x9a>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	4a31      	ldr	r2, [pc, #196]	@ (8006de8 <TIM_Base_SetConfig+0x134>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d013      	beq.n	8006d4e <TIM_Base_SetConfig+0x9a>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	4a30      	ldr	r2, [pc, #192]	@ (8006dec <TIM_Base_SetConfig+0x138>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d00f      	beq.n	8006d4e <TIM_Base_SetConfig+0x9a>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	4a2f      	ldr	r2, [pc, #188]	@ (8006df0 <TIM_Base_SetConfig+0x13c>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d00b      	beq.n	8006d4e <TIM_Base_SetConfig+0x9a>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4a2e      	ldr	r2, [pc, #184]	@ (8006df4 <TIM_Base_SetConfig+0x140>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d007      	beq.n	8006d4e <TIM_Base_SetConfig+0x9a>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a2d      	ldr	r2, [pc, #180]	@ (8006df8 <TIM_Base_SetConfig+0x144>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d003      	beq.n	8006d4e <TIM_Base_SetConfig+0x9a>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4a2c      	ldr	r2, [pc, #176]	@ (8006dfc <TIM_Base_SetConfig+0x148>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d108      	bne.n	8006d60 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	68fa      	ldr	r2, [r7, #12]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	695b      	ldr	r3, [r3, #20]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	68fa      	ldr	r2, [r7, #12]
 8006d72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	689a      	ldr	r2, [r3, #8]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	4a16      	ldr	r2, [pc, #88]	@ (8006de0 <TIM_Base_SetConfig+0x12c>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d00f      	beq.n	8006dac <TIM_Base_SetConfig+0xf8>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4a18      	ldr	r2, [pc, #96]	@ (8006df0 <TIM_Base_SetConfig+0x13c>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d00b      	beq.n	8006dac <TIM_Base_SetConfig+0xf8>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	4a17      	ldr	r2, [pc, #92]	@ (8006df4 <TIM_Base_SetConfig+0x140>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d007      	beq.n	8006dac <TIM_Base_SetConfig+0xf8>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	4a16      	ldr	r2, [pc, #88]	@ (8006df8 <TIM_Base_SetConfig+0x144>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d003      	beq.n	8006dac <TIM_Base_SetConfig+0xf8>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	4a15      	ldr	r2, [pc, #84]	@ (8006dfc <TIM_Base_SetConfig+0x148>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d103      	bne.n	8006db4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	691a      	ldr	r2, [r3, #16]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2201      	movs	r2, #1
 8006db8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	691b      	ldr	r3, [r3, #16]
 8006dbe:	f003 0301 	and.w	r3, r3, #1
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d105      	bne.n	8006dd2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	f023 0201 	bic.w	r2, r3, #1
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	611a      	str	r2, [r3, #16]
  }
}
 8006dd2:	bf00      	nop
 8006dd4:	3714      	adds	r7, #20
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr
 8006dde:	bf00      	nop
 8006de0:	40012c00 	.word	0x40012c00
 8006de4:	40000400 	.word	0x40000400
 8006de8:	40000800 	.word	0x40000800
 8006dec:	40000c00 	.word	0x40000c00
 8006df0:	40013400 	.word	0x40013400
 8006df4:	40014000 	.word	0x40014000
 8006df8:	40014400 	.word	0x40014400
 8006dfc:	40014800 	.word	0x40014800

08006e00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b087      	sub	sp, #28
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
 8006e0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6a1b      	ldr	r3, [r3, #32]
 8006e14:	f023 0201 	bic.w	r2, r3, #1
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	699b      	ldr	r3, [r3, #24]
 8006e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f023 0303 	bic.w	r3, r3, #3
 8006e3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	68fa      	ldr	r2, [r7, #12]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	f023 0302 	bic.w	r3, r3, #2
 8006e4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	697a      	ldr	r2, [r7, #20]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a2c      	ldr	r2, [pc, #176]	@ (8006f0c <TIM_OC1_SetConfig+0x10c>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d00f      	beq.n	8006e80 <TIM_OC1_SetConfig+0x80>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a2b      	ldr	r2, [pc, #172]	@ (8006f10 <TIM_OC1_SetConfig+0x110>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d00b      	beq.n	8006e80 <TIM_OC1_SetConfig+0x80>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4a2a      	ldr	r2, [pc, #168]	@ (8006f14 <TIM_OC1_SetConfig+0x114>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d007      	beq.n	8006e80 <TIM_OC1_SetConfig+0x80>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4a29      	ldr	r2, [pc, #164]	@ (8006f18 <TIM_OC1_SetConfig+0x118>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d003      	beq.n	8006e80 <TIM_OC1_SetConfig+0x80>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4a28      	ldr	r2, [pc, #160]	@ (8006f1c <TIM_OC1_SetConfig+0x11c>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d10c      	bne.n	8006e9a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	f023 0308 	bic.w	r3, r3, #8
 8006e86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	697a      	ldr	r2, [r7, #20]
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	f023 0304 	bic.w	r3, r3, #4
 8006e98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4a1b      	ldr	r2, [pc, #108]	@ (8006f0c <TIM_OC1_SetConfig+0x10c>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d00f      	beq.n	8006ec2 <TIM_OC1_SetConfig+0xc2>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4a1a      	ldr	r2, [pc, #104]	@ (8006f10 <TIM_OC1_SetConfig+0x110>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d00b      	beq.n	8006ec2 <TIM_OC1_SetConfig+0xc2>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4a19      	ldr	r2, [pc, #100]	@ (8006f14 <TIM_OC1_SetConfig+0x114>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d007      	beq.n	8006ec2 <TIM_OC1_SetConfig+0xc2>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	4a18      	ldr	r2, [pc, #96]	@ (8006f18 <TIM_OC1_SetConfig+0x118>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d003      	beq.n	8006ec2 <TIM_OC1_SetConfig+0xc2>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a17      	ldr	r2, [pc, #92]	@ (8006f1c <TIM_OC1_SetConfig+0x11c>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d111      	bne.n	8006ee6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ec8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006ed0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	695b      	ldr	r3, [r3, #20]
 8006ed6:	693a      	ldr	r2, [r7, #16]
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	699b      	ldr	r3, [r3, #24]
 8006ee0:	693a      	ldr	r2, [r7, #16]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	693a      	ldr	r2, [r7, #16]
 8006eea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	68fa      	ldr	r2, [r7, #12]
 8006ef0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	685a      	ldr	r2, [r3, #4]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	697a      	ldr	r2, [r7, #20]
 8006efe:	621a      	str	r2, [r3, #32]
}
 8006f00:	bf00      	nop
 8006f02:	371c      	adds	r7, #28
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr
 8006f0c:	40012c00 	.word	0x40012c00
 8006f10:	40013400 	.word	0x40013400
 8006f14:	40014000 	.word	0x40014000
 8006f18:	40014400 	.word	0x40014400
 8006f1c:	40014800 	.word	0x40014800

08006f20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b087      	sub	sp, #28
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a1b      	ldr	r3, [r3, #32]
 8006f2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6a1b      	ldr	r3, [r3, #32]
 8006f34:	f023 0210 	bic.w	r2, r3, #16
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	699b      	ldr	r3, [r3, #24]
 8006f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	021b      	lsls	r3, r3, #8
 8006f62:	68fa      	ldr	r2, [r7, #12]
 8006f64:	4313      	orrs	r3, r2
 8006f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	f023 0320 	bic.w	r3, r3, #32
 8006f6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	011b      	lsls	r3, r3, #4
 8006f76:	697a      	ldr	r2, [r7, #20]
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	4a28      	ldr	r2, [pc, #160]	@ (8007020 <TIM_OC2_SetConfig+0x100>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d003      	beq.n	8006f8c <TIM_OC2_SetConfig+0x6c>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	4a27      	ldr	r2, [pc, #156]	@ (8007024 <TIM_OC2_SetConfig+0x104>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d10d      	bne.n	8006fa8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	011b      	lsls	r3, r3, #4
 8006f9a:	697a      	ldr	r2, [r7, #20]
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fa6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4a1d      	ldr	r2, [pc, #116]	@ (8007020 <TIM_OC2_SetConfig+0x100>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d00f      	beq.n	8006fd0 <TIM_OC2_SetConfig+0xb0>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4a1c      	ldr	r2, [pc, #112]	@ (8007024 <TIM_OC2_SetConfig+0x104>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d00b      	beq.n	8006fd0 <TIM_OC2_SetConfig+0xb0>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	4a1b      	ldr	r2, [pc, #108]	@ (8007028 <TIM_OC2_SetConfig+0x108>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d007      	beq.n	8006fd0 <TIM_OC2_SetConfig+0xb0>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4a1a      	ldr	r2, [pc, #104]	@ (800702c <TIM_OC2_SetConfig+0x10c>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d003      	beq.n	8006fd0 <TIM_OC2_SetConfig+0xb0>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4a19      	ldr	r2, [pc, #100]	@ (8007030 <TIM_OC2_SetConfig+0x110>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d113      	bne.n	8006ff8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006fd6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006fde:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	695b      	ldr	r3, [r3, #20]
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	693a      	ldr	r2, [r7, #16]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	699b      	ldr	r3, [r3, #24]
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	693a      	ldr	r2, [r7, #16]
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	693a      	ldr	r2, [r7, #16]
 8006ffc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	68fa      	ldr	r2, [r7, #12]
 8007002:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	685a      	ldr	r2, [r3, #4]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	697a      	ldr	r2, [r7, #20]
 8007010:	621a      	str	r2, [r3, #32]
}
 8007012:	bf00      	nop
 8007014:	371c      	adds	r7, #28
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr
 800701e:	bf00      	nop
 8007020:	40012c00 	.word	0x40012c00
 8007024:	40013400 	.word	0x40013400
 8007028:	40014000 	.word	0x40014000
 800702c:	40014400 	.word	0x40014400
 8007030:	40014800 	.word	0x40014800

08007034 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007034:	b480      	push	{r7}
 8007036:	b087      	sub	sp, #28
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a1b      	ldr	r3, [r3, #32]
 8007042:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6a1b      	ldr	r3, [r3, #32]
 8007048:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	69db      	ldr	r3, [r3, #28]
 800705a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007062:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007066:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f023 0303 	bic.w	r3, r3, #3
 800706e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	4313      	orrs	r3, r2
 8007078:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007080:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	021b      	lsls	r3, r3, #8
 8007088:	697a      	ldr	r2, [r7, #20]
 800708a:	4313      	orrs	r3, r2
 800708c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4a27      	ldr	r2, [pc, #156]	@ (8007130 <TIM_OC3_SetConfig+0xfc>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d003      	beq.n	800709e <TIM_OC3_SetConfig+0x6a>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a26      	ldr	r2, [pc, #152]	@ (8007134 <TIM_OC3_SetConfig+0x100>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d10d      	bne.n	80070ba <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80070a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	68db      	ldr	r3, [r3, #12]
 80070aa:	021b      	lsls	r3, r3, #8
 80070ac:	697a      	ldr	r2, [r7, #20]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80070b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4a1c      	ldr	r2, [pc, #112]	@ (8007130 <TIM_OC3_SetConfig+0xfc>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d00f      	beq.n	80070e2 <TIM_OC3_SetConfig+0xae>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	4a1b      	ldr	r2, [pc, #108]	@ (8007134 <TIM_OC3_SetConfig+0x100>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d00b      	beq.n	80070e2 <TIM_OC3_SetConfig+0xae>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4a1a      	ldr	r2, [pc, #104]	@ (8007138 <TIM_OC3_SetConfig+0x104>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d007      	beq.n	80070e2 <TIM_OC3_SetConfig+0xae>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4a19      	ldr	r2, [pc, #100]	@ (800713c <TIM_OC3_SetConfig+0x108>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d003      	beq.n	80070e2 <TIM_OC3_SetConfig+0xae>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4a18      	ldr	r2, [pc, #96]	@ (8007140 <TIM_OC3_SetConfig+0x10c>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d113      	bne.n	800710a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80070e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80070f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	695b      	ldr	r3, [r3, #20]
 80070f6:	011b      	lsls	r3, r3, #4
 80070f8:	693a      	ldr	r2, [r7, #16]
 80070fa:	4313      	orrs	r3, r2
 80070fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	699b      	ldr	r3, [r3, #24]
 8007102:	011b      	lsls	r3, r3, #4
 8007104:	693a      	ldr	r2, [r7, #16]
 8007106:	4313      	orrs	r3, r2
 8007108:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	693a      	ldr	r2, [r7, #16]
 800710e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	685a      	ldr	r2, [r3, #4]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	697a      	ldr	r2, [r7, #20]
 8007122:	621a      	str	r2, [r3, #32]
}
 8007124:	bf00      	nop
 8007126:	371c      	adds	r7, #28
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr
 8007130:	40012c00 	.word	0x40012c00
 8007134:	40013400 	.word	0x40013400
 8007138:	40014000 	.word	0x40014000
 800713c:	40014400 	.word	0x40014400
 8007140:	40014800 	.word	0x40014800

08007144 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007144:	b480      	push	{r7}
 8007146:	b087      	sub	sp, #28
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a1b      	ldr	r3, [r3, #32]
 8007152:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6a1b      	ldr	r3, [r3, #32]
 8007158:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	69db      	ldr	r3, [r3, #28]
 800716a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007172:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800717e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	021b      	lsls	r3, r3, #8
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	4313      	orrs	r3, r2
 800718a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007192:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	031b      	lsls	r3, r3, #12
 800719a:	693a      	ldr	r2, [r7, #16]
 800719c:	4313      	orrs	r3, r2
 800719e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	4a18      	ldr	r2, [pc, #96]	@ (8007204 <TIM_OC4_SetConfig+0xc0>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d00f      	beq.n	80071c8 <TIM_OC4_SetConfig+0x84>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4a17      	ldr	r2, [pc, #92]	@ (8007208 <TIM_OC4_SetConfig+0xc4>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d00b      	beq.n	80071c8 <TIM_OC4_SetConfig+0x84>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4a16      	ldr	r2, [pc, #88]	@ (800720c <TIM_OC4_SetConfig+0xc8>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d007      	beq.n	80071c8 <TIM_OC4_SetConfig+0x84>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4a15      	ldr	r2, [pc, #84]	@ (8007210 <TIM_OC4_SetConfig+0xcc>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d003      	beq.n	80071c8 <TIM_OC4_SetConfig+0x84>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	4a14      	ldr	r2, [pc, #80]	@ (8007214 <TIM_OC4_SetConfig+0xd0>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d109      	bne.n	80071dc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80071ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	695b      	ldr	r3, [r3, #20]
 80071d4:	019b      	lsls	r3, r3, #6
 80071d6:	697a      	ldr	r2, [r7, #20]
 80071d8:	4313      	orrs	r3, r2
 80071da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	697a      	ldr	r2, [r7, #20]
 80071e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	68fa      	ldr	r2, [r7, #12]
 80071e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	685a      	ldr	r2, [r3, #4]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	693a      	ldr	r2, [r7, #16]
 80071f4:	621a      	str	r2, [r3, #32]
}
 80071f6:	bf00      	nop
 80071f8:	371c      	adds	r7, #28
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr
 8007202:	bf00      	nop
 8007204:	40012c00 	.word	0x40012c00
 8007208:	40013400 	.word	0x40013400
 800720c:	40014000 	.word	0x40014000
 8007210:	40014400 	.word	0x40014400
 8007214:	40014800 	.word	0x40014800

08007218 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007218:	b480      	push	{r7}
 800721a:	b087      	sub	sp, #28
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a1b      	ldr	r3, [r3, #32]
 8007226:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6a1b      	ldr	r3, [r3, #32]
 800722c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800723e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007246:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800724a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	68fa      	ldr	r2, [r7, #12]
 8007252:	4313      	orrs	r3, r2
 8007254:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800725c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	041b      	lsls	r3, r3, #16
 8007264:	693a      	ldr	r2, [r7, #16]
 8007266:	4313      	orrs	r3, r2
 8007268:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4a17      	ldr	r2, [pc, #92]	@ (80072cc <TIM_OC5_SetConfig+0xb4>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d00f      	beq.n	8007292 <TIM_OC5_SetConfig+0x7a>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	4a16      	ldr	r2, [pc, #88]	@ (80072d0 <TIM_OC5_SetConfig+0xb8>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d00b      	beq.n	8007292 <TIM_OC5_SetConfig+0x7a>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4a15      	ldr	r2, [pc, #84]	@ (80072d4 <TIM_OC5_SetConfig+0xbc>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d007      	beq.n	8007292 <TIM_OC5_SetConfig+0x7a>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	4a14      	ldr	r2, [pc, #80]	@ (80072d8 <TIM_OC5_SetConfig+0xc0>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d003      	beq.n	8007292 <TIM_OC5_SetConfig+0x7a>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	4a13      	ldr	r2, [pc, #76]	@ (80072dc <TIM_OC5_SetConfig+0xc4>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d109      	bne.n	80072a6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007298:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	695b      	ldr	r3, [r3, #20]
 800729e:	021b      	lsls	r3, r3, #8
 80072a0:	697a      	ldr	r2, [r7, #20]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	697a      	ldr	r2, [r7, #20]
 80072aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	685a      	ldr	r2, [r3, #4]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	693a      	ldr	r2, [r7, #16]
 80072be:	621a      	str	r2, [r3, #32]
}
 80072c0:	bf00      	nop
 80072c2:	371c      	adds	r7, #28
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr
 80072cc:	40012c00 	.word	0x40012c00
 80072d0:	40013400 	.word	0x40013400
 80072d4:	40014000 	.word	0x40014000
 80072d8:	40014400 	.word	0x40014400
 80072dc:	40014800 	.word	0x40014800

080072e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b087      	sub	sp, #28
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a1b      	ldr	r3, [r3, #32]
 80072ee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6a1b      	ldr	r3, [r3, #32]
 80072f4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800730e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007312:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	021b      	lsls	r3, r3, #8
 800731a:	68fa      	ldr	r2, [r7, #12]
 800731c:	4313      	orrs	r3, r2
 800731e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007326:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	051b      	lsls	r3, r3, #20
 800732e:	693a      	ldr	r2, [r7, #16]
 8007330:	4313      	orrs	r3, r2
 8007332:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	4a18      	ldr	r2, [pc, #96]	@ (8007398 <TIM_OC6_SetConfig+0xb8>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d00f      	beq.n	800735c <TIM_OC6_SetConfig+0x7c>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	4a17      	ldr	r2, [pc, #92]	@ (800739c <TIM_OC6_SetConfig+0xbc>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d00b      	beq.n	800735c <TIM_OC6_SetConfig+0x7c>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	4a16      	ldr	r2, [pc, #88]	@ (80073a0 <TIM_OC6_SetConfig+0xc0>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d007      	beq.n	800735c <TIM_OC6_SetConfig+0x7c>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	4a15      	ldr	r2, [pc, #84]	@ (80073a4 <TIM_OC6_SetConfig+0xc4>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d003      	beq.n	800735c <TIM_OC6_SetConfig+0x7c>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	4a14      	ldr	r2, [pc, #80]	@ (80073a8 <TIM_OC6_SetConfig+0xc8>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d109      	bne.n	8007370 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007362:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	695b      	ldr	r3, [r3, #20]
 8007368:	029b      	lsls	r3, r3, #10
 800736a:	697a      	ldr	r2, [r7, #20]
 800736c:	4313      	orrs	r3, r2
 800736e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	697a      	ldr	r2, [r7, #20]
 8007374:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	68fa      	ldr	r2, [r7, #12]
 800737a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	685a      	ldr	r2, [r3, #4]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	693a      	ldr	r2, [r7, #16]
 8007388:	621a      	str	r2, [r3, #32]
}
 800738a:	bf00      	nop
 800738c:	371c      	adds	r7, #28
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr
 8007396:	bf00      	nop
 8007398:	40012c00 	.word	0x40012c00
 800739c:	40013400 	.word	0x40013400
 80073a0:	40014000 	.word	0x40014000
 80073a4:	40014400 	.word	0x40014400
 80073a8:	40014800 	.word	0x40014800

080073ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b087      	sub	sp, #28
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	f003 031f 	and.w	r3, r3, #31
 80073be:	2201      	movs	r2, #1
 80073c0:	fa02 f303 	lsl.w	r3, r2, r3
 80073c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	6a1a      	ldr	r2, [r3, #32]
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	43db      	mvns	r3, r3
 80073ce:	401a      	ands	r2, r3
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	6a1a      	ldr	r2, [r3, #32]
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	f003 031f 	and.w	r3, r3, #31
 80073de:	6879      	ldr	r1, [r7, #4]
 80073e0:	fa01 f303 	lsl.w	r3, r1, r3
 80073e4:	431a      	orrs	r2, r3
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	621a      	str	r2, [r3, #32]
}
 80073ea:	bf00      	nop
 80073ec:	371c      	adds	r7, #28
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr
	...

080073f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b085      	sub	sp, #20
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007408:	2b01      	cmp	r3, #1
 800740a:	d101      	bne.n	8007410 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800740c:	2302      	movs	r3, #2
 800740e:	e068      	b.n	80074e2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2201      	movs	r2, #1
 8007414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2202      	movs	r2, #2
 800741c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a2e      	ldr	r2, [pc, #184]	@ (80074f0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d004      	beq.n	8007444 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a2d      	ldr	r2, [pc, #180]	@ (80074f4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d108      	bne.n	8007456 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800744a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	4313      	orrs	r3, r2
 8007454:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800745c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	68fa      	ldr	r2, [r7, #12]
 8007464:	4313      	orrs	r3, r2
 8007466:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	68fa      	ldr	r2, [r7, #12]
 800746e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a1e      	ldr	r2, [pc, #120]	@ (80074f0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d01d      	beq.n	80074b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007482:	d018      	beq.n	80074b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a1b      	ldr	r2, [pc, #108]	@ (80074f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d013      	beq.n	80074b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a1a      	ldr	r2, [pc, #104]	@ (80074fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d00e      	beq.n	80074b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a18      	ldr	r2, [pc, #96]	@ (8007500 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d009      	beq.n	80074b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a13      	ldr	r2, [pc, #76]	@ (80074f4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d004      	beq.n	80074b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a14      	ldr	r2, [pc, #80]	@ (8007504 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d10c      	bne.n	80074d0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	68ba      	ldr	r2, [r7, #8]
 80074c4:	4313      	orrs	r3, r2
 80074c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	68ba      	ldr	r2, [r7, #8]
 80074ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80074e0:	2300      	movs	r3, #0
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3714      	adds	r7, #20
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr
 80074ee:	bf00      	nop
 80074f0:	40012c00 	.word	0x40012c00
 80074f4:	40013400 	.word	0x40013400
 80074f8:	40000400 	.word	0x40000400
 80074fc:	40000800 	.word	0x40000800
 8007500:	40000c00 	.word	0x40000c00
 8007504:	40014000 	.word	0x40014000

08007508 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007508:	b480      	push	{r7}
 800750a:	b085      	sub	sp, #20
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007512:	2300      	movs	r3, #0
 8007514:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800751c:	2b01      	cmp	r3, #1
 800751e:	d101      	bne.n	8007524 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007520:	2302      	movs	r3, #2
 8007522:	e065      	b.n	80075f0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2201      	movs	r2, #1
 8007528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	4313      	orrs	r3, r2
 8007538:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	4313      	orrs	r3, r2
 8007546:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	4313      	orrs	r3, r2
 8007554:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4313      	orrs	r3, r2
 8007562:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	691b      	ldr	r3, [r3, #16]
 800756e:	4313      	orrs	r3, r2
 8007570:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	695b      	ldr	r3, [r3, #20]
 800757c:	4313      	orrs	r3, r2
 800757e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800758a:	4313      	orrs	r3, r2
 800758c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	699b      	ldr	r3, [r3, #24]
 8007598:	041b      	lsls	r3, r3, #16
 800759a:	4313      	orrs	r3, r2
 800759c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a16      	ldr	r2, [pc, #88]	@ (80075fc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d004      	beq.n	80075b2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a14      	ldr	r2, [pc, #80]	@ (8007600 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d115      	bne.n	80075de <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075bc:	051b      	lsls	r3, r3, #20
 80075be:	4313      	orrs	r3, r2
 80075c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	69db      	ldr	r3, [r3, #28]
 80075cc:	4313      	orrs	r3, r2
 80075ce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	6a1b      	ldr	r3, [r3, #32]
 80075da:	4313      	orrs	r3, r2
 80075dc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	68fa      	ldr	r2, [r7, #12]
 80075e4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80075ee:	2300      	movs	r3, #0
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3714      	adds	r7, #20
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr
 80075fc:	40012c00 	.word	0x40012c00
 8007600:	40013400 	.word	0x40013400

08007604 <__cvt>:
 8007604:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007608:	ec57 6b10 	vmov	r6, r7, d0
 800760c:	2f00      	cmp	r7, #0
 800760e:	460c      	mov	r4, r1
 8007610:	4619      	mov	r1, r3
 8007612:	463b      	mov	r3, r7
 8007614:	bfbb      	ittet	lt
 8007616:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800761a:	461f      	movlt	r7, r3
 800761c:	2300      	movge	r3, #0
 800761e:	232d      	movlt	r3, #45	@ 0x2d
 8007620:	700b      	strb	r3, [r1, #0]
 8007622:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007624:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007628:	4691      	mov	r9, r2
 800762a:	f023 0820 	bic.w	r8, r3, #32
 800762e:	bfbc      	itt	lt
 8007630:	4632      	movlt	r2, r6
 8007632:	4616      	movlt	r6, r2
 8007634:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007638:	d005      	beq.n	8007646 <__cvt+0x42>
 800763a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800763e:	d100      	bne.n	8007642 <__cvt+0x3e>
 8007640:	3401      	adds	r4, #1
 8007642:	2102      	movs	r1, #2
 8007644:	e000      	b.n	8007648 <__cvt+0x44>
 8007646:	2103      	movs	r1, #3
 8007648:	ab03      	add	r3, sp, #12
 800764a:	9301      	str	r3, [sp, #4]
 800764c:	ab02      	add	r3, sp, #8
 800764e:	9300      	str	r3, [sp, #0]
 8007650:	ec47 6b10 	vmov	d0, r6, r7
 8007654:	4653      	mov	r3, sl
 8007656:	4622      	mov	r2, r4
 8007658:	f000 fdd2 	bl	8008200 <_dtoa_r>
 800765c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007660:	4605      	mov	r5, r0
 8007662:	d119      	bne.n	8007698 <__cvt+0x94>
 8007664:	f019 0f01 	tst.w	r9, #1
 8007668:	d00e      	beq.n	8007688 <__cvt+0x84>
 800766a:	eb00 0904 	add.w	r9, r0, r4
 800766e:	2200      	movs	r2, #0
 8007670:	2300      	movs	r3, #0
 8007672:	4630      	mov	r0, r6
 8007674:	4639      	mov	r1, r7
 8007676:	f7f9 fa27 	bl	8000ac8 <__aeabi_dcmpeq>
 800767a:	b108      	cbz	r0, 8007680 <__cvt+0x7c>
 800767c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007680:	2230      	movs	r2, #48	@ 0x30
 8007682:	9b03      	ldr	r3, [sp, #12]
 8007684:	454b      	cmp	r3, r9
 8007686:	d31e      	bcc.n	80076c6 <__cvt+0xc2>
 8007688:	9b03      	ldr	r3, [sp, #12]
 800768a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800768c:	1b5b      	subs	r3, r3, r5
 800768e:	4628      	mov	r0, r5
 8007690:	6013      	str	r3, [r2, #0]
 8007692:	b004      	add	sp, #16
 8007694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007698:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800769c:	eb00 0904 	add.w	r9, r0, r4
 80076a0:	d1e5      	bne.n	800766e <__cvt+0x6a>
 80076a2:	7803      	ldrb	r3, [r0, #0]
 80076a4:	2b30      	cmp	r3, #48	@ 0x30
 80076a6:	d10a      	bne.n	80076be <__cvt+0xba>
 80076a8:	2200      	movs	r2, #0
 80076aa:	2300      	movs	r3, #0
 80076ac:	4630      	mov	r0, r6
 80076ae:	4639      	mov	r1, r7
 80076b0:	f7f9 fa0a 	bl	8000ac8 <__aeabi_dcmpeq>
 80076b4:	b918      	cbnz	r0, 80076be <__cvt+0xba>
 80076b6:	f1c4 0401 	rsb	r4, r4, #1
 80076ba:	f8ca 4000 	str.w	r4, [sl]
 80076be:	f8da 3000 	ldr.w	r3, [sl]
 80076c2:	4499      	add	r9, r3
 80076c4:	e7d3      	b.n	800766e <__cvt+0x6a>
 80076c6:	1c59      	adds	r1, r3, #1
 80076c8:	9103      	str	r1, [sp, #12]
 80076ca:	701a      	strb	r2, [r3, #0]
 80076cc:	e7d9      	b.n	8007682 <__cvt+0x7e>

080076ce <__exponent>:
 80076ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80076d0:	2900      	cmp	r1, #0
 80076d2:	bfba      	itte	lt
 80076d4:	4249      	neglt	r1, r1
 80076d6:	232d      	movlt	r3, #45	@ 0x2d
 80076d8:	232b      	movge	r3, #43	@ 0x2b
 80076da:	2909      	cmp	r1, #9
 80076dc:	7002      	strb	r2, [r0, #0]
 80076de:	7043      	strb	r3, [r0, #1]
 80076e0:	dd29      	ble.n	8007736 <__exponent+0x68>
 80076e2:	f10d 0307 	add.w	r3, sp, #7
 80076e6:	461d      	mov	r5, r3
 80076e8:	270a      	movs	r7, #10
 80076ea:	461a      	mov	r2, r3
 80076ec:	fbb1 f6f7 	udiv	r6, r1, r7
 80076f0:	fb07 1416 	mls	r4, r7, r6, r1
 80076f4:	3430      	adds	r4, #48	@ 0x30
 80076f6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80076fa:	460c      	mov	r4, r1
 80076fc:	2c63      	cmp	r4, #99	@ 0x63
 80076fe:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8007702:	4631      	mov	r1, r6
 8007704:	dcf1      	bgt.n	80076ea <__exponent+0x1c>
 8007706:	3130      	adds	r1, #48	@ 0x30
 8007708:	1e94      	subs	r4, r2, #2
 800770a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800770e:	1c41      	adds	r1, r0, #1
 8007710:	4623      	mov	r3, r4
 8007712:	42ab      	cmp	r3, r5
 8007714:	d30a      	bcc.n	800772c <__exponent+0x5e>
 8007716:	f10d 0309 	add.w	r3, sp, #9
 800771a:	1a9b      	subs	r3, r3, r2
 800771c:	42ac      	cmp	r4, r5
 800771e:	bf88      	it	hi
 8007720:	2300      	movhi	r3, #0
 8007722:	3302      	adds	r3, #2
 8007724:	4403      	add	r3, r0
 8007726:	1a18      	subs	r0, r3, r0
 8007728:	b003      	add	sp, #12
 800772a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800772c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007730:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007734:	e7ed      	b.n	8007712 <__exponent+0x44>
 8007736:	2330      	movs	r3, #48	@ 0x30
 8007738:	3130      	adds	r1, #48	@ 0x30
 800773a:	7083      	strb	r3, [r0, #2]
 800773c:	70c1      	strb	r1, [r0, #3]
 800773e:	1d03      	adds	r3, r0, #4
 8007740:	e7f1      	b.n	8007726 <__exponent+0x58>
	...

08007744 <_printf_float>:
 8007744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007748:	b08d      	sub	sp, #52	@ 0x34
 800774a:	460c      	mov	r4, r1
 800774c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007750:	4616      	mov	r6, r2
 8007752:	461f      	mov	r7, r3
 8007754:	4605      	mov	r5, r0
 8007756:	f000 fcc5 	bl	80080e4 <_localeconv_r>
 800775a:	6803      	ldr	r3, [r0, #0]
 800775c:	9304      	str	r3, [sp, #16]
 800775e:	4618      	mov	r0, r3
 8007760:	f7f8 fd86 	bl	8000270 <strlen>
 8007764:	2300      	movs	r3, #0
 8007766:	930a      	str	r3, [sp, #40]	@ 0x28
 8007768:	f8d8 3000 	ldr.w	r3, [r8]
 800776c:	9005      	str	r0, [sp, #20]
 800776e:	3307      	adds	r3, #7
 8007770:	f023 0307 	bic.w	r3, r3, #7
 8007774:	f103 0208 	add.w	r2, r3, #8
 8007778:	f894 a018 	ldrb.w	sl, [r4, #24]
 800777c:	f8d4 b000 	ldr.w	fp, [r4]
 8007780:	f8c8 2000 	str.w	r2, [r8]
 8007784:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007788:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800778c:	9307      	str	r3, [sp, #28]
 800778e:	f8cd 8018 	str.w	r8, [sp, #24]
 8007792:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007796:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800779a:	4b9c      	ldr	r3, [pc, #624]	@ (8007a0c <_printf_float+0x2c8>)
 800779c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80077a0:	f7f9 f9c4 	bl	8000b2c <__aeabi_dcmpun>
 80077a4:	bb70      	cbnz	r0, 8007804 <_printf_float+0xc0>
 80077a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80077aa:	4b98      	ldr	r3, [pc, #608]	@ (8007a0c <_printf_float+0x2c8>)
 80077ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80077b0:	f7f9 f99e 	bl	8000af0 <__aeabi_dcmple>
 80077b4:	bb30      	cbnz	r0, 8007804 <_printf_float+0xc0>
 80077b6:	2200      	movs	r2, #0
 80077b8:	2300      	movs	r3, #0
 80077ba:	4640      	mov	r0, r8
 80077bc:	4649      	mov	r1, r9
 80077be:	f7f9 f98d 	bl	8000adc <__aeabi_dcmplt>
 80077c2:	b110      	cbz	r0, 80077ca <_printf_float+0x86>
 80077c4:	232d      	movs	r3, #45	@ 0x2d
 80077c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077ca:	4a91      	ldr	r2, [pc, #580]	@ (8007a10 <_printf_float+0x2cc>)
 80077cc:	4b91      	ldr	r3, [pc, #580]	@ (8007a14 <_printf_float+0x2d0>)
 80077ce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80077d2:	bf8c      	ite	hi
 80077d4:	4690      	movhi	r8, r2
 80077d6:	4698      	movls	r8, r3
 80077d8:	2303      	movs	r3, #3
 80077da:	6123      	str	r3, [r4, #16]
 80077dc:	f02b 0304 	bic.w	r3, fp, #4
 80077e0:	6023      	str	r3, [r4, #0]
 80077e2:	f04f 0900 	mov.w	r9, #0
 80077e6:	9700      	str	r7, [sp, #0]
 80077e8:	4633      	mov	r3, r6
 80077ea:	aa0b      	add	r2, sp, #44	@ 0x2c
 80077ec:	4621      	mov	r1, r4
 80077ee:	4628      	mov	r0, r5
 80077f0:	f000 f9d2 	bl	8007b98 <_printf_common>
 80077f4:	3001      	adds	r0, #1
 80077f6:	f040 808d 	bne.w	8007914 <_printf_float+0x1d0>
 80077fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80077fe:	b00d      	add	sp, #52	@ 0x34
 8007800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007804:	4642      	mov	r2, r8
 8007806:	464b      	mov	r3, r9
 8007808:	4640      	mov	r0, r8
 800780a:	4649      	mov	r1, r9
 800780c:	f7f9 f98e 	bl	8000b2c <__aeabi_dcmpun>
 8007810:	b140      	cbz	r0, 8007824 <_printf_float+0xe0>
 8007812:	464b      	mov	r3, r9
 8007814:	2b00      	cmp	r3, #0
 8007816:	bfbc      	itt	lt
 8007818:	232d      	movlt	r3, #45	@ 0x2d
 800781a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800781e:	4a7e      	ldr	r2, [pc, #504]	@ (8007a18 <_printf_float+0x2d4>)
 8007820:	4b7e      	ldr	r3, [pc, #504]	@ (8007a1c <_printf_float+0x2d8>)
 8007822:	e7d4      	b.n	80077ce <_printf_float+0x8a>
 8007824:	6863      	ldr	r3, [r4, #4]
 8007826:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800782a:	9206      	str	r2, [sp, #24]
 800782c:	1c5a      	adds	r2, r3, #1
 800782e:	d13b      	bne.n	80078a8 <_printf_float+0x164>
 8007830:	2306      	movs	r3, #6
 8007832:	6063      	str	r3, [r4, #4]
 8007834:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007838:	2300      	movs	r3, #0
 800783a:	6022      	str	r2, [r4, #0]
 800783c:	9303      	str	r3, [sp, #12]
 800783e:	ab0a      	add	r3, sp, #40	@ 0x28
 8007840:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007844:	ab09      	add	r3, sp, #36	@ 0x24
 8007846:	9300      	str	r3, [sp, #0]
 8007848:	6861      	ldr	r1, [r4, #4]
 800784a:	ec49 8b10 	vmov	d0, r8, r9
 800784e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007852:	4628      	mov	r0, r5
 8007854:	f7ff fed6 	bl	8007604 <__cvt>
 8007858:	9b06      	ldr	r3, [sp, #24]
 800785a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800785c:	2b47      	cmp	r3, #71	@ 0x47
 800785e:	4680      	mov	r8, r0
 8007860:	d129      	bne.n	80078b6 <_printf_float+0x172>
 8007862:	1cc8      	adds	r0, r1, #3
 8007864:	db02      	blt.n	800786c <_printf_float+0x128>
 8007866:	6863      	ldr	r3, [r4, #4]
 8007868:	4299      	cmp	r1, r3
 800786a:	dd41      	ble.n	80078f0 <_printf_float+0x1ac>
 800786c:	f1aa 0a02 	sub.w	sl, sl, #2
 8007870:	fa5f fa8a 	uxtb.w	sl, sl
 8007874:	3901      	subs	r1, #1
 8007876:	4652      	mov	r2, sl
 8007878:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800787c:	9109      	str	r1, [sp, #36]	@ 0x24
 800787e:	f7ff ff26 	bl	80076ce <__exponent>
 8007882:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007884:	1813      	adds	r3, r2, r0
 8007886:	2a01      	cmp	r2, #1
 8007888:	4681      	mov	r9, r0
 800788a:	6123      	str	r3, [r4, #16]
 800788c:	dc02      	bgt.n	8007894 <_printf_float+0x150>
 800788e:	6822      	ldr	r2, [r4, #0]
 8007890:	07d2      	lsls	r2, r2, #31
 8007892:	d501      	bpl.n	8007898 <_printf_float+0x154>
 8007894:	3301      	adds	r3, #1
 8007896:	6123      	str	r3, [r4, #16]
 8007898:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800789c:	2b00      	cmp	r3, #0
 800789e:	d0a2      	beq.n	80077e6 <_printf_float+0xa2>
 80078a0:	232d      	movs	r3, #45	@ 0x2d
 80078a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078a6:	e79e      	b.n	80077e6 <_printf_float+0xa2>
 80078a8:	9a06      	ldr	r2, [sp, #24]
 80078aa:	2a47      	cmp	r2, #71	@ 0x47
 80078ac:	d1c2      	bne.n	8007834 <_printf_float+0xf0>
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d1c0      	bne.n	8007834 <_printf_float+0xf0>
 80078b2:	2301      	movs	r3, #1
 80078b4:	e7bd      	b.n	8007832 <_printf_float+0xee>
 80078b6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80078ba:	d9db      	bls.n	8007874 <_printf_float+0x130>
 80078bc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80078c0:	d118      	bne.n	80078f4 <_printf_float+0x1b0>
 80078c2:	2900      	cmp	r1, #0
 80078c4:	6863      	ldr	r3, [r4, #4]
 80078c6:	dd0b      	ble.n	80078e0 <_printf_float+0x19c>
 80078c8:	6121      	str	r1, [r4, #16]
 80078ca:	b913      	cbnz	r3, 80078d2 <_printf_float+0x18e>
 80078cc:	6822      	ldr	r2, [r4, #0]
 80078ce:	07d0      	lsls	r0, r2, #31
 80078d0:	d502      	bpl.n	80078d8 <_printf_float+0x194>
 80078d2:	3301      	adds	r3, #1
 80078d4:	440b      	add	r3, r1
 80078d6:	6123      	str	r3, [r4, #16]
 80078d8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80078da:	f04f 0900 	mov.w	r9, #0
 80078de:	e7db      	b.n	8007898 <_printf_float+0x154>
 80078e0:	b913      	cbnz	r3, 80078e8 <_printf_float+0x1a4>
 80078e2:	6822      	ldr	r2, [r4, #0]
 80078e4:	07d2      	lsls	r2, r2, #31
 80078e6:	d501      	bpl.n	80078ec <_printf_float+0x1a8>
 80078e8:	3302      	adds	r3, #2
 80078ea:	e7f4      	b.n	80078d6 <_printf_float+0x192>
 80078ec:	2301      	movs	r3, #1
 80078ee:	e7f2      	b.n	80078d6 <_printf_float+0x192>
 80078f0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80078f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80078f6:	4299      	cmp	r1, r3
 80078f8:	db05      	blt.n	8007906 <_printf_float+0x1c2>
 80078fa:	6823      	ldr	r3, [r4, #0]
 80078fc:	6121      	str	r1, [r4, #16]
 80078fe:	07d8      	lsls	r0, r3, #31
 8007900:	d5ea      	bpl.n	80078d8 <_printf_float+0x194>
 8007902:	1c4b      	adds	r3, r1, #1
 8007904:	e7e7      	b.n	80078d6 <_printf_float+0x192>
 8007906:	2900      	cmp	r1, #0
 8007908:	bfd4      	ite	le
 800790a:	f1c1 0202 	rsble	r2, r1, #2
 800790e:	2201      	movgt	r2, #1
 8007910:	4413      	add	r3, r2
 8007912:	e7e0      	b.n	80078d6 <_printf_float+0x192>
 8007914:	6823      	ldr	r3, [r4, #0]
 8007916:	055a      	lsls	r2, r3, #21
 8007918:	d407      	bmi.n	800792a <_printf_float+0x1e6>
 800791a:	6923      	ldr	r3, [r4, #16]
 800791c:	4642      	mov	r2, r8
 800791e:	4631      	mov	r1, r6
 8007920:	4628      	mov	r0, r5
 8007922:	47b8      	blx	r7
 8007924:	3001      	adds	r0, #1
 8007926:	d12b      	bne.n	8007980 <_printf_float+0x23c>
 8007928:	e767      	b.n	80077fa <_printf_float+0xb6>
 800792a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800792e:	f240 80dd 	bls.w	8007aec <_printf_float+0x3a8>
 8007932:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007936:	2200      	movs	r2, #0
 8007938:	2300      	movs	r3, #0
 800793a:	f7f9 f8c5 	bl	8000ac8 <__aeabi_dcmpeq>
 800793e:	2800      	cmp	r0, #0
 8007940:	d033      	beq.n	80079aa <_printf_float+0x266>
 8007942:	4a37      	ldr	r2, [pc, #220]	@ (8007a20 <_printf_float+0x2dc>)
 8007944:	2301      	movs	r3, #1
 8007946:	4631      	mov	r1, r6
 8007948:	4628      	mov	r0, r5
 800794a:	47b8      	blx	r7
 800794c:	3001      	adds	r0, #1
 800794e:	f43f af54 	beq.w	80077fa <_printf_float+0xb6>
 8007952:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007956:	4543      	cmp	r3, r8
 8007958:	db02      	blt.n	8007960 <_printf_float+0x21c>
 800795a:	6823      	ldr	r3, [r4, #0]
 800795c:	07d8      	lsls	r0, r3, #31
 800795e:	d50f      	bpl.n	8007980 <_printf_float+0x23c>
 8007960:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007964:	4631      	mov	r1, r6
 8007966:	4628      	mov	r0, r5
 8007968:	47b8      	blx	r7
 800796a:	3001      	adds	r0, #1
 800796c:	f43f af45 	beq.w	80077fa <_printf_float+0xb6>
 8007970:	f04f 0900 	mov.w	r9, #0
 8007974:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007978:	f104 0a1a 	add.w	sl, r4, #26
 800797c:	45c8      	cmp	r8, r9
 800797e:	dc09      	bgt.n	8007994 <_printf_float+0x250>
 8007980:	6823      	ldr	r3, [r4, #0]
 8007982:	079b      	lsls	r3, r3, #30
 8007984:	f100 8103 	bmi.w	8007b8e <_printf_float+0x44a>
 8007988:	68e0      	ldr	r0, [r4, #12]
 800798a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800798c:	4298      	cmp	r0, r3
 800798e:	bfb8      	it	lt
 8007990:	4618      	movlt	r0, r3
 8007992:	e734      	b.n	80077fe <_printf_float+0xba>
 8007994:	2301      	movs	r3, #1
 8007996:	4652      	mov	r2, sl
 8007998:	4631      	mov	r1, r6
 800799a:	4628      	mov	r0, r5
 800799c:	47b8      	blx	r7
 800799e:	3001      	adds	r0, #1
 80079a0:	f43f af2b 	beq.w	80077fa <_printf_float+0xb6>
 80079a4:	f109 0901 	add.w	r9, r9, #1
 80079a8:	e7e8      	b.n	800797c <_printf_float+0x238>
 80079aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	dc39      	bgt.n	8007a24 <_printf_float+0x2e0>
 80079b0:	4a1b      	ldr	r2, [pc, #108]	@ (8007a20 <_printf_float+0x2dc>)
 80079b2:	2301      	movs	r3, #1
 80079b4:	4631      	mov	r1, r6
 80079b6:	4628      	mov	r0, r5
 80079b8:	47b8      	blx	r7
 80079ba:	3001      	adds	r0, #1
 80079bc:	f43f af1d 	beq.w	80077fa <_printf_float+0xb6>
 80079c0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80079c4:	ea59 0303 	orrs.w	r3, r9, r3
 80079c8:	d102      	bne.n	80079d0 <_printf_float+0x28c>
 80079ca:	6823      	ldr	r3, [r4, #0]
 80079cc:	07d9      	lsls	r1, r3, #31
 80079ce:	d5d7      	bpl.n	8007980 <_printf_float+0x23c>
 80079d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079d4:	4631      	mov	r1, r6
 80079d6:	4628      	mov	r0, r5
 80079d8:	47b8      	blx	r7
 80079da:	3001      	adds	r0, #1
 80079dc:	f43f af0d 	beq.w	80077fa <_printf_float+0xb6>
 80079e0:	f04f 0a00 	mov.w	sl, #0
 80079e4:	f104 0b1a 	add.w	fp, r4, #26
 80079e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079ea:	425b      	negs	r3, r3
 80079ec:	4553      	cmp	r3, sl
 80079ee:	dc01      	bgt.n	80079f4 <_printf_float+0x2b0>
 80079f0:	464b      	mov	r3, r9
 80079f2:	e793      	b.n	800791c <_printf_float+0x1d8>
 80079f4:	2301      	movs	r3, #1
 80079f6:	465a      	mov	r2, fp
 80079f8:	4631      	mov	r1, r6
 80079fa:	4628      	mov	r0, r5
 80079fc:	47b8      	blx	r7
 80079fe:	3001      	adds	r0, #1
 8007a00:	f43f aefb 	beq.w	80077fa <_printf_float+0xb6>
 8007a04:	f10a 0a01 	add.w	sl, sl, #1
 8007a08:	e7ee      	b.n	80079e8 <_printf_float+0x2a4>
 8007a0a:	bf00      	nop
 8007a0c:	7fefffff 	.word	0x7fefffff
 8007a10:	0800a38c 	.word	0x0800a38c
 8007a14:	0800a388 	.word	0x0800a388
 8007a18:	0800a394 	.word	0x0800a394
 8007a1c:	0800a390 	.word	0x0800a390
 8007a20:	0800a398 	.word	0x0800a398
 8007a24:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007a26:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007a2a:	4553      	cmp	r3, sl
 8007a2c:	bfa8      	it	ge
 8007a2e:	4653      	movge	r3, sl
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	4699      	mov	r9, r3
 8007a34:	dc36      	bgt.n	8007aa4 <_printf_float+0x360>
 8007a36:	f04f 0b00 	mov.w	fp, #0
 8007a3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a3e:	f104 021a 	add.w	r2, r4, #26
 8007a42:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007a44:	9306      	str	r3, [sp, #24]
 8007a46:	eba3 0309 	sub.w	r3, r3, r9
 8007a4a:	455b      	cmp	r3, fp
 8007a4c:	dc31      	bgt.n	8007ab2 <_printf_float+0x36e>
 8007a4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a50:	459a      	cmp	sl, r3
 8007a52:	dc3a      	bgt.n	8007aca <_printf_float+0x386>
 8007a54:	6823      	ldr	r3, [r4, #0]
 8007a56:	07da      	lsls	r2, r3, #31
 8007a58:	d437      	bmi.n	8007aca <_printf_float+0x386>
 8007a5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a5c:	ebaa 0903 	sub.w	r9, sl, r3
 8007a60:	9b06      	ldr	r3, [sp, #24]
 8007a62:	ebaa 0303 	sub.w	r3, sl, r3
 8007a66:	4599      	cmp	r9, r3
 8007a68:	bfa8      	it	ge
 8007a6a:	4699      	movge	r9, r3
 8007a6c:	f1b9 0f00 	cmp.w	r9, #0
 8007a70:	dc33      	bgt.n	8007ada <_printf_float+0x396>
 8007a72:	f04f 0800 	mov.w	r8, #0
 8007a76:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a7a:	f104 0b1a 	add.w	fp, r4, #26
 8007a7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a80:	ebaa 0303 	sub.w	r3, sl, r3
 8007a84:	eba3 0309 	sub.w	r3, r3, r9
 8007a88:	4543      	cmp	r3, r8
 8007a8a:	f77f af79 	ble.w	8007980 <_printf_float+0x23c>
 8007a8e:	2301      	movs	r3, #1
 8007a90:	465a      	mov	r2, fp
 8007a92:	4631      	mov	r1, r6
 8007a94:	4628      	mov	r0, r5
 8007a96:	47b8      	blx	r7
 8007a98:	3001      	adds	r0, #1
 8007a9a:	f43f aeae 	beq.w	80077fa <_printf_float+0xb6>
 8007a9e:	f108 0801 	add.w	r8, r8, #1
 8007aa2:	e7ec      	b.n	8007a7e <_printf_float+0x33a>
 8007aa4:	4642      	mov	r2, r8
 8007aa6:	4631      	mov	r1, r6
 8007aa8:	4628      	mov	r0, r5
 8007aaa:	47b8      	blx	r7
 8007aac:	3001      	adds	r0, #1
 8007aae:	d1c2      	bne.n	8007a36 <_printf_float+0x2f2>
 8007ab0:	e6a3      	b.n	80077fa <_printf_float+0xb6>
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	4631      	mov	r1, r6
 8007ab6:	4628      	mov	r0, r5
 8007ab8:	9206      	str	r2, [sp, #24]
 8007aba:	47b8      	blx	r7
 8007abc:	3001      	adds	r0, #1
 8007abe:	f43f ae9c 	beq.w	80077fa <_printf_float+0xb6>
 8007ac2:	9a06      	ldr	r2, [sp, #24]
 8007ac4:	f10b 0b01 	add.w	fp, fp, #1
 8007ac8:	e7bb      	b.n	8007a42 <_printf_float+0x2fe>
 8007aca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ace:	4631      	mov	r1, r6
 8007ad0:	4628      	mov	r0, r5
 8007ad2:	47b8      	blx	r7
 8007ad4:	3001      	adds	r0, #1
 8007ad6:	d1c0      	bne.n	8007a5a <_printf_float+0x316>
 8007ad8:	e68f      	b.n	80077fa <_printf_float+0xb6>
 8007ada:	9a06      	ldr	r2, [sp, #24]
 8007adc:	464b      	mov	r3, r9
 8007ade:	4442      	add	r2, r8
 8007ae0:	4631      	mov	r1, r6
 8007ae2:	4628      	mov	r0, r5
 8007ae4:	47b8      	blx	r7
 8007ae6:	3001      	adds	r0, #1
 8007ae8:	d1c3      	bne.n	8007a72 <_printf_float+0x32e>
 8007aea:	e686      	b.n	80077fa <_printf_float+0xb6>
 8007aec:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007af0:	f1ba 0f01 	cmp.w	sl, #1
 8007af4:	dc01      	bgt.n	8007afa <_printf_float+0x3b6>
 8007af6:	07db      	lsls	r3, r3, #31
 8007af8:	d536      	bpl.n	8007b68 <_printf_float+0x424>
 8007afa:	2301      	movs	r3, #1
 8007afc:	4642      	mov	r2, r8
 8007afe:	4631      	mov	r1, r6
 8007b00:	4628      	mov	r0, r5
 8007b02:	47b8      	blx	r7
 8007b04:	3001      	adds	r0, #1
 8007b06:	f43f ae78 	beq.w	80077fa <_printf_float+0xb6>
 8007b0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b0e:	4631      	mov	r1, r6
 8007b10:	4628      	mov	r0, r5
 8007b12:	47b8      	blx	r7
 8007b14:	3001      	adds	r0, #1
 8007b16:	f43f ae70 	beq.w	80077fa <_printf_float+0xb6>
 8007b1a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007b1e:	2200      	movs	r2, #0
 8007b20:	2300      	movs	r3, #0
 8007b22:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007b26:	f7f8 ffcf 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b2a:	b9c0      	cbnz	r0, 8007b5e <_printf_float+0x41a>
 8007b2c:	4653      	mov	r3, sl
 8007b2e:	f108 0201 	add.w	r2, r8, #1
 8007b32:	4631      	mov	r1, r6
 8007b34:	4628      	mov	r0, r5
 8007b36:	47b8      	blx	r7
 8007b38:	3001      	adds	r0, #1
 8007b3a:	d10c      	bne.n	8007b56 <_printf_float+0x412>
 8007b3c:	e65d      	b.n	80077fa <_printf_float+0xb6>
 8007b3e:	2301      	movs	r3, #1
 8007b40:	465a      	mov	r2, fp
 8007b42:	4631      	mov	r1, r6
 8007b44:	4628      	mov	r0, r5
 8007b46:	47b8      	blx	r7
 8007b48:	3001      	adds	r0, #1
 8007b4a:	f43f ae56 	beq.w	80077fa <_printf_float+0xb6>
 8007b4e:	f108 0801 	add.w	r8, r8, #1
 8007b52:	45d0      	cmp	r8, sl
 8007b54:	dbf3      	blt.n	8007b3e <_printf_float+0x3fa>
 8007b56:	464b      	mov	r3, r9
 8007b58:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007b5c:	e6df      	b.n	800791e <_printf_float+0x1da>
 8007b5e:	f04f 0800 	mov.w	r8, #0
 8007b62:	f104 0b1a 	add.w	fp, r4, #26
 8007b66:	e7f4      	b.n	8007b52 <_printf_float+0x40e>
 8007b68:	2301      	movs	r3, #1
 8007b6a:	4642      	mov	r2, r8
 8007b6c:	e7e1      	b.n	8007b32 <_printf_float+0x3ee>
 8007b6e:	2301      	movs	r3, #1
 8007b70:	464a      	mov	r2, r9
 8007b72:	4631      	mov	r1, r6
 8007b74:	4628      	mov	r0, r5
 8007b76:	47b8      	blx	r7
 8007b78:	3001      	adds	r0, #1
 8007b7a:	f43f ae3e 	beq.w	80077fa <_printf_float+0xb6>
 8007b7e:	f108 0801 	add.w	r8, r8, #1
 8007b82:	68e3      	ldr	r3, [r4, #12]
 8007b84:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007b86:	1a5b      	subs	r3, r3, r1
 8007b88:	4543      	cmp	r3, r8
 8007b8a:	dcf0      	bgt.n	8007b6e <_printf_float+0x42a>
 8007b8c:	e6fc      	b.n	8007988 <_printf_float+0x244>
 8007b8e:	f04f 0800 	mov.w	r8, #0
 8007b92:	f104 0919 	add.w	r9, r4, #25
 8007b96:	e7f4      	b.n	8007b82 <_printf_float+0x43e>

08007b98 <_printf_common>:
 8007b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b9c:	4616      	mov	r6, r2
 8007b9e:	4698      	mov	r8, r3
 8007ba0:	688a      	ldr	r2, [r1, #8]
 8007ba2:	690b      	ldr	r3, [r1, #16]
 8007ba4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	bfb8      	it	lt
 8007bac:	4613      	movlt	r3, r2
 8007bae:	6033      	str	r3, [r6, #0]
 8007bb0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007bb4:	4607      	mov	r7, r0
 8007bb6:	460c      	mov	r4, r1
 8007bb8:	b10a      	cbz	r2, 8007bbe <_printf_common+0x26>
 8007bba:	3301      	adds	r3, #1
 8007bbc:	6033      	str	r3, [r6, #0]
 8007bbe:	6823      	ldr	r3, [r4, #0]
 8007bc0:	0699      	lsls	r1, r3, #26
 8007bc2:	bf42      	ittt	mi
 8007bc4:	6833      	ldrmi	r3, [r6, #0]
 8007bc6:	3302      	addmi	r3, #2
 8007bc8:	6033      	strmi	r3, [r6, #0]
 8007bca:	6825      	ldr	r5, [r4, #0]
 8007bcc:	f015 0506 	ands.w	r5, r5, #6
 8007bd0:	d106      	bne.n	8007be0 <_printf_common+0x48>
 8007bd2:	f104 0a19 	add.w	sl, r4, #25
 8007bd6:	68e3      	ldr	r3, [r4, #12]
 8007bd8:	6832      	ldr	r2, [r6, #0]
 8007bda:	1a9b      	subs	r3, r3, r2
 8007bdc:	42ab      	cmp	r3, r5
 8007bde:	dc26      	bgt.n	8007c2e <_printf_common+0x96>
 8007be0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007be4:	6822      	ldr	r2, [r4, #0]
 8007be6:	3b00      	subs	r3, #0
 8007be8:	bf18      	it	ne
 8007bea:	2301      	movne	r3, #1
 8007bec:	0692      	lsls	r2, r2, #26
 8007bee:	d42b      	bmi.n	8007c48 <_printf_common+0xb0>
 8007bf0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007bf4:	4641      	mov	r1, r8
 8007bf6:	4638      	mov	r0, r7
 8007bf8:	47c8      	blx	r9
 8007bfa:	3001      	adds	r0, #1
 8007bfc:	d01e      	beq.n	8007c3c <_printf_common+0xa4>
 8007bfe:	6823      	ldr	r3, [r4, #0]
 8007c00:	6922      	ldr	r2, [r4, #16]
 8007c02:	f003 0306 	and.w	r3, r3, #6
 8007c06:	2b04      	cmp	r3, #4
 8007c08:	bf02      	ittt	eq
 8007c0a:	68e5      	ldreq	r5, [r4, #12]
 8007c0c:	6833      	ldreq	r3, [r6, #0]
 8007c0e:	1aed      	subeq	r5, r5, r3
 8007c10:	68a3      	ldr	r3, [r4, #8]
 8007c12:	bf0c      	ite	eq
 8007c14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c18:	2500      	movne	r5, #0
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	bfc4      	itt	gt
 8007c1e:	1a9b      	subgt	r3, r3, r2
 8007c20:	18ed      	addgt	r5, r5, r3
 8007c22:	2600      	movs	r6, #0
 8007c24:	341a      	adds	r4, #26
 8007c26:	42b5      	cmp	r5, r6
 8007c28:	d11a      	bne.n	8007c60 <_printf_common+0xc8>
 8007c2a:	2000      	movs	r0, #0
 8007c2c:	e008      	b.n	8007c40 <_printf_common+0xa8>
 8007c2e:	2301      	movs	r3, #1
 8007c30:	4652      	mov	r2, sl
 8007c32:	4641      	mov	r1, r8
 8007c34:	4638      	mov	r0, r7
 8007c36:	47c8      	blx	r9
 8007c38:	3001      	adds	r0, #1
 8007c3a:	d103      	bne.n	8007c44 <_printf_common+0xac>
 8007c3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c44:	3501      	adds	r5, #1
 8007c46:	e7c6      	b.n	8007bd6 <_printf_common+0x3e>
 8007c48:	18e1      	adds	r1, r4, r3
 8007c4a:	1c5a      	adds	r2, r3, #1
 8007c4c:	2030      	movs	r0, #48	@ 0x30
 8007c4e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007c52:	4422      	add	r2, r4
 8007c54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007c58:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007c5c:	3302      	adds	r3, #2
 8007c5e:	e7c7      	b.n	8007bf0 <_printf_common+0x58>
 8007c60:	2301      	movs	r3, #1
 8007c62:	4622      	mov	r2, r4
 8007c64:	4641      	mov	r1, r8
 8007c66:	4638      	mov	r0, r7
 8007c68:	47c8      	blx	r9
 8007c6a:	3001      	adds	r0, #1
 8007c6c:	d0e6      	beq.n	8007c3c <_printf_common+0xa4>
 8007c6e:	3601      	adds	r6, #1
 8007c70:	e7d9      	b.n	8007c26 <_printf_common+0x8e>
	...

08007c74 <_printf_i>:
 8007c74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c78:	7e0f      	ldrb	r7, [r1, #24]
 8007c7a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007c7c:	2f78      	cmp	r7, #120	@ 0x78
 8007c7e:	4691      	mov	r9, r2
 8007c80:	4680      	mov	r8, r0
 8007c82:	460c      	mov	r4, r1
 8007c84:	469a      	mov	sl, r3
 8007c86:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007c8a:	d807      	bhi.n	8007c9c <_printf_i+0x28>
 8007c8c:	2f62      	cmp	r7, #98	@ 0x62
 8007c8e:	d80a      	bhi.n	8007ca6 <_printf_i+0x32>
 8007c90:	2f00      	cmp	r7, #0
 8007c92:	f000 80d1 	beq.w	8007e38 <_printf_i+0x1c4>
 8007c96:	2f58      	cmp	r7, #88	@ 0x58
 8007c98:	f000 80b8 	beq.w	8007e0c <_printf_i+0x198>
 8007c9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ca0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007ca4:	e03a      	b.n	8007d1c <_printf_i+0xa8>
 8007ca6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007caa:	2b15      	cmp	r3, #21
 8007cac:	d8f6      	bhi.n	8007c9c <_printf_i+0x28>
 8007cae:	a101      	add	r1, pc, #4	@ (adr r1, 8007cb4 <_printf_i+0x40>)
 8007cb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007cb4:	08007d0d 	.word	0x08007d0d
 8007cb8:	08007d21 	.word	0x08007d21
 8007cbc:	08007c9d 	.word	0x08007c9d
 8007cc0:	08007c9d 	.word	0x08007c9d
 8007cc4:	08007c9d 	.word	0x08007c9d
 8007cc8:	08007c9d 	.word	0x08007c9d
 8007ccc:	08007d21 	.word	0x08007d21
 8007cd0:	08007c9d 	.word	0x08007c9d
 8007cd4:	08007c9d 	.word	0x08007c9d
 8007cd8:	08007c9d 	.word	0x08007c9d
 8007cdc:	08007c9d 	.word	0x08007c9d
 8007ce0:	08007e1f 	.word	0x08007e1f
 8007ce4:	08007d4b 	.word	0x08007d4b
 8007ce8:	08007dd9 	.word	0x08007dd9
 8007cec:	08007c9d 	.word	0x08007c9d
 8007cf0:	08007c9d 	.word	0x08007c9d
 8007cf4:	08007e41 	.word	0x08007e41
 8007cf8:	08007c9d 	.word	0x08007c9d
 8007cfc:	08007d4b 	.word	0x08007d4b
 8007d00:	08007c9d 	.word	0x08007c9d
 8007d04:	08007c9d 	.word	0x08007c9d
 8007d08:	08007de1 	.word	0x08007de1
 8007d0c:	6833      	ldr	r3, [r6, #0]
 8007d0e:	1d1a      	adds	r2, r3, #4
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	6032      	str	r2, [r6, #0]
 8007d14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d18:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	e09c      	b.n	8007e5a <_printf_i+0x1e6>
 8007d20:	6833      	ldr	r3, [r6, #0]
 8007d22:	6820      	ldr	r0, [r4, #0]
 8007d24:	1d19      	adds	r1, r3, #4
 8007d26:	6031      	str	r1, [r6, #0]
 8007d28:	0606      	lsls	r6, r0, #24
 8007d2a:	d501      	bpl.n	8007d30 <_printf_i+0xbc>
 8007d2c:	681d      	ldr	r5, [r3, #0]
 8007d2e:	e003      	b.n	8007d38 <_printf_i+0xc4>
 8007d30:	0645      	lsls	r5, r0, #25
 8007d32:	d5fb      	bpl.n	8007d2c <_printf_i+0xb8>
 8007d34:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007d38:	2d00      	cmp	r5, #0
 8007d3a:	da03      	bge.n	8007d44 <_printf_i+0xd0>
 8007d3c:	232d      	movs	r3, #45	@ 0x2d
 8007d3e:	426d      	negs	r5, r5
 8007d40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d44:	4858      	ldr	r0, [pc, #352]	@ (8007ea8 <_printf_i+0x234>)
 8007d46:	230a      	movs	r3, #10
 8007d48:	e011      	b.n	8007d6e <_printf_i+0xfa>
 8007d4a:	6821      	ldr	r1, [r4, #0]
 8007d4c:	6833      	ldr	r3, [r6, #0]
 8007d4e:	0608      	lsls	r0, r1, #24
 8007d50:	f853 5b04 	ldr.w	r5, [r3], #4
 8007d54:	d402      	bmi.n	8007d5c <_printf_i+0xe8>
 8007d56:	0649      	lsls	r1, r1, #25
 8007d58:	bf48      	it	mi
 8007d5a:	b2ad      	uxthmi	r5, r5
 8007d5c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007d5e:	4852      	ldr	r0, [pc, #328]	@ (8007ea8 <_printf_i+0x234>)
 8007d60:	6033      	str	r3, [r6, #0]
 8007d62:	bf14      	ite	ne
 8007d64:	230a      	movne	r3, #10
 8007d66:	2308      	moveq	r3, #8
 8007d68:	2100      	movs	r1, #0
 8007d6a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007d6e:	6866      	ldr	r6, [r4, #4]
 8007d70:	60a6      	str	r6, [r4, #8]
 8007d72:	2e00      	cmp	r6, #0
 8007d74:	db05      	blt.n	8007d82 <_printf_i+0x10e>
 8007d76:	6821      	ldr	r1, [r4, #0]
 8007d78:	432e      	orrs	r6, r5
 8007d7a:	f021 0104 	bic.w	r1, r1, #4
 8007d7e:	6021      	str	r1, [r4, #0]
 8007d80:	d04b      	beq.n	8007e1a <_printf_i+0x1a6>
 8007d82:	4616      	mov	r6, r2
 8007d84:	fbb5 f1f3 	udiv	r1, r5, r3
 8007d88:	fb03 5711 	mls	r7, r3, r1, r5
 8007d8c:	5dc7      	ldrb	r7, [r0, r7]
 8007d8e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007d92:	462f      	mov	r7, r5
 8007d94:	42bb      	cmp	r3, r7
 8007d96:	460d      	mov	r5, r1
 8007d98:	d9f4      	bls.n	8007d84 <_printf_i+0x110>
 8007d9a:	2b08      	cmp	r3, #8
 8007d9c:	d10b      	bne.n	8007db6 <_printf_i+0x142>
 8007d9e:	6823      	ldr	r3, [r4, #0]
 8007da0:	07df      	lsls	r7, r3, #31
 8007da2:	d508      	bpl.n	8007db6 <_printf_i+0x142>
 8007da4:	6923      	ldr	r3, [r4, #16]
 8007da6:	6861      	ldr	r1, [r4, #4]
 8007da8:	4299      	cmp	r1, r3
 8007daa:	bfde      	ittt	le
 8007dac:	2330      	movle	r3, #48	@ 0x30
 8007dae:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007db2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007db6:	1b92      	subs	r2, r2, r6
 8007db8:	6122      	str	r2, [r4, #16]
 8007dba:	f8cd a000 	str.w	sl, [sp]
 8007dbe:	464b      	mov	r3, r9
 8007dc0:	aa03      	add	r2, sp, #12
 8007dc2:	4621      	mov	r1, r4
 8007dc4:	4640      	mov	r0, r8
 8007dc6:	f7ff fee7 	bl	8007b98 <_printf_common>
 8007dca:	3001      	adds	r0, #1
 8007dcc:	d14a      	bne.n	8007e64 <_printf_i+0x1f0>
 8007dce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007dd2:	b004      	add	sp, #16
 8007dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dd8:	6823      	ldr	r3, [r4, #0]
 8007dda:	f043 0320 	orr.w	r3, r3, #32
 8007dde:	6023      	str	r3, [r4, #0]
 8007de0:	4832      	ldr	r0, [pc, #200]	@ (8007eac <_printf_i+0x238>)
 8007de2:	2778      	movs	r7, #120	@ 0x78
 8007de4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007de8:	6823      	ldr	r3, [r4, #0]
 8007dea:	6831      	ldr	r1, [r6, #0]
 8007dec:	061f      	lsls	r7, r3, #24
 8007dee:	f851 5b04 	ldr.w	r5, [r1], #4
 8007df2:	d402      	bmi.n	8007dfa <_printf_i+0x186>
 8007df4:	065f      	lsls	r7, r3, #25
 8007df6:	bf48      	it	mi
 8007df8:	b2ad      	uxthmi	r5, r5
 8007dfa:	6031      	str	r1, [r6, #0]
 8007dfc:	07d9      	lsls	r1, r3, #31
 8007dfe:	bf44      	itt	mi
 8007e00:	f043 0320 	orrmi.w	r3, r3, #32
 8007e04:	6023      	strmi	r3, [r4, #0]
 8007e06:	b11d      	cbz	r5, 8007e10 <_printf_i+0x19c>
 8007e08:	2310      	movs	r3, #16
 8007e0a:	e7ad      	b.n	8007d68 <_printf_i+0xf4>
 8007e0c:	4826      	ldr	r0, [pc, #152]	@ (8007ea8 <_printf_i+0x234>)
 8007e0e:	e7e9      	b.n	8007de4 <_printf_i+0x170>
 8007e10:	6823      	ldr	r3, [r4, #0]
 8007e12:	f023 0320 	bic.w	r3, r3, #32
 8007e16:	6023      	str	r3, [r4, #0]
 8007e18:	e7f6      	b.n	8007e08 <_printf_i+0x194>
 8007e1a:	4616      	mov	r6, r2
 8007e1c:	e7bd      	b.n	8007d9a <_printf_i+0x126>
 8007e1e:	6833      	ldr	r3, [r6, #0]
 8007e20:	6825      	ldr	r5, [r4, #0]
 8007e22:	6961      	ldr	r1, [r4, #20]
 8007e24:	1d18      	adds	r0, r3, #4
 8007e26:	6030      	str	r0, [r6, #0]
 8007e28:	062e      	lsls	r6, r5, #24
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	d501      	bpl.n	8007e32 <_printf_i+0x1be>
 8007e2e:	6019      	str	r1, [r3, #0]
 8007e30:	e002      	b.n	8007e38 <_printf_i+0x1c4>
 8007e32:	0668      	lsls	r0, r5, #25
 8007e34:	d5fb      	bpl.n	8007e2e <_printf_i+0x1ba>
 8007e36:	8019      	strh	r1, [r3, #0]
 8007e38:	2300      	movs	r3, #0
 8007e3a:	6123      	str	r3, [r4, #16]
 8007e3c:	4616      	mov	r6, r2
 8007e3e:	e7bc      	b.n	8007dba <_printf_i+0x146>
 8007e40:	6833      	ldr	r3, [r6, #0]
 8007e42:	1d1a      	adds	r2, r3, #4
 8007e44:	6032      	str	r2, [r6, #0]
 8007e46:	681e      	ldr	r6, [r3, #0]
 8007e48:	6862      	ldr	r2, [r4, #4]
 8007e4a:	2100      	movs	r1, #0
 8007e4c:	4630      	mov	r0, r6
 8007e4e:	f7f8 f9bf 	bl	80001d0 <memchr>
 8007e52:	b108      	cbz	r0, 8007e58 <_printf_i+0x1e4>
 8007e54:	1b80      	subs	r0, r0, r6
 8007e56:	6060      	str	r0, [r4, #4]
 8007e58:	6863      	ldr	r3, [r4, #4]
 8007e5a:	6123      	str	r3, [r4, #16]
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e62:	e7aa      	b.n	8007dba <_printf_i+0x146>
 8007e64:	6923      	ldr	r3, [r4, #16]
 8007e66:	4632      	mov	r2, r6
 8007e68:	4649      	mov	r1, r9
 8007e6a:	4640      	mov	r0, r8
 8007e6c:	47d0      	blx	sl
 8007e6e:	3001      	adds	r0, #1
 8007e70:	d0ad      	beq.n	8007dce <_printf_i+0x15a>
 8007e72:	6823      	ldr	r3, [r4, #0]
 8007e74:	079b      	lsls	r3, r3, #30
 8007e76:	d413      	bmi.n	8007ea0 <_printf_i+0x22c>
 8007e78:	68e0      	ldr	r0, [r4, #12]
 8007e7a:	9b03      	ldr	r3, [sp, #12]
 8007e7c:	4298      	cmp	r0, r3
 8007e7e:	bfb8      	it	lt
 8007e80:	4618      	movlt	r0, r3
 8007e82:	e7a6      	b.n	8007dd2 <_printf_i+0x15e>
 8007e84:	2301      	movs	r3, #1
 8007e86:	4632      	mov	r2, r6
 8007e88:	4649      	mov	r1, r9
 8007e8a:	4640      	mov	r0, r8
 8007e8c:	47d0      	blx	sl
 8007e8e:	3001      	adds	r0, #1
 8007e90:	d09d      	beq.n	8007dce <_printf_i+0x15a>
 8007e92:	3501      	adds	r5, #1
 8007e94:	68e3      	ldr	r3, [r4, #12]
 8007e96:	9903      	ldr	r1, [sp, #12]
 8007e98:	1a5b      	subs	r3, r3, r1
 8007e9a:	42ab      	cmp	r3, r5
 8007e9c:	dcf2      	bgt.n	8007e84 <_printf_i+0x210>
 8007e9e:	e7eb      	b.n	8007e78 <_printf_i+0x204>
 8007ea0:	2500      	movs	r5, #0
 8007ea2:	f104 0619 	add.w	r6, r4, #25
 8007ea6:	e7f5      	b.n	8007e94 <_printf_i+0x220>
 8007ea8:	0800a39a 	.word	0x0800a39a
 8007eac:	0800a3ab 	.word	0x0800a3ab

08007eb0 <siprintf>:
 8007eb0:	b40e      	push	{r1, r2, r3}
 8007eb2:	b510      	push	{r4, lr}
 8007eb4:	b09d      	sub	sp, #116	@ 0x74
 8007eb6:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007eb8:	9002      	str	r0, [sp, #8]
 8007eba:	9006      	str	r0, [sp, #24]
 8007ebc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007ec0:	480a      	ldr	r0, [pc, #40]	@ (8007eec <siprintf+0x3c>)
 8007ec2:	9107      	str	r1, [sp, #28]
 8007ec4:	9104      	str	r1, [sp, #16]
 8007ec6:	490a      	ldr	r1, [pc, #40]	@ (8007ef0 <siprintf+0x40>)
 8007ec8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ecc:	9105      	str	r1, [sp, #20]
 8007ece:	2400      	movs	r4, #0
 8007ed0:	a902      	add	r1, sp, #8
 8007ed2:	6800      	ldr	r0, [r0, #0]
 8007ed4:	9301      	str	r3, [sp, #4]
 8007ed6:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007ed8:	f000 ffbe 	bl	8008e58 <_svfiprintf_r>
 8007edc:	9b02      	ldr	r3, [sp, #8]
 8007ede:	701c      	strb	r4, [r3, #0]
 8007ee0:	b01d      	add	sp, #116	@ 0x74
 8007ee2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ee6:	b003      	add	sp, #12
 8007ee8:	4770      	bx	lr
 8007eea:	bf00      	nop
 8007eec:	2000001c 	.word	0x2000001c
 8007ef0:	ffff0208 	.word	0xffff0208

08007ef4 <std>:
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	b510      	push	{r4, lr}
 8007ef8:	4604      	mov	r4, r0
 8007efa:	e9c0 3300 	strd	r3, r3, [r0]
 8007efe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f02:	6083      	str	r3, [r0, #8]
 8007f04:	8181      	strh	r1, [r0, #12]
 8007f06:	6643      	str	r3, [r0, #100]	@ 0x64
 8007f08:	81c2      	strh	r2, [r0, #14]
 8007f0a:	6183      	str	r3, [r0, #24]
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	2208      	movs	r2, #8
 8007f10:	305c      	adds	r0, #92	@ 0x5c
 8007f12:	f000 f8b1 	bl	8008078 <memset>
 8007f16:	4b0d      	ldr	r3, [pc, #52]	@ (8007f4c <std+0x58>)
 8007f18:	6263      	str	r3, [r4, #36]	@ 0x24
 8007f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8007f50 <std+0x5c>)
 8007f1c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8007f54 <std+0x60>)
 8007f20:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007f22:	4b0d      	ldr	r3, [pc, #52]	@ (8007f58 <std+0x64>)
 8007f24:	6323      	str	r3, [r4, #48]	@ 0x30
 8007f26:	4b0d      	ldr	r3, [pc, #52]	@ (8007f5c <std+0x68>)
 8007f28:	6224      	str	r4, [r4, #32]
 8007f2a:	429c      	cmp	r4, r3
 8007f2c:	d006      	beq.n	8007f3c <std+0x48>
 8007f2e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007f32:	4294      	cmp	r4, r2
 8007f34:	d002      	beq.n	8007f3c <std+0x48>
 8007f36:	33d0      	adds	r3, #208	@ 0xd0
 8007f38:	429c      	cmp	r4, r3
 8007f3a:	d105      	bne.n	8007f48 <std+0x54>
 8007f3c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f44:	f000 b8ca 	b.w	80080dc <__retarget_lock_init_recursive>
 8007f48:	bd10      	pop	{r4, pc}
 8007f4a:	bf00      	nop
 8007f4c:	08009a09 	.word	0x08009a09
 8007f50:	08009a2b 	.word	0x08009a2b
 8007f54:	08009a63 	.word	0x08009a63
 8007f58:	08009a87 	.word	0x08009a87
 8007f5c:	200003fc 	.word	0x200003fc

08007f60 <stdio_exit_handler>:
 8007f60:	4a02      	ldr	r2, [pc, #8]	@ (8007f6c <stdio_exit_handler+0xc>)
 8007f62:	4903      	ldr	r1, [pc, #12]	@ (8007f70 <stdio_exit_handler+0x10>)
 8007f64:	4803      	ldr	r0, [pc, #12]	@ (8007f74 <stdio_exit_handler+0x14>)
 8007f66:	f000 b869 	b.w	800803c <_fwalk_sglue>
 8007f6a:	bf00      	nop
 8007f6c:	20000010 	.word	0x20000010
 8007f70:	080092ad 	.word	0x080092ad
 8007f74:	20000020 	.word	0x20000020

08007f78 <cleanup_stdio>:
 8007f78:	6841      	ldr	r1, [r0, #4]
 8007f7a:	4b0c      	ldr	r3, [pc, #48]	@ (8007fac <cleanup_stdio+0x34>)
 8007f7c:	4299      	cmp	r1, r3
 8007f7e:	b510      	push	{r4, lr}
 8007f80:	4604      	mov	r4, r0
 8007f82:	d001      	beq.n	8007f88 <cleanup_stdio+0x10>
 8007f84:	f001 f992 	bl	80092ac <_fflush_r>
 8007f88:	68a1      	ldr	r1, [r4, #8]
 8007f8a:	4b09      	ldr	r3, [pc, #36]	@ (8007fb0 <cleanup_stdio+0x38>)
 8007f8c:	4299      	cmp	r1, r3
 8007f8e:	d002      	beq.n	8007f96 <cleanup_stdio+0x1e>
 8007f90:	4620      	mov	r0, r4
 8007f92:	f001 f98b 	bl	80092ac <_fflush_r>
 8007f96:	68e1      	ldr	r1, [r4, #12]
 8007f98:	4b06      	ldr	r3, [pc, #24]	@ (8007fb4 <cleanup_stdio+0x3c>)
 8007f9a:	4299      	cmp	r1, r3
 8007f9c:	d004      	beq.n	8007fa8 <cleanup_stdio+0x30>
 8007f9e:	4620      	mov	r0, r4
 8007fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fa4:	f001 b982 	b.w	80092ac <_fflush_r>
 8007fa8:	bd10      	pop	{r4, pc}
 8007faa:	bf00      	nop
 8007fac:	200003fc 	.word	0x200003fc
 8007fb0:	20000464 	.word	0x20000464
 8007fb4:	200004cc 	.word	0x200004cc

08007fb8 <global_stdio_init.part.0>:
 8007fb8:	b510      	push	{r4, lr}
 8007fba:	4b0b      	ldr	r3, [pc, #44]	@ (8007fe8 <global_stdio_init.part.0+0x30>)
 8007fbc:	4c0b      	ldr	r4, [pc, #44]	@ (8007fec <global_stdio_init.part.0+0x34>)
 8007fbe:	4a0c      	ldr	r2, [pc, #48]	@ (8007ff0 <global_stdio_init.part.0+0x38>)
 8007fc0:	601a      	str	r2, [r3, #0]
 8007fc2:	4620      	mov	r0, r4
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	2104      	movs	r1, #4
 8007fc8:	f7ff ff94 	bl	8007ef4 <std>
 8007fcc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	2109      	movs	r1, #9
 8007fd4:	f7ff ff8e 	bl	8007ef4 <std>
 8007fd8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007fdc:	2202      	movs	r2, #2
 8007fde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fe2:	2112      	movs	r1, #18
 8007fe4:	f7ff bf86 	b.w	8007ef4 <std>
 8007fe8:	20000534 	.word	0x20000534
 8007fec:	200003fc 	.word	0x200003fc
 8007ff0:	08007f61 	.word	0x08007f61

08007ff4 <__sfp_lock_acquire>:
 8007ff4:	4801      	ldr	r0, [pc, #4]	@ (8007ffc <__sfp_lock_acquire+0x8>)
 8007ff6:	f000 b872 	b.w	80080de <__retarget_lock_acquire_recursive>
 8007ffa:	bf00      	nop
 8007ffc:	20000539 	.word	0x20000539

08008000 <__sfp_lock_release>:
 8008000:	4801      	ldr	r0, [pc, #4]	@ (8008008 <__sfp_lock_release+0x8>)
 8008002:	f000 b86d 	b.w	80080e0 <__retarget_lock_release_recursive>
 8008006:	bf00      	nop
 8008008:	20000539 	.word	0x20000539

0800800c <__sinit>:
 800800c:	b510      	push	{r4, lr}
 800800e:	4604      	mov	r4, r0
 8008010:	f7ff fff0 	bl	8007ff4 <__sfp_lock_acquire>
 8008014:	6a23      	ldr	r3, [r4, #32]
 8008016:	b11b      	cbz	r3, 8008020 <__sinit+0x14>
 8008018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800801c:	f7ff bff0 	b.w	8008000 <__sfp_lock_release>
 8008020:	4b04      	ldr	r3, [pc, #16]	@ (8008034 <__sinit+0x28>)
 8008022:	6223      	str	r3, [r4, #32]
 8008024:	4b04      	ldr	r3, [pc, #16]	@ (8008038 <__sinit+0x2c>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d1f5      	bne.n	8008018 <__sinit+0xc>
 800802c:	f7ff ffc4 	bl	8007fb8 <global_stdio_init.part.0>
 8008030:	e7f2      	b.n	8008018 <__sinit+0xc>
 8008032:	bf00      	nop
 8008034:	08007f79 	.word	0x08007f79
 8008038:	20000534 	.word	0x20000534

0800803c <_fwalk_sglue>:
 800803c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008040:	4607      	mov	r7, r0
 8008042:	4688      	mov	r8, r1
 8008044:	4614      	mov	r4, r2
 8008046:	2600      	movs	r6, #0
 8008048:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800804c:	f1b9 0901 	subs.w	r9, r9, #1
 8008050:	d505      	bpl.n	800805e <_fwalk_sglue+0x22>
 8008052:	6824      	ldr	r4, [r4, #0]
 8008054:	2c00      	cmp	r4, #0
 8008056:	d1f7      	bne.n	8008048 <_fwalk_sglue+0xc>
 8008058:	4630      	mov	r0, r6
 800805a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800805e:	89ab      	ldrh	r3, [r5, #12]
 8008060:	2b01      	cmp	r3, #1
 8008062:	d907      	bls.n	8008074 <_fwalk_sglue+0x38>
 8008064:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008068:	3301      	adds	r3, #1
 800806a:	d003      	beq.n	8008074 <_fwalk_sglue+0x38>
 800806c:	4629      	mov	r1, r5
 800806e:	4638      	mov	r0, r7
 8008070:	47c0      	blx	r8
 8008072:	4306      	orrs	r6, r0
 8008074:	3568      	adds	r5, #104	@ 0x68
 8008076:	e7e9      	b.n	800804c <_fwalk_sglue+0x10>

08008078 <memset>:
 8008078:	4402      	add	r2, r0
 800807a:	4603      	mov	r3, r0
 800807c:	4293      	cmp	r3, r2
 800807e:	d100      	bne.n	8008082 <memset+0xa>
 8008080:	4770      	bx	lr
 8008082:	f803 1b01 	strb.w	r1, [r3], #1
 8008086:	e7f9      	b.n	800807c <memset+0x4>

08008088 <__errno>:
 8008088:	4b01      	ldr	r3, [pc, #4]	@ (8008090 <__errno+0x8>)
 800808a:	6818      	ldr	r0, [r3, #0]
 800808c:	4770      	bx	lr
 800808e:	bf00      	nop
 8008090:	2000001c 	.word	0x2000001c

08008094 <__libc_init_array>:
 8008094:	b570      	push	{r4, r5, r6, lr}
 8008096:	4d0d      	ldr	r5, [pc, #52]	@ (80080cc <__libc_init_array+0x38>)
 8008098:	4c0d      	ldr	r4, [pc, #52]	@ (80080d0 <__libc_init_array+0x3c>)
 800809a:	1b64      	subs	r4, r4, r5
 800809c:	10a4      	asrs	r4, r4, #2
 800809e:	2600      	movs	r6, #0
 80080a0:	42a6      	cmp	r6, r4
 80080a2:	d109      	bne.n	80080b8 <__libc_init_array+0x24>
 80080a4:	4d0b      	ldr	r5, [pc, #44]	@ (80080d4 <__libc_init_array+0x40>)
 80080a6:	4c0c      	ldr	r4, [pc, #48]	@ (80080d8 <__libc_init_array+0x44>)
 80080a8:	f002 f8f8 	bl	800a29c <_init>
 80080ac:	1b64      	subs	r4, r4, r5
 80080ae:	10a4      	asrs	r4, r4, #2
 80080b0:	2600      	movs	r6, #0
 80080b2:	42a6      	cmp	r6, r4
 80080b4:	d105      	bne.n	80080c2 <__libc_init_array+0x2e>
 80080b6:	bd70      	pop	{r4, r5, r6, pc}
 80080b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80080bc:	4798      	blx	r3
 80080be:	3601      	adds	r6, #1
 80080c0:	e7ee      	b.n	80080a0 <__libc_init_array+0xc>
 80080c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80080c6:	4798      	blx	r3
 80080c8:	3601      	adds	r6, #1
 80080ca:	e7f2      	b.n	80080b2 <__libc_init_array+0x1e>
 80080cc:	0800a704 	.word	0x0800a704
 80080d0:	0800a704 	.word	0x0800a704
 80080d4:	0800a704 	.word	0x0800a704
 80080d8:	0800a708 	.word	0x0800a708

080080dc <__retarget_lock_init_recursive>:
 80080dc:	4770      	bx	lr

080080de <__retarget_lock_acquire_recursive>:
 80080de:	4770      	bx	lr

080080e0 <__retarget_lock_release_recursive>:
 80080e0:	4770      	bx	lr
	...

080080e4 <_localeconv_r>:
 80080e4:	4800      	ldr	r0, [pc, #0]	@ (80080e8 <_localeconv_r+0x4>)
 80080e6:	4770      	bx	lr
 80080e8:	2000015c 	.word	0x2000015c

080080ec <quorem>:
 80080ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080f0:	6903      	ldr	r3, [r0, #16]
 80080f2:	690c      	ldr	r4, [r1, #16]
 80080f4:	42a3      	cmp	r3, r4
 80080f6:	4607      	mov	r7, r0
 80080f8:	db7e      	blt.n	80081f8 <quorem+0x10c>
 80080fa:	3c01      	subs	r4, #1
 80080fc:	f101 0814 	add.w	r8, r1, #20
 8008100:	00a3      	lsls	r3, r4, #2
 8008102:	f100 0514 	add.w	r5, r0, #20
 8008106:	9300      	str	r3, [sp, #0]
 8008108:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800810c:	9301      	str	r3, [sp, #4]
 800810e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008112:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008116:	3301      	adds	r3, #1
 8008118:	429a      	cmp	r2, r3
 800811a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800811e:	fbb2 f6f3 	udiv	r6, r2, r3
 8008122:	d32e      	bcc.n	8008182 <quorem+0x96>
 8008124:	f04f 0a00 	mov.w	sl, #0
 8008128:	46c4      	mov	ip, r8
 800812a:	46ae      	mov	lr, r5
 800812c:	46d3      	mov	fp, sl
 800812e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008132:	b298      	uxth	r0, r3
 8008134:	fb06 a000 	mla	r0, r6, r0, sl
 8008138:	0c02      	lsrs	r2, r0, #16
 800813a:	0c1b      	lsrs	r3, r3, #16
 800813c:	fb06 2303 	mla	r3, r6, r3, r2
 8008140:	f8de 2000 	ldr.w	r2, [lr]
 8008144:	b280      	uxth	r0, r0
 8008146:	b292      	uxth	r2, r2
 8008148:	1a12      	subs	r2, r2, r0
 800814a:	445a      	add	r2, fp
 800814c:	f8de 0000 	ldr.w	r0, [lr]
 8008150:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008154:	b29b      	uxth	r3, r3
 8008156:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800815a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800815e:	b292      	uxth	r2, r2
 8008160:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008164:	45e1      	cmp	r9, ip
 8008166:	f84e 2b04 	str.w	r2, [lr], #4
 800816a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800816e:	d2de      	bcs.n	800812e <quorem+0x42>
 8008170:	9b00      	ldr	r3, [sp, #0]
 8008172:	58eb      	ldr	r3, [r5, r3]
 8008174:	b92b      	cbnz	r3, 8008182 <quorem+0x96>
 8008176:	9b01      	ldr	r3, [sp, #4]
 8008178:	3b04      	subs	r3, #4
 800817a:	429d      	cmp	r5, r3
 800817c:	461a      	mov	r2, r3
 800817e:	d32f      	bcc.n	80081e0 <quorem+0xf4>
 8008180:	613c      	str	r4, [r7, #16]
 8008182:	4638      	mov	r0, r7
 8008184:	f001 fb38 	bl	80097f8 <__mcmp>
 8008188:	2800      	cmp	r0, #0
 800818a:	db25      	blt.n	80081d8 <quorem+0xec>
 800818c:	4629      	mov	r1, r5
 800818e:	2000      	movs	r0, #0
 8008190:	f858 2b04 	ldr.w	r2, [r8], #4
 8008194:	f8d1 c000 	ldr.w	ip, [r1]
 8008198:	fa1f fe82 	uxth.w	lr, r2
 800819c:	fa1f f38c 	uxth.w	r3, ip
 80081a0:	eba3 030e 	sub.w	r3, r3, lr
 80081a4:	4403      	add	r3, r0
 80081a6:	0c12      	lsrs	r2, r2, #16
 80081a8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80081ac:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081b6:	45c1      	cmp	r9, r8
 80081b8:	f841 3b04 	str.w	r3, [r1], #4
 80081bc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80081c0:	d2e6      	bcs.n	8008190 <quorem+0xa4>
 80081c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80081c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80081ca:	b922      	cbnz	r2, 80081d6 <quorem+0xea>
 80081cc:	3b04      	subs	r3, #4
 80081ce:	429d      	cmp	r5, r3
 80081d0:	461a      	mov	r2, r3
 80081d2:	d30b      	bcc.n	80081ec <quorem+0x100>
 80081d4:	613c      	str	r4, [r7, #16]
 80081d6:	3601      	adds	r6, #1
 80081d8:	4630      	mov	r0, r6
 80081da:	b003      	add	sp, #12
 80081dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081e0:	6812      	ldr	r2, [r2, #0]
 80081e2:	3b04      	subs	r3, #4
 80081e4:	2a00      	cmp	r2, #0
 80081e6:	d1cb      	bne.n	8008180 <quorem+0x94>
 80081e8:	3c01      	subs	r4, #1
 80081ea:	e7c6      	b.n	800817a <quorem+0x8e>
 80081ec:	6812      	ldr	r2, [r2, #0]
 80081ee:	3b04      	subs	r3, #4
 80081f0:	2a00      	cmp	r2, #0
 80081f2:	d1ef      	bne.n	80081d4 <quorem+0xe8>
 80081f4:	3c01      	subs	r4, #1
 80081f6:	e7ea      	b.n	80081ce <quorem+0xe2>
 80081f8:	2000      	movs	r0, #0
 80081fa:	e7ee      	b.n	80081da <quorem+0xee>
 80081fc:	0000      	movs	r0, r0
	...

08008200 <_dtoa_r>:
 8008200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008204:	69c7      	ldr	r7, [r0, #28]
 8008206:	b097      	sub	sp, #92	@ 0x5c
 8008208:	ed8d 0b04 	vstr	d0, [sp, #16]
 800820c:	ec55 4b10 	vmov	r4, r5, d0
 8008210:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008212:	9107      	str	r1, [sp, #28]
 8008214:	4681      	mov	r9, r0
 8008216:	920c      	str	r2, [sp, #48]	@ 0x30
 8008218:	9311      	str	r3, [sp, #68]	@ 0x44
 800821a:	b97f      	cbnz	r7, 800823c <_dtoa_r+0x3c>
 800821c:	2010      	movs	r0, #16
 800821e:	f000 ff17 	bl	8009050 <malloc>
 8008222:	4602      	mov	r2, r0
 8008224:	f8c9 001c 	str.w	r0, [r9, #28]
 8008228:	b920      	cbnz	r0, 8008234 <_dtoa_r+0x34>
 800822a:	4ba9      	ldr	r3, [pc, #676]	@ (80084d0 <_dtoa_r+0x2d0>)
 800822c:	21ef      	movs	r1, #239	@ 0xef
 800822e:	48a9      	ldr	r0, [pc, #676]	@ (80084d4 <_dtoa_r+0x2d4>)
 8008230:	f001 fcda 	bl	8009be8 <__assert_func>
 8008234:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008238:	6007      	str	r7, [r0, #0]
 800823a:	60c7      	str	r7, [r0, #12]
 800823c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008240:	6819      	ldr	r1, [r3, #0]
 8008242:	b159      	cbz	r1, 800825c <_dtoa_r+0x5c>
 8008244:	685a      	ldr	r2, [r3, #4]
 8008246:	604a      	str	r2, [r1, #4]
 8008248:	2301      	movs	r3, #1
 800824a:	4093      	lsls	r3, r2
 800824c:	608b      	str	r3, [r1, #8]
 800824e:	4648      	mov	r0, r9
 8008250:	f001 f8a0 	bl	8009394 <_Bfree>
 8008254:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008258:	2200      	movs	r2, #0
 800825a:	601a      	str	r2, [r3, #0]
 800825c:	1e2b      	subs	r3, r5, #0
 800825e:	bfb9      	ittee	lt
 8008260:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008264:	9305      	strlt	r3, [sp, #20]
 8008266:	2300      	movge	r3, #0
 8008268:	6033      	strge	r3, [r6, #0]
 800826a:	9f05      	ldr	r7, [sp, #20]
 800826c:	4b9a      	ldr	r3, [pc, #616]	@ (80084d8 <_dtoa_r+0x2d8>)
 800826e:	bfbc      	itt	lt
 8008270:	2201      	movlt	r2, #1
 8008272:	6032      	strlt	r2, [r6, #0]
 8008274:	43bb      	bics	r3, r7
 8008276:	d112      	bne.n	800829e <_dtoa_r+0x9e>
 8008278:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800827a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800827e:	6013      	str	r3, [r2, #0]
 8008280:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008284:	4323      	orrs	r3, r4
 8008286:	f000 855a 	beq.w	8008d3e <_dtoa_r+0xb3e>
 800828a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800828c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80084ec <_dtoa_r+0x2ec>
 8008290:	2b00      	cmp	r3, #0
 8008292:	f000 855c 	beq.w	8008d4e <_dtoa_r+0xb4e>
 8008296:	f10a 0303 	add.w	r3, sl, #3
 800829a:	f000 bd56 	b.w	8008d4a <_dtoa_r+0xb4a>
 800829e:	ed9d 7b04 	vldr	d7, [sp, #16]
 80082a2:	2200      	movs	r2, #0
 80082a4:	ec51 0b17 	vmov	r0, r1, d7
 80082a8:	2300      	movs	r3, #0
 80082aa:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80082ae:	f7f8 fc0b 	bl	8000ac8 <__aeabi_dcmpeq>
 80082b2:	4680      	mov	r8, r0
 80082b4:	b158      	cbz	r0, 80082ce <_dtoa_r+0xce>
 80082b6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80082b8:	2301      	movs	r3, #1
 80082ba:	6013      	str	r3, [r2, #0]
 80082bc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80082be:	b113      	cbz	r3, 80082c6 <_dtoa_r+0xc6>
 80082c0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80082c2:	4b86      	ldr	r3, [pc, #536]	@ (80084dc <_dtoa_r+0x2dc>)
 80082c4:	6013      	str	r3, [r2, #0]
 80082c6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80084f0 <_dtoa_r+0x2f0>
 80082ca:	f000 bd40 	b.w	8008d4e <_dtoa_r+0xb4e>
 80082ce:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80082d2:	aa14      	add	r2, sp, #80	@ 0x50
 80082d4:	a915      	add	r1, sp, #84	@ 0x54
 80082d6:	4648      	mov	r0, r9
 80082d8:	f001 fb3e 	bl	8009958 <__d2b>
 80082dc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80082e0:	9002      	str	r0, [sp, #8]
 80082e2:	2e00      	cmp	r6, #0
 80082e4:	d078      	beq.n	80083d8 <_dtoa_r+0x1d8>
 80082e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80082e8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80082ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80082f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80082f4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80082f8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80082fc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008300:	4619      	mov	r1, r3
 8008302:	2200      	movs	r2, #0
 8008304:	4b76      	ldr	r3, [pc, #472]	@ (80084e0 <_dtoa_r+0x2e0>)
 8008306:	f7f7 ffbf 	bl	8000288 <__aeabi_dsub>
 800830a:	a36b      	add	r3, pc, #428	@ (adr r3, 80084b8 <_dtoa_r+0x2b8>)
 800830c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008310:	f7f8 f972 	bl	80005f8 <__aeabi_dmul>
 8008314:	a36a      	add	r3, pc, #424	@ (adr r3, 80084c0 <_dtoa_r+0x2c0>)
 8008316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800831a:	f7f7 ffb7 	bl	800028c <__adddf3>
 800831e:	4604      	mov	r4, r0
 8008320:	4630      	mov	r0, r6
 8008322:	460d      	mov	r5, r1
 8008324:	f7f8 f8fe 	bl	8000524 <__aeabi_i2d>
 8008328:	a367      	add	r3, pc, #412	@ (adr r3, 80084c8 <_dtoa_r+0x2c8>)
 800832a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832e:	f7f8 f963 	bl	80005f8 <__aeabi_dmul>
 8008332:	4602      	mov	r2, r0
 8008334:	460b      	mov	r3, r1
 8008336:	4620      	mov	r0, r4
 8008338:	4629      	mov	r1, r5
 800833a:	f7f7 ffa7 	bl	800028c <__adddf3>
 800833e:	4604      	mov	r4, r0
 8008340:	460d      	mov	r5, r1
 8008342:	f7f8 fc09 	bl	8000b58 <__aeabi_d2iz>
 8008346:	2200      	movs	r2, #0
 8008348:	4607      	mov	r7, r0
 800834a:	2300      	movs	r3, #0
 800834c:	4620      	mov	r0, r4
 800834e:	4629      	mov	r1, r5
 8008350:	f7f8 fbc4 	bl	8000adc <__aeabi_dcmplt>
 8008354:	b140      	cbz	r0, 8008368 <_dtoa_r+0x168>
 8008356:	4638      	mov	r0, r7
 8008358:	f7f8 f8e4 	bl	8000524 <__aeabi_i2d>
 800835c:	4622      	mov	r2, r4
 800835e:	462b      	mov	r3, r5
 8008360:	f7f8 fbb2 	bl	8000ac8 <__aeabi_dcmpeq>
 8008364:	b900      	cbnz	r0, 8008368 <_dtoa_r+0x168>
 8008366:	3f01      	subs	r7, #1
 8008368:	2f16      	cmp	r7, #22
 800836a:	d852      	bhi.n	8008412 <_dtoa_r+0x212>
 800836c:	4b5d      	ldr	r3, [pc, #372]	@ (80084e4 <_dtoa_r+0x2e4>)
 800836e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008376:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800837a:	f7f8 fbaf 	bl	8000adc <__aeabi_dcmplt>
 800837e:	2800      	cmp	r0, #0
 8008380:	d049      	beq.n	8008416 <_dtoa_r+0x216>
 8008382:	3f01      	subs	r7, #1
 8008384:	2300      	movs	r3, #0
 8008386:	9310      	str	r3, [sp, #64]	@ 0x40
 8008388:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800838a:	1b9b      	subs	r3, r3, r6
 800838c:	1e5a      	subs	r2, r3, #1
 800838e:	bf45      	ittet	mi
 8008390:	f1c3 0301 	rsbmi	r3, r3, #1
 8008394:	9300      	strmi	r3, [sp, #0]
 8008396:	2300      	movpl	r3, #0
 8008398:	2300      	movmi	r3, #0
 800839a:	9206      	str	r2, [sp, #24]
 800839c:	bf54      	ite	pl
 800839e:	9300      	strpl	r3, [sp, #0]
 80083a0:	9306      	strmi	r3, [sp, #24]
 80083a2:	2f00      	cmp	r7, #0
 80083a4:	db39      	blt.n	800841a <_dtoa_r+0x21a>
 80083a6:	9b06      	ldr	r3, [sp, #24]
 80083a8:	970d      	str	r7, [sp, #52]	@ 0x34
 80083aa:	443b      	add	r3, r7
 80083ac:	9306      	str	r3, [sp, #24]
 80083ae:	2300      	movs	r3, #0
 80083b0:	9308      	str	r3, [sp, #32]
 80083b2:	9b07      	ldr	r3, [sp, #28]
 80083b4:	2b09      	cmp	r3, #9
 80083b6:	d863      	bhi.n	8008480 <_dtoa_r+0x280>
 80083b8:	2b05      	cmp	r3, #5
 80083ba:	bfc4      	itt	gt
 80083bc:	3b04      	subgt	r3, #4
 80083be:	9307      	strgt	r3, [sp, #28]
 80083c0:	9b07      	ldr	r3, [sp, #28]
 80083c2:	f1a3 0302 	sub.w	r3, r3, #2
 80083c6:	bfcc      	ite	gt
 80083c8:	2400      	movgt	r4, #0
 80083ca:	2401      	movle	r4, #1
 80083cc:	2b03      	cmp	r3, #3
 80083ce:	d863      	bhi.n	8008498 <_dtoa_r+0x298>
 80083d0:	e8df f003 	tbb	[pc, r3]
 80083d4:	2b375452 	.word	0x2b375452
 80083d8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80083dc:	441e      	add	r6, r3
 80083de:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80083e2:	2b20      	cmp	r3, #32
 80083e4:	bfc1      	itttt	gt
 80083e6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80083ea:	409f      	lslgt	r7, r3
 80083ec:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80083f0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80083f4:	bfd6      	itet	le
 80083f6:	f1c3 0320 	rsble	r3, r3, #32
 80083fa:	ea47 0003 	orrgt.w	r0, r7, r3
 80083fe:	fa04 f003 	lslle.w	r0, r4, r3
 8008402:	f7f8 f87f 	bl	8000504 <__aeabi_ui2d>
 8008406:	2201      	movs	r2, #1
 8008408:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800840c:	3e01      	subs	r6, #1
 800840e:	9212      	str	r2, [sp, #72]	@ 0x48
 8008410:	e776      	b.n	8008300 <_dtoa_r+0x100>
 8008412:	2301      	movs	r3, #1
 8008414:	e7b7      	b.n	8008386 <_dtoa_r+0x186>
 8008416:	9010      	str	r0, [sp, #64]	@ 0x40
 8008418:	e7b6      	b.n	8008388 <_dtoa_r+0x188>
 800841a:	9b00      	ldr	r3, [sp, #0]
 800841c:	1bdb      	subs	r3, r3, r7
 800841e:	9300      	str	r3, [sp, #0]
 8008420:	427b      	negs	r3, r7
 8008422:	9308      	str	r3, [sp, #32]
 8008424:	2300      	movs	r3, #0
 8008426:	930d      	str	r3, [sp, #52]	@ 0x34
 8008428:	e7c3      	b.n	80083b2 <_dtoa_r+0x1b2>
 800842a:	2301      	movs	r3, #1
 800842c:	9309      	str	r3, [sp, #36]	@ 0x24
 800842e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008430:	eb07 0b03 	add.w	fp, r7, r3
 8008434:	f10b 0301 	add.w	r3, fp, #1
 8008438:	2b01      	cmp	r3, #1
 800843a:	9303      	str	r3, [sp, #12]
 800843c:	bfb8      	it	lt
 800843e:	2301      	movlt	r3, #1
 8008440:	e006      	b.n	8008450 <_dtoa_r+0x250>
 8008442:	2301      	movs	r3, #1
 8008444:	9309      	str	r3, [sp, #36]	@ 0x24
 8008446:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008448:	2b00      	cmp	r3, #0
 800844a:	dd28      	ble.n	800849e <_dtoa_r+0x29e>
 800844c:	469b      	mov	fp, r3
 800844e:	9303      	str	r3, [sp, #12]
 8008450:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008454:	2100      	movs	r1, #0
 8008456:	2204      	movs	r2, #4
 8008458:	f102 0514 	add.w	r5, r2, #20
 800845c:	429d      	cmp	r5, r3
 800845e:	d926      	bls.n	80084ae <_dtoa_r+0x2ae>
 8008460:	6041      	str	r1, [r0, #4]
 8008462:	4648      	mov	r0, r9
 8008464:	f000 ff56 	bl	8009314 <_Balloc>
 8008468:	4682      	mov	sl, r0
 800846a:	2800      	cmp	r0, #0
 800846c:	d142      	bne.n	80084f4 <_dtoa_r+0x2f4>
 800846e:	4b1e      	ldr	r3, [pc, #120]	@ (80084e8 <_dtoa_r+0x2e8>)
 8008470:	4602      	mov	r2, r0
 8008472:	f240 11af 	movw	r1, #431	@ 0x1af
 8008476:	e6da      	b.n	800822e <_dtoa_r+0x2e>
 8008478:	2300      	movs	r3, #0
 800847a:	e7e3      	b.n	8008444 <_dtoa_r+0x244>
 800847c:	2300      	movs	r3, #0
 800847e:	e7d5      	b.n	800842c <_dtoa_r+0x22c>
 8008480:	2401      	movs	r4, #1
 8008482:	2300      	movs	r3, #0
 8008484:	9307      	str	r3, [sp, #28]
 8008486:	9409      	str	r4, [sp, #36]	@ 0x24
 8008488:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800848c:	2200      	movs	r2, #0
 800848e:	f8cd b00c 	str.w	fp, [sp, #12]
 8008492:	2312      	movs	r3, #18
 8008494:	920c      	str	r2, [sp, #48]	@ 0x30
 8008496:	e7db      	b.n	8008450 <_dtoa_r+0x250>
 8008498:	2301      	movs	r3, #1
 800849a:	9309      	str	r3, [sp, #36]	@ 0x24
 800849c:	e7f4      	b.n	8008488 <_dtoa_r+0x288>
 800849e:	f04f 0b01 	mov.w	fp, #1
 80084a2:	f8cd b00c 	str.w	fp, [sp, #12]
 80084a6:	465b      	mov	r3, fp
 80084a8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80084ac:	e7d0      	b.n	8008450 <_dtoa_r+0x250>
 80084ae:	3101      	adds	r1, #1
 80084b0:	0052      	lsls	r2, r2, #1
 80084b2:	e7d1      	b.n	8008458 <_dtoa_r+0x258>
 80084b4:	f3af 8000 	nop.w
 80084b8:	636f4361 	.word	0x636f4361
 80084bc:	3fd287a7 	.word	0x3fd287a7
 80084c0:	8b60c8b3 	.word	0x8b60c8b3
 80084c4:	3fc68a28 	.word	0x3fc68a28
 80084c8:	509f79fb 	.word	0x509f79fb
 80084cc:	3fd34413 	.word	0x3fd34413
 80084d0:	0800a3c9 	.word	0x0800a3c9
 80084d4:	0800a3e0 	.word	0x0800a3e0
 80084d8:	7ff00000 	.word	0x7ff00000
 80084dc:	0800a399 	.word	0x0800a399
 80084e0:	3ff80000 	.word	0x3ff80000
 80084e4:	0800a530 	.word	0x0800a530
 80084e8:	0800a438 	.word	0x0800a438
 80084ec:	0800a3c5 	.word	0x0800a3c5
 80084f0:	0800a398 	.word	0x0800a398
 80084f4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80084f8:	6018      	str	r0, [r3, #0]
 80084fa:	9b03      	ldr	r3, [sp, #12]
 80084fc:	2b0e      	cmp	r3, #14
 80084fe:	f200 80a1 	bhi.w	8008644 <_dtoa_r+0x444>
 8008502:	2c00      	cmp	r4, #0
 8008504:	f000 809e 	beq.w	8008644 <_dtoa_r+0x444>
 8008508:	2f00      	cmp	r7, #0
 800850a:	dd33      	ble.n	8008574 <_dtoa_r+0x374>
 800850c:	4b9c      	ldr	r3, [pc, #624]	@ (8008780 <_dtoa_r+0x580>)
 800850e:	f007 020f 	and.w	r2, r7, #15
 8008512:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008516:	ed93 7b00 	vldr	d7, [r3]
 800851a:	05f8      	lsls	r0, r7, #23
 800851c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008520:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008524:	d516      	bpl.n	8008554 <_dtoa_r+0x354>
 8008526:	4b97      	ldr	r3, [pc, #604]	@ (8008784 <_dtoa_r+0x584>)
 8008528:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800852c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008530:	f7f8 f98c 	bl	800084c <__aeabi_ddiv>
 8008534:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008538:	f004 040f 	and.w	r4, r4, #15
 800853c:	2603      	movs	r6, #3
 800853e:	4d91      	ldr	r5, [pc, #580]	@ (8008784 <_dtoa_r+0x584>)
 8008540:	b954      	cbnz	r4, 8008558 <_dtoa_r+0x358>
 8008542:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008546:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800854a:	f7f8 f97f 	bl	800084c <__aeabi_ddiv>
 800854e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008552:	e028      	b.n	80085a6 <_dtoa_r+0x3a6>
 8008554:	2602      	movs	r6, #2
 8008556:	e7f2      	b.n	800853e <_dtoa_r+0x33e>
 8008558:	07e1      	lsls	r1, r4, #31
 800855a:	d508      	bpl.n	800856e <_dtoa_r+0x36e>
 800855c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008560:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008564:	f7f8 f848 	bl	80005f8 <__aeabi_dmul>
 8008568:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800856c:	3601      	adds	r6, #1
 800856e:	1064      	asrs	r4, r4, #1
 8008570:	3508      	adds	r5, #8
 8008572:	e7e5      	b.n	8008540 <_dtoa_r+0x340>
 8008574:	f000 80af 	beq.w	80086d6 <_dtoa_r+0x4d6>
 8008578:	427c      	negs	r4, r7
 800857a:	4b81      	ldr	r3, [pc, #516]	@ (8008780 <_dtoa_r+0x580>)
 800857c:	4d81      	ldr	r5, [pc, #516]	@ (8008784 <_dtoa_r+0x584>)
 800857e:	f004 020f 	and.w	r2, r4, #15
 8008582:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800858a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800858e:	f7f8 f833 	bl	80005f8 <__aeabi_dmul>
 8008592:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008596:	1124      	asrs	r4, r4, #4
 8008598:	2300      	movs	r3, #0
 800859a:	2602      	movs	r6, #2
 800859c:	2c00      	cmp	r4, #0
 800859e:	f040 808f 	bne.w	80086c0 <_dtoa_r+0x4c0>
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d1d3      	bne.n	800854e <_dtoa_r+0x34e>
 80085a6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80085a8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	f000 8094 	beq.w	80086da <_dtoa_r+0x4da>
 80085b2:	4b75      	ldr	r3, [pc, #468]	@ (8008788 <_dtoa_r+0x588>)
 80085b4:	2200      	movs	r2, #0
 80085b6:	4620      	mov	r0, r4
 80085b8:	4629      	mov	r1, r5
 80085ba:	f7f8 fa8f 	bl	8000adc <__aeabi_dcmplt>
 80085be:	2800      	cmp	r0, #0
 80085c0:	f000 808b 	beq.w	80086da <_dtoa_r+0x4da>
 80085c4:	9b03      	ldr	r3, [sp, #12]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	f000 8087 	beq.w	80086da <_dtoa_r+0x4da>
 80085cc:	f1bb 0f00 	cmp.w	fp, #0
 80085d0:	dd34      	ble.n	800863c <_dtoa_r+0x43c>
 80085d2:	4620      	mov	r0, r4
 80085d4:	4b6d      	ldr	r3, [pc, #436]	@ (800878c <_dtoa_r+0x58c>)
 80085d6:	2200      	movs	r2, #0
 80085d8:	4629      	mov	r1, r5
 80085da:	f7f8 f80d 	bl	80005f8 <__aeabi_dmul>
 80085de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80085e2:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80085e6:	3601      	adds	r6, #1
 80085e8:	465c      	mov	r4, fp
 80085ea:	4630      	mov	r0, r6
 80085ec:	f7f7 ff9a 	bl	8000524 <__aeabi_i2d>
 80085f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085f4:	f7f8 f800 	bl	80005f8 <__aeabi_dmul>
 80085f8:	4b65      	ldr	r3, [pc, #404]	@ (8008790 <_dtoa_r+0x590>)
 80085fa:	2200      	movs	r2, #0
 80085fc:	f7f7 fe46 	bl	800028c <__adddf3>
 8008600:	4605      	mov	r5, r0
 8008602:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008606:	2c00      	cmp	r4, #0
 8008608:	d16a      	bne.n	80086e0 <_dtoa_r+0x4e0>
 800860a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800860e:	4b61      	ldr	r3, [pc, #388]	@ (8008794 <_dtoa_r+0x594>)
 8008610:	2200      	movs	r2, #0
 8008612:	f7f7 fe39 	bl	8000288 <__aeabi_dsub>
 8008616:	4602      	mov	r2, r0
 8008618:	460b      	mov	r3, r1
 800861a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800861e:	462a      	mov	r2, r5
 8008620:	4633      	mov	r3, r6
 8008622:	f7f8 fa79 	bl	8000b18 <__aeabi_dcmpgt>
 8008626:	2800      	cmp	r0, #0
 8008628:	f040 8298 	bne.w	8008b5c <_dtoa_r+0x95c>
 800862c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008630:	462a      	mov	r2, r5
 8008632:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008636:	f7f8 fa51 	bl	8000adc <__aeabi_dcmplt>
 800863a:	bb38      	cbnz	r0, 800868c <_dtoa_r+0x48c>
 800863c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008640:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008644:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008646:	2b00      	cmp	r3, #0
 8008648:	f2c0 8157 	blt.w	80088fa <_dtoa_r+0x6fa>
 800864c:	2f0e      	cmp	r7, #14
 800864e:	f300 8154 	bgt.w	80088fa <_dtoa_r+0x6fa>
 8008652:	4b4b      	ldr	r3, [pc, #300]	@ (8008780 <_dtoa_r+0x580>)
 8008654:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008658:	ed93 7b00 	vldr	d7, [r3]
 800865c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800865e:	2b00      	cmp	r3, #0
 8008660:	ed8d 7b00 	vstr	d7, [sp]
 8008664:	f280 80e5 	bge.w	8008832 <_dtoa_r+0x632>
 8008668:	9b03      	ldr	r3, [sp, #12]
 800866a:	2b00      	cmp	r3, #0
 800866c:	f300 80e1 	bgt.w	8008832 <_dtoa_r+0x632>
 8008670:	d10c      	bne.n	800868c <_dtoa_r+0x48c>
 8008672:	4b48      	ldr	r3, [pc, #288]	@ (8008794 <_dtoa_r+0x594>)
 8008674:	2200      	movs	r2, #0
 8008676:	ec51 0b17 	vmov	r0, r1, d7
 800867a:	f7f7 ffbd 	bl	80005f8 <__aeabi_dmul>
 800867e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008682:	f7f8 fa3f 	bl	8000b04 <__aeabi_dcmpge>
 8008686:	2800      	cmp	r0, #0
 8008688:	f000 8266 	beq.w	8008b58 <_dtoa_r+0x958>
 800868c:	2400      	movs	r4, #0
 800868e:	4625      	mov	r5, r4
 8008690:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008692:	4656      	mov	r6, sl
 8008694:	ea6f 0803 	mvn.w	r8, r3
 8008698:	2700      	movs	r7, #0
 800869a:	4621      	mov	r1, r4
 800869c:	4648      	mov	r0, r9
 800869e:	f000 fe79 	bl	8009394 <_Bfree>
 80086a2:	2d00      	cmp	r5, #0
 80086a4:	f000 80bd 	beq.w	8008822 <_dtoa_r+0x622>
 80086a8:	b12f      	cbz	r7, 80086b6 <_dtoa_r+0x4b6>
 80086aa:	42af      	cmp	r7, r5
 80086ac:	d003      	beq.n	80086b6 <_dtoa_r+0x4b6>
 80086ae:	4639      	mov	r1, r7
 80086b0:	4648      	mov	r0, r9
 80086b2:	f000 fe6f 	bl	8009394 <_Bfree>
 80086b6:	4629      	mov	r1, r5
 80086b8:	4648      	mov	r0, r9
 80086ba:	f000 fe6b 	bl	8009394 <_Bfree>
 80086be:	e0b0      	b.n	8008822 <_dtoa_r+0x622>
 80086c0:	07e2      	lsls	r2, r4, #31
 80086c2:	d505      	bpl.n	80086d0 <_dtoa_r+0x4d0>
 80086c4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80086c8:	f7f7 ff96 	bl	80005f8 <__aeabi_dmul>
 80086cc:	3601      	adds	r6, #1
 80086ce:	2301      	movs	r3, #1
 80086d0:	1064      	asrs	r4, r4, #1
 80086d2:	3508      	adds	r5, #8
 80086d4:	e762      	b.n	800859c <_dtoa_r+0x39c>
 80086d6:	2602      	movs	r6, #2
 80086d8:	e765      	b.n	80085a6 <_dtoa_r+0x3a6>
 80086da:	9c03      	ldr	r4, [sp, #12]
 80086dc:	46b8      	mov	r8, r7
 80086de:	e784      	b.n	80085ea <_dtoa_r+0x3ea>
 80086e0:	4b27      	ldr	r3, [pc, #156]	@ (8008780 <_dtoa_r+0x580>)
 80086e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80086e4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80086e8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80086ec:	4454      	add	r4, sl
 80086ee:	2900      	cmp	r1, #0
 80086f0:	d054      	beq.n	800879c <_dtoa_r+0x59c>
 80086f2:	4929      	ldr	r1, [pc, #164]	@ (8008798 <_dtoa_r+0x598>)
 80086f4:	2000      	movs	r0, #0
 80086f6:	f7f8 f8a9 	bl	800084c <__aeabi_ddiv>
 80086fa:	4633      	mov	r3, r6
 80086fc:	462a      	mov	r2, r5
 80086fe:	f7f7 fdc3 	bl	8000288 <__aeabi_dsub>
 8008702:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008706:	4656      	mov	r6, sl
 8008708:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800870c:	f7f8 fa24 	bl	8000b58 <__aeabi_d2iz>
 8008710:	4605      	mov	r5, r0
 8008712:	f7f7 ff07 	bl	8000524 <__aeabi_i2d>
 8008716:	4602      	mov	r2, r0
 8008718:	460b      	mov	r3, r1
 800871a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800871e:	f7f7 fdb3 	bl	8000288 <__aeabi_dsub>
 8008722:	3530      	adds	r5, #48	@ 0x30
 8008724:	4602      	mov	r2, r0
 8008726:	460b      	mov	r3, r1
 8008728:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800872c:	f806 5b01 	strb.w	r5, [r6], #1
 8008730:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008734:	f7f8 f9d2 	bl	8000adc <__aeabi_dcmplt>
 8008738:	2800      	cmp	r0, #0
 800873a:	d172      	bne.n	8008822 <_dtoa_r+0x622>
 800873c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008740:	4911      	ldr	r1, [pc, #68]	@ (8008788 <_dtoa_r+0x588>)
 8008742:	2000      	movs	r0, #0
 8008744:	f7f7 fda0 	bl	8000288 <__aeabi_dsub>
 8008748:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800874c:	f7f8 f9c6 	bl	8000adc <__aeabi_dcmplt>
 8008750:	2800      	cmp	r0, #0
 8008752:	f040 80b4 	bne.w	80088be <_dtoa_r+0x6be>
 8008756:	42a6      	cmp	r6, r4
 8008758:	f43f af70 	beq.w	800863c <_dtoa_r+0x43c>
 800875c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008760:	4b0a      	ldr	r3, [pc, #40]	@ (800878c <_dtoa_r+0x58c>)
 8008762:	2200      	movs	r2, #0
 8008764:	f7f7 ff48 	bl	80005f8 <__aeabi_dmul>
 8008768:	4b08      	ldr	r3, [pc, #32]	@ (800878c <_dtoa_r+0x58c>)
 800876a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800876e:	2200      	movs	r2, #0
 8008770:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008774:	f7f7 ff40 	bl	80005f8 <__aeabi_dmul>
 8008778:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800877c:	e7c4      	b.n	8008708 <_dtoa_r+0x508>
 800877e:	bf00      	nop
 8008780:	0800a530 	.word	0x0800a530
 8008784:	0800a508 	.word	0x0800a508
 8008788:	3ff00000 	.word	0x3ff00000
 800878c:	40240000 	.word	0x40240000
 8008790:	401c0000 	.word	0x401c0000
 8008794:	40140000 	.word	0x40140000
 8008798:	3fe00000 	.word	0x3fe00000
 800879c:	4631      	mov	r1, r6
 800879e:	4628      	mov	r0, r5
 80087a0:	f7f7 ff2a 	bl	80005f8 <__aeabi_dmul>
 80087a4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80087a8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80087aa:	4656      	mov	r6, sl
 80087ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087b0:	f7f8 f9d2 	bl	8000b58 <__aeabi_d2iz>
 80087b4:	4605      	mov	r5, r0
 80087b6:	f7f7 feb5 	bl	8000524 <__aeabi_i2d>
 80087ba:	4602      	mov	r2, r0
 80087bc:	460b      	mov	r3, r1
 80087be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087c2:	f7f7 fd61 	bl	8000288 <__aeabi_dsub>
 80087c6:	3530      	adds	r5, #48	@ 0x30
 80087c8:	f806 5b01 	strb.w	r5, [r6], #1
 80087cc:	4602      	mov	r2, r0
 80087ce:	460b      	mov	r3, r1
 80087d0:	42a6      	cmp	r6, r4
 80087d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80087d6:	f04f 0200 	mov.w	r2, #0
 80087da:	d124      	bne.n	8008826 <_dtoa_r+0x626>
 80087dc:	4baf      	ldr	r3, [pc, #700]	@ (8008a9c <_dtoa_r+0x89c>)
 80087de:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80087e2:	f7f7 fd53 	bl	800028c <__adddf3>
 80087e6:	4602      	mov	r2, r0
 80087e8:	460b      	mov	r3, r1
 80087ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087ee:	f7f8 f993 	bl	8000b18 <__aeabi_dcmpgt>
 80087f2:	2800      	cmp	r0, #0
 80087f4:	d163      	bne.n	80088be <_dtoa_r+0x6be>
 80087f6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80087fa:	49a8      	ldr	r1, [pc, #672]	@ (8008a9c <_dtoa_r+0x89c>)
 80087fc:	2000      	movs	r0, #0
 80087fe:	f7f7 fd43 	bl	8000288 <__aeabi_dsub>
 8008802:	4602      	mov	r2, r0
 8008804:	460b      	mov	r3, r1
 8008806:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800880a:	f7f8 f967 	bl	8000adc <__aeabi_dcmplt>
 800880e:	2800      	cmp	r0, #0
 8008810:	f43f af14 	beq.w	800863c <_dtoa_r+0x43c>
 8008814:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008816:	1e73      	subs	r3, r6, #1
 8008818:	9313      	str	r3, [sp, #76]	@ 0x4c
 800881a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800881e:	2b30      	cmp	r3, #48	@ 0x30
 8008820:	d0f8      	beq.n	8008814 <_dtoa_r+0x614>
 8008822:	4647      	mov	r7, r8
 8008824:	e03b      	b.n	800889e <_dtoa_r+0x69e>
 8008826:	4b9e      	ldr	r3, [pc, #632]	@ (8008aa0 <_dtoa_r+0x8a0>)
 8008828:	f7f7 fee6 	bl	80005f8 <__aeabi_dmul>
 800882c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008830:	e7bc      	b.n	80087ac <_dtoa_r+0x5ac>
 8008832:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008836:	4656      	mov	r6, sl
 8008838:	e9dd 2300 	ldrd	r2, r3, [sp]
 800883c:	4620      	mov	r0, r4
 800883e:	4629      	mov	r1, r5
 8008840:	f7f8 f804 	bl	800084c <__aeabi_ddiv>
 8008844:	f7f8 f988 	bl	8000b58 <__aeabi_d2iz>
 8008848:	4680      	mov	r8, r0
 800884a:	f7f7 fe6b 	bl	8000524 <__aeabi_i2d>
 800884e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008852:	f7f7 fed1 	bl	80005f8 <__aeabi_dmul>
 8008856:	4602      	mov	r2, r0
 8008858:	460b      	mov	r3, r1
 800885a:	4620      	mov	r0, r4
 800885c:	4629      	mov	r1, r5
 800885e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008862:	f7f7 fd11 	bl	8000288 <__aeabi_dsub>
 8008866:	f806 4b01 	strb.w	r4, [r6], #1
 800886a:	9d03      	ldr	r5, [sp, #12]
 800886c:	eba6 040a 	sub.w	r4, r6, sl
 8008870:	42a5      	cmp	r5, r4
 8008872:	4602      	mov	r2, r0
 8008874:	460b      	mov	r3, r1
 8008876:	d133      	bne.n	80088e0 <_dtoa_r+0x6e0>
 8008878:	f7f7 fd08 	bl	800028c <__adddf3>
 800887c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008880:	4604      	mov	r4, r0
 8008882:	460d      	mov	r5, r1
 8008884:	f7f8 f948 	bl	8000b18 <__aeabi_dcmpgt>
 8008888:	b9c0      	cbnz	r0, 80088bc <_dtoa_r+0x6bc>
 800888a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800888e:	4620      	mov	r0, r4
 8008890:	4629      	mov	r1, r5
 8008892:	f7f8 f919 	bl	8000ac8 <__aeabi_dcmpeq>
 8008896:	b110      	cbz	r0, 800889e <_dtoa_r+0x69e>
 8008898:	f018 0f01 	tst.w	r8, #1
 800889c:	d10e      	bne.n	80088bc <_dtoa_r+0x6bc>
 800889e:	9902      	ldr	r1, [sp, #8]
 80088a0:	4648      	mov	r0, r9
 80088a2:	f000 fd77 	bl	8009394 <_Bfree>
 80088a6:	2300      	movs	r3, #0
 80088a8:	7033      	strb	r3, [r6, #0]
 80088aa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80088ac:	3701      	adds	r7, #1
 80088ae:	601f      	str	r7, [r3, #0]
 80088b0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	f000 824b 	beq.w	8008d4e <_dtoa_r+0xb4e>
 80088b8:	601e      	str	r6, [r3, #0]
 80088ba:	e248      	b.n	8008d4e <_dtoa_r+0xb4e>
 80088bc:	46b8      	mov	r8, r7
 80088be:	4633      	mov	r3, r6
 80088c0:	461e      	mov	r6, r3
 80088c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80088c6:	2a39      	cmp	r2, #57	@ 0x39
 80088c8:	d106      	bne.n	80088d8 <_dtoa_r+0x6d8>
 80088ca:	459a      	cmp	sl, r3
 80088cc:	d1f8      	bne.n	80088c0 <_dtoa_r+0x6c0>
 80088ce:	2230      	movs	r2, #48	@ 0x30
 80088d0:	f108 0801 	add.w	r8, r8, #1
 80088d4:	f88a 2000 	strb.w	r2, [sl]
 80088d8:	781a      	ldrb	r2, [r3, #0]
 80088da:	3201      	adds	r2, #1
 80088dc:	701a      	strb	r2, [r3, #0]
 80088de:	e7a0      	b.n	8008822 <_dtoa_r+0x622>
 80088e0:	4b6f      	ldr	r3, [pc, #444]	@ (8008aa0 <_dtoa_r+0x8a0>)
 80088e2:	2200      	movs	r2, #0
 80088e4:	f7f7 fe88 	bl	80005f8 <__aeabi_dmul>
 80088e8:	2200      	movs	r2, #0
 80088ea:	2300      	movs	r3, #0
 80088ec:	4604      	mov	r4, r0
 80088ee:	460d      	mov	r5, r1
 80088f0:	f7f8 f8ea 	bl	8000ac8 <__aeabi_dcmpeq>
 80088f4:	2800      	cmp	r0, #0
 80088f6:	d09f      	beq.n	8008838 <_dtoa_r+0x638>
 80088f8:	e7d1      	b.n	800889e <_dtoa_r+0x69e>
 80088fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80088fc:	2a00      	cmp	r2, #0
 80088fe:	f000 80ea 	beq.w	8008ad6 <_dtoa_r+0x8d6>
 8008902:	9a07      	ldr	r2, [sp, #28]
 8008904:	2a01      	cmp	r2, #1
 8008906:	f300 80cd 	bgt.w	8008aa4 <_dtoa_r+0x8a4>
 800890a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800890c:	2a00      	cmp	r2, #0
 800890e:	f000 80c1 	beq.w	8008a94 <_dtoa_r+0x894>
 8008912:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008916:	9c08      	ldr	r4, [sp, #32]
 8008918:	9e00      	ldr	r6, [sp, #0]
 800891a:	9a00      	ldr	r2, [sp, #0]
 800891c:	441a      	add	r2, r3
 800891e:	9200      	str	r2, [sp, #0]
 8008920:	9a06      	ldr	r2, [sp, #24]
 8008922:	2101      	movs	r1, #1
 8008924:	441a      	add	r2, r3
 8008926:	4648      	mov	r0, r9
 8008928:	9206      	str	r2, [sp, #24]
 800892a:	f000 fde7 	bl	80094fc <__i2b>
 800892e:	4605      	mov	r5, r0
 8008930:	b166      	cbz	r6, 800894c <_dtoa_r+0x74c>
 8008932:	9b06      	ldr	r3, [sp, #24]
 8008934:	2b00      	cmp	r3, #0
 8008936:	dd09      	ble.n	800894c <_dtoa_r+0x74c>
 8008938:	42b3      	cmp	r3, r6
 800893a:	9a00      	ldr	r2, [sp, #0]
 800893c:	bfa8      	it	ge
 800893e:	4633      	movge	r3, r6
 8008940:	1ad2      	subs	r2, r2, r3
 8008942:	9200      	str	r2, [sp, #0]
 8008944:	9a06      	ldr	r2, [sp, #24]
 8008946:	1af6      	subs	r6, r6, r3
 8008948:	1ad3      	subs	r3, r2, r3
 800894a:	9306      	str	r3, [sp, #24]
 800894c:	9b08      	ldr	r3, [sp, #32]
 800894e:	b30b      	cbz	r3, 8008994 <_dtoa_r+0x794>
 8008950:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008952:	2b00      	cmp	r3, #0
 8008954:	f000 80c6 	beq.w	8008ae4 <_dtoa_r+0x8e4>
 8008958:	2c00      	cmp	r4, #0
 800895a:	f000 80c0 	beq.w	8008ade <_dtoa_r+0x8de>
 800895e:	4629      	mov	r1, r5
 8008960:	4622      	mov	r2, r4
 8008962:	4648      	mov	r0, r9
 8008964:	f000 fe82 	bl	800966c <__pow5mult>
 8008968:	9a02      	ldr	r2, [sp, #8]
 800896a:	4601      	mov	r1, r0
 800896c:	4605      	mov	r5, r0
 800896e:	4648      	mov	r0, r9
 8008970:	f000 fdda 	bl	8009528 <__multiply>
 8008974:	9902      	ldr	r1, [sp, #8]
 8008976:	4680      	mov	r8, r0
 8008978:	4648      	mov	r0, r9
 800897a:	f000 fd0b 	bl	8009394 <_Bfree>
 800897e:	9b08      	ldr	r3, [sp, #32]
 8008980:	1b1b      	subs	r3, r3, r4
 8008982:	9308      	str	r3, [sp, #32]
 8008984:	f000 80b1 	beq.w	8008aea <_dtoa_r+0x8ea>
 8008988:	9a08      	ldr	r2, [sp, #32]
 800898a:	4641      	mov	r1, r8
 800898c:	4648      	mov	r0, r9
 800898e:	f000 fe6d 	bl	800966c <__pow5mult>
 8008992:	9002      	str	r0, [sp, #8]
 8008994:	2101      	movs	r1, #1
 8008996:	4648      	mov	r0, r9
 8008998:	f000 fdb0 	bl	80094fc <__i2b>
 800899c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800899e:	4604      	mov	r4, r0
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	f000 81d8 	beq.w	8008d56 <_dtoa_r+0xb56>
 80089a6:	461a      	mov	r2, r3
 80089a8:	4601      	mov	r1, r0
 80089aa:	4648      	mov	r0, r9
 80089ac:	f000 fe5e 	bl	800966c <__pow5mult>
 80089b0:	9b07      	ldr	r3, [sp, #28]
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	4604      	mov	r4, r0
 80089b6:	f300 809f 	bgt.w	8008af8 <_dtoa_r+0x8f8>
 80089ba:	9b04      	ldr	r3, [sp, #16]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	f040 8097 	bne.w	8008af0 <_dtoa_r+0x8f0>
 80089c2:	9b05      	ldr	r3, [sp, #20]
 80089c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	f040 8093 	bne.w	8008af4 <_dtoa_r+0x8f4>
 80089ce:	9b05      	ldr	r3, [sp, #20]
 80089d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80089d4:	0d1b      	lsrs	r3, r3, #20
 80089d6:	051b      	lsls	r3, r3, #20
 80089d8:	b133      	cbz	r3, 80089e8 <_dtoa_r+0x7e8>
 80089da:	9b00      	ldr	r3, [sp, #0]
 80089dc:	3301      	adds	r3, #1
 80089de:	9300      	str	r3, [sp, #0]
 80089e0:	9b06      	ldr	r3, [sp, #24]
 80089e2:	3301      	adds	r3, #1
 80089e4:	9306      	str	r3, [sp, #24]
 80089e6:	2301      	movs	r3, #1
 80089e8:	9308      	str	r3, [sp, #32]
 80089ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	f000 81b8 	beq.w	8008d62 <_dtoa_r+0xb62>
 80089f2:	6923      	ldr	r3, [r4, #16]
 80089f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80089f8:	6918      	ldr	r0, [r3, #16]
 80089fa:	f000 fd33 	bl	8009464 <__hi0bits>
 80089fe:	f1c0 0020 	rsb	r0, r0, #32
 8008a02:	9b06      	ldr	r3, [sp, #24]
 8008a04:	4418      	add	r0, r3
 8008a06:	f010 001f 	ands.w	r0, r0, #31
 8008a0a:	f000 8082 	beq.w	8008b12 <_dtoa_r+0x912>
 8008a0e:	f1c0 0320 	rsb	r3, r0, #32
 8008a12:	2b04      	cmp	r3, #4
 8008a14:	dd73      	ble.n	8008afe <_dtoa_r+0x8fe>
 8008a16:	9b00      	ldr	r3, [sp, #0]
 8008a18:	f1c0 001c 	rsb	r0, r0, #28
 8008a1c:	4403      	add	r3, r0
 8008a1e:	9300      	str	r3, [sp, #0]
 8008a20:	9b06      	ldr	r3, [sp, #24]
 8008a22:	4403      	add	r3, r0
 8008a24:	4406      	add	r6, r0
 8008a26:	9306      	str	r3, [sp, #24]
 8008a28:	9b00      	ldr	r3, [sp, #0]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	dd05      	ble.n	8008a3a <_dtoa_r+0x83a>
 8008a2e:	9902      	ldr	r1, [sp, #8]
 8008a30:	461a      	mov	r2, r3
 8008a32:	4648      	mov	r0, r9
 8008a34:	f000 fe74 	bl	8009720 <__lshift>
 8008a38:	9002      	str	r0, [sp, #8]
 8008a3a:	9b06      	ldr	r3, [sp, #24]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	dd05      	ble.n	8008a4c <_dtoa_r+0x84c>
 8008a40:	4621      	mov	r1, r4
 8008a42:	461a      	mov	r2, r3
 8008a44:	4648      	mov	r0, r9
 8008a46:	f000 fe6b 	bl	8009720 <__lshift>
 8008a4a:	4604      	mov	r4, r0
 8008a4c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d061      	beq.n	8008b16 <_dtoa_r+0x916>
 8008a52:	9802      	ldr	r0, [sp, #8]
 8008a54:	4621      	mov	r1, r4
 8008a56:	f000 fecf 	bl	80097f8 <__mcmp>
 8008a5a:	2800      	cmp	r0, #0
 8008a5c:	da5b      	bge.n	8008b16 <_dtoa_r+0x916>
 8008a5e:	2300      	movs	r3, #0
 8008a60:	9902      	ldr	r1, [sp, #8]
 8008a62:	220a      	movs	r2, #10
 8008a64:	4648      	mov	r0, r9
 8008a66:	f000 fcb7 	bl	80093d8 <__multadd>
 8008a6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a6c:	9002      	str	r0, [sp, #8]
 8008a6e:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	f000 8177 	beq.w	8008d66 <_dtoa_r+0xb66>
 8008a78:	4629      	mov	r1, r5
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	220a      	movs	r2, #10
 8008a7e:	4648      	mov	r0, r9
 8008a80:	f000 fcaa 	bl	80093d8 <__multadd>
 8008a84:	f1bb 0f00 	cmp.w	fp, #0
 8008a88:	4605      	mov	r5, r0
 8008a8a:	dc6f      	bgt.n	8008b6c <_dtoa_r+0x96c>
 8008a8c:	9b07      	ldr	r3, [sp, #28]
 8008a8e:	2b02      	cmp	r3, #2
 8008a90:	dc49      	bgt.n	8008b26 <_dtoa_r+0x926>
 8008a92:	e06b      	b.n	8008b6c <_dtoa_r+0x96c>
 8008a94:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008a96:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008a9a:	e73c      	b.n	8008916 <_dtoa_r+0x716>
 8008a9c:	3fe00000 	.word	0x3fe00000
 8008aa0:	40240000 	.word	0x40240000
 8008aa4:	9b03      	ldr	r3, [sp, #12]
 8008aa6:	1e5c      	subs	r4, r3, #1
 8008aa8:	9b08      	ldr	r3, [sp, #32]
 8008aaa:	42a3      	cmp	r3, r4
 8008aac:	db09      	blt.n	8008ac2 <_dtoa_r+0x8c2>
 8008aae:	1b1c      	subs	r4, r3, r4
 8008ab0:	9b03      	ldr	r3, [sp, #12]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	f6bf af30 	bge.w	8008918 <_dtoa_r+0x718>
 8008ab8:	9b00      	ldr	r3, [sp, #0]
 8008aba:	9a03      	ldr	r2, [sp, #12]
 8008abc:	1a9e      	subs	r6, r3, r2
 8008abe:	2300      	movs	r3, #0
 8008ac0:	e72b      	b.n	800891a <_dtoa_r+0x71a>
 8008ac2:	9b08      	ldr	r3, [sp, #32]
 8008ac4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008ac6:	9408      	str	r4, [sp, #32]
 8008ac8:	1ae3      	subs	r3, r4, r3
 8008aca:	441a      	add	r2, r3
 8008acc:	9e00      	ldr	r6, [sp, #0]
 8008ace:	9b03      	ldr	r3, [sp, #12]
 8008ad0:	920d      	str	r2, [sp, #52]	@ 0x34
 8008ad2:	2400      	movs	r4, #0
 8008ad4:	e721      	b.n	800891a <_dtoa_r+0x71a>
 8008ad6:	9c08      	ldr	r4, [sp, #32]
 8008ad8:	9e00      	ldr	r6, [sp, #0]
 8008ada:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8008adc:	e728      	b.n	8008930 <_dtoa_r+0x730>
 8008ade:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008ae2:	e751      	b.n	8008988 <_dtoa_r+0x788>
 8008ae4:	9a08      	ldr	r2, [sp, #32]
 8008ae6:	9902      	ldr	r1, [sp, #8]
 8008ae8:	e750      	b.n	800898c <_dtoa_r+0x78c>
 8008aea:	f8cd 8008 	str.w	r8, [sp, #8]
 8008aee:	e751      	b.n	8008994 <_dtoa_r+0x794>
 8008af0:	2300      	movs	r3, #0
 8008af2:	e779      	b.n	80089e8 <_dtoa_r+0x7e8>
 8008af4:	9b04      	ldr	r3, [sp, #16]
 8008af6:	e777      	b.n	80089e8 <_dtoa_r+0x7e8>
 8008af8:	2300      	movs	r3, #0
 8008afa:	9308      	str	r3, [sp, #32]
 8008afc:	e779      	b.n	80089f2 <_dtoa_r+0x7f2>
 8008afe:	d093      	beq.n	8008a28 <_dtoa_r+0x828>
 8008b00:	9a00      	ldr	r2, [sp, #0]
 8008b02:	331c      	adds	r3, #28
 8008b04:	441a      	add	r2, r3
 8008b06:	9200      	str	r2, [sp, #0]
 8008b08:	9a06      	ldr	r2, [sp, #24]
 8008b0a:	441a      	add	r2, r3
 8008b0c:	441e      	add	r6, r3
 8008b0e:	9206      	str	r2, [sp, #24]
 8008b10:	e78a      	b.n	8008a28 <_dtoa_r+0x828>
 8008b12:	4603      	mov	r3, r0
 8008b14:	e7f4      	b.n	8008b00 <_dtoa_r+0x900>
 8008b16:	9b03      	ldr	r3, [sp, #12]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	46b8      	mov	r8, r7
 8008b1c:	dc20      	bgt.n	8008b60 <_dtoa_r+0x960>
 8008b1e:	469b      	mov	fp, r3
 8008b20:	9b07      	ldr	r3, [sp, #28]
 8008b22:	2b02      	cmp	r3, #2
 8008b24:	dd1e      	ble.n	8008b64 <_dtoa_r+0x964>
 8008b26:	f1bb 0f00 	cmp.w	fp, #0
 8008b2a:	f47f adb1 	bne.w	8008690 <_dtoa_r+0x490>
 8008b2e:	4621      	mov	r1, r4
 8008b30:	465b      	mov	r3, fp
 8008b32:	2205      	movs	r2, #5
 8008b34:	4648      	mov	r0, r9
 8008b36:	f000 fc4f 	bl	80093d8 <__multadd>
 8008b3a:	4601      	mov	r1, r0
 8008b3c:	4604      	mov	r4, r0
 8008b3e:	9802      	ldr	r0, [sp, #8]
 8008b40:	f000 fe5a 	bl	80097f8 <__mcmp>
 8008b44:	2800      	cmp	r0, #0
 8008b46:	f77f ada3 	ble.w	8008690 <_dtoa_r+0x490>
 8008b4a:	4656      	mov	r6, sl
 8008b4c:	2331      	movs	r3, #49	@ 0x31
 8008b4e:	f806 3b01 	strb.w	r3, [r6], #1
 8008b52:	f108 0801 	add.w	r8, r8, #1
 8008b56:	e59f      	b.n	8008698 <_dtoa_r+0x498>
 8008b58:	9c03      	ldr	r4, [sp, #12]
 8008b5a:	46b8      	mov	r8, r7
 8008b5c:	4625      	mov	r5, r4
 8008b5e:	e7f4      	b.n	8008b4a <_dtoa_r+0x94a>
 8008b60:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008b64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	f000 8101 	beq.w	8008d6e <_dtoa_r+0xb6e>
 8008b6c:	2e00      	cmp	r6, #0
 8008b6e:	dd05      	ble.n	8008b7c <_dtoa_r+0x97c>
 8008b70:	4629      	mov	r1, r5
 8008b72:	4632      	mov	r2, r6
 8008b74:	4648      	mov	r0, r9
 8008b76:	f000 fdd3 	bl	8009720 <__lshift>
 8008b7a:	4605      	mov	r5, r0
 8008b7c:	9b08      	ldr	r3, [sp, #32]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d05c      	beq.n	8008c3c <_dtoa_r+0xa3c>
 8008b82:	6869      	ldr	r1, [r5, #4]
 8008b84:	4648      	mov	r0, r9
 8008b86:	f000 fbc5 	bl	8009314 <_Balloc>
 8008b8a:	4606      	mov	r6, r0
 8008b8c:	b928      	cbnz	r0, 8008b9a <_dtoa_r+0x99a>
 8008b8e:	4b82      	ldr	r3, [pc, #520]	@ (8008d98 <_dtoa_r+0xb98>)
 8008b90:	4602      	mov	r2, r0
 8008b92:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008b96:	f7ff bb4a 	b.w	800822e <_dtoa_r+0x2e>
 8008b9a:	692a      	ldr	r2, [r5, #16]
 8008b9c:	3202      	adds	r2, #2
 8008b9e:	0092      	lsls	r2, r2, #2
 8008ba0:	f105 010c 	add.w	r1, r5, #12
 8008ba4:	300c      	adds	r0, #12
 8008ba6:	f001 f811 	bl	8009bcc <memcpy>
 8008baa:	2201      	movs	r2, #1
 8008bac:	4631      	mov	r1, r6
 8008bae:	4648      	mov	r0, r9
 8008bb0:	f000 fdb6 	bl	8009720 <__lshift>
 8008bb4:	f10a 0301 	add.w	r3, sl, #1
 8008bb8:	9300      	str	r3, [sp, #0]
 8008bba:	eb0a 030b 	add.w	r3, sl, fp
 8008bbe:	9308      	str	r3, [sp, #32]
 8008bc0:	9b04      	ldr	r3, [sp, #16]
 8008bc2:	f003 0301 	and.w	r3, r3, #1
 8008bc6:	462f      	mov	r7, r5
 8008bc8:	9306      	str	r3, [sp, #24]
 8008bca:	4605      	mov	r5, r0
 8008bcc:	9b00      	ldr	r3, [sp, #0]
 8008bce:	9802      	ldr	r0, [sp, #8]
 8008bd0:	4621      	mov	r1, r4
 8008bd2:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8008bd6:	f7ff fa89 	bl	80080ec <quorem>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	3330      	adds	r3, #48	@ 0x30
 8008bde:	9003      	str	r0, [sp, #12]
 8008be0:	4639      	mov	r1, r7
 8008be2:	9802      	ldr	r0, [sp, #8]
 8008be4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008be6:	f000 fe07 	bl	80097f8 <__mcmp>
 8008bea:	462a      	mov	r2, r5
 8008bec:	9004      	str	r0, [sp, #16]
 8008bee:	4621      	mov	r1, r4
 8008bf0:	4648      	mov	r0, r9
 8008bf2:	f000 fe1d 	bl	8009830 <__mdiff>
 8008bf6:	68c2      	ldr	r2, [r0, #12]
 8008bf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bfa:	4606      	mov	r6, r0
 8008bfc:	bb02      	cbnz	r2, 8008c40 <_dtoa_r+0xa40>
 8008bfe:	4601      	mov	r1, r0
 8008c00:	9802      	ldr	r0, [sp, #8]
 8008c02:	f000 fdf9 	bl	80097f8 <__mcmp>
 8008c06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c08:	4602      	mov	r2, r0
 8008c0a:	4631      	mov	r1, r6
 8008c0c:	4648      	mov	r0, r9
 8008c0e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008c10:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c12:	f000 fbbf 	bl	8009394 <_Bfree>
 8008c16:	9b07      	ldr	r3, [sp, #28]
 8008c18:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008c1a:	9e00      	ldr	r6, [sp, #0]
 8008c1c:	ea42 0103 	orr.w	r1, r2, r3
 8008c20:	9b06      	ldr	r3, [sp, #24]
 8008c22:	4319      	orrs	r1, r3
 8008c24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c26:	d10d      	bne.n	8008c44 <_dtoa_r+0xa44>
 8008c28:	2b39      	cmp	r3, #57	@ 0x39
 8008c2a:	d027      	beq.n	8008c7c <_dtoa_r+0xa7c>
 8008c2c:	9a04      	ldr	r2, [sp, #16]
 8008c2e:	2a00      	cmp	r2, #0
 8008c30:	dd01      	ble.n	8008c36 <_dtoa_r+0xa36>
 8008c32:	9b03      	ldr	r3, [sp, #12]
 8008c34:	3331      	adds	r3, #49	@ 0x31
 8008c36:	f88b 3000 	strb.w	r3, [fp]
 8008c3a:	e52e      	b.n	800869a <_dtoa_r+0x49a>
 8008c3c:	4628      	mov	r0, r5
 8008c3e:	e7b9      	b.n	8008bb4 <_dtoa_r+0x9b4>
 8008c40:	2201      	movs	r2, #1
 8008c42:	e7e2      	b.n	8008c0a <_dtoa_r+0xa0a>
 8008c44:	9904      	ldr	r1, [sp, #16]
 8008c46:	2900      	cmp	r1, #0
 8008c48:	db04      	blt.n	8008c54 <_dtoa_r+0xa54>
 8008c4a:	9807      	ldr	r0, [sp, #28]
 8008c4c:	4301      	orrs	r1, r0
 8008c4e:	9806      	ldr	r0, [sp, #24]
 8008c50:	4301      	orrs	r1, r0
 8008c52:	d120      	bne.n	8008c96 <_dtoa_r+0xa96>
 8008c54:	2a00      	cmp	r2, #0
 8008c56:	ddee      	ble.n	8008c36 <_dtoa_r+0xa36>
 8008c58:	9902      	ldr	r1, [sp, #8]
 8008c5a:	9300      	str	r3, [sp, #0]
 8008c5c:	2201      	movs	r2, #1
 8008c5e:	4648      	mov	r0, r9
 8008c60:	f000 fd5e 	bl	8009720 <__lshift>
 8008c64:	4621      	mov	r1, r4
 8008c66:	9002      	str	r0, [sp, #8]
 8008c68:	f000 fdc6 	bl	80097f8 <__mcmp>
 8008c6c:	2800      	cmp	r0, #0
 8008c6e:	9b00      	ldr	r3, [sp, #0]
 8008c70:	dc02      	bgt.n	8008c78 <_dtoa_r+0xa78>
 8008c72:	d1e0      	bne.n	8008c36 <_dtoa_r+0xa36>
 8008c74:	07da      	lsls	r2, r3, #31
 8008c76:	d5de      	bpl.n	8008c36 <_dtoa_r+0xa36>
 8008c78:	2b39      	cmp	r3, #57	@ 0x39
 8008c7a:	d1da      	bne.n	8008c32 <_dtoa_r+0xa32>
 8008c7c:	2339      	movs	r3, #57	@ 0x39
 8008c7e:	f88b 3000 	strb.w	r3, [fp]
 8008c82:	4633      	mov	r3, r6
 8008c84:	461e      	mov	r6, r3
 8008c86:	3b01      	subs	r3, #1
 8008c88:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008c8c:	2a39      	cmp	r2, #57	@ 0x39
 8008c8e:	d04e      	beq.n	8008d2e <_dtoa_r+0xb2e>
 8008c90:	3201      	adds	r2, #1
 8008c92:	701a      	strb	r2, [r3, #0]
 8008c94:	e501      	b.n	800869a <_dtoa_r+0x49a>
 8008c96:	2a00      	cmp	r2, #0
 8008c98:	dd03      	ble.n	8008ca2 <_dtoa_r+0xaa2>
 8008c9a:	2b39      	cmp	r3, #57	@ 0x39
 8008c9c:	d0ee      	beq.n	8008c7c <_dtoa_r+0xa7c>
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	e7c9      	b.n	8008c36 <_dtoa_r+0xa36>
 8008ca2:	9a00      	ldr	r2, [sp, #0]
 8008ca4:	9908      	ldr	r1, [sp, #32]
 8008ca6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008caa:	428a      	cmp	r2, r1
 8008cac:	d028      	beq.n	8008d00 <_dtoa_r+0xb00>
 8008cae:	9902      	ldr	r1, [sp, #8]
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	220a      	movs	r2, #10
 8008cb4:	4648      	mov	r0, r9
 8008cb6:	f000 fb8f 	bl	80093d8 <__multadd>
 8008cba:	42af      	cmp	r7, r5
 8008cbc:	9002      	str	r0, [sp, #8]
 8008cbe:	f04f 0300 	mov.w	r3, #0
 8008cc2:	f04f 020a 	mov.w	r2, #10
 8008cc6:	4639      	mov	r1, r7
 8008cc8:	4648      	mov	r0, r9
 8008cca:	d107      	bne.n	8008cdc <_dtoa_r+0xadc>
 8008ccc:	f000 fb84 	bl	80093d8 <__multadd>
 8008cd0:	4607      	mov	r7, r0
 8008cd2:	4605      	mov	r5, r0
 8008cd4:	9b00      	ldr	r3, [sp, #0]
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	9300      	str	r3, [sp, #0]
 8008cda:	e777      	b.n	8008bcc <_dtoa_r+0x9cc>
 8008cdc:	f000 fb7c 	bl	80093d8 <__multadd>
 8008ce0:	4629      	mov	r1, r5
 8008ce2:	4607      	mov	r7, r0
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	220a      	movs	r2, #10
 8008ce8:	4648      	mov	r0, r9
 8008cea:	f000 fb75 	bl	80093d8 <__multadd>
 8008cee:	4605      	mov	r5, r0
 8008cf0:	e7f0      	b.n	8008cd4 <_dtoa_r+0xad4>
 8008cf2:	f1bb 0f00 	cmp.w	fp, #0
 8008cf6:	bfcc      	ite	gt
 8008cf8:	465e      	movgt	r6, fp
 8008cfa:	2601      	movle	r6, #1
 8008cfc:	4456      	add	r6, sl
 8008cfe:	2700      	movs	r7, #0
 8008d00:	9902      	ldr	r1, [sp, #8]
 8008d02:	9300      	str	r3, [sp, #0]
 8008d04:	2201      	movs	r2, #1
 8008d06:	4648      	mov	r0, r9
 8008d08:	f000 fd0a 	bl	8009720 <__lshift>
 8008d0c:	4621      	mov	r1, r4
 8008d0e:	9002      	str	r0, [sp, #8]
 8008d10:	f000 fd72 	bl	80097f8 <__mcmp>
 8008d14:	2800      	cmp	r0, #0
 8008d16:	dcb4      	bgt.n	8008c82 <_dtoa_r+0xa82>
 8008d18:	d102      	bne.n	8008d20 <_dtoa_r+0xb20>
 8008d1a:	9b00      	ldr	r3, [sp, #0]
 8008d1c:	07db      	lsls	r3, r3, #31
 8008d1e:	d4b0      	bmi.n	8008c82 <_dtoa_r+0xa82>
 8008d20:	4633      	mov	r3, r6
 8008d22:	461e      	mov	r6, r3
 8008d24:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d28:	2a30      	cmp	r2, #48	@ 0x30
 8008d2a:	d0fa      	beq.n	8008d22 <_dtoa_r+0xb22>
 8008d2c:	e4b5      	b.n	800869a <_dtoa_r+0x49a>
 8008d2e:	459a      	cmp	sl, r3
 8008d30:	d1a8      	bne.n	8008c84 <_dtoa_r+0xa84>
 8008d32:	2331      	movs	r3, #49	@ 0x31
 8008d34:	f108 0801 	add.w	r8, r8, #1
 8008d38:	f88a 3000 	strb.w	r3, [sl]
 8008d3c:	e4ad      	b.n	800869a <_dtoa_r+0x49a>
 8008d3e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008d40:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008d9c <_dtoa_r+0xb9c>
 8008d44:	b11b      	cbz	r3, 8008d4e <_dtoa_r+0xb4e>
 8008d46:	f10a 0308 	add.w	r3, sl, #8
 8008d4a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008d4c:	6013      	str	r3, [r2, #0]
 8008d4e:	4650      	mov	r0, sl
 8008d50:	b017      	add	sp, #92	@ 0x5c
 8008d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d56:	9b07      	ldr	r3, [sp, #28]
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	f77f ae2e 	ble.w	80089ba <_dtoa_r+0x7ba>
 8008d5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008d60:	9308      	str	r3, [sp, #32]
 8008d62:	2001      	movs	r0, #1
 8008d64:	e64d      	b.n	8008a02 <_dtoa_r+0x802>
 8008d66:	f1bb 0f00 	cmp.w	fp, #0
 8008d6a:	f77f aed9 	ble.w	8008b20 <_dtoa_r+0x920>
 8008d6e:	4656      	mov	r6, sl
 8008d70:	9802      	ldr	r0, [sp, #8]
 8008d72:	4621      	mov	r1, r4
 8008d74:	f7ff f9ba 	bl	80080ec <quorem>
 8008d78:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008d7c:	f806 3b01 	strb.w	r3, [r6], #1
 8008d80:	eba6 020a 	sub.w	r2, r6, sl
 8008d84:	4593      	cmp	fp, r2
 8008d86:	ddb4      	ble.n	8008cf2 <_dtoa_r+0xaf2>
 8008d88:	9902      	ldr	r1, [sp, #8]
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	220a      	movs	r2, #10
 8008d8e:	4648      	mov	r0, r9
 8008d90:	f000 fb22 	bl	80093d8 <__multadd>
 8008d94:	9002      	str	r0, [sp, #8]
 8008d96:	e7eb      	b.n	8008d70 <_dtoa_r+0xb70>
 8008d98:	0800a438 	.word	0x0800a438
 8008d9c:	0800a3bc 	.word	0x0800a3bc

08008da0 <__ssputs_r>:
 8008da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008da4:	688e      	ldr	r6, [r1, #8]
 8008da6:	461f      	mov	r7, r3
 8008da8:	42be      	cmp	r6, r7
 8008daa:	680b      	ldr	r3, [r1, #0]
 8008dac:	4682      	mov	sl, r0
 8008dae:	460c      	mov	r4, r1
 8008db0:	4690      	mov	r8, r2
 8008db2:	d82d      	bhi.n	8008e10 <__ssputs_r+0x70>
 8008db4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008db8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008dbc:	d026      	beq.n	8008e0c <__ssputs_r+0x6c>
 8008dbe:	6965      	ldr	r5, [r4, #20]
 8008dc0:	6909      	ldr	r1, [r1, #16]
 8008dc2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008dc6:	eba3 0901 	sub.w	r9, r3, r1
 8008dca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008dce:	1c7b      	adds	r3, r7, #1
 8008dd0:	444b      	add	r3, r9
 8008dd2:	106d      	asrs	r5, r5, #1
 8008dd4:	429d      	cmp	r5, r3
 8008dd6:	bf38      	it	cc
 8008dd8:	461d      	movcc	r5, r3
 8008dda:	0553      	lsls	r3, r2, #21
 8008ddc:	d527      	bpl.n	8008e2e <__ssputs_r+0x8e>
 8008dde:	4629      	mov	r1, r5
 8008de0:	f000 f960 	bl	80090a4 <_malloc_r>
 8008de4:	4606      	mov	r6, r0
 8008de6:	b360      	cbz	r0, 8008e42 <__ssputs_r+0xa2>
 8008de8:	6921      	ldr	r1, [r4, #16]
 8008dea:	464a      	mov	r2, r9
 8008dec:	f000 feee 	bl	8009bcc <memcpy>
 8008df0:	89a3      	ldrh	r3, [r4, #12]
 8008df2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008df6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008dfa:	81a3      	strh	r3, [r4, #12]
 8008dfc:	6126      	str	r6, [r4, #16]
 8008dfe:	6165      	str	r5, [r4, #20]
 8008e00:	444e      	add	r6, r9
 8008e02:	eba5 0509 	sub.w	r5, r5, r9
 8008e06:	6026      	str	r6, [r4, #0]
 8008e08:	60a5      	str	r5, [r4, #8]
 8008e0a:	463e      	mov	r6, r7
 8008e0c:	42be      	cmp	r6, r7
 8008e0e:	d900      	bls.n	8008e12 <__ssputs_r+0x72>
 8008e10:	463e      	mov	r6, r7
 8008e12:	6820      	ldr	r0, [r4, #0]
 8008e14:	4632      	mov	r2, r6
 8008e16:	4641      	mov	r1, r8
 8008e18:	f000 fe67 	bl	8009aea <memmove>
 8008e1c:	68a3      	ldr	r3, [r4, #8]
 8008e1e:	1b9b      	subs	r3, r3, r6
 8008e20:	60a3      	str	r3, [r4, #8]
 8008e22:	6823      	ldr	r3, [r4, #0]
 8008e24:	4433      	add	r3, r6
 8008e26:	6023      	str	r3, [r4, #0]
 8008e28:	2000      	movs	r0, #0
 8008e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e2e:	462a      	mov	r2, r5
 8008e30:	f000 fe2d 	bl	8009a8e <_realloc_r>
 8008e34:	4606      	mov	r6, r0
 8008e36:	2800      	cmp	r0, #0
 8008e38:	d1e0      	bne.n	8008dfc <__ssputs_r+0x5c>
 8008e3a:	6921      	ldr	r1, [r4, #16]
 8008e3c:	4650      	mov	r0, sl
 8008e3e:	f000 ff05 	bl	8009c4c <_free_r>
 8008e42:	230c      	movs	r3, #12
 8008e44:	f8ca 3000 	str.w	r3, [sl]
 8008e48:	89a3      	ldrh	r3, [r4, #12]
 8008e4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e4e:	81a3      	strh	r3, [r4, #12]
 8008e50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008e54:	e7e9      	b.n	8008e2a <__ssputs_r+0x8a>
	...

08008e58 <_svfiprintf_r>:
 8008e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e5c:	4698      	mov	r8, r3
 8008e5e:	898b      	ldrh	r3, [r1, #12]
 8008e60:	061b      	lsls	r3, r3, #24
 8008e62:	b09d      	sub	sp, #116	@ 0x74
 8008e64:	4607      	mov	r7, r0
 8008e66:	460d      	mov	r5, r1
 8008e68:	4614      	mov	r4, r2
 8008e6a:	d510      	bpl.n	8008e8e <_svfiprintf_r+0x36>
 8008e6c:	690b      	ldr	r3, [r1, #16]
 8008e6e:	b973      	cbnz	r3, 8008e8e <_svfiprintf_r+0x36>
 8008e70:	2140      	movs	r1, #64	@ 0x40
 8008e72:	f000 f917 	bl	80090a4 <_malloc_r>
 8008e76:	6028      	str	r0, [r5, #0]
 8008e78:	6128      	str	r0, [r5, #16]
 8008e7a:	b930      	cbnz	r0, 8008e8a <_svfiprintf_r+0x32>
 8008e7c:	230c      	movs	r3, #12
 8008e7e:	603b      	str	r3, [r7, #0]
 8008e80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008e84:	b01d      	add	sp, #116	@ 0x74
 8008e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e8a:	2340      	movs	r3, #64	@ 0x40
 8008e8c:	616b      	str	r3, [r5, #20]
 8008e8e:	2300      	movs	r3, #0
 8008e90:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e92:	2320      	movs	r3, #32
 8008e94:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008e98:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e9c:	2330      	movs	r3, #48	@ 0x30
 8008e9e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800903c <_svfiprintf_r+0x1e4>
 8008ea2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008ea6:	f04f 0901 	mov.w	r9, #1
 8008eaa:	4623      	mov	r3, r4
 8008eac:	469a      	mov	sl, r3
 8008eae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008eb2:	b10a      	cbz	r2, 8008eb8 <_svfiprintf_r+0x60>
 8008eb4:	2a25      	cmp	r2, #37	@ 0x25
 8008eb6:	d1f9      	bne.n	8008eac <_svfiprintf_r+0x54>
 8008eb8:	ebba 0b04 	subs.w	fp, sl, r4
 8008ebc:	d00b      	beq.n	8008ed6 <_svfiprintf_r+0x7e>
 8008ebe:	465b      	mov	r3, fp
 8008ec0:	4622      	mov	r2, r4
 8008ec2:	4629      	mov	r1, r5
 8008ec4:	4638      	mov	r0, r7
 8008ec6:	f7ff ff6b 	bl	8008da0 <__ssputs_r>
 8008eca:	3001      	adds	r0, #1
 8008ecc:	f000 80a7 	beq.w	800901e <_svfiprintf_r+0x1c6>
 8008ed0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ed2:	445a      	add	r2, fp
 8008ed4:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ed6:	f89a 3000 	ldrb.w	r3, [sl]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	f000 809f 	beq.w	800901e <_svfiprintf_r+0x1c6>
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008ee6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008eea:	f10a 0a01 	add.w	sl, sl, #1
 8008eee:	9304      	str	r3, [sp, #16]
 8008ef0:	9307      	str	r3, [sp, #28]
 8008ef2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008ef6:	931a      	str	r3, [sp, #104]	@ 0x68
 8008ef8:	4654      	mov	r4, sl
 8008efa:	2205      	movs	r2, #5
 8008efc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f00:	484e      	ldr	r0, [pc, #312]	@ (800903c <_svfiprintf_r+0x1e4>)
 8008f02:	f7f7 f965 	bl	80001d0 <memchr>
 8008f06:	9a04      	ldr	r2, [sp, #16]
 8008f08:	b9d8      	cbnz	r0, 8008f42 <_svfiprintf_r+0xea>
 8008f0a:	06d0      	lsls	r0, r2, #27
 8008f0c:	bf44      	itt	mi
 8008f0e:	2320      	movmi	r3, #32
 8008f10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f14:	0711      	lsls	r1, r2, #28
 8008f16:	bf44      	itt	mi
 8008f18:	232b      	movmi	r3, #43	@ 0x2b
 8008f1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f1e:	f89a 3000 	ldrb.w	r3, [sl]
 8008f22:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f24:	d015      	beq.n	8008f52 <_svfiprintf_r+0xfa>
 8008f26:	9a07      	ldr	r2, [sp, #28]
 8008f28:	4654      	mov	r4, sl
 8008f2a:	2000      	movs	r0, #0
 8008f2c:	f04f 0c0a 	mov.w	ip, #10
 8008f30:	4621      	mov	r1, r4
 8008f32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f36:	3b30      	subs	r3, #48	@ 0x30
 8008f38:	2b09      	cmp	r3, #9
 8008f3a:	d94b      	bls.n	8008fd4 <_svfiprintf_r+0x17c>
 8008f3c:	b1b0      	cbz	r0, 8008f6c <_svfiprintf_r+0x114>
 8008f3e:	9207      	str	r2, [sp, #28]
 8008f40:	e014      	b.n	8008f6c <_svfiprintf_r+0x114>
 8008f42:	eba0 0308 	sub.w	r3, r0, r8
 8008f46:	fa09 f303 	lsl.w	r3, r9, r3
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	9304      	str	r3, [sp, #16]
 8008f4e:	46a2      	mov	sl, r4
 8008f50:	e7d2      	b.n	8008ef8 <_svfiprintf_r+0xa0>
 8008f52:	9b03      	ldr	r3, [sp, #12]
 8008f54:	1d19      	adds	r1, r3, #4
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	9103      	str	r1, [sp, #12]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	bfbb      	ittet	lt
 8008f5e:	425b      	neglt	r3, r3
 8008f60:	f042 0202 	orrlt.w	r2, r2, #2
 8008f64:	9307      	strge	r3, [sp, #28]
 8008f66:	9307      	strlt	r3, [sp, #28]
 8008f68:	bfb8      	it	lt
 8008f6a:	9204      	strlt	r2, [sp, #16]
 8008f6c:	7823      	ldrb	r3, [r4, #0]
 8008f6e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008f70:	d10a      	bne.n	8008f88 <_svfiprintf_r+0x130>
 8008f72:	7863      	ldrb	r3, [r4, #1]
 8008f74:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f76:	d132      	bne.n	8008fde <_svfiprintf_r+0x186>
 8008f78:	9b03      	ldr	r3, [sp, #12]
 8008f7a:	1d1a      	adds	r2, r3, #4
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	9203      	str	r2, [sp, #12]
 8008f80:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008f84:	3402      	adds	r4, #2
 8008f86:	9305      	str	r3, [sp, #20]
 8008f88:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800904c <_svfiprintf_r+0x1f4>
 8008f8c:	7821      	ldrb	r1, [r4, #0]
 8008f8e:	2203      	movs	r2, #3
 8008f90:	4650      	mov	r0, sl
 8008f92:	f7f7 f91d 	bl	80001d0 <memchr>
 8008f96:	b138      	cbz	r0, 8008fa8 <_svfiprintf_r+0x150>
 8008f98:	9b04      	ldr	r3, [sp, #16]
 8008f9a:	eba0 000a 	sub.w	r0, r0, sl
 8008f9e:	2240      	movs	r2, #64	@ 0x40
 8008fa0:	4082      	lsls	r2, r0
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	3401      	adds	r4, #1
 8008fa6:	9304      	str	r3, [sp, #16]
 8008fa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fac:	4824      	ldr	r0, [pc, #144]	@ (8009040 <_svfiprintf_r+0x1e8>)
 8008fae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008fb2:	2206      	movs	r2, #6
 8008fb4:	f7f7 f90c 	bl	80001d0 <memchr>
 8008fb8:	2800      	cmp	r0, #0
 8008fba:	d036      	beq.n	800902a <_svfiprintf_r+0x1d2>
 8008fbc:	4b21      	ldr	r3, [pc, #132]	@ (8009044 <_svfiprintf_r+0x1ec>)
 8008fbe:	bb1b      	cbnz	r3, 8009008 <_svfiprintf_r+0x1b0>
 8008fc0:	9b03      	ldr	r3, [sp, #12]
 8008fc2:	3307      	adds	r3, #7
 8008fc4:	f023 0307 	bic.w	r3, r3, #7
 8008fc8:	3308      	adds	r3, #8
 8008fca:	9303      	str	r3, [sp, #12]
 8008fcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fce:	4433      	add	r3, r6
 8008fd0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fd2:	e76a      	b.n	8008eaa <_svfiprintf_r+0x52>
 8008fd4:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fd8:	460c      	mov	r4, r1
 8008fda:	2001      	movs	r0, #1
 8008fdc:	e7a8      	b.n	8008f30 <_svfiprintf_r+0xd8>
 8008fde:	2300      	movs	r3, #0
 8008fe0:	3401      	adds	r4, #1
 8008fe2:	9305      	str	r3, [sp, #20]
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	f04f 0c0a 	mov.w	ip, #10
 8008fea:	4620      	mov	r0, r4
 8008fec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ff0:	3a30      	subs	r2, #48	@ 0x30
 8008ff2:	2a09      	cmp	r2, #9
 8008ff4:	d903      	bls.n	8008ffe <_svfiprintf_r+0x1a6>
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d0c6      	beq.n	8008f88 <_svfiprintf_r+0x130>
 8008ffa:	9105      	str	r1, [sp, #20]
 8008ffc:	e7c4      	b.n	8008f88 <_svfiprintf_r+0x130>
 8008ffe:	fb0c 2101 	mla	r1, ip, r1, r2
 8009002:	4604      	mov	r4, r0
 8009004:	2301      	movs	r3, #1
 8009006:	e7f0      	b.n	8008fea <_svfiprintf_r+0x192>
 8009008:	ab03      	add	r3, sp, #12
 800900a:	9300      	str	r3, [sp, #0]
 800900c:	462a      	mov	r2, r5
 800900e:	4b0e      	ldr	r3, [pc, #56]	@ (8009048 <_svfiprintf_r+0x1f0>)
 8009010:	a904      	add	r1, sp, #16
 8009012:	4638      	mov	r0, r7
 8009014:	f7fe fb96 	bl	8007744 <_printf_float>
 8009018:	1c42      	adds	r2, r0, #1
 800901a:	4606      	mov	r6, r0
 800901c:	d1d6      	bne.n	8008fcc <_svfiprintf_r+0x174>
 800901e:	89ab      	ldrh	r3, [r5, #12]
 8009020:	065b      	lsls	r3, r3, #25
 8009022:	f53f af2d 	bmi.w	8008e80 <_svfiprintf_r+0x28>
 8009026:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009028:	e72c      	b.n	8008e84 <_svfiprintf_r+0x2c>
 800902a:	ab03      	add	r3, sp, #12
 800902c:	9300      	str	r3, [sp, #0]
 800902e:	462a      	mov	r2, r5
 8009030:	4b05      	ldr	r3, [pc, #20]	@ (8009048 <_svfiprintf_r+0x1f0>)
 8009032:	a904      	add	r1, sp, #16
 8009034:	4638      	mov	r0, r7
 8009036:	f7fe fe1d 	bl	8007c74 <_printf_i>
 800903a:	e7ed      	b.n	8009018 <_svfiprintf_r+0x1c0>
 800903c:	0800a449 	.word	0x0800a449
 8009040:	0800a453 	.word	0x0800a453
 8009044:	08007745 	.word	0x08007745
 8009048:	08008da1 	.word	0x08008da1
 800904c:	0800a44f 	.word	0x0800a44f

08009050 <malloc>:
 8009050:	4b02      	ldr	r3, [pc, #8]	@ (800905c <malloc+0xc>)
 8009052:	4601      	mov	r1, r0
 8009054:	6818      	ldr	r0, [r3, #0]
 8009056:	f000 b825 	b.w	80090a4 <_malloc_r>
 800905a:	bf00      	nop
 800905c:	2000001c 	.word	0x2000001c

08009060 <sbrk_aligned>:
 8009060:	b570      	push	{r4, r5, r6, lr}
 8009062:	4e0f      	ldr	r6, [pc, #60]	@ (80090a0 <sbrk_aligned+0x40>)
 8009064:	460c      	mov	r4, r1
 8009066:	6831      	ldr	r1, [r6, #0]
 8009068:	4605      	mov	r5, r0
 800906a:	b911      	cbnz	r1, 8009072 <sbrk_aligned+0x12>
 800906c:	f000 fd7c 	bl	8009b68 <_sbrk_r>
 8009070:	6030      	str	r0, [r6, #0]
 8009072:	4621      	mov	r1, r4
 8009074:	4628      	mov	r0, r5
 8009076:	f000 fd77 	bl	8009b68 <_sbrk_r>
 800907a:	1c43      	adds	r3, r0, #1
 800907c:	d103      	bne.n	8009086 <sbrk_aligned+0x26>
 800907e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009082:	4620      	mov	r0, r4
 8009084:	bd70      	pop	{r4, r5, r6, pc}
 8009086:	1cc4      	adds	r4, r0, #3
 8009088:	f024 0403 	bic.w	r4, r4, #3
 800908c:	42a0      	cmp	r0, r4
 800908e:	d0f8      	beq.n	8009082 <sbrk_aligned+0x22>
 8009090:	1a21      	subs	r1, r4, r0
 8009092:	4628      	mov	r0, r5
 8009094:	f000 fd68 	bl	8009b68 <_sbrk_r>
 8009098:	3001      	adds	r0, #1
 800909a:	d1f2      	bne.n	8009082 <sbrk_aligned+0x22>
 800909c:	e7ef      	b.n	800907e <sbrk_aligned+0x1e>
 800909e:	bf00      	nop
 80090a0:	2000053c 	.word	0x2000053c

080090a4 <_malloc_r>:
 80090a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090a8:	1ccd      	adds	r5, r1, #3
 80090aa:	f025 0503 	bic.w	r5, r5, #3
 80090ae:	3508      	adds	r5, #8
 80090b0:	2d0c      	cmp	r5, #12
 80090b2:	bf38      	it	cc
 80090b4:	250c      	movcc	r5, #12
 80090b6:	2d00      	cmp	r5, #0
 80090b8:	4606      	mov	r6, r0
 80090ba:	db01      	blt.n	80090c0 <_malloc_r+0x1c>
 80090bc:	42a9      	cmp	r1, r5
 80090be:	d904      	bls.n	80090ca <_malloc_r+0x26>
 80090c0:	230c      	movs	r3, #12
 80090c2:	6033      	str	r3, [r6, #0]
 80090c4:	2000      	movs	r0, #0
 80090c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80091a0 <_malloc_r+0xfc>
 80090ce:	f000 f915 	bl	80092fc <__malloc_lock>
 80090d2:	f8d8 3000 	ldr.w	r3, [r8]
 80090d6:	461c      	mov	r4, r3
 80090d8:	bb44      	cbnz	r4, 800912c <_malloc_r+0x88>
 80090da:	4629      	mov	r1, r5
 80090dc:	4630      	mov	r0, r6
 80090de:	f7ff ffbf 	bl	8009060 <sbrk_aligned>
 80090e2:	1c43      	adds	r3, r0, #1
 80090e4:	4604      	mov	r4, r0
 80090e6:	d158      	bne.n	800919a <_malloc_r+0xf6>
 80090e8:	f8d8 4000 	ldr.w	r4, [r8]
 80090ec:	4627      	mov	r7, r4
 80090ee:	2f00      	cmp	r7, #0
 80090f0:	d143      	bne.n	800917a <_malloc_r+0xd6>
 80090f2:	2c00      	cmp	r4, #0
 80090f4:	d04b      	beq.n	800918e <_malloc_r+0xea>
 80090f6:	6823      	ldr	r3, [r4, #0]
 80090f8:	4639      	mov	r1, r7
 80090fa:	4630      	mov	r0, r6
 80090fc:	eb04 0903 	add.w	r9, r4, r3
 8009100:	f000 fd32 	bl	8009b68 <_sbrk_r>
 8009104:	4581      	cmp	r9, r0
 8009106:	d142      	bne.n	800918e <_malloc_r+0xea>
 8009108:	6821      	ldr	r1, [r4, #0]
 800910a:	1a6d      	subs	r5, r5, r1
 800910c:	4629      	mov	r1, r5
 800910e:	4630      	mov	r0, r6
 8009110:	f7ff ffa6 	bl	8009060 <sbrk_aligned>
 8009114:	3001      	adds	r0, #1
 8009116:	d03a      	beq.n	800918e <_malloc_r+0xea>
 8009118:	6823      	ldr	r3, [r4, #0]
 800911a:	442b      	add	r3, r5
 800911c:	6023      	str	r3, [r4, #0]
 800911e:	f8d8 3000 	ldr.w	r3, [r8]
 8009122:	685a      	ldr	r2, [r3, #4]
 8009124:	bb62      	cbnz	r2, 8009180 <_malloc_r+0xdc>
 8009126:	f8c8 7000 	str.w	r7, [r8]
 800912a:	e00f      	b.n	800914c <_malloc_r+0xa8>
 800912c:	6822      	ldr	r2, [r4, #0]
 800912e:	1b52      	subs	r2, r2, r5
 8009130:	d420      	bmi.n	8009174 <_malloc_r+0xd0>
 8009132:	2a0b      	cmp	r2, #11
 8009134:	d917      	bls.n	8009166 <_malloc_r+0xc2>
 8009136:	1961      	adds	r1, r4, r5
 8009138:	42a3      	cmp	r3, r4
 800913a:	6025      	str	r5, [r4, #0]
 800913c:	bf18      	it	ne
 800913e:	6059      	strne	r1, [r3, #4]
 8009140:	6863      	ldr	r3, [r4, #4]
 8009142:	bf08      	it	eq
 8009144:	f8c8 1000 	streq.w	r1, [r8]
 8009148:	5162      	str	r2, [r4, r5]
 800914a:	604b      	str	r3, [r1, #4]
 800914c:	4630      	mov	r0, r6
 800914e:	f000 f8db 	bl	8009308 <__malloc_unlock>
 8009152:	f104 000b 	add.w	r0, r4, #11
 8009156:	1d23      	adds	r3, r4, #4
 8009158:	f020 0007 	bic.w	r0, r0, #7
 800915c:	1ac2      	subs	r2, r0, r3
 800915e:	bf1c      	itt	ne
 8009160:	1a1b      	subne	r3, r3, r0
 8009162:	50a3      	strne	r3, [r4, r2]
 8009164:	e7af      	b.n	80090c6 <_malloc_r+0x22>
 8009166:	6862      	ldr	r2, [r4, #4]
 8009168:	42a3      	cmp	r3, r4
 800916a:	bf0c      	ite	eq
 800916c:	f8c8 2000 	streq.w	r2, [r8]
 8009170:	605a      	strne	r2, [r3, #4]
 8009172:	e7eb      	b.n	800914c <_malloc_r+0xa8>
 8009174:	4623      	mov	r3, r4
 8009176:	6864      	ldr	r4, [r4, #4]
 8009178:	e7ae      	b.n	80090d8 <_malloc_r+0x34>
 800917a:	463c      	mov	r4, r7
 800917c:	687f      	ldr	r7, [r7, #4]
 800917e:	e7b6      	b.n	80090ee <_malloc_r+0x4a>
 8009180:	461a      	mov	r2, r3
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	42a3      	cmp	r3, r4
 8009186:	d1fb      	bne.n	8009180 <_malloc_r+0xdc>
 8009188:	2300      	movs	r3, #0
 800918a:	6053      	str	r3, [r2, #4]
 800918c:	e7de      	b.n	800914c <_malloc_r+0xa8>
 800918e:	230c      	movs	r3, #12
 8009190:	6033      	str	r3, [r6, #0]
 8009192:	4630      	mov	r0, r6
 8009194:	f000 f8b8 	bl	8009308 <__malloc_unlock>
 8009198:	e794      	b.n	80090c4 <_malloc_r+0x20>
 800919a:	6005      	str	r5, [r0, #0]
 800919c:	e7d6      	b.n	800914c <_malloc_r+0xa8>
 800919e:	bf00      	nop
 80091a0:	20000540 	.word	0x20000540

080091a4 <__sflush_r>:
 80091a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80091a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091ac:	0716      	lsls	r6, r2, #28
 80091ae:	4605      	mov	r5, r0
 80091b0:	460c      	mov	r4, r1
 80091b2:	d454      	bmi.n	800925e <__sflush_r+0xba>
 80091b4:	684b      	ldr	r3, [r1, #4]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	dc02      	bgt.n	80091c0 <__sflush_r+0x1c>
 80091ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80091bc:	2b00      	cmp	r3, #0
 80091be:	dd48      	ble.n	8009252 <__sflush_r+0xae>
 80091c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80091c2:	2e00      	cmp	r6, #0
 80091c4:	d045      	beq.n	8009252 <__sflush_r+0xae>
 80091c6:	2300      	movs	r3, #0
 80091c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80091cc:	682f      	ldr	r7, [r5, #0]
 80091ce:	6a21      	ldr	r1, [r4, #32]
 80091d0:	602b      	str	r3, [r5, #0]
 80091d2:	d030      	beq.n	8009236 <__sflush_r+0x92>
 80091d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80091d6:	89a3      	ldrh	r3, [r4, #12]
 80091d8:	0759      	lsls	r1, r3, #29
 80091da:	d505      	bpl.n	80091e8 <__sflush_r+0x44>
 80091dc:	6863      	ldr	r3, [r4, #4]
 80091de:	1ad2      	subs	r2, r2, r3
 80091e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80091e2:	b10b      	cbz	r3, 80091e8 <__sflush_r+0x44>
 80091e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80091e6:	1ad2      	subs	r2, r2, r3
 80091e8:	2300      	movs	r3, #0
 80091ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80091ec:	6a21      	ldr	r1, [r4, #32]
 80091ee:	4628      	mov	r0, r5
 80091f0:	47b0      	blx	r6
 80091f2:	1c43      	adds	r3, r0, #1
 80091f4:	89a3      	ldrh	r3, [r4, #12]
 80091f6:	d106      	bne.n	8009206 <__sflush_r+0x62>
 80091f8:	6829      	ldr	r1, [r5, #0]
 80091fa:	291d      	cmp	r1, #29
 80091fc:	d82b      	bhi.n	8009256 <__sflush_r+0xb2>
 80091fe:	4a2a      	ldr	r2, [pc, #168]	@ (80092a8 <__sflush_r+0x104>)
 8009200:	40ca      	lsrs	r2, r1
 8009202:	07d6      	lsls	r6, r2, #31
 8009204:	d527      	bpl.n	8009256 <__sflush_r+0xb2>
 8009206:	2200      	movs	r2, #0
 8009208:	6062      	str	r2, [r4, #4]
 800920a:	04d9      	lsls	r1, r3, #19
 800920c:	6922      	ldr	r2, [r4, #16]
 800920e:	6022      	str	r2, [r4, #0]
 8009210:	d504      	bpl.n	800921c <__sflush_r+0x78>
 8009212:	1c42      	adds	r2, r0, #1
 8009214:	d101      	bne.n	800921a <__sflush_r+0x76>
 8009216:	682b      	ldr	r3, [r5, #0]
 8009218:	b903      	cbnz	r3, 800921c <__sflush_r+0x78>
 800921a:	6560      	str	r0, [r4, #84]	@ 0x54
 800921c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800921e:	602f      	str	r7, [r5, #0]
 8009220:	b1b9      	cbz	r1, 8009252 <__sflush_r+0xae>
 8009222:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009226:	4299      	cmp	r1, r3
 8009228:	d002      	beq.n	8009230 <__sflush_r+0x8c>
 800922a:	4628      	mov	r0, r5
 800922c:	f000 fd0e 	bl	8009c4c <_free_r>
 8009230:	2300      	movs	r3, #0
 8009232:	6363      	str	r3, [r4, #52]	@ 0x34
 8009234:	e00d      	b.n	8009252 <__sflush_r+0xae>
 8009236:	2301      	movs	r3, #1
 8009238:	4628      	mov	r0, r5
 800923a:	47b0      	blx	r6
 800923c:	4602      	mov	r2, r0
 800923e:	1c50      	adds	r0, r2, #1
 8009240:	d1c9      	bne.n	80091d6 <__sflush_r+0x32>
 8009242:	682b      	ldr	r3, [r5, #0]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d0c6      	beq.n	80091d6 <__sflush_r+0x32>
 8009248:	2b1d      	cmp	r3, #29
 800924a:	d001      	beq.n	8009250 <__sflush_r+0xac>
 800924c:	2b16      	cmp	r3, #22
 800924e:	d11e      	bne.n	800928e <__sflush_r+0xea>
 8009250:	602f      	str	r7, [r5, #0]
 8009252:	2000      	movs	r0, #0
 8009254:	e022      	b.n	800929c <__sflush_r+0xf8>
 8009256:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800925a:	b21b      	sxth	r3, r3
 800925c:	e01b      	b.n	8009296 <__sflush_r+0xf2>
 800925e:	690f      	ldr	r7, [r1, #16]
 8009260:	2f00      	cmp	r7, #0
 8009262:	d0f6      	beq.n	8009252 <__sflush_r+0xae>
 8009264:	0793      	lsls	r3, r2, #30
 8009266:	680e      	ldr	r6, [r1, #0]
 8009268:	bf08      	it	eq
 800926a:	694b      	ldreq	r3, [r1, #20]
 800926c:	600f      	str	r7, [r1, #0]
 800926e:	bf18      	it	ne
 8009270:	2300      	movne	r3, #0
 8009272:	eba6 0807 	sub.w	r8, r6, r7
 8009276:	608b      	str	r3, [r1, #8]
 8009278:	f1b8 0f00 	cmp.w	r8, #0
 800927c:	dde9      	ble.n	8009252 <__sflush_r+0xae>
 800927e:	6a21      	ldr	r1, [r4, #32]
 8009280:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009282:	4643      	mov	r3, r8
 8009284:	463a      	mov	r2, r7
 8009286:	4628      	mov	r0, r5
 8009288:	47b0      	blx	r6
 800928a:	2800      	cmp	r0, #0
 800928c:	dc08      	bgt.n	80092a0 <__sflush_r+0xfc>
 800928e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009292:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009296:	81a3      	strh	r3, [r4, #12]
 8009298:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800929c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092a0:	4407      	add	r7, r0
 80092a2:	eba8 0800 	sub.w	r8, r8, r0
 80092a6:	e7e7      	b.n	8009278 <__sflush_r+0xd4>
 80092a8:	20400001 	.word	0x20400001

080092ac <_fflush_r>:
 80092ac:	b538      	push	{r3, r4, r5, lr}
 80092ae:	690b      	ldr	r3, [r1, #16]
 80092b0:	4605      	mov	r5, r0
 80092b2:	460c      	mov	r4, r1
 80092b4:	b913      	cbnz	r3, 80092bc <_fflush_r+0x10>
 80092b6:	2500      	movs	r5, #0
 80092b8:	4628      	mov	r0, r5
 80092ba:	bd38      	pop	{r3, r4, r5, pc}
 80092bc:	b118      	cbz	r0, 80092c6 <_fflush_r+0x1a>
 80092be:	6a03      	ldr	r3, [r0, #32]
 80092c0:	b90b      	cbnz	r3, 80092c6 <_fflush_r+0x1a>
 80092c2:	f7fe fea3 	bl	800800c <__sinit>
 80092c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d0f3      	beq.n	80092b6 <_fflush_r+0xa>
 80092ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80092d0:	07d0      	lsls	r0, r2, #31
 80092d2:	d404      	bmi.n	80092de <_fflush_r+0x32>
 80092d4:	0599      	lsls	r1, r3, #22
 80092d6:	d402      	bmi.n	80092de <_fflush_r+0x32>
 80092d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80092da:	f7fe ff00 	bl	80080de <__retarget_lock_acquire_recursive>
 80092de:	4628      	mov	r0, r5
 80092e0:	4621      	mov	r1, r4
 80092e2:	f7ff ff5f 	bl	80091a4 <__sflush_r>
 80092e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80092e8:	07da      	lsls	r2, r3, #31
 80092ea:	4605      	mov	r5, r0
 80092ec:	d4e4      	bmi.n	80092b8 <_fflush_r+0xc>
 80092ee:	89a3      	ldrh	r3, [r4, #12]
 80092f0:	059b      	lsls	r3, r3, #22
 80092f2:	d4e1      	bmi.n	80092b8 <_fflush_r+0xc>
 80092f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80092f6:	f7fe fef3 	bl	80080e0 <__retarget_lock_release_recursive>
 80092fa:	e7dd      	b.n	80092b8 <_fflush_r+0xc>

080092fc <__malloc_lock>:
 80092fc:	4801      	ldr	r0, [pc, #4]	@ (8009304 <__malloc_lock+0x8>)
 80092fe:	f7fe beee 	b.w	80080de <__retarget_lock_acquire_recursive>
 8009302:	bf00      	nop
 8009304:	20000538 	.word	0x20000538

08009308 <__malloc_unlock>:
 8009308:	4801      	ldr	r0, [pc, #4]	@ (8009310 <__malloc_unlock+0x8>)
 800930a:	f7fe bee9 	b.w	80080e0 <__retarget_lock_release_recursive>
 800930e:	bf00      	nop
 8009310:	20000538 	.word	0x20000538

08009314 <_Balloc>:
 8009314:	b570      	push	{r4, r5, r6, lr}
 8009316:	69c6      	ldr	r6, [r0, #28]
 8009318:	4604      	mov	r4, r0
 800931a:	460d      	mov	r5, r1
 800931c:	b976      	cbnz	r6, 800933c <_Balloc+0x28>
 800931e:	2010      	movs	r0, #16
 8009320:	f7ff fe96 	bl	8009050 <malloc>
 8009324:	4602      	mov	r2, r0
 8009326:	61e0      	str	r0, [r4, #28]
 8009328:	b920      	cbnz	r0, 8009334 <_Balloc+0x20>
 800932a:	4b18      	ldr	r3, [pc, #96]	@ (800938c <_Balloc+0x78>)
 800932c:	4818      	ldr	r0, [pc, #96]	@ (8009390 <_Balloc+0x7c>)
 800932e:	216b      	movs	r1, #107	@ 0x6b
 8009330:	f000 fc5a 	bl	8009be8 <__assert_func>
 8009334:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009338:	6006      	str	r6, [r0, #0]
 800933a:	60c6      	str	r6, [r0, #12]
 800933c:	69e6      	ldr	r6, [r4, #28]
 800933e:	68f3      	ldr	r3, [r6, #12]
 8009340:	b183      	cbz	r3, 8009364 <_Balloc+0x50>
 8009342:	69e3      	ldr	r3, [r4, #28]
 8009344:	68db      	ldr	r3, [r3, #12]
 8009346:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800934a:	b9b8      	cbnz	r0, 800937c <_Balloc+0x68>
 800934c:	2101      	movs	r1, #1
 800934e:	fa01 f605 	lsl.w	r6, r1, r5
 8009352:	1d72      	adds	r2, r6, #5
 8009354:	0092      	lsls	r2, r2, #2
 8009356:	4620      	mov	r0, r4
 8009358:	f000 fc64 	bl	8009c24 <_calloc_r>
 800935c:	b160      	cbz	r0, 8009378 <_Balloc+0x64>
 800935e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009362:	e00e      	b.n	8009382 <_Balloc+0x6e>
 8009364:	2221      	movs	r2, #33	@ 0x21
 8009366:	2104      	movs	r1, #4
 8009368:	4620      	mov	r0, r4
 800936a:	f000 fc5b 	bl	8009c24 <_calloc_r>
 800936e:	69e3      	ldr	r3, [r4, #28]
 8009370:	60f0      	str	r0, [r6, #12]
 8009372:	68db      	ldr	r3, [r3, #12]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d1e4      	bne.n	8009342 <_Balloc+0x2e>
 8009378:	2000      	movs	r0, #0
 800937a:	bd70      	pop	{r4, r5, r6, pc}
 800937c:	6802      	ldr	r2, [r0, #0]
 800937e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009382:	2300      	movs	r3, #0
 8009384:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009388:	e7f7      	b.n	800937a <_Balloc+0x66>
 800938a:	bf00      	nop
 800938c:	0800a3c9 	.word	0x0800a3c9
 8009390:	0800a45a 	.word	0x0800a45a

08009394 <_Bfree>:
 8009394:	b570      	push	{r4, r5, r6, lr}
 8009396:	69c6      	ldr	r6, [r0, #28]
 8009398:	4605      	mov	r5, r0
 800939a:	460c      	mov	r4, r1
 800939c:	b976      	cbnz	r6, 80093bc <_Bfree+0x28>
 800939e:	2010      	movs	r0, #16
 80093a0:	f7ff fe56 	bl	8009050 <malloc>
 80093a4:	4602      	mov	r2, r0
 80093a6:	61e8      	str	r0, [r5, #28]
 80093a8:	b920      	cbnz	r0, 80093b4 <_Bfree+0x20>
 80093aa:	4b09      	ldr	r3, [pc, #36]	@ (80093d0 <_Bfree+0x3c>)
 80093ac:	4809      	ldr	r0, [pc, #36]	@ (80093d4 <_Bfree+0x40>)
 80093ae:	218f      	movs	r1, #143	@ 0x8f
 80093b0:	f000 fc1a 	bl	8009be8 <__assert_func>
 80093b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80093b8:	6006      	str	r6, [r0, #0]
 80093ba:	60c6      	str	r6, [r0, #12]
 80093bc:	b13c      	cbz	r4, 80093ce <_Bfree+0x3a>
 80093be:	69eb      	ldr	r3, [r5, #28]
 80093c0:	6862      	ldr	r2, [r4, #4]
 80093c2:	68db      	ldr	r3, [r3, #12]
 80093c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80093c8:	6021      	str	r1, [r4, #0]
 80093ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80093ce:	bd70      	pop	{r4, r5, r6, pc}
 80093d0:	0800a3c9 	.word	0x0800a3c9
 80093d4:	0800a45a 	.word	0x0800a45a

080093d8 <__multadd>:
 80093d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093dc:	690d      	ldr	r5, [r1, #16]
 80093de:	4607      	mov	r7, r0
 80093e0:	460c      	mov	r4, r1
 80093e2:	461e      	mov	r6, r3
 80093e4:	f101 0c14 	add.w	ip, r1, #20
 80093e8:	2000      	movs	r0, #0
 80093ea:	f8dc 3000 	ldr.w	r3, [ip]
 80093ee:	b299      	uxth	r1, r3
 80093f0:	fb02 6101 	mla	r1, r2, r1, r6
 80093f4:	0c1e      	lsrs	r6, r3, #16
 80093f6:	0c0b      	lsrs	r3, r1, #16
 80093f8:	fb02 3306 	mla	r3, r2, r6, r3
 80093fc:	b289      	uxth	r1, r1
 80093fe:	3001      	adds	r0, #1
 8009400:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009404:	4285      	cmp	r5, r0
 8009406:	f84c 1b04 	str.w	r1, [ip], #4
 800940a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800940e:	dcec      	bgt.n	80093ea <__multadd+0x12>
 8009410:	b30e      	cbz	r6, 8009456 <__multadd+0x7e>
 8009412:	68a3      	ldr	r3, [r4, #8]
 8009414:	42ab      	cmp	r3, r5
 8009416:	dc19      	bgt.n	800944c <__multadd+0x74>
 8009418:	6861      	ldr	r1, [r4, #4]
 800941a:	4638      	mov	r0, r7
 800941c:	3101      	adds	r1, #1
 800941e:	f7ff ff79 	bl	8009314 <_Balloc>
 8009422:	4680      	mov	r8, r0
 8009424:	b928      	cbnz	r0, 8009432 <__multadd+0x5a>
 8009426:	4602      	mov	r2, r0
 8009428:	4b0c      	ldr	r3, [pc, #48]	@ (800945c <__multadd+0x84>)
 800942a:	480d      	ldr	r0, [pc, #52]	@ (8009460 <__multadd+0x88>)
 800942c:	21ba      	movs	r1, #186	@ 0xba
 800942e:	f000 fbdb 	bl	8009be8 <__assert_func>
 8009432:	6922      	ldr	r2, [r4, #16]
 8009434:	3202      	adds	r2, #2
 8009436:	f104 010c 	add.w	r1, r4, #12
 800943a:	0092      	lsls	r2, r2, #2
 800943c:	300c      	adds	r0, #12
 800943e:	f000 fbc5 	bl	8009bcc <memcpy>
 8009442:	4621      	mov	r1, r4
 8009444:	4638      	mov	r0, r7
 8009446:	f7ff ffa5 	bl	8009394 <_Bfree>
 800944a:	4644      	mov	r4, r8
 800944c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009450:	3501      	adds	r5, #1
 8009452:	615e      	str	r6, [r3, #20]
 8009454:	6125      	str	r5, [r4, #16]
 8009456:	4620      	mov	r0, r4
 8009458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800945c:	0800a438 	.word	0x0800a438
 8009460:	0800a45a 	.word	0x0800a45a

08009464 <__hi0bits>:
 8009464:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009468:	4603      	mov	r3, r0
 800946a:	bf36      	itet	cc
 800946c:	0403      	lslcc	r3, r0, #16
 800946e:	2000      	movcs	r0, #0
 8009470:	2010      	movcc	r0, #16
 8009472:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009476:	bf3c      	itt	cc
 8009478:	021b      	lslcc	r3, r3, #8
 800947a:	3008      	addcc	r0, #8
 800947c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009480:	bf3c      	itt	cc
 8009482:	011b      	lslcc	r3, r3, #4
 8009484:	3004      	addcc	r0, #4
 8009486:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800948a:	bf3c      	itt	cc
 800948c:	009b      	lslcc	r3, r3, #2
 800948e:	3002      	addcc	r0, #2
 8009490:	2b00      	cmp	r3, #0
 8009492:	db05      	blt.n	80094a0 <__hi0bits+0x3c>
 8009494:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009498:	f100 0001 	add.w	r0, r0, #1
 800949c:	bf08      	it	eq
 800949e:	2020      	moveq	r0, #32
 80094a0:	4770      	bx	lr

080094a2 <__lo0bits>:
 80094a2:	6803      	ldr	r3, [r0, #0]
 80094a4:	4602      	mov	r2, r0
 80094a6:	f013 0007 	ands.w	r0, r3, #7
 80094aa:	d00b      	beq.n	80094c4 <__lo0bits+0x22>
 80094ac:	07d9      	lsls	r1, r3, #31
 80094ae:	d421      	bmi.n	80094f4 <__lo0bits+0x52>
 80094b0:	0798      	lsls	r0, r3, #30
 80094b2:	bf49      	itett	mi
 80094b4:	085b      	lsrmi	r3, r3, #1
 80094b6:	089b      	lsrpl	r3, r3, #2
 80094b8:	2001      	movmi	r0, #1
 80094ba:	6013      	strmi	r3, [r2, #0]
 80094bc:	bf5c      	itt	pl
 80094be:	6013      	strpl	r3, [r2, #0]
 80094c0:	2002      	movpl	r0, #2
 80094c2:	4770      	bx	lr
 80094c4:	b299      	uxth	r1, r3
 80094c6:	b909      	cbnz	r1, 80094cc <__lo0bits+0x2a>
 80094c8:	0c1b      	lsrs	r3, r3, #16
 80094ca:	2010      	movs	r0, #16
 80094cc:	b2d9      	uxtb	r1, r3
 80094ce:	b909      	cbnz	r1, 80094d4 <__lo0bits+0x32>
 80094d0:	3008      	adds	r0, #8
 80094d2:	0a1b      	lsrs	r3, r3, #8
 80094d4:	0719      	lsls	r1, r3, #28
 80094d6:	bf04      	itt	eq
 80094d8:	091b      	lsreq	r3, r3, #4
 80094da:	3004      	addeq	r0, #4
 80094dc:	0799      	lsls	r1, r3, #30
 80094de:	bf04      	itt	eq
 80094e0:	089b      	lsreq	r3, r3, #2
 80094e2:	3002      	addeq	r0, #2
 80094e4:	07d9      	lsls	r1, r3, #31
 80094e6:	d403      	bmi.n	80094f0 <__lo0bits+0x4e>
 80094e8:	085b      	lsrs	r3, r3, #1
 80094ea:	f100 0001 	add.w	r0, r0, #1
 80094ee:	d003      	beq.n	80094f8 <__lo0bits+0x56>
 80094f0:	6013      	str	r3, [r2, #0]
 80094f2:	4770      	bx	lr
 80094f4:	2000      	movs	r0, #0
 80094f6:	4770      	bx	lr
 80094f8:	2020      	movs	r0, #32
 80094fa:	4770      	bx	lr

080094fc <__i2b>:
 80094fc:	b510      	push	{r4, lr}
 80094fe:	460c      	mov	r4, r1
 8009500:	2101      	movs	r1, #1
 8009502:	f7ff ff07 	bl	8009314 <_Balloc>
 8009506:	4602      	mov	r2, r0
 8009508:	b928      	cbnz	r0, 8009516 <__i2b+0x1a>
 800950a:	4b05      	ldr	r3, [pc, #20]	@ (8009520 <__i2b+0x24>)
 800950c:	4805      	ldr	r0, [pc, #20]	@ (8009524 <__i2b+0x28>)
 800950e:	f240 1145 	movw	r1, #325	@ 0x145
 8009512:	f000 fb69 	bl	8009be8 <__assert_func>
 8009516:	2301      	movs	r3, #1
 8009518:	6144      	str	r4, [r0, #20]
 800951a:	6103      	str	r3, [r0, #16]
 800951c:	bd10      	pop	{r4, pc}
 800951e:	bf00      	nop
 8009520:	0800a438 	.word	0x0800a438
 8009524:	0800a45a 	.word	0x0800a45a

08009528 <__multiply>:
 8009528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800952c:	4617      	mov	r7, r2
 800952e:	690a      	ldr	r2, [r1, #16]
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	429a      	cmp	r2, r3
 8009534:	bfa8      	it	ge
 8009536:	463b      	movge	r3, r7
 8009538:	4689      	mov	r9, r1
 800953a:	bfa4      	itt	ge
 800953c:	460f      	movge	r7, r1
 800953e:	4699      	movge	r9, r3
 8009540:	693d      	ldr	r5, [r7, #16]
 8009542:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	6879      	ldr	r1, [r7, #4]
 800954a:	eb05 060a 	add.w	r6, r5, sl
 800954e:	42b3      	cmp	r3, r6
 8009550:	b085      	sub	sp, #20
 8009552:	bfb8      	it	lt
 8009554:	3101      	addlt	r1, #1
 8009556:	f7ff fedd 	bl	8009314 <_Balloc>
 800955a:	b930      	cbnz	r0, 800956a <__multiply+0x42>
 800955c:	4602      	mov	r2, r0
 800955e:	4b41      	ldr	r3, [pc, #260]	@ (8009664 <__multiply+0x13c>)
 8009560:	4841      	ldr	r0, [pc, #260]	@ (8009668 <__multiply+0x140>)
 8009562:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009566:	f000 fb3f 	bl	8009be8 <__assert_func>
 800956a:	f100 0414 	add.w	r4, r0, #20
 800956e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8009572:	4623      	mov	r3, r4
 8009574:	2200      	movs	r2, #0
 8009576:	4573      	cmp	r3, lr
 8009578:	d320      	bcc.n	80095bc <__multiply+0x94>
 800957a:	f107 0814 	add.w	r8, r7, #20
 800957e:	f109 0114 	add.w	r1, r9, #20
 8009582:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009586:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800958a:	9302      	str	r3, [sp, #8]
 800958c:	1beb      	subs	r3, r5, r7
 800958e:	3b15      	subs	r3, #21
 8009590:	f023 0303 	bic.w	r3, r3, #3
 8009594:	3304      	adds	r3, #4
 8009596:	3715      	adds	r7, #21
 8009598:	42bd      	cmp	r5, r7
 800959a:	bf38      	it	cc
 800959c:	2304      	movcc	r3, #4
 800959e:	9301      	str	r3, [sp, #4]
 80095a0:	9b02      	ldr	r3, [sp, #8]
 80095a2:	9103      	str	r1, [sp, #12]
 80095a4:	428b      	cmp	r3, r1
 80095a6:	d80c      	bhi.n	80095c2 <__multiply+0x9a>
 80095a8:	2e00      	cmp	r6, #0
 80095aa:	dd03      	ble.n	80095b4 <__multiply+0x8c>
 80095ac:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d055      	beq.n	8009660 <__multiply+0x138>
 80095b4:	6106      	str	r6, [r0, #16]
 80095b6:	b005      	add	sp, #20
 80095b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095bc:	f843 2b04 	str.w	r2, [r3], #4
 80095c0:	e7d9      	b.n	8009576 <__multiply+0x4e>
 80095c2:	f8b1 a000 	ldrh.w	sl, [r1]
 80095c6:	f1ba 0f00 	cmp.w	sl, #0
 80095ca:	d01f      	beq.n	800960c <__multiply+0xe4>
 80095cc:	46c4      	mov	ip, r8
 80095ce:	46a1      	mov	r9, r4
 80095d0:	2700      	movs	r7, #0
 80095d2:	f85c 2b04 	ldr.w	r2, [ip], #4
 80095d6:	f8d9 3000 	ldr.w	r3, [r9]
 80095da:	fa1f fb82 	uxth.w	fp, r2
 80095de:	b29b      	uxth	r3, r3
 80095e0:	fb0a 330b 	mla	r3, sl, fp, r3
 80095e4:	443b      	add	r3, r7
 80095e6:	f8d9 7000 	ldr.w	r7, [r9]
 80095ea:	0c12      	lsrs	r2, r2, #16
 80095ec:	0c3f      	lsrs	r7, r7, #16
 80095ee:	fb0a 7202 	mla	r2, sl, r2, r7
 80095f2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80095f6:	b29b      	uxth	r3, r3
 80095f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80095fc:	4565      	cmp	r5, ip
 80095fe:	f849 3b04 	str.w	r3, [r9], #4
 8009602:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009606:	d8e4      	bhi.n	80095d2 <__multiply+0xaa>
 8009608:	9b01      	ldr	r3, [sp, #4]
 800960a:	50e7      	str	r7, [r4, r3]
 800960c:	9b03      	ldr	r3, [sp, #12]
 800960e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009612:	3104      	adds	r1, #4
 8009614:	f1b9 0f00 	cmp.w	r9, #0
 8009618:	d020      	beq.n	800965c <__multiply+0x134>
 800961a:	6823      	ldr	r3, [r4, #0]
 800961c:	4647      	mov	r7, r8
 800961e:	46a4      	mov	ip, r4
 8009620:	f04f 0a00 	mov.w	sl, #0
 8009624:	f8b7 b000 	ldrh.w	fp, [r7]
 8009628:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800962c:	fb09 220b 	mla	r2, r9, fp, r2
 8009630:	4452      	add	r2, sl
 8009632:	b29b      	uxth	r3, r3
 8009634:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009638:	f84c 3b04 	str.w	r3, [ip], #4
 800963c:	f857 3b04 	ldr.w	r3, [r7], #4
 8009640:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009644:	f8bc 3000 	ldrh.w	r3, [ip]
 8009648:	fb09 330a 	mla	r3, r9, sl, r3
 800964c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009650:	42bd      	cmp	r5, r7
 8009652:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009656:	d8e5      	bhi.n	8009624 <__multiply+0xfc>
 8009658:	9a01      	ldr	r2, [sp, #4]
 800965a:	50a3      	str	r3, [r4, r2]
 800965c:	3404      	adds	r4, #4
 800965e:	e79f      	b.n	80095a0 <__multiply+0x78>
 8009660:	3e01      	subs	r6, #1
 8009662:	e7a1      	b.n	80095a8 <__multiply+0x80>
 8009664:	0800a438 	.word	0x0800a438
 8009668:	0800a45a 	.word	0x0800a45a

0800966c <__pow5mult>:
 800966c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009670:	4615      	mov	r5, r2
 8009672:	f012 0203 	ands.w	r2, r2, #3
 8009676:	4607      	mov	r7, r0
 8009678:	460e      	mov	r6, r1
 800967a:	d007      	beq.n	800968c <__pow5mult+0x20>
 800967c:	4c25      	ldr	r4, [pc, #148]	@ (8009714 <__pow5mult+0xa8>)
 800967e:	3a01      	subs	r2, #1
 8009680:	2300      	movs	r3, #0
 8009682:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009686:	f7ff fea7 	bl	80093d8 <__multadd>
 800968a:	4606      	mov	r6, r0
 800968c:	10ad      	asrs	r5, r5, #2
 800968e:	d03d      	beq.n	800970c <__pow5mult+0xa0>
 8009690:	69fc      	ldr	r4, [r7, #28]
 8009692:	b97c      	cbnz	r4, 80096b4 <__pow5mult+0x48>
 8009694:	2010      	movs	r0, #16
 8009696:	f7ff fcdb 	bl	8009050 <malloc>
 800969a:	4602      	mov	r2, r0
 800969c:	61f8      	str	r0, [r7, #28]
 800969e:	b928      	cbnz	r0, 80096ac <__pow5mult+0x40>
 80096a0:	4b1d      	ldr	r3, [pc, #116]	@ (8009718 <__pow5mult+0xac>)
 80096a2:	481e      	ldr	r0, [pc, #120]	@ (800971c <__pow5mult+0xb0>)
 80096a4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80096a8:	f000 fa9e 	bl	8009be8 <__assert_func>
 80096ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80096b0:	6004      	str	r4, [r0, #0]
 80096b2:	60c4      	str	r4, [r0, #12]
 80096b4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80096b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80096bc:	b94c      	cbnz	r4, 80096d2 <__pow5mult+0x66>
 80096be:	f240 2171 	movw	r1, #625	@ 0x271
 80096c2:	4638      	mov	r0, r7
 80096c4:	f7ff ff1a 	bl	80094fc <__i2b>
 80096c8:	2300      	movs	r3, #0
 80096ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80096ce:	4604      	mov	r4, r0
 80096d0:	6003      	str	r3, [r0, #0]
 80096d2:	f04f 0900 	mov.w	r9, #0
 80096d6:	07eb      	lsls	r3, r5, #31
 80096d8:	d50a      	bpl.n	80096f0 <__pow5mult+0x84>
 80096da:	4631      	mov	r1, r6
 80096dc:	4622      	mov	r2, r4
 80096de:	4638      	mov	r0, r7
 80096e0:	f7ff ff22 	bl	8009528 <__multiply>
 80096e4:	4631      	mov	r1, r6
 80096e6:	4680      	mov	r8, r0
 80096e8:	4638      	mov	r0, r7
 80096ea:	f7ff fe53 	bl	8009394 <_Bfree>
 80096ee:	4646      	mov	r6, r8
 80096f0:	106d      	asrs	r5, r5, #1
 80096f2:	d00b      	beq.n	800970c <__pow5mult+0xa0>
 80096f4:	6820      	ldr	r0, [r4, #0]
 80096f6:	b938      	cbnz	r0, 8009708 <__pow5mult+0x9c>
 80096f8:	4622      	mov	r2, r4
 80096fa:	4621      	mov	r1, r4
 80096fc:	4638      	mov	r0, r7
 80096fe:	f7ff ff13 	bl	8009528 <__multiply>
 8009702:	6020      	str	r0, [r4, #0]
 8009704:	f8c0 9000 	str.w	r9, [r0]
 8009708:	4604      	mov	r4, r0
 800970a:	e7e4      	b.n	80096d6 <__pow5mult+0x6a>
 800970c:	4630      	mov	r0, r6
 800970e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009712:	bf00      	nop
 8009714:	0800a4fc 	.word	0x0800a4fc
 8009718:	0800a3c9 	.word	0x0800a3c9
 800971c:	0800a45a 	.word	0x0800a45a

08009720 <__lshift>:
 8009720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009724:	460c      	mov	r4, r1
 8009726:	6849      	ldr	r1, [r1, #4]
 8009728:	6923      	ldr	r3, [r4, #16]
 800972a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800972e:	68a3      	ldr	r3, [r4, #8]
 8009730:	4607      	mov	r7, r0
 8009732:	4691      	mov	r9, r2
 8009734:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009738:	f108 0601 	add.w	r6, r8, #1
 800973c:	42b3      	cmp	r3, r6
 800973e:	db0b      	blt.n	8009758 <__lshift+0x38>
 8009740:	4638      	mov	r0, r7
 8009742:	f7ff fde7 	bl	8009314 <_Balloc>
 8009746:	4605      	mov	r5, r0
 8009748:	b948      	cbnz	r0, 800975e <__lshift+0x3e>
 800974a:	4602      	mov	r2, r0
 800974c:	4b28      	ldr	r3, [pc, #160]	@ (80097f0 <__lshift+0xd0>)
 800974e:	4829      	ldr	r0, [pc, #164]	@ (80097f4 <__lshift+0xd4>)
 8009750:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009754:	f000 fa48 	bl	8009be8 <__assert_func>
 8009758:	3101      	adds	r1, #1
 800975a:	005b      	lsls	r3, r3, #1
 800975c:	e7ee      	b.n	800973c <__lshift+0x1c>
 800975e:	2300      	movs	r3, #0
 8009760:	f100 0114 	add.w	r1, r0, #20
 8009764:	f100 0210 	add.w	r2, r0, #16
 8009768:	4618      	mov	r0, r3
 800976a:	4553      	cmp	r3, sl
 800976c:	db33      	blt.n	80097d6 <__lshift+0xb6>
 800976e:	6920      	ldr	r0, [r4, #16]
 8009770:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009774:	f104 0314 	add.w	r3, r4, #20
 8009778:	f019 091f 	ands.w	r9, r9, #31
 800977c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009780:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009784:	d02b      	beq.n	80097de <__lshift+0xbe>
 8009786:	f1c9 0e20 	rsb	lr, r9, #32
 800978a:	468a      	mov	sl, r1
 800978c:	2200      	movs	r2, #0
 800978e:	6818      	ldr	r0, [r3, #0]
 8009790:	fa00 f009 	lsl.w	r0, r0, r9
 8009794:	4310      	orrs	r0, r2
 8009796:	f84a 0b04 	str.w	r0, [sl], #4
 800979a:	f853 2b04 	ldr.w	r2, [r3], #4
 800979e:	459c      	cmp	ip, r3
 80097a0:	fa22 f20e 	lsr.w	r2, r2, lr
 80097a4:	d8f3      	bhi.n	800978e <__lshift+0x6e>
 80097a6:	ebac 0304 	sub.w	r3, ip, r4
 80097aa:	3b15      	subs	r3, #21
 80097ac:	f023 0303 	bic.w	r3, r3, #3
 80097b0:	3304      	adds	r3, #4
 80097b2:	f104 0015 	add.w	r0, r4, #21
 80097b6:	4560      	cmp	r0, ip
 80097b8:	bf88      	it	hi
 80097ba:	2304      	movhi	r3, #4
 80097bc:	50ca      	str	r2, [r1, r3]
 80097be:	b10a      	cbz	r2, 80097c4 <__lshift+0xa4>
 80097c0:	f108 0602 	add.w	r6, r8, #2
 80097c4:	3e01      	subs	r6, #1
 80097c6:	4638      	mov	r0, r7
 80097c8:	612e      	str	r6, [r5, #16]
 80097ca:	4621      	mov	r1, r4
 80097cc:	f7ff fde2 	bl	8009394 <_Bfree>
 80097d0:	4628      	mov	r0, r5
 80097d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80097da:	3301      	adds	r3, #1
 80097dc:	e7c5      	b.n	800976a <__lshift+0x4a>
 80097de:	3904      	subs	r1, #4
 80097e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80097e4:	f841 2f04 	str.w	r2, [r1, #4]!
 80097e8:	459c      	cmp	ip, r3
 80097ea:	d8f9      	bhi.n	80097e0 <__lshift+0xc0>
 80097ec:	e7ea      	b.n	80097c4 <__lshift+0xa4>
 80097ee:	bf00      	nop
 80097f0:	0800a438 	.word	0x0800a438
 80097f4:	0800a45a 	.word	0x0800a45a

080097f8 <__mcmp>:
 80097f8:	690a      	ldr	r2, [r1, #16]
 80097fa:	4603      	mov	r3, r0
 80097fc:	6900      	ldr	r0, [r0, #16]
 80097fe:	1a80      	subs	r0, r0, r2
 8009800:	b530      	push	{r4, r5, lr}
 8009802:	d10e      	bne.n	8009822 <__mcmp+0x2a>
 8009804:	3314      	adds	r3, #20
 8009806:	3114      	adds	r1, #20
 8009808:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800980c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009810:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009814:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009818:	4295      	cmp	r5, r2
 800981a:	d003      	beq.n	8009824 <__mcmp+0x2c>
 800981c:	d205      	bcs.n	800982a <__mcmp+0x32>
 800981e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009822:	bd30      	pop	{r4, r5, pc}
 8009824:	42a3      	cmp	r3, r4
 8009826:	d3f3      	bcc.n	8009810 <__mcmp+0x18>
 8009828:	e7fb      	b.n	8009822 <__mcmp+0x2a>
 800982a:	2001      	movs	r0, #1
 800982c:	e7f9      	b.n	8009822 <__mcmp+0x2a>
	...

08009830 <__mdiff>:
 8009830:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009834:	4689      	mov	r9, r1
 8009836:	4606      	mov	r6, r0
 8009838:	4611      	mov	r1, r2
 800983a:	4648      	mov	r0, r9
 800983c:	4614      	mov	r4, r2
 800983e:	f7ff ffdb 	bl	80097f8 <__mcmp>
 8009842:	1e05      	subs	r5, r0, #0
 8009844:	d112      	bne.n	800986c <__mdiff+0x3c>
 8009846:	4629      	mov	r1, r5
 8009848:	4630      	mov	r0, r6
 800984a:	f7ff fd63 	bl	8009314 <_Balloc>
 800984e:	4602      	mov	r2, r0
 8009850:	b928      	cbnz	r0, 800985e <__mdiff+0x2e>
 8009852:	4b3f      	ldr	r3, [pc, #252]	@ (8009950 <__mdiff+0x120>)
 8009854:	f240 2137 	movw	r1, #567	@ 0x237
 8009858:	483e      	ldr	r0, [pc, #248]	@ (8009954 <__mdiff+0x124>)
 800985a:	f000 f9c5 	bl	8009be8 <__assert_func>
 800985e:	2301      	movs	r3, #1
 8009860:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009864:	4610      	mov	r0, r2
 8009866:	b003      	add	sp, #12
 8009868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800986c:	bfbc      	itt	lt
 800986e:	464b      	movlt	r3, r9
 8009870:	46a1      	movlt	r9, r4
 8009872:	4630      	mov	r0, r6
 8009874:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009878:	bfba      	itte	lt
 800987a:	461c      	movlt	r4, r3
 800987c:	2501      	movlt	r5, #1
 800987e:	2500      	movge	r5, #0
 8009880:	f7ff fd48 	bl	8009314 <_Balloc>
 8009884:	4602      	mov	r2, r0
 8009886:	b918      	cbnz	r0, 8009890 <__mdiff+0x60>
 8009888:	4b31      	ldr	r3, [pc, #196]	@ (8009950 <__mdiff+0x120>)
 800988a:	f240 2145 	movw	r1, #581	@ 0x245
 800988e:	e7e3      	b.n	8009858 <__mdiff+0x28>
 8009890:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009894:	6926      	ldr	r6, [r4, #16]
 8009896:	60c5      	str	r5, [r0, #12]
 8009898:	f109 0310 	add.w	r3, r9, #16
 800989c:	f109 0514 	add.w	r5, r9, #20
 80098a0:	f104 0e14 	add.w	lr, r4, #20
 80098a4:	f100 0b14 	add.w	fp, r0, #20
 80098a8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80098ac:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80098b0:	9301      	str	r3, [sp, #4]
 80098b2:	46d9      	mov	r9, fp
 80098b4:	f04f 0c00 	mov.w	ip, #0
 80098b8:	9b01      	ldr	r3, [sp, #4]
 80098ba:	f85e 0b04 	ldr.w	r0, [lr], #4
 80098be:	f853 af04 	ldr.w	sl, [r3, #4]!
 80098c2:	9301      	str	r3, [sp, #4]
 80098c4:	fa1f f38a 	uxth.w	r3, sl
 80098c8:	4619      	mov	r1, r3
 80098ca:	b283      	uxth	r3, r0
 80098cc:	1acb      	subs	r3, r1, r3
 80098ce:	0c00      	lsrs	r0, r0, #16
 80098d0:	4463      	add	r3, ip
 80098d2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80098d6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80098da:	b29b      	uxth	r3, r3
 80098dc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80098e0:	4576      	cmp	r6, lr
 80098e2:	f849 3b04 	str.w	r3, [r9], #4
 80098e6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80098ea:	d8e5      	bhi.n	80098b8 <__mdiff+0x88>
 80098ec:	1b33      	subs	r3, r6, r4
 80098ee:	3b15      	subs	r3, #21
 80098f0:	f023 0303 	bic.w	r3, r3, #3
 80098f4:	3415      	adds	r4, #21
 80098f6:	3304      	adds	r3, #4
 80098f8:	42a6      	cmp	r6, r4
 80098fa:	bf38      	it	cc
 80098fc:	2304      	movcc	r3, #4
 80098fe:	441d      	add	r5, r3
 8009900:	445b      	add	r3, fp
 8009902:	461e      	mov	r6, r3
 8009904:	462c      	mov	r4, r5
 8009906:	4544      	cmp	r4, r8
 8009908:	d30e      	bcc.n	8009928 <__mdiff+0xf8>
 800990a:	f108 0103 	add.w	r1, r8, #3
 800990e:	1b49      	subs	r1, r1, r5
 8009910:	f021 0103 	bic.w	r1, r1, #3
 8009914:	3d03      	subs	r5, #3
 8009916:	45a8      	cmp	r8, r5
 8009918:	bf38      	it	cc
 800991a:	2100      	movcc	r1, #0
 800991c:	440b      	add	r3, r1
 800991e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009922:	b191      	cbz	r1, 800994a <__mdiff+0x11a>
 8009924:	6117      	str	r7, [r2, #16]
 8009926:	e79d      	b.n	8009864 <__mdiff+0x34>
 8009928:	f854 1b04 	ldr.w	r1, [r4], #4
 800992c:	46e6      	mov	lr, ip
 800992e:	0c08      	lsrs	r0, r1, #16
 8009930:	fa1c fc81 	uxtah	ip, ip, r1
 8009934:	4471      	add	r1, lr
 8009936:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800993a:	b289      	uxth	r1, r1
 800993c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009940:	f846 1b04 	str.w	r1, [r6], #4
 8009944:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009948:	e7dd      	b.n	8009906 <__mdiff+0xd6>
 800994a:	3f01      	subs	r7, #1
 800994c:	e7e7      	b.n	800991e <__mdiff+0xee>
 800994e:	bf00      	nop
 8009950:	0800a438 	.word	0x0800a438
 8009954:	0800a45a 	.word	0x0800a45a

08009958 <__d2b>:
 8009958:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800995c:	460f      	mov	r7, r1
 800995e:	2101      	movs	r1, #1
 8009960:	ec59 8b10 	vmov	r8, r9, d0
 8009964:	4616      	mov	r6, r2
 8009966:	f7ff fcd5 	bl	8009314 <_Balloc>
 800996a:	4604      	mov	r4, r0
 800996c:	b930      	cbnz	r0, 800997c <__d2b+0x24>
 800996e:	4602      	mov	r2, r0
 8009970:	4b23      	ldr	r3, [pc, #140]	@ (8009a00 <__d2b+0xa8>)
 8009972:	4824      	ldr	r0, [pc, #144]	@ (8009a04 <__d2b+0xac>)
 8009974:	f240 310f 	movw	r1, #783	@ 0x30f
 8009978:	f000 f936 	bl	8009be8 <__assert_func>
 800997c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009980:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009984:	b10d      	cbz	r5, 800998a <__d2b+0x32>
 8009986:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800998a:	9301      	str	r3, [sp, #4]
 800998c:	f1b8 0300 	subs.w	r3, r8, #0
 8009990:	d023      	beq.n	80099da <__d2b+0x82>
 8009992:	4668      	mov	r0, sp
 8009994:	9300      	str	r3, [sp, #0]
 8009996:	f7ff fd84 	bl	80094a2 <__lo0bits>
 800999a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800999e:	b1d0      	cbz	r0, 80099d6 <__d2b+0x7e>
 80099a0:	f1c0 0320 	rsb	r3, r0, #32
 80099a4:	fa02 f303 	lsl.w	r3, r2, r3
 80099a8:	430b      	orrs	r3, r1
 80099aa:	40c2      	lsrs	r2, r0
 80099ac:	6163      	str	r3, [r4, #20]
 80099ae:	9201      	str	r2, [sp, #4]
 80099b0:	9b01      	ldr	r3, [sp, #4]
 80099b2:	61a3      	str	r3, [r4, #24]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	bf0c      	ite	eq
 80099b8:	2201      	moveq	r2, #1
 80099ba:	2202      	movne	r2, #2
 80099bc:	6122      	str	r2, [r4, #16]
 80099be:	b1a5      	cbz	r5, 80099ea <__d2b+0x92>
 80099c0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80099c4:	4405      	add	r5, r0
 80099c6:	603d      	str	r5, [r7, #0]
 80099c8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80099cc:	6030      	str	r0, [r6, #0]
 80099ce:	4620      	mov	r0, r4
 80099d0:	b003      	add	sp, #12
 80099d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80099d6:	6161      	str	r1, [r4, #20]
 80099d8:	e7ea      	b.n	80099b0 <__d2b+0x58>
 80099da:	a801      	add	r0, sp, #4
 80099dc:	f7ff fd61 	bl	80094a2 <__lo0bits>
 80099e0:	9b01      	ldr	r3, [sp, #4]
 80099e2:	6163      	str	r3, [r4, #20]
 80099e4:	3020      	adds	r0, #32
 80099e6:	2201      	movs	r2, #1
 80099e8:	e7e8      	b.n	80099bc <__d2b+0x64>
 80099ea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80099ee:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80099f2:	6038      	str	r0, [r7, #0]
 80099f4:	6918      	ldr	r0, [r3, #16]
 80099f6:	f7ff fd35 	bl	8009464 <__hi0bits>
 80099fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80099fe:	e7e5      	b.n	80099cc <__d2b+0x74>
 8009a00:	0800a438 	.word	0x0800a438
 8009a04:	0800a45a 	.word	0x0800a45a

08009a08 <__sread>:
 8009a08:	b510      	push	{r4, lr}
 8009a0a:	460c      	mov	r4, r1
 8009a0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a10:	f000 f898 	bl	8009b44 <_read_r>
 8009a14:	2800      	cmp	r0, #0
 8009a16:	bfab      	itete	ge
 8009a18:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009a1a:	89a3      	ldrhlt	r3, [r4, #12]
 8009a1c:	181b      	addge	r3, r3, r0
 8009a1e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009a22:	bfac      	ite	ge
 8009a24:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009a26:	81a3      	strhlt	r3, [r4, #12]
 8009a28:	bd10      	pop	{r4, pc}

08009a2a <__swrite>:
 8009a2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a2e:	461f      	mov	r7, r3
 8009a30:	898b      	ldrh	r3, [r1, #12]
 8009a32:	05db      	lsls	r3, r3, #23
 8009a34:	4605      	mov	r5, r0
 8009a36:	460c      	mov	r4, r1
 8009a38:	4616      	mov	r6, r2
 8009a3a:	d505      	bpl.n	8009a48 <__swrite+0x1e>
 8009a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a40:	2302      	movs	r3, #2
 8009a42:	2200      	movs	r2, #0
 8009a44:	f000 f86c 	bl	8009b20 <_lseek_r>
 8009a48:	89a3      	ldrh	r3, [r4, #12]
 8009a4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009a52:	81a3      	strh	r3, [r4, #12]
 8009a54:	4632      	mov	r2, r6
 8009a56:	463b      	mov	r3, r7
 8009a58:	4628      	mov	r0, r5
 8009a5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a5e:	f000 b893 	b.w	8009b88 <_write_r>

08009a62 <__sseek>:
 8009a62:	b510      	push	{r4, lr}
 8009a64:	460c      	mov	r4, r1
 8009a66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a6a:	f000 f859 	bl	8009b20 <_lseek_r>
 8009a6e:	1c43      	adds	r3, r0, #1
 8009a70:	89a3      	ldrh	r3, [r4, #12]
 8009a72:	bf15      	itete	ne
 8009a74:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009a76:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009a7a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009a7e:	81a3      	strheq	r3, [r4, #12]
 8009a80:	bf18      	it	ne
 8009a82:	81a3      	strhne	r3, [r4, #12]
 8009a84:	bd10      	pop	{r4, pc}

08009a86 <__sclose>:
 8009a86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a8a:	f000 b88f 	b.w	8009bac <_close_r>

08009a8e <_realloc_r>:
 8009a8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a92:	4607      	mov	r7, r0
 8009a94:	4614      	mov	r4, r2
 8009a96:	460d      	mov	r5, r1
 8009a98:	b921      	cbnz	r1, 8009aa4 <_realloc_r+0x16>
 8009a9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a9e:	4611      	mov	r1, r2
 8009aa0:	f7ff bb00 	b.w	80090a4 <_malloc_r>
 8009aa4:	b92a      	cbnz	r2, 8009ab2 <_realloc_r+0x24>
 8009aa6:	f000 f8d1 	bl	8009c4c <_free_r>
 8009aaa:	4625      	mov	r5, r4
 8009aac:	4628      	mov	r0, r5
 8009aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ab2:	f000 f927 	bl	8009d04 <_malloc_usable_size_r>
 8009ab6:	4284      	cmp	r4, r0
 8009ab8:	4606      	mov	r6, r0
 8009aba:	d802      	bhi.n	8009ac2 <_realloc_r+0x34>
 8009abc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009ac0:	d8f4      	bhi.n	8009aac <_realloc_r+0x1e>
 8009ac2:	4621      	mov	r1, r4
 8009ac4:	4638      	mov	r0, r7
 8009ac6:	f7ff faed 	bl	80090a4 <_malloc_r>
 8009aca:	4680      	mov	r8, r0
 8009acc:	b908      	cbnz	r0, 8009ad2 <_realloc_r+0x44>
 8009ace:	4645      	mov	r5, r8
 8009ad0:	e7ec      	b.n	8009aac <_realloc_r+0x1e>
 8009ad2:	42b4      	cmp	r4, r6
 8009ad4:	4622      	mov	r2, r4
 8009ad6:	4629      	mov	r1, r5
 8009ad8:	bf28      	it	cs
 8009ada:	4632      	movcs	r2, r6
 8009adc:	f000 f876 	bl	8009bcc <memcpy>
 8009ae0:	4629      	mov	r1, r5
 8009ae2:	4638      	mov	r0, r7
 8009ae4:	f000 f8b2 	bl	8009c4c <_free_r>
 8009ae8:	e7f1      	b.n	8009ace <_realloc_r+0x40>

08009aea <memmove>:
 8009aea:	4288      	cmp	r0, r1
 8009aec:	b510      	push	{r4, lr}
 8009aee:	eb01 0402 	add.w	r4, r1, r2
 8009af2:	d902      	bls.n	8009afa <memmove+0x10>
 8009af4:	4284      	cmp	r4, r0
 8009af6:	4623      	mov	r3, r4
 8009af8:	d807      	bhi.n	8009b0a <memmove+0x20>
 8009afa:	1e43      	subs	r3, r0, #1
 8009afc:	42a1      	cmp	r1, r4
 8009afe:	d008      	beq.n	8009b12 <memmove+0x28>
 8009b00:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b04:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b08:	e7f8      	b.n	8009afc <memmove+0x12>
 8009b0a:	4402      	add	r2, r0
 8009b0c:	4601      	mov	r1, r0
 8009b0e:	428a      	cmp	r2, r1
 8009b10:	d100      	bne.n	8009b14 <memmove+0x2a>
 8009b12:	bd10      	pop	{r4, pc}
 8009b14:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b18:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b1c:	e7f7      	b.n	8009b0e <memmove+0x24>
	...

08009b20 <_lseek_r>:
 8009b20:	b538      	push	{r3, r4, r5, lr}
 8009b22:	4d07      	ldr	r5, [pc, #28]	@ (8009b40 <_lseek_r+0x20>)
 8009b24:	4604      	mov	r4, r0
 8009b26:	4608      	mov	r0, r1
 8009b28:	4611      	mov	r1, r2
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	602a      	str	r2, [r5, #0]
 8009b2e:	461a      	mov	r2, r3
 8009b30:	f7f8 f9a7 	bl	8001e82 <_lseek>
 8009b34:	1c43      	adds	r3, r0, #1
 8009b36:	d102      	bne.n	8009b3e <_lseek_r+0x1e>
 8009b38:	682b      	ldr	r3, [r5, #0]
 8009b3a:	b103      	cbz	r3, 8009b3e <_lseek_r+0x1e>
 8009b3c:	6023      	str	r3, [r4, #0]
 8009b3e:	bd38      	pop	{r3, r4, r5, pc}
 8009b40:	20000544 	.word	0x20000544

08009b44 <_read_r>:
 8009b44:	b538      	push	{r3, r4, r5, lr}
 8009b46:	4d07      	ldr	r5, [pc, #28]	@ (8009b64 <_read_r+0x20>)
 8009b48:	4604      	mov	r4, r0
 8009b4a:	4608      	mov	r0, r1
 8009b4c:	4611      	mov	r1, r2
 8009b4e:	2200      	movs	r2, #0
 8009b50:	602a      	str	r2, [r5, #0]
 8009b52:	461a      	mov	r2, r3
 8009b54:	f7f8 f935 	bl	8001dc2 <_read>
 8009b58:	1c43      	adds	r3, r0, #1
 8009b5a:	d102      	bne.n	8009b62 <_read_r+0x1e>
 8009b5c:	682b      	ldr	r3, [r5, #0]
 8009b5e:	b103      	cbz	r3, 8009b62 <_read_r+0x1e>
 8009b60:	6023      	str	r3, [r4, #0]
 8009b62:	bd38      	pop	{r3, r4, r5, pc}
 8009b64:	20000544 	.word	0x20000544

08009b68 <_sbrk_r>:
 8009b68:	b538      	push	{r3, r4, r5, lr}
 8009b6a:	4d06      	ldr	r5, [pc, #24]	@ (8009b84 <_sbrk_r+0x1c>)
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	4604      	mov	r4, r0
 8009b70:	4608      	mov	r0, r1
 8009b72:	602b      	str	r3, [r5, #0]
 8009b74:	f7f8 f992 	bl	8001e9c <_sbrk>
 8009b78:	1c43      	adds	r3, r0, #1
 8009b7a:	d102      	bne.n	8009b82 <_sbrk_r+0x1a>
 8009b7c:	682b      	ldr	r3, [r5, #0]
 8009b7e:	b103      	cbz	r3, 8009b82 <_sbrk_r+0x1a>
 8009b80:	6023      	str	r3, [r4, #0]
 8009b82:	bd38      	pop	{r3, r4, r5, pc}
 8009b84:	20000544 	.word	0x20000544

08009b88 <_write_r>:
 8009b88:	b538      	push	{r3, r4, r5, lr}
 8009b8a:	4d07      	ldr	r5, [pc, #28]	@ (8009ba8 <_write_r+0x20>)
 8009b8c:	4604      	mov	r4, r0
 8009b8e:	4608      	mov	r0, r1
 8009b90:	4611      	mov	r1, r2
 8009b92:	2200      	movs	r2, #0
 8009b94:	602a      	str	r2, [r5, #0]
 8009b96:	461a      	mov	r2, r3
 8009b98:	f7f8 f930 	bl	8001dfc <_write>
 8009b9c:	1c43      	adds	r3, r0, #1
 8009b9e:	d102      	bne.n	8009ba6 <_write_r+0x1e>
 8009ba0:	682b      	ldr	r3, [r5, #0]
 8009ba2:	b103      	cbz	r3, 8009ba6 <_write_r+0x1e>
 8009ba4:	6023      	str	r3, [r4, #0]
 8009ba6:	bd38      	pop	{r3, r4, r5, pc}
 8009ba8:	20000544 	.word	0x20000544

08009bac <_close_r>:
 8009bac:	b538      	push	{r3, r4, r5, lr}
 8009bae:	4d06      	ldr	r5, [pc, #24]	@ (8009bc8 <_close_r+0x1c>)
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	4604      	mov	r4, r0
 8009bb4:	4608      	mov	r0, r1
 8009bb6:	602b      	str	r3, [r5, #0]
 8009bb8:	f7f8 f93c 	bl	8001e34 <_close>
 8009bbc:	1c43      	adds	r3, r0, #1
 8009bbe:	d102      	bne.n	8009bc6 <_close_r+0x1a>
 8009bc0:	682b      	ldr	r3, [r5, #0]
 8009bc2:	b103      	cbz	r3, 8009bc6 <_close_r+0x1a>
 8009bc4:	6023      	str	r3, [r4, #0]
 8009bc6:	bd38      	pop	{r3, r4, r5, pc}
 8009bc8:	20000544 	.word	0x20000544

08009bcc <memcpy>:
 8009bcc:	440a      	add	r2, r1
 8009bce:	4291      	cmp	r1, r2
 8009bd0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009bd4:	d100      	bne.n	8009bd8 <memcpy+0xc>
 8009bd6:	4770      	bx	lr
 8009bd8:	b510      	push	{r4, lr}
 8009bda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009be2:	4291      	cmp	r1, r2
 8009be4:	d1f9      	bne.n	8009bda <memcpy+0xe>
 8009be6:	bd10      	pop	{r4, pc}

08009be8 <__assert_func>:
 8009be8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009bea:	4614      	mov	r4, r2
 8009bec:	461a      	mov	r2, r3
 8009bee:	4b09      	ldr	r3, [pc, #36]	@ (8009c14 <__assert_func+0x2c>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	4605      	mov	r5, r0
 8009bf4:	68d8      	ldr	r0, [r3, #12]
 8009bf6:	b14c      	cbz	r4, 8009c0c <__assert_func+0x24>
 8009bf8:	4b07      	ldr	r3, [pc, #28]	@ (8009c18 <__assert_func+0x30>)
 8009bfa:	9100      	str	r1, [sp, #0]
 8009bfc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009c00:	4906      	ldr	r1, [pc, #24]	@ (8009c1c <__assert_func+0x34>)
 8009c02:	462b      	mov	r3, r5
 8009c04:	f000 f886 	bl	8009d14 <fiprintf>
 8009c08:	f000 f8a3 	bl	8009d52 <abort>
 8009c0c:	4b04      	ldr	r3, [pc, #16]	@ (8009c20 <__assert_func+0x38>)
 8009c0e:	461c      	mov	r4, r3
 8009c10:	e7f3      	b.n	8009bfa <__assert_func+0x12>
 8009c12:	bf00      	nop
 8009c14:	2000001c 	.word	0x2000001c
 8009c18:	0800a4bd 	.word	0x0800a4bd
 8009c1c:	0800a4ca 	.word	0x0800a4ca
 8009c20:	0800a4f8 	.word	0x0800a4f8

08009c24 <_calloc_r>:
 8009c24:	b570      	push	{r4, r5, r6, lr}
 8009c26:	fba1 5402 	umull	r5, r4, r1, r2
 8009c2a:	b934      	cbnz	r4, 8009c3a <_calloc_r+0x16>
 8009c2c:	4629      	mov	r1, r5
 8009c2e:	f7ff fa39 	bl	80090a4 <_malloc_r>
 8009c32:	4606      	mov	r6, r0
 8009c34:	b928      	cbnz	r0, 8009c42 <_calloc_r+0x1e>
 8009c36:	4630      	mov	r0, r6
 8009c38:	bd70      	pop	{r4, r5, r6, pc}
 8009c3a:	220c      	movs	r2, #12
 8009c3c:	6002      	str	r2, [r0, #0]
 8009c3e:	2600      	movs	r6, #0
 8009c40:	e7f9      	b.n	8009c36 <_calloc_r+0x12>
 8009c42:	462a      	mov	r2, r5
 8009c44:	4621      	mov	r1, r4
 8009c46:	f7fe fa17 	bl	8008078 <memset>
 8009c4a:	e7f4      	b.n	8009c36 <_calloc_r+0x12>

08009c4c <_free_r>:
 8009c4c:	b538      	push	{r3, r4, r5, lr}
 8009c4e:	4605      	mov	r5, r0
 8009c50:	2900      	cmp	r1, #0
 8009c52:	d041      	beq.n	8009cd8 <_free_r+0x8c>
 8009c54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c58:	1f0c      	subs	r4, r1, #4
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	bfb8      	it	lt
 8009c5e:	18e4      	addlt	r4, r4, r3
 8009c60:	f7ff fb4c 	bl	80092fc <__malloc_lock>
 8009c64:	4a1d      	ldr	r2, [pc, #116]	@ (8009cdc <_free_r+0x90>)
 8009c66:	6813      	ldr	r3, [r2, #0]
 8009c68:	b933      	cbnz	r3, 8009c78 <_free_r+0x2c>
 8009c6a:	6063      	str	r3, [r4, #4]
 8009c6c:	6014      	str	r4, [r2, #0]
 8009c6e:	4628      	mov	r0, r5
 8009c70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c74:	f7ff bb48 	b.w	8009308 <__malloc_unlock>
 8009c78:	42a3      	cmp	r3, r4
 8009c7a:	d908      	bls.n	8009c8e <_free_r+0x42>
 8009c7c:	6820      	ldr	r0, [r4, #0]
 8009c7e:	1821      	adds	r1, r4, r0
 8009c80:	428b      	cmp	r3, r1
 8009c82:	bf01      	itttt	eq
 8009c84:	6819      	ldreq	r1, [r3, #0]
 8009c86:	685b      	ldreq	r3, [r3, #4]
 8009c88:	1809      	addeq	r1, r1, r0
 8009c8a:	6021      	streq	r1, [r4, #0]
 8009c8c:	e7ed      	b.n	8009c6a <_free_r+0x1e>
 8009c8e:	461a      	mov	r2, r3
 8009c90:	685b      	ldr	r3, [r3, #4]
 8009c92:	b10b      	cbz	r3, 8009c98 <_free_r+0x4c>
 8009c94:	42a3      	cmp	r3, r4
 8009c96:	d9fa      	bls.n	8009c8e <_free_r+0x42>
 8009c98:	6811      	ldr	r1, [r2, #0]
 8009c9a:	1850      	adds	r0, r2, r1
 8009c9c:	42a0      	cmp	r0, r4
 8009c9e:	d10b      	bne.n	8009cb8 <_free_r+0x6c>
 8009ca0:	6820      	ldr	r0, [r4, #0]
 8009ca2:	4401      	add	r1, r0
 8009ca4:	1850      	adds	r0, r2, r1
 8009ca6:	4283      	cmp	r3, r0
 8009ca8:	6011      	str	r1, [r2, #0]
 8009caa:	d1e0      	bne.n	8009c6e <_free_r+0x22>
 8009cac:	6818      	ldr	r0, [r3, #0]
 8009cae:	685b      	ldr	r3, [r3, #4]
 8009cb0:	6053      	str	r3, [r2, #4]
 8009cb2:	4408      	add	r0, r1
 8009cb4:	6010      	str	r0, [r2, #0]
 8009cb6:	e7da      	b.n	8009c6e <_free_r+0x22>
 8009cb8:	d902      	bls.n	8009cc0 <_free_r+0x74>
 8009cba:	230c      	movs	r3, #12
 8009cbc:	602b      	str	r3, [r5, #0]
 8009cbe:	e7d6      	b.n	8009c6e <_free_r+0x22>
 8009cc0:	6820      	ldr	r0, [r4, #0]
 8009cc2:	1821      	adds	r1, r4, r0
 8009cc4:	428b      	cmp	r3, r1
 8009cc6:	bf04      	itt	eq
 8009cc8:	6819      	ldreq	r1, [r3, #0]
 8009cca:	685b      	ldreq	r3, [r3, #4]
 8009ccc:	6063      	str	r3, [r4, #4]
 8009cce:	bf04      	itt	eq
 8009cd0:	1809      	addeq	r1, r1, r0
 8009cd2:	6021      	streq	r1, [r4, #0]
 8009cd4:	6054      	str	r4, [r2, #4]
 8009cd6:	e7ca      	b.n	8009c6e <_free_r+0x22>
 8009cd8:	bd38      	pop	{r3, r4, r5, pc}
 8009cda:	bf00      	nop
 8009cdc:	20000540 	.word	0x20000540

08009ce0 <__ascii_mbtowc>:
 8009ce0:	b082      	sub	sp, #8
 8009ce2:	b901      	cbnz	r1, 8009ce6 <__ascii_mbtowc+0x6>
 8009ce4:	a901      	add	r1, sp, #4
 8009ce6:	b142      	cbz	r2, 8009cfa <__ascii_mbtowc+0x1a>
 8009ce8:	b14b      	cbz	r3, 8009cfe <__ascii_mbtowc+0x1e>
 8009cea:	7813      	ldrb	r3, [r2, #0]
 8009cec:	600b      	str	r3, [r1, #0]
 8009cee:	7812      	ldrb	r2, [r2, #0]
 8009cf0:	1e10      	subs	r0, r2, #0
 8009cf2:	bf18      	it	ne
 8009cf4:	2001      	movne	r0, #1
 8009cf6:	b002      	add	sp, #8
 8009cf8:	4770      	bx	lr
 8009cfa:	4610      	mov	r0, r2
 8009cfc:	e7fb      	b.n	8009cf6 <__ascii_mbtowc+0x16>
 8009cfe:	f06f 0001 	mvn.w	r0, #1
 8009d02:	e7f8      	b.n	8009cf6 <__ascii_mbtowc+0x16>

08009d04 <_malloc_usable_size_r>:
 8009d04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d08:	1f18      	subs	r0, r3, #4
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	bfbc      	itt	lt
 8009d0e:	580b      	ldrlt	r3, [r1, r0]
 8009d10:	18c0      	addlt	r0, r0, r3
 8009d12:	4770      	bx	lr

08009d14 <fiprintf>:
 8009d14:	b40e      	push	{r1, r2, r3}
 8009d16:	b503      	push	{r0, r1, lr}
 8009d18:	4601      	mov	r1, r0
 8009d1a:	ab03      	add	r3, sp, #12
 8009d1c:	4805      	ldr	r0, [pc, #20]	@ (8009d34 <fiprintf+0x20>)
 8009d1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d22:	6800      	ldr	r0, [r0, #0]
 8009d24:	9301      	str	r3, [sp, #4]
 8009d26:	f000 f845 	bl	8009db4 <_vfiprintf_r>
 8009d2a:	b002      	add	sp, #8
 8009d2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d30:	b003      	add	sp, #12
 8009d32:	4770      	bx	lr
 8009d34:	2000001c 	.word	0x2000001c

08009d38 <__ascii_wctomb>:
 8009d38:	4603      	mov	r3, r0
 8009d3a:	4608      	mov	r0, r1
 8009d3c:	b141      	cbz	r1, 8009d50 <__ascii_wctomb+0x18>
 8009d3e:	2aff      	cmp	r2, #255	@ 0xff
 8009d40:	d904      	bls.n	8009d4c <__ascii_wctomb+0x14>
 8009d42:	228a      	movs	r2, #138	@ 0x8a
 8009d44:	601a      	str	r2, [r3, #0]
 8009d46:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009d4a:	4770      	bx	lr
 8009d4c:	700a      	strb	r2, [r1, #0]
 8009d4e:	2001      	movs	r0, #1
 8009d50:	4770      	bx	lr

08009d52 <abort>:
 8009d52:	b508      	push	{r3, lr}
 8009d54:	2006      	movs	r0, #6
 8009d56:	f000 fa63 	bl	800a220 <raise>
 8009d5a:	2001      	movs	r0, #1
 8009d5c:	f7f8 f826 	bl	8001dac <_exit>

08009d60 <__sfputc_r>:
 8009d60:	6893      	ldr	r3, [r2, #8]
 8009d62:	3b01      	subs	r3, #1
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	b410      	push	{r4}
 8009d68:	6093      	str	r3, [r2, #8]
 8009d6a:	da08      	bge.n	8009d7e <__sfputc_r+0x1e>
 8009d6c:	6994      	ldr	r4, [r2, #24]
 8009d6e:	42a3      	cmp	r3, r4
 8009d70:	db01      	blt.n	8009d76 <__sfputc_r+0x16>
 8009d72:	290a      	cmp	r1, #10
 8009d74:	d103      	bne.n	8009d7e <__sfputc_r+0x1e>
 8009d76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d7a:	f000 b933 	b.w	8009fe4 <__swbuf_r>
 8009d7e:	6813      	ldr	r3, [r2, #0]
 8009d80:	1c58      	adds	r0, r3, #1
 8009d82:	6010      	str	r0, [r2, #0]
 8009d84:	7019      	strb	r1, [r3, #0]
 8009d86:	4608      	mov	r0, r1
 8009d88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d8c:	4770      	bx	lr

08009d8e <__sfputs_r>:
 8009d8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d90:	4606      	mov	r6, r0
 8009d92:	460f      	mov	r7, r1
 8009d94:	4614      	mov	r4, r2
 8009d96:	18d5      	adds	r5, r2, r3
 8009d98:	42ac      	cmp	r4, r5
 8009d9a:	d101      	bne.n	8009da0 <__sfputs_r+0x12>
 8009d9c:	2000      	movs	r0, #0
 8009d9e:	e007      	b.n	8009db0 <__sfputs_r+0x22>
 8009da0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009da4:	463a      	mov	r2, r7
 8009da6:	4630      	mov	r0, r6
 8009da8:	f7ff ffda 	bl	8009d60 <__sfputc_r>
 8009dac:	1c43      	adds	r3, r0, #1
 8009dae:	d1f3      	bne.n	8009d98 <__sfputs_r+0xa>
 8009db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009db4 <_vfiprintf_r>:
 8009db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009db8:	460d      	mov	r5, r1
 8009dba:	b09d      	sub	sp, #116	@ 0x74
 8009dbc:	4614      	mov	r4, r2
 8009dbe:	4698      	mov	r8, r3
 8009dc0:	4606      	mov	r6, r0
 8009dc2:	b118      	cbz	r0, 8009dcc <_vfiprintf_r+0x18>
 8009dc4:	6a03      	ldr	r3, [r0, #32]
 8009dc6:	b90b      	cbnz	r3, 8009dcc <_vfiprintf_r+0x18>
 8009dc8:	f7fe f920 	bl	800800c <__sinit>
 8009dcc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009dce:	07d9      	lsls	r1, r3, #31
 8009dd0:	d405      	bmi.n	8009dde <_vfiprintf_r+0x2a>
 8009dd2:	89ab      	ldrh	r3, [r5, #12]
 8009dd4:	059a      	lsls	r2, r3, #22
 8009dd6:	d402      	bmi.n	8009dde <_vfiprintf_r+0x2a>
 8009dd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009dda:	f7fe f980 	bl	80080de <__retarget_lock_acquire_recursive>
 8009dde:	89ab      	ldrh	r3, [r5, #12]
 8009de0:	071b      	lsls	r3, r3, #28
 8009de2:	d501      	bpl.n	8009de8 <_vfiprintf_r+0x34>
 8009de4:	692b      	ldr	r3, [r5, #16]
 8009de6:	b99b      	cbnz	r3, 8009e10 <_vfiprintf_r+0x5c>
 8009de8:	4629      	mov	r1, r5
 8009dea:	4630      	mov	r0, r6
 8009dec:	f000 f938 	bl	800a060 <__swsetup_r>
 8009df0:	b170      	cbz	r0, 8009e10 <_vfiprintf_r+0x5c>
 8009df2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009df4:	07dc      	lsls	r4, r3, #31
 8009df6:	d504      	bpl.n	8009e02 <_vfiprintf_r+0x4e>
 8009df8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009dfc:	b01d      	add	sp, #116	@ 0x74
 8009dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e02:	89ab      	ldrh	r3, [r5, #12]
 8009e04:	0598      	lsls	r0, r3, #22
 8009e06:	d4f7      	bmi.n	8009df8 <_vfiprintf_r+0x44>
 8009e08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e0a:	f7fe f969 	bl	80080e0 <__retarget_lock_release_recursive>
 8009e0e:	e7f3      	b.n	8009df8 <_vfiprintf_r+0x44>
 8009e10:	2300      	movs	r3, #0
 8009e12:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e14:	2320      	movs	r3, #32
 8009e16:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009e1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e1e:	2330      	movs	r3, #48	@ 0x30
 8009e20:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009fd0 <_vfiprintf_r+0x21c>
 8009e24:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009e28:	f04f 0901 	mov.w	r9, #1
 8009e2c:	4623      	mov	r3, r4
 8009e2e:	469a      	mov	sl, r3
 8009e30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e34:	b10a      	cbz	r2, 8009e3a <_vfiprintf_r+0x86>
 8009e36:	2a25      	cmp	r2, #37	@ 0x25
 8009e38:	d1f9      	bne.n	8009e2e <_vfiprintf_r+0x7a>
 8009e3a:	ebba 0b04 	subs.w	fp, sl, r4
 8009e3e:	d00b      	beq.n	8009e58 <_vfiprintf_r+0xa4>
 8009e40:	465b      	mov	r3, fp
 8009e42:	4622      	mov	r2, r4
 8009e44:	4629      	mov	r1, r5
 8009e46:	4630      	mov	r0, r6
 8009e48:	f7ff ffa1 	bl	8009d8e <__sfputs_r>
 8009e4c:	3001      	adds	r0, #1
 8009e4e:	f000 80a7 	beq.w	8009fa0 <_vfiprintf_r+0x1ec>
 8009e52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e54:	445a      	add	r2, fp
 8009e56:	9209      	str	r2, [sp, #36]	@ 0x24
 8009e58:	f89a 3000 	ldrb.w	r3, [sl]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	f000 809f 	beq.w	8009fa0 <_vfiprintf_r+0x1ec>
 8009e62:	2300      	movs	r3, #0
 8009e64:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009e68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e6c:	f10a 0a01 	add.w	sl, sl, #1
 8009e70:	9304      	str	r3, [sp, #16]
 8009e72:	9307      	str	r3, [sp, #28]
 8009e74:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009e78:	931a      	str	r3, [sp, #104]	@ 0x68
 8009e7a:	4654      	mov	r4, sl
 8009e7c:	2205      	movs	r2, #5
 8009e7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e82:	4853      	ldr	r0, [pc, #332]	@ (8009fd0 <_vfiprintf_r+0x21c>)
 8009e84:	f7f6 f9a4 	bl	80001d0 <memchr>
 8009e88:	9a04      	ldr	r2, [sp, #16]
 8009e8a:	b9d8      	cbnz	r0, 8009ec4 <_vfiprintf_r+0x110>
 8009e8c:	06d1      	lsls	r1, r2, #27
 8009e8e:	bf44      	itt	mi
 8009e90:	2320      	movmi	r3, #32
 8009e92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e96:	0713      	lsls	r3, r2, #28
 8009e98:	bf44      	itt	mi
 8009e9a:	232b      	movmi	r3, #43	@ 0x2b
 8009e9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ea0:	f89a 3000 	ldrb.w	r3, [sl]
 8009ea4:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ea6:	d015      	beq.n	8009ed4 <_vfiprintf_r+0x120>
 8009ea8:	9a07      	ldr	r2, [sp, #28]
 8009eaa:	4654      	mov	r4, sl
 8009eac:	2000      	movs	r0, #0
 8009eae:	f04f 0c0a 	mov.w	ip, #10
 8009eb2:	4621      	mov	r1, r4
 8009eb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009eb8:	3b30      	subs	r3, #48	@ 0x30
 8009eba:	2b09      	cmp	r3, #9
 8009ebc:	d94b      	bls.n	8009f56 <_vfiprintf_r+0x1a2>
 8009ebe:	b1b0      	cbz	r0, 8009eee <_vfiprintf_r+0x13a>
 8009ec0:	9207      	str	r2, [sp, #28]
 8009ec2:	e014      	b.n	8009eee <_vfiprintf_r+0x13a>
 8009ec4:	eba0 0308 	sub.w	r3, r0, r8
 8009ec8:	fa09 f303 	lsl.w	r3, r9, r3
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	9304      	str	r3, [sp, #16]
 8009ed0:	46a2      	mov	sl, r4
 8009ed2:	e7d2      	b.n	8009e7a <_vfiprintf_r+0xc6>
 8009ed4:	9b03      	ldr	r3, [sp, #12]
 8009ed6:	1d19      	adds	r1, r3, #4
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	9103      	str	r1, [sp, #12]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	bfbb      	ittet	lt
 8009ee0:	425b      	neglt	r3, r3
 8009ee2:	f042 0202 	orrlt.w	r2, r2, #2
 8009ee6:	9307      	strge	r3, [sp, #28]
 8009ee8:	9307      	strlt	r3, [sp, #28]
 8009eea:	bfb8      	it	lt
 8009eec:	9204      	strlt	r2, [sp, #16]
 8009eee:	7823      	ldrb	r3, [r4, #0]
 8009ef0:	2b2e      	cmp	r3, #46	@ 0x2e
 8009ef2:	d10a      	bne.n	8009f0a <_vfiprintf_r+0x156>
 8009ef4:	7863      	ldrb	r3, [r4, #1]
 8009ef6:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ef8:	d132      	bne.n	8009f60 <_vfiprintf_r+0x1ac>
 8009efa:	9b03      	ldr	r3, [sp, #12]
 8009efc:	1d1a      	adds	r2, r3, #4
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	9203      	str	r2, [sp, #12]
 8009f02:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009f06:	3402      	adds	r4, #2
 8009f08:	9305      	str	r3, [sp, #20]
 8009f0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009fe0 <_vfiprintf_r+0x22c>
 8009f0e:	7821      	ldrb	r1, [r4, #0]
 8009f10:	2203      	movs	r2, #3
 8009f12:	4650      	mov	r0, sl
 8009f14:	f7f6 f95c 	bl	80001d0 <memchr>
 8009f18:	b138      	cbz	r0, 8009f2a <_vfiprintf_r+0x176>
 8009f1a:	9b04      	ldr	r3, [sp, #16]
 8009f1c:	eba0 000a 	sub.w	r0, r0, sl
 8009f20:	2240      	movs	r2, #64	@ 0x40
 8009f22:	4082      	lsls	r2, r0
 8009f24:	4313      	orrs	r3, r2
 8009f26:	3401      	adds	r4, #1
 8009f28:	9304      	str	r3, [sp, #16]
 8009f2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f2e:	4829      	ldr	r0, [pc, #164]	@ (8009fd4 <_vfiprintf_r+0x220>)
 8009f30:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009f34:	2206      	movs	r2, #6
 8009f36:	f7f6 f94b 	bl	80001d0 <memchr>
 8009f3a:	2800      	cmp	r0, #0
 8009f3c:	d03f      	beq.n	8009fbe <_vfiprintf_r+0x20a>
 8009f3e:	4b26      	ldr	r3, [pc, #152]	@ (8009fd8 <_vfiprintf_r+0x224>)
 8009f40:	bb1b      	cbnz	r3, 8009f8a <_vfiprintf_r+0x1d6>
 8009f42:	9b03      	ldr	r3, [sp, #12]
 8009f44:	3307      	adds	r3, #7
 8009f46:	f023 0307 	bic.w	r3, r3, #7
 8009f4a:	3308      	adds	r3, #8
 8009f4c:	9303      	str	r3, [sp, #12]
 8009f4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f50:	443b      	add	r3, r7
 8009f52:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f54:	e76a      	b.n	8009e2c <_vfiprintf_r+0x78>
 8009f56:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f5a:	460c      	mov	r4, r1
 8009f5c:	2001      	movs	r0, #1
 8009f5e:	e7a8      	b.n	8009eb2 <_vfiprintf_r+0xfe>
 8009f60:	2300      	movs	r3, #0
 8009f62:	3401      	adds	r4, #1
 8009f64:	9305      	str	r3, [sp, #20]
 8009f66:	4619      	mov	r1, r3
 8009f68:	f04f 0c0a 	mov.w	ip, #10
 8009f6c:	4620      	mov	r0, r4
 8009f6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f72:	3a30      	subs	r2, #48	@ 0x30
 8009f74:	2a09      	cmp	r2, #9
 8009f76:	d903      	bls.n	8009f80 <_vfiprintf_r+0x1cc>
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d0c6      	beq.n	8009f0a <_vfiprintf_r+0x156>
 8009f7c:	9105      	str	r1, [sp, #20]
 8009f7e:	e7c4      	b.n	8009f0a <_vfiprintf_r+0x156>
 8009f80:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f84:	4604      	mov	r4, r0
 8009f86:	2301      	movs	r3, #1
 8009f88:	e7f0      	b.n	8009f6c <_vfiprintf_r+0x1b8>
 8009f8a:	ab03      	add	r3, sp, #12
 8009f8c:	9300      	str	r3, [sp, #0]
 8009f8e:	462a      	mov	r2, r5
 8009f90:	4b12      	ldr	r3, [pc, #72]	@ (8009fdc <_vfiprintf_r+0x228>)
 8009f92:	a904      	add	r1, sp, #16
 8009f94:	4630      	mov	r0, r6
 8009f96:	f7fd fbd5 	bl	8007744 <_printf_float>
 8009f9a:	4607      	mov	r7, r0
 8009f9c:	1c78      	adds	r0, r7, #1
 8009f9e:	d1d6      	bne.n	8009f4e <_vfiprintf_r+0x19a>
 8009fa0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009fa2:	07d9      	lsls	r1, r3, #31
 8009fa4:	d405      	bmi.n	8009fb2 <_vfiprintf_r+0x1fe>
 8009fa6:	89ab      	ldrh	r3, [r5, #12]
 8009fa8:	059a      	lsls	r2, r3, #22
 8009faa:	d402      	bmi.n	8009fb2 <_vfiprintf_r+0x1fe>
 8009fac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009fae:	f7fe f897 	bl	80080e0 <__retarget_lock_release_recursive>
 8009fb2:	89ab      	ldrh	r3, [r5, #12]
 8009fb4:	065b      	lsls	r3, r3, #25
 8009fb6:	f53f af1f 	bmi.w	8009df8 <_vfiprintf_r+0x44>
 8009fba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009fbc:	e71e      	b.n	8009dfc <_vfiprintf_r+0x48>
 8009fbe:	ab03      	add	r3, sp, #12
 8009fc0:	9300      	str	r3, [sp, #0]
 8009fc2:	462a      	mov	r2, r5
 8009fc4:	4b05      	ldr	r3, [pc, #20]	@ (8009fdc <_vfiprintf_r+0x228>)
 8009fc6:	a904      	add	r1, sp, #16
 8009fc8:	4630      	mov	r0, r6
 8009fca:	f7fd fe53 	bl	8007c74 <_printf_i>
 8009fce:	e7e4      	b.n	8009f9a <_vfiprintf_r+0x1e6>
 8009fd0:	0800a449 	.word	0x0800a449
 8009fd4:	0800a453 	.word	0x0800a453
 8009fd8:	08007745 	.word	0x08007745
 8009fdc:	08009d8f 	.word	0x08009d8f
 8009fe0:	0800a44f 	.word	0x0800a44f

08009fe4 <__swbuf_r>:
 8009fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fe6:	460e      	mov	r6, r1
 8009fe8:	4614      	mov	r4, r2
 8009fea:	4605      	mov	r5, r0
 8009fec:	b118      	cbz	r0, 8009ff6 <__swbuf_r+0x12>
 8009fee:	6a03      	ldr	r3, [r0, #32]
 8009ff0:	b90b      	cbnz	r3, 8009ff6 <__swbuf_r+0x12>
 8009ff2:	f7fe f80b 	bl	800800c <__sinit>
 8009ff6:	69a3      	ldr	r3, [r4, #24]
 8009ff8:	60a3      	str	r3, [r4, #8]
 8009ffa:	89a3      	ldrh	r3, [r4, #12]
 8009ffc:	071a      	lsls	r2, r3, #28
 8009ffe:	d501      	bpl.n	800a004 <__swbuf_r+0x20>
 800a000:	6923      	ldr	r3, [r4, #16]
 800a002:	b943      	cbnz	r3, 800a016 <__swbuf_r+0x32>
 800a004:	4621      	mov	r1, r4
 800a006:	4628      	mov	r0, r5
 800a008:	f000 f82a 	bl	800a060 <__swsetup_r>
 800a00c:	b118      	cbz	r0, 800a016 <__swbuf_r+0x32>
 800a00e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800a012:	4638      	mov	r0, r7
 800a014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a016:	6823      	ldr	r3, [r4, #0]
 800a018:	6922      	ldr	r2, [r4, #16]
 800a01a:	1a98      	subs	r0, r3, r2
 800a01c:	6963      	ldr	r3, [r4, #20]
 800a01e:	b2f6      	uxtb	r6, r6
 800a020:	4283      	cmp	r3, r0
 800a022:	4637      	mov	r7, r6
 800a024:	dc05      	bgt.n	800a032 <__swbuf_r+0x4e>
 800a026:	4621      	mov	r1, r4
 800a028:	4628      	mov	r0, r5
 800a02a:	f7ff f93f 	bl	80092ac <_fflush_r>
 800a02e:	2800      	cmp	r0, #0
 800a030:	d1ed      	bne.n	800a00e <__swbuf_r+0x2a>
 800a032:	68a3      	ldr	r3, [r4, #8]
 800a034:	3b01      	subs	r3, #1
 800a036:	60a3      	str	r3, [r4, #8]
 800a038:	6823      	ldr	r3, [r4, #0]
 800a03a:	1c5a      	adds	r2, r3, #1
 800a03c:	6022      	str	r2, [r4, #0]
 800a03e:	701e      	strb	r6, [r3, #0]
 800a040:	6962      	ldr	r2, [r4, #20]
 800a042:	1c43      	adds	r3, r0, #1
 800a044:	429a      	cmp	r2, r3
 800a046:	d004      	beq.n	800a052 <__swbuf_r+0x6e>
 800a048:	89a3      	ldrh	r3, [r4, #12]
 800a04a:	07db      	lsls	r3, r3, #31
 800a04c:	d5e1      	bpl.n	800a012 <__swbuf_r+0x2e>
 800a04e:	2e0a      	cmp	r6, #10
 800a050:	d1df      	bne.n	800a012 <__swbuf_r+0x2e>
 800a052:	4621      	mov	r1, r4
 800a054:	4628      	mov	r0, r5
 800a056:	f7ff f929 	bl	80092ac <_fflush_r>
 800a05a:	2800      	cmp	r0, #0
 800a05c:	d0d9      	beq.n	800a012 <__swbuf_r+0x2e>
 800a05e:	e7d6      	b.n	800a00e <__swbuf_r+0x2a>

0800a060 <__swsetup_r>:
 800a060:	b538      	push	{r3, r4, r5, lr}
 800a062:	4b29      	ldr	r3, [pc, #164]	@ (800a108 <__swsetup_r+0xa8>)
 800a064:	4605      	mov	r5, r0
 800a066:	6818      	ldr	r0, [r3, #0]
 800a068:	460c      	mov	r4, r1
 800a06a:	b118      	cbz	r0, 800a074 <__swsetup_r+0x14>
 800a06c:	6a03      	ldr	r3, [r0, #32]
 800a06e:	b90b      	cbnz	r3, 800a074 <__swsetup_r+0x14>
 800a070:	f7fd ffcc 	bl	800800c <__sinit>
 800a074:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a078:	0719      	lsls	r1, r3, #28
 800a07a:	d422      	bmi.n	800a0c2 <__swsetup_r+0x62>
 800a07c:	06da      	lsls	r2, r3, #27
 800a07e:	d407      	bmi.n	800a090 <__swsetup_r+0x30>
 800a080:	2209      	movs	r2, #9
 800a082:	602a      	str	r2, [r5, #0]
 800a084:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a088:	81a3      	strh	r3, [r4, #12]
 800a08a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a08e:	e033      	b.n	800a0f8 <__swsetup_r+0x98>
 800a090:	0758      	lsls	r0, r3, #29
 800a092:	d512      	bpl.n	800a0ba <__swsetup_r+0x5a>
 800a094:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a096:	b141      	cbz	r1, 800a0aa <__swsetup_r+0x4a>
 800a098:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a09c:	4299      	cmp	r1, r3
 800a09e:	d002      	beq.n	800a0a6 <__swsetup_r+0x46>
 800a0a0:	4628      	mov	r0, r5
 800a0a2:	f7ff fdd3 	bl	8009c4c <_free_r>
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	6363      	str	r3, [r4, #52]	@ 0x34
 800a0aa:	89a3      	ldrh	r3, [r4, #12]
 800a0ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a0b0:	81a3      	strh	r3, [r4, #12]
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	6063      	str	r3, [r4, #4]
 800a0b6:	6923      	ldr	r3, [r4, #16]
 800a0b8:	6023      	str	r3, [r4, #0]
 800a0ba:	89a3      	ldrh	r3, [r4, #12]
 800a0bc:	f043 0308 	orr.w	r3, r3, #8
 800a0c0:	81a3      	strh	r3, [r4, #12]
 800a0c2:	6923      	ldr	r3, [r4, #16]
 800a0c4:	b94b      	cbnz	r3, 800a0da <__swsetup_r+0x7a>
 800a0c6:	89a3      	ldrh	r3, [r4, #12]
 800a0c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a0cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0d0:	d003      	beq.n	800a0da <__swsetup_r+0x7a>
 800a0d2:	4621      	mov	r1, r4
 800a0d4:	4628      	mov	r0, r5
 800a0d6:	f000 f83f 	bl	800a158 <__smakebuf_r>
 800a0da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0de:	f013 0201 	ands.w	r2, r3, #1
 800a0e2:	d00a      	beq.n	800a0fa <__swsetup_r+0x9a>
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	60a2      	str	r2, [r4, #8]
 800a0e8:	6962      	ldr	r2, [r4, #20]
 800a0ea:	4252      	negs	r2, r2
 800a0ec:	61a2      	str	r2, [r4, #24]
 800a0ee:	6922      	ldr	r2, [r4, #16]
 800a0f0:	b942      	cbnz	r2, 800a104 <__swsetup_r+0xa4>
 800a0f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a0f6:	d1c5      	bne.n	800a084 <__swsetup_r+0x24>
 800a0f8:	bd38      	pop	{r3, r4, r5, pc}
 800a0fa:	0799      	lsls	r1, r3, #30
 800a0fc:	bf58      	it	pl
 800a0fe:	6962      	ldrpl	r2, [r4, #20]
 800a100:	60a2      	str	r2, [r4, #8]
 800a102:	e7f4      	b.n	800a0ee <__swsetup_r+0x8e>
 800a104:	2000      	movs	r0, #0
 800a106:	e7f7      	b.n	800a0f8 <__swsetup_r+0x98>
 800a108:	2000001c 	.word	0x2000001c

0800a10c <__swhatbuf_r>:
 800a10c:	b570      	push	{r4, r5, r6, lr}
 800a10e:	460c      	mov	r4, r1
 800a110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a114:	2900      	cmp	r1, #0
 800a116:	b096      	sub	sp, #88	@ 0x58
 800a118:	4615      	mov	r5, r2
 800a11a:	461e      	mov	r6, r3
 800a11c:	da0d      	bge.n	800a13a <__swhatbuf_r+0x2e>
 800a11e:	89a3      	ldrh	r3, [r4, #12]
 800a120:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a124:	f04f 0100 	mov.w	r1, #0
 800a128:	bf14      	ite	ne
 800a12a:	2340      	movne	r3, #64	@ 0x40
 800a12c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a130:	2000      	movs	r0, #0
 800a132:	6031      	str	r1, [r6, #0]
 800a134:	602b      	str	r3, [r5, #0]
 800a136:	b016      	add	sp, #88	@ 0x58
 800a138:	bd70      	pop	{r4, r5, r6, pc}
 800a13a:	466a      	mov	r2, sp
 800a13c:	f000 f89c 	bl	800a278 <_fstat_r>
 800a140:	2800      	cmp	r0, #0
 800a142:	dbec      	blt.n	800a11e <__swhatbuf_r+0x12>
 800a144:	9901      	ldr	r1, [sp, #4]
 800a146:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a14a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a14e:	4259      	negs	r1, r3
 800a150:	4159      	adcs	r1, r3
 800a152:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a156:	e7eb      	b.n	800a130 <__swhatbuf_r+0x24>

0800a158 <__smakebuf_r>:
 800a158:	898b      	ldrh	r3, [r1, #12]
 800a15a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a15c:	079d      	lsls	r5, r3, #30
 800a15e:	4606      	mov	r6, r0
 800a160:	460c      	mov	r4, r1
 800a162:	d507      	bpl.n	800a174 <__smakebuf_r+0x1c>
 800a164:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a168:	6023      	str	r3, [r4, #0]
 800a16a:	6123      	str	r3, [r4, #16]
 800a16c:	2301      	movs	r3, #1
 800a16e:	6163      	str	r3, [r4, #20]
 800a170:	b003      	add	sp, #12
 800a172:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a174:	ab01      	add	r3, sp, #4
 800a176:	466a      	mov	r2, sp
 800a178:	f7ff ffc8 	bl	800a10c <__swhatbuf_r>
 800a17c:	9f00      	ldr	r7, [sp, #0]
 800a17e:	4605      	mov	r5, r0
 800a180:	4639      	mov	r1, r7
 800a182:	4630      	mov	r0, r6
 800a184:	f7fe ff8e 	bl	80090a4 <_malloc_r>
 800a188:	b948      	cbnz	r0, 800a19e <__smakebuf_r+0x46>
 800a18a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a18e:	059a      	lsls	r2, r3, #22
 800a190:	d4ee      	bmi.n	800a170 <__smakebuf_r+0x18>
 800a192:	f023 0303 	bic.w	r3, r3, #3
 800a196:	f043 0302 	orr.w	r3, r3, #2
 800a19a:	81a3      	strh	r3, [r4, #12]
 800a19c:	e7e2      	b.n	800a164 <__smakebuf_r+0xc>
 800a19e:	89a3      	ldrh	r3, [r4, #12]
 800a1a0:	6020      	str	r0, [r4, #0]
 800a1a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1a6:	81a3      	strh	r3, [r4, #12]
 800a1a8:	9b01      	ldr	r3, [sp, #4]
 800a1aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a1ae:	b15b      	cbz	r3, 800a1c8 <__smakebuf_r+0x70>
 800a1b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1b4:	4630      	mov	r0, r6
 800a1b6:	f000 f83b 	bl	800a230 <_isatty_r>
 800a1ba:	b128      	cbz	r0, 800a1c8 <__smakebuf_r+0x70>
 800a1bc:	89a3      	ldrh	r3, [r4, #12]
 800a1be:	f023 0303 	bic.w	r3, r3, #3
 800a1c2:	f043 0301 	orr.w	r3, r3, #1
 800a1c6:	81a3      	strh	r3, [r4, #12]
 800a1c8:	89a3      	ldrh	r3, [r4, #12]
 800a1ca:	431d      	orrs	r5, r3
 800a1cc:	81a5      	strh	r5, [r4, #12]
 800a1ce:	e7cf      	b.n	800a170 <__smakebuf_r+0x18>

0800a1d0 <_raise_r>:
 800a1d0:	291f      	cmp	r1, #31
 800a1d2:	b538      	push	{r3, r4, r5, lr}
 800a1d4:	4605      	mov	r5, r0
 800a1d6:	460c      	mov	r4, r1
 800a1d8:	d904      	bls.n	800a1e4 <_raise_r+0x14>
 800a1da:	2316      	movs	r3, #22
 800a1dc:	6003      	str	r3, [r0, #0]
 800a1de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a1e2:	bd38      	pop	{r3, r4, r5, pc}
 800a1e4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a1e6:	b112      	cbz	r2, 800a1ee <_raise_r+0x1e>
 800a1e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a1ec:	b94b      	cbnz	r3, 800a202 <_raise_r+0x32>
 800a1ee:	4628      	mov	r0, r5
 800a1f0:	f000 f840 	bl	800a274 <_getpid_r>
 800a1f4:	4622      	mov	r2, r4
 800a1f6:	4601      	mov	r1, r0
 800a1f8:	4628      	mov	r0, r5
 800a1fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1fe:	f000 b827 	b.w	800a250 <_kill_r>
 800a202:	2b01      	cmp	r3, #1
 800a204:	d00a      	beq.n	800a21c <_raise_r+0x4c>
 800a206:	1c59      	adds	r1, r3, #1
 800a208:	d103      	bne.n	800a212 <_raise_r+0x42>
 800a20a:	2316      	movs	r3, #22
 800a20c:	6003      	str	r3, [r0, #0]
 800a20e:	2001      	movs	r0, #1
 800a210:	e7e7      	b.n	800a1e2 <_raise_r+0x12>
 800a212:	2100      	movs	r1, #0
 800a214:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a218:	4620      	mov	r0, r4
 800a21a:	4798      	blx	r3
 800a21c:	2000      	movs	r0, #0
 800a21e:	e7e0      	b.n	800a1e2 <_raise_r+0x12>

0800a220 <raise>:
 800a220:	4b02      	ldr	r3, [pc, #8]	@ (800a22c <raise+0xc>)
 800a222:	4601      	mov	r1, r0
 800a224:	6818      	ldr	r0, [r3, #0]
 800a226:	f7ff bfd3 	b.w	800a1d0 <_raise_r>
 800a22a:	bf00      	nop
 800a22c:	2000001c 	.word	0x2000001c

0800a230 <_isatty_r>:
 800a230:	b538      	push	{r3, r4, r5, lr}
 800a232:	4d06      	ldr	r5, [pc, #24]	@ (800a24c <_isatty_r+0x1c>)
 800a234:	2300      	movs	r3, #0
 800a236:	4604      	mov	r4, r0
 800a238:	4608      	mov	r0, r1
 800a23a:	602b      	str	r3, [r5, #0]
 800a23c:	f7f7 fe16 	bl	8001e6c <_isatty>
 800a240:	1c43      	adds	r3, r0, #1
 800a242:	d102      	bne.n	800a24a <_isatty_r+0x1a>
 800a244:	682b      	ldr	r3, [r5, #0]
 800a246:	b103      	cbz	r3, 800a24a <_isatty_r+0x1a>
 800a248:	6023      	str	r3, [r4, #0]
 800a24a:	bd38      	pop	{r3, r4, r5, pc}
 800a24c:	20000544 	.word	0x20000544

0800a250 <_kill_r>:
 800a250:	b538      	push	{r3, r4, r5, lr}
 800a252:	4d07      	ldr	r5, [pc, #28]	@ (800a270 <_kill_r+0x20>)
 800a254:	2300      	movs	r3, #0
 800a256:	4604      	mov	r4, r0
 800a258:	4608      	mov	r0, r1
 800a25a:	4611      	mov	r1, r2
 800a25c:	602b      	str	r3, [r5, #0]
 800a25e:	f7f7 fd95 	bl	8001d8c <_kill>
 800a262:	1c43      	adds	r3, r0, #1
 800a264:	d102      	bne.n	800a26c <_kill_r+0x1c>
 800a266:	682b      	ldr	r3, [r5, #0]
 800a268:	b103      	cbz	r3, 800a26c <_kill_r+0x1c>
 800a26a:	6023      	str	r3, [r4, #0]
 800a26c:	bd38      	pop	{r3, r4, r5, pc}
 800a26e:	bf00      	nop
 800a270:	20000544 	.word	0x20000544

0800a274 <_getpid_r>:
 800a274:	f7f7 bd82 	b.w	8001d7c <_getpid>

0800a278 <_fstat_r>:
 800a278:	b538      	push	{r3, r4, r5, lr}
 800a27a:	4d07      	ldr	r5, [pc, #28]	@ (800a298 <_fstat_r+0x20>)
 800a27c:	2300      	movs	r3, #0
 800a27e:	4604      	mov	r4, r0
 800a280:	4608      	mov	r0, r1
 800a282:	4611      	mov	r1, r2
 800a284:	602b      	str	r3, [r5, #0]
 800a286:	f7f7 fde1 	bl	8001e4c <_fstat>
 800a28a:	1c43      	adds	r3, r0, #1
 800a28c:	d102      	bne.n	800a294 <_fstat_r+0x1c>
 800a28e:	682b      	ldr	r3, [r5, #0]
 800a290:	b103      	cbz	r3, 800a294 <_fstat_r+0x1c>
 800a292:	6023      	str	r3, [r4, #0]
 800a294:	bd38      	pop	{r3, r4, r5, pc}
 800a296:	bf00      	nop
 800a298:	20000544 	.word	0x20000544

0800a29c <_init>:
 800a29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a29e:	bf00      	nop
 800a2a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2a2:	bc08      	pop	{r3}
 800a2a4:	469e      	mov	lr, r3
 800a2a6:	4770      	bx	lr

0800a2a8 <_fini>:
 800a2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2aa:	bf00      	nop
 800a2ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2ae:	bc08      	pop	{r3}
 800a2b0:	469e      	mov	lr, r3
 800a2b2:	4770      	bx	lr
