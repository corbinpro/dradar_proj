
dradar_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ddc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  08008f70  08008f70  00009f70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009394  08009394  0000b1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009394  08009394  0000a394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800939c  0800939c  0000b1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800939c  0800939c  0000a39c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080093a0  080093a0  0000a3a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  080093a4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  200001d8  0800957c  0000b1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004dc  0800957c  0000b4dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000107cd  00000000  00000000  0000b208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002867  00000000  00000000  0001b9d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b8  00000000  00000000  0001e240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ccc  00000000  00000000  0001f2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029143  00000000  00000000  0001ffc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013204  00000000  00000000  00049107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fccb5  00000000  00000000  0005c30b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00158fc0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000572c  00000000  00000000  00159004  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  0015e730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008f54 	.word	0x08008f54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08008f54 	.word	0x08008f54

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <CC2500_WriteRegister>:


extern SPI_HandleTypeDef hspi1;

//write registers to config
void CC2500_WriteRegister(uint8_t addr, uint8_t value) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	460a      	mov	r2, r1
 8000c52:	71fb      	strb	r3, [r7, #7]
 8000c54:	4613      	mov	r3, r2
 8000c56:	71bb      	strb	r3, [r7, #6]
    CC2500_CS_LOW();
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2110      	movs	r1, #16
 8000c5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c60:	f002 fc9c 	bl	800359c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &addr, 1, HAL_MAX_DELAY);
 8000c64:	1df9      	adds	r1, r7, #7
 8000c66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	4809      	ldr	r0, [pc, #36]	@ (8000c94 <CC2500_WriteRegister+0x4c>)
 8000c6e:	f004 fc9e 	bl	80055ae <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, &value, 1, HAL_MAX_DELAY);
 8000c72:	1db9      	adds	r1, r7, #6
 8000c74:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c78:	2201      	movs	r2, #1
 8000c7a:	4806      	ldr	r0, [pc, #24]	@ (8000c94 <CC2500_WriteRegister+0x4c>)
 8000c7c:	f004 fc97 	bl	80055ae <HAL_SPI_Transmit>
    CC2500_CS_HIGH();
 8000c80:	2201      	movs	r2, #1
 8000c82:	2110      	movs	r1, #16
 8000c84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c88:	f002 fc88 	bl	800359c <HAL_GPIO_WritePin>
}
 8000c8c:	bf00      	nop
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	200002c0 	.word	0x200002c0

08000c98 <CC2500_ReadRegister>:

//read current config to write back unmodified values
uint8_t CC2500_ReadRegister(uint8_t addr) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    addr |= 0x80;
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	71fb      	strb	r3, [r7, #7]
    CC2500_CS_LOW();
 8000cac:	2200      	movs	r2, #0
 8000cae:	2110      	movs	r1, #16
 8000cb0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cb4:	f002 fc72 	bl	800359c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &addr, 1, HAL_MAX_DELAY);
 8000cb8:	1df9      	adds	r1, r7, #7
 8000cba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	480a      	ldr	r0, [pc, #40]	@ (8000cec <CC2500_ReadRegister+0x54>)
 8000cc2:	f004 fc74 	bl	80055ae <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, &value, 1, HAL_MAX_DELAY);
 8000cc6:	f107 010f 	add.w	r1, r7, #15
 8000cca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000cce:	2201      	movs	r2, #1
 8000cd0:	4806      	ldr	r0, [pc, #24]	@ (8000cec <CC2500_ReadRegister+0x54>)
 8000cd2:	f004 fde2 	bl	800589a <HAL_SPI_Receive>
    CC2500_CS_HIGH();
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	2110      	movs	r1, #16
 8000cda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cde:	f002 fc5d 	bl	800359c <HAL_GPIO_WritePin>
    return value;
 8000ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3710      	adds	r7, #16
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	200002c0 	.word	0x200002c0

08000cf0 <CC2500_Strobe>:

//??? TODO
void CC2500_Strobe(uint8_t cmd) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	71fb      	strb	r3, [r7, #7]
    CC2500_CS_LOW();
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2110      	movs	r1, #16
 8000cfe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d02:	f002 fc4b 	bl	800359c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8000d06:	1df9      	adds	r1, r7, #7
 8000d08:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	4806      	ldr	r0, [pc, #24]	@ (8000d28 <CC2500_Strobe+0x38>)
 8000d10:	f004 fc4d 	bl	80055ae <HAL_SPI_Transmit>
    CC2500_CS_HIGH();
 8000d14:	2201      	movs	r2, #1
 8000d16:	2110      	movs	r1, #16
 8000d18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d1c:	f002 fc3e 	bl	800359c <HAL_GPIO_WritePin>
}
 8000d20:	bf00      	nop
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	200002c0 	.word	0x200002c0

08000d2c <CC2500_SetChannel>:

//set channel ?? TODO
void CC2500_SetChannel(uint8_t channel) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	71fb      	strb	r3, [r7, #7]
    CC2500_WriteRegister(0x0A, channel);
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	200a      	movs	r0, #10
 8000d3c:	f7ff ff84 	bl	8000c48 <CC2500_WriteRegister>
    CC2500_Strobe(CC2500_SRX);
 8000d40:	2034      	movs	r0, #52	@ 0x34
 8000d42:	f7ff ffd5 	bl	8000cf0 <CC2500_Strobe>
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <CC2500_ReadRSSI>:

//Chech if packets are being recieved ?? TODO
uint8_t CC2500_ReadRSSI(void) {
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b082      	sub	sp, #8
 8000d52:	af00      	add	r7, sp, #0
    uint8_t raw = CC2500_ReadRegister(0x34);
 8000d54:	2034      	movs	r0, #52	@ 0x34
 8000d56:	f7ff ff9f 	bl	8000c98 <CC2500_ReadRegister>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	71fb      	strb	r3, [r7, #7]
    uint8_t calcValue = (raw >= 128) ? ((int8_t)(raw - 256) / 2 - 74) : (raw / 2 - 74);
 8000d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	da09      	bge.n	8000d7a <CC2500_ReadRSSI+0x2c>
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	0fda      	lsrs	r2, r3, #31
 8000d6c:	4413      	add	r3, r2
 8000d6e:	105b      	asrs	r3, r3, #1
 8000d70:	b25b      	sxtb	r3, r3
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	3b4a      	subs	r3, #74	@ 0x4a
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	e004      	b.n	8000d84 <CC2500_ReadRSSI+0x36>
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	085b      	lsrs	r3, r3, #1
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	3b4a      	subs	r3, #74	@ 0x4a
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	71bb      	strb	r3, [r7, #6]
    return calcValue;
 8000d86:	79bb      	ldrb	r3, [r7, #6]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <CC2500_ApplyConfig>:
| `0x25`        | FSCAL0        | `0x1F`      |                               |
| `0x07`        | PKTCTRL1      | `0x04`      | No address check              |
| `0x08`        | PKTCTRL0      | `0x05`      | Infinite packet length, CRC   |
| `0x3E`        | PATABLE       | `0xC0`      | Max output power              |
 * */
void CC2500_ApplyConfig(void) {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
    CC2500_WriteRegister(0x00, 0x29);
 8000d94:	2129      	movs	r1, #41	@ 0x29
 8000d96:	2000      	movs	r0, #0
 8000d98:	f7ff ff56 	bl	8000c48 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x02, 0x06);
 8000d9c:	2106      	movs	r1, #6
 8000d9e:	2002      	movs	r0, #2
 8000da0:	f7ff ff52 	bl	8000c48 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x03, 0x07);
 8000da4:	2107      	movs	r1, #7
 8000da6:	2003      	movs	r0, #3
 8000da8:	f7ff ff4e 	bl	8000c48 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x06, 0x00);
 8000dac:	2100      	movs	r1, #0
 8000dae:	2006      	movs	r0, #6
 8000db0:	f7ff ff4a 	bl	8000c48 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x07, 0x04);
 8000db4:	2104      	movs	r1, #4
 8000db6:	2007      	movs	r0, #7
 8000db8:	f7ff ff46 	bl	8000c48 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x08, 0x05);
 8000dbc:	2105      	movs	r1, #5
 8000dbe:	2008      	movs	r0, #8
 8000dc0:	f7ff ff42 	bl	8000c48 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x0A, 0x00);
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	200a      	movs	r0, #10
 8000dc8:	f7ff ff3e 	bl	8000c48 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x0B, 0x06);
 8000dcc:	2106      	movs	r1, #6
 8000dce:	200b      	movs	r0, #11
 8000dd0:	f7ff ff3a 	bl	8000c48 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x0C, 0x00);
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	200c      	movs	r0, #12
 8000dd8:	f7ff ff36 	bl	8000c48 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x0D, 0x5D);
 8000ddc:	215d      	movs	r1, #93	@ 0x5d
 8000dde:	200d      	movs	r0, #13
 8000de0:	f7ff ff32 	bl	8000c48 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x0E, 0x93);
 8000de4:	2193      	movs	r1, #147	@ 0x93
 8000de6:	200e      	movs	r0, #14
 8000de8:	f7ff ff2e 	bl	8000c48 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x0F, 0xB1);
 8000dec:	21b1      	movs	r1, #177	@ 0xb1
 8000dee:	200f      	movs	r0, #15
 8000df0:	f7ff ff2a 	bl	8000c48 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x10, 0x2D);
 8000df4:	212d      	movs	r1, #45	@ 0x2d
 8000df6:	2010      	movs	r0, #16
 8000df8:	f7ff ff26 	bl	8000c48 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x11, 0x3B);
 8000dfc:	213b      	movs	r1, #59	@ 0x3b
 8000dfe:	2011      	movs	r0, #17
 8000e00:	f7ff ff22 	bl	8000c48 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x12, 0x73);
 8000e04:	2173      	movs	r1, #115	@ 0x73
 8000e06:	2012      	movs	r0, #18
 8000e08:	f7ff ff1e 	bl	8000c48 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x15, 0x01);
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	2015      	movs	r0, #21
 8000e10:	f7ff ff1a 	bl	8000c48 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x18, 0x18);
 8000e14:	2118      	movs	r1, #24
 8000e16:	2018      	movs	r0, #24
 8000e18:	f7ff ff16 	bl	8000c48 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x19, 0x1D);
 8000e1c:	211d      	movs	r1, #29
 8000e1e:	2019      	movs	r0, #25
 8000e20:	f7ff ff12 	bl	8000c48 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x1A, 0x1C);
 8000e24:	211c      	movs	r1, #28
 8000e26:	201a      	movs	r0, #26
 8000e28:	f7ff ff0e 	bl	8000c48 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x21, 0x11);
 8000e2c:	2111      	movs	r1, #17
 8000e2e:	2021      	movs	r0, #33	@ 0x21
 8000e30:	f7ff ff0a 	bl	8000c48 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x22, 0xE9);
 8000e34:	21e9      	movs	r1, #233	@ 0xe9
 8000e36:	2022      	movs	r0, #34	@ 0x22
 8000e38:	f7ff ff06 	bl	8000c48 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x23, 0x2A);
 8000e3c:	212a      	movs	r1, #42	@ 0x2a
 8000e3e:	2023      	movs	r0, #35	@ 0x23
 8000e40:	f7ff ff02 	bl	8000c48 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x24, 0x00);
 8000e44:	2100      	movs	r1, #0
 8000e46:	2024      	movs	r0, #36	@ 0x24
 8000e48:	f7ff fefe 	bl	8000c48 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x25, 0x1F);
 8000e4c:	211f      	movs	r1, #31
 8000e4e:	2025      	movs	r0, #37	@ 0x25
 8000e50:	f7ff fefa 	bl	8000c48 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x3E, 0xC0);
 8000e54:	21c0      	movs	r1, #192	@ 0xc0
 8000e56:	203e      	movs	r0, #62	@ 0x3e
 8000e58:	f7ff fef6 	bl	8000c48 <CC2500_WriteRegister>
}
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <CC2500_Init>:

//apply configurations and establish first noise floor
void CC2500_Init(void) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
    HAL_Delay(100);
 8000e64:	2064      	movs	r0, #100	@ 0x64
 8000e66:	f000 fec3 	bl	8001bf0 <HAL_Delay>
    CC2500_CS_HIGH(); HAL_Delay(1);
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	2110      	movs	r1, #16
 8000e6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e72:	f002 fb93 	bl	800359c <HAL_GPIO_WritePin>
 8000e76:	2001      	movs	r0, #1
 8000e78:	f000 feba 	bl	8001bf0 <HAL_Delay>
    CC2500_CS_LOW();  HAL_Delay(1);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2110      	movs	r1, #16
 8000e80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e84:	f002 fb8a 	bl	800359c <HAL_GPIO_WritePin>
 8000e88:	2001      	movs	r0, #1
 8000e8a:	f000 feb1 	bl	8001bf0 <HAL_Delay>
    CC2500_CS_HIGH(); HAL_Delay(1);
 8000e8e:	2201      	movs	r2, #1
 8000e90:	2110      	movs	r1, #16
 8000e92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e96:	f002 fb81 	bl	800359c <HAL_GPIO_WritePin>
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	f000 fea8 	bl	8001bf0 <HAL_Delay>

    CC2500_Strobe(CC2500_SRES);
 8000ea0:	2030      	movs	r0, #48	@ 0x30
 8000ea2:	f7ff ff25 	bl	8000cf0 <CC2500_Strobe>
    HAL_Delay(1);
 8000ea6:	2001      	movs	r0, #1
 8000ea8:	f000 fea2 	bl	8001bf0 <HAL_Delay>

    CC2500_ApplyConfig();
 8000eac:	f7ff ff70 	bl	8000d90 <CC2500_ApplyConfig>
    CC2500_Strobe(CC2500_SRX);
 8000eb0:	2034      	movs	r0, #52	@ 0x34
 8000eb2:	f7ff ff1d 	bl	8000cf0 <CC2500_Strobe>

    // Initial noise floor calibration
    CC2500_RecalibrateNoiseFloor();
 8000eb6:	f000 f803 	bl	8000ec0 <CC2500_RecalibrateNoiseFloor>
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <CC2500_RecalibrateNoiseFloor>:

//re calibrate average noise floor.
void CC2500_RecalibrateNoiseFloor(void) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
	CharLCD_Set_Cursor(0,7); // Set cursor to row 1, column 0
 8000ec6:	2107      	movs	r1, #7
 8000ec8:	2000      	movs	r0, #0
 8000eca:	f000 f944 	bl	8001156 <CharLCD_Set_Cursor>
	CharLCD_Write_String("CALBRATNG");
 8000ece:	481e      	ldr	r0, [pc, #120]	@ (8000f48 <CC2500_RecalibrateNoiseFloor+0x88>)
 8000ed0:	f000 f92c 	bl	800112c <CharLCD_Write_String>

	int32_t sum = 0;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60fb      	str	r3, [r7, #12]
    const uint8_t ch_min = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	72bb      	strb	r3, [r7, #10]
    const uint8_t ch_max = 100;
 8000edc:	2364      	movs	r3, #100	@ 0x64
 8000ede:	727b      	strb	r3, [r7, #9]
    const int sweep_count = ch_max - ch_min + 1;
 8000ee0:	7a7a      	ldrb	r2, [r7, #9]
 8000ee2:	7abb      	ldrb	r3, [r7, #10]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	607b      	str	r3, [r7, #4]

    for (uint8_t ch = ch_min; ch <= ch_max; ch++) {
 8000eea:	7abb      	ldrb	r3, [r7, #10]
 8000eec:	72fb      	strb	r3, [r7, #11]
 8000eee:	e012      	b.n	8000f16 <CC2500_RecalibrateNoiseFloor+0x56>
        CC2500_SetChannel(ch);
 8000ef0:	7afb      	ldrb	r3, [r7, #11]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff ff1a 	bl	8000d2c <CC2500_SetChannel>
        HAL_Delay(3);
 8000ef8:	2003      	movs	r0, #3
 8000efa:	f000 fe79 	bl	8001bf0 <HAL_Delay>
        int8_t rssi = CC2500_ReadRSSI();
 8000efe:	f7ff ff26 	bl	8000d4e <CC2500_ReadRSSI>
 8000f02:	4603      	mov	r3, r0
 8000f04:	70fb      	strb	r3, [r7, #3]
        sum += rssi;
 8000f06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f0a:	68fa      	ldr	r2, [r7, #12]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	60fb      	str	r3, [r7, #12]
    for (uint8_t ch = ch_min; ch <= ch_max; ch++) {
 8000f10:	7afb      	ldrb	r3, [r7, #11]
 8000f12:	3301      	adds	r3, #1
 8000f14:	72fb      	strb	r3, [r7, #11]
 8000f16:	7afa      	ldrb	r2, [r7, #11]
 8000f18:	7a7b      	ldrb	r3, [r7, #9]
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	d9e8      	bls.n	8000ef0 <CC2500_RecalibrateNoiseFloor+0x30>
    }

    CC2500_NoiseFloor = sum / sweep_count;
 8000f1e:	68fa      	ldr	r2, [r7, #12]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f26:	b25a      	sxtb	r2, r3
 8000f28:	4b08      	ldr	r3, [pc, #32]	@ (8000f4c <CC2500_RecalibrateNoiseFloor+0x8c>)
 8000f2a:	701a      	strb	r2, [r3, #0]
    //starting threshold value:10 increase or deacrease to desired sensitivity. TODO Possibly itegrate button to change this value.
    CC2500_DetectionThreshold = CC2500_NoiseFloor + 10;
 8000f2c:	4b07      	ldr	r3, [pc, #28]	@ (8000f4c <CC2500_RecalibrateNoiseFloor+0x8c>)
 8000f2e:	f993 3000 	ldrsb.w	r3, [r3]
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	330a      	adds	r3, #10
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	b25a      	sxtb	r2, r3
 8000f3a:	4b05      	ldr	r3, [pc, #20]	@ (8000f50 <CC2500_RecalibrateNoiseFloor+0x90>)
 8000f3c:	701a      	strb	r2, [r3, #0]

}
 8000f3e:	bf00      	nop
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	08008f70 	.word	0x08008f70
 8000f4c:	20000000 	.word	0x20000000
 8000f50:	20000001 	.word	0x20000001

08000f54 <CC2500_SweepAndDetect>:

// Use sweep mode and read rssi to see if packets are being recieved on any channels, read strength, alert on noise floor threshold
void CC2500_SweepAndDetect(void) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
    for (uint8_t ch = 0; ch <= 100; ch++) {
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	71fb      	strb	r3, [r7, #7]
 8000f5e:	e02a      	b.n	8000fb6 <CC2500_SweepAndDetect+0x62>
        CC2500_SetChannel(ch);
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff fee2 	bl	8000d2c <CC2500_SetChannel>
        HAL_Delay(3);
 8000f68:	2003      	movs	r0, #3
 8000f6a:	f000 fe41 	bl	8001bf0 <HAL_Delay>
        int8_t rssi = CC2500_ReadRSSI();
 8000f6e:	f7ff feee 	bl	8000d4e <CC2500_ReadRSSI>
 8000f72:	4603      	mov	r3, r0
 8000f74:	71bb      	strb	r3, [r7, #6]

        //OUTPUT ON DETECTION
        if (rssi > CC2500_DetectionThreshold) {
 8000f76:	4b14      	ldr	r3, [pc, #80]	@ (8000fc8 <CC2500_SweepAndDetect+0x74>)
 8000f78:	f993 3000 	ldrsb.w	r3, [r3]
 8000f7c:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	dd07      	ble.n	8000f94 <CC2500_SweepAndDetect+0x40>
        	CharLCD_Set_Cursor(1,7); // Set cursor to row 1, column 0
 8000f84:	2107      	movs	r1, #7
 8000f86:	2001      	movs	r0, #1
 8000f88:	f000 f8e5 	bl	8001156 <CharLCD_Set_Cursor>
        	CharLCD_Write_String("DETECTED");
 8000f8c:	480f      	ldr	r0, [pc, #60]	@ (8000fcc <CC2500_SweepAndDetect+0x78>)
 8000f8e:	f000 f8cd 	bl	800112c <CharLCD_Write_String>
 8000f92:	e00d      	b.n	8000fb0 <CC2500_SweepAndDetect+0x5c>

        	//TODO ADD Trigger alarm
        }
        else {
        	sprintf(rssiString, "RSSI:%d", rssi);
 8000f94:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	490d      	ldr	r1, [pc, #52]	@ (8000fd0 <CC2500_SweepAndDetect+0x7c>)
 8000f9c:	480d      	ldr	r0, [pc, #52]	@ (8000fd4 <CC2500_SweepAndDetect+0x80>)
 8000f9e:	f005 fde5 	bl	8006b6c <siprintf>
        	CharLCD_Set_Cursor(1,7); // Set cursor to row 1, column 0
 8000fa2:	2107      	movs	r1, #7
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	f000 f8d6 	bl	8001156 <CharLCD_Set_Cursor>
        	CharLCD_Write_String(rssiString);
 8000faa:	480a      	ldr	r0, [pc, #40]	@ (8000fd4 <CC2500_SweepAndDetect+0x80>)
 8000fac:	f000 f8be 	bl	800112c <CharLCD_Write_String>
    for (uint8_t ch = 0; ch <= 100; ch++) {
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	71fb      	strb	r3, [r7, #7]
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	2b64      	cmp	r3, #100	@ 0x64
 8000fba:	d9d1      	bls.n	8000f60 <CC2500_SweepAndDetect+0xc>

        	//TODO ADD turn off alarm
        }
    }
}
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000001 	.word	0x20000001
 8000fcc:	08008f7c 	.word	0x08008f7c
 8000fd0:	08008f88 	.word	0x08008f88
 8000fd4:	200001f4 	.word	0x200001f4

08000fd8 <CharLCD_Write_Nibble>:
 * @brief Write a 4-bit nibble to the LCD via I2C
 * @param nibble: 4-bit data to send (lower 4 bits)
 * @param dc: data/command (1 = data, 0 = command)
 * @retval None
 */
void CharLCD_Write_Nibble(uint8_t nibble, uint8_t dc) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af02      	add	r7, sp, #8
 8000fde:	4603      	mov	r3, r0
 8000fe0:	460a      	mov	r2, r1
 8000fe2:	71fb      	strb	r3, [r7, #7]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	71bb      	strb	r3, [r7, #6]
 uint8_t data = nibble << D4_BIT; // Shift nibble to D4-D7 position
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	011b      	lsls	r3, r3, #4
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	73fb      	strb	r3, [r7, #15]
 data |= dc << DC_BIT; // Set DC bit for data/command selection
 8000ff0:	7bfa      	ldrb	r2, [r7, #15]
 8000ff2:	79bb      	ldrb	r3, [r7, #6]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	73fb      	strb	r3, [r7, #15]
 data |= 1 << BL_BIT; // Include backlight state in data
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	f043 0308 	orr.w	r3, r3, #8
 8001000:	b2db      	uxtb	r3, r3
 8001002:	73fb      	strb	r3, [r7, #15]
 data |= 1 << EN_BIT; // Set enable bit high
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	f043 0304 	orr.w	r3, r3, #4
 800100a:	b2db      	uxtb	r3, r3
 800100c:	73fb      	strb	r3, [r7, #15]
 HAL_I2C_Master_Transmit(hi2c, I2C_ADDR << 1, &data, 1, 100); // Send data with EN high
 800100e:	4b10      	ldr	r3, [pc, #64]	@ (8001050 <CharLCD_Write_Nibble+0x78>)
 8001010:	6818      	ldr	r0, [r3, #0]
 8001012:	f107 020f 	add.w	r2, r7, #15
 8001016:	2364      	movs	r3, #100	@ 0x64
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	2301      	movs	r3, #1
 800101c:	214e      	movs	r1, #78	@ 0x4e
 800101e:	f002 fb71 	bl	8003704 <HAL_I2C_Master_Transmit>
 HAL_Delay(1); // Wait for data setup
 8001022:	2001      	movs	r0, #1
 8001024:	f000 fde4 	bl	8001bf0 <HAL_Delay>
 data &= ~(1 << EN_BIT); // Clear enable bit (falling edge triggers LCD)
 8001028:	7bfb      	ldrb	r3, [r7, #15]
 800102a:	f023 0304 	bic.w	r3, r3, #4
 800102e:	b2db      	uxtb	r3, r3
 8001030:	73fb      	strb	r3, [r7, #15]
 HAL_I2C_Master_Transmit(hi2c, I2C_ADDR << 1, &data, 1, 100); // Send data with EN low
 8001032:	4b07      	ldr	r3, [pc, #28]	@ (8001050 <CharLCD_Write_Nibble+0x78>)
 8001034:	6818      	ldr	r0, [r3, #0]
 8001036:	f107 020f 	add.w	r2, r7, #15
 800103a:	2364      	movs	r3, #100	@ 0x64
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	2301      	movs	r3, #1
 8001040:	214e      	movs	r1, #78	@ 0x4e
 8001042:	f002 fb5f 	bl	8003704 <HAL_I2C_Master_Transmit>
}
 8001046:	bf00      	nop
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000204 	.word	0x20000204

08001054 <CharLCD_Send_Cmd>:
/**
 * @brief Send command to LCD
 * @param cmd: 8-bit command to send to LCD controller
 * @retval None
 */
void CharLCD_Send_Cmd(uint8_t cmd) {
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
 uint8_t upper_nibble = cmd >> 4; // Extract upper 4 bits
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	091b      	lsrs	r3, r3, #4
 8001062:	73fb      	strb	r3, [r7, #15]
 uint8_t lower_nibble = cmd & 0x0F; // Extract lower 4 bits
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	f003 030f 	and.w	r3, r3, #15
 800106a:	73bb      	strb	r3, [r7, #14]
 CharLCD_Write_Nibble(upper_nibble, 0); // Send upper nibble (DC=0 for command)
 800106c:	7bfb      	ldrb	r3, [r7, #15]
 800106e:	2100      	movs	r1, #0
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff ffb1 	bl	8000fd8 <CharLCD_Write_Nibble>
 CharLCD_Write_Nibble(lower_nibble, 0); // Send lower nibble (DC=0 for command)
 8001076:	7bbb      	ldrb	r3, [r7, #14]
 8001078:	2100      	movs	r1, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff ffac 	bl	8000fd8 <CharLCD_Write_Nibble>
 if (cmd == 0x01 || cmd == 0x02) { // Clear display or return home commands
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d002      	beq.n	800108c <CharLCD_Send_Cmd+0x38>
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	2b02      	cmp	r3, #2
 800108a:	d102      	bne.n	8001092 <CharLCD_Send_Cmd+0x3e>
 HAL_Delay(2); // These commands need extra time
 800108c:	2002      	movs	r0, #2
 800108e:	f000 fdaf 	bl	8001bf0 <HAL_Delay>
 }
}
 8001092:	bf00      	nop
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <CharLCD_Send_Data>:
/**
 * @brief Send data (character) to LCD
 * @param data: 8-bit character data to display
 * @retval None
 */
void CharLCD_Send_Data(uint8_t data) {
 800109a:	b580      	push	{r7, lr}
 800109c:	b084      	sub	sp, #16
 800109e:	af00      	add	r7, sp, #0
 80010a0:	4603      	mov	r3, r0
 80010a2:	71fb      	strb	r3, [r7, #7]
 uint8_t upper_nibble = data >> 4; // Extract upper 4 bits
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	091b      	lsrs	r3, r3, #4
 80010a8:	73fb      	strb	r3, [r7, #15]
 uint8_t lower_nibble = data & 0x0F; // Extract lower 4 bits
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	f003 030f 	and.w	r3, r3, #15
 80010b0:	73bb      	strb	r3, [r7, #14]
 CharLCD_Write_Nibble(upper_nibble, 1); // Send upper nibble (DC=1 for data)
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
 80010b4:	2101      	movs	r1, #1
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff ff8e 	bl	8000fd8 <CharLCD_Write_Nibble>
 CharLCD_Write_Nibble(lower_nibble, 1); // Send lower nibble (DC=1 for data)
 80010bc:	7bbb      	ldrb	r3, [r7, #14]
 80010be:	2101      	movs	r1, #1
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff ff89 	bl	8000fd8 <CharLCD_Write_Nibble>
}
 80010c6:	bf00      	nop
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <CharLCD_Init>:
/**
 * @brief Initialize LCD in 4-bit mode via I2C
 * @param None
 * @retval None
 */
void CharLCD_Init() {
 80010ce:	b580      	push	{r7, lr}
 80010d0:	af00      	add	r7, sp, #0
 HAL_Delay(50); // Wait for LCD power-on reset (>40ms)
 80010d2:	2032      	movs	r0, #50	@ 0x32
 80010d4:	f000 fd8c 	bl	8001bf0 <HAL_Delay>
 CharLCD_Write_Nibble(0x03, 0); // Function set: 8-bit mode (first attempt)
 80010d8:	2100      	movs	r1, #0
 80010da:	2003      	movs	r0, #3
 80010dc:	f7ff ff7c 	bl	8000fd8 <CharLCD_Write_Nibble>
 HAL_Delay(5); // Wait >4.1ms
 80010e0:	2005      	movs	r0, #5
 80010e2:	f000 fd85 	bl	8001bf0 <HAL_Delay>
 CharLCD_Write_Nibble(0x03, 0); // Function set: 8-bit mode (second attempt)
 80010e6:	2100      	movs	r1, #0
 80010e8:	2003      	movs	r0, #3
 80010ea:	f7ff ff75 	bl	8000fd8 <CharLCD_Write_Nibble>
 HAL_Delay(1); // Wait >100us
 80010ee:	2001      	movs	r0, #1
 80010f0:	f000 fd7e 	bl	8001bf0 <HAL_Delay>
 CharLCD_Write_Nibble(0x03, 0); // Function set: 8-bit mode (third attempt)
 80010f4:	2100      	movs	r1, #0
 80010f6:	2003      	movs	r0, #3
 80010f8:	f7ff ff6e 	bl	8000fd8 <CharLCD_Write_Nibble>
 HAL_Delay(1); // Wait >100us
 80010fc:	2001      	movs	r0, #1
 80010fe:	f000 fd77 	bl	8001bf0 <HAL_Delay>
 CharLCD_Write_Nibble(0x02, 0); // Function set: switch to 4-bit mode
 8001102:	2100      	movs	r1, #0
 8001104:	2002      	movs	r0, #2
 8001106:	f7ff ff67 	bl	8000fd8 <CharLCD_Write_Nibble>
 CharLCD_Send_Cmd(0x28); // Function set: 4-bit, 2 lines, 5x8 font
 800110a:	2028      	movs	r0, #40	@ 0x28
 800110c:	f7ff ffa2 	bl	8001054 <CharLCD_Send_Cmd>
 CharLCD_Send_Cmd(0x0C); // Display control: display on/cursor off/blink off
 8001110:	200c      	movs	r0, #12
 8001112:	f7ff ff9f 	bl	8001054 <CharLCD_Send_Cmd>
 CharLCD_Send_Cmd(0x06); // Entry mode: increment cursor, no shift
 8001116:	2006      	movs	r0, #6
 8001118:	f7ff ff9c 	bl	8001054 <CharLCD_Send_Cmd>
 CharLCD_Send_Cmd(0x01); // Clear display
 800111c:	2001      	movs	r0, #1
 800111e:	f7ff ff99 	bl	8001054 <CharLCD_Send_Cmd>
 HAL_Delay(2); // Wait for clear display command
 8001122:	2002      	movs	r0, #2
 8001124:	f000 fd64 	bl	8001bf0 <HAL_Delay>
}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}

0800112c <CharLCD_Write_String>:
/**
 * @brief Write string to LCD at current cursor position
 * @param str: Pointer to null-terminated string
 * @retval None
 */
void CharLCD_Write_String(char *str) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 while (*str) { // Loop until null terminator
 8001134:	e006      	b.n	8001144 <CharLCD_Write_String+0x18>
 CharLCD_Send_Data(*str++); // Send each character and increment pointer
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	1c5a      	adds	r2, r3, #1
 800113a:	607a      	str	r2, [r7, #4]
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff ffab 	bl	800109a <CharLCD_Send_Data>
 while (*str) { // Loop until null terminator
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d1f4      	bne.n	8001136 <CharLCD_Write_String+0xa>
 }
}
 800114c:	bf00      	nop
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <CharLCD_Set_Cursor>:
 * @brief Set cursor position on LCD
 * @param row: Row number (0 or 1 for 2-line display)
 * @param column: Column number (0 to display width - 1)
 * @retval None
 */
void CharLCD_Set_Cursor(uint8_t row, uint8_t column) {
 8001156:	b580      	push	{r7, lr}
 8001158:	b084      	sub	sp, #16
 800115a:	af00      	add	r7, sp, #0
 800115c:	4603      	mov	r3, r0
 800115e:	460a      	mov	r2, r1
 8001160:	71fb      	strb	r3, [r7, #7]
 8001162:	4613      	mov	r3, r2
 8001164:	71bb      	strb	r3, [r7, #6]
 uint8_t address;
 switch (row) {
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d002      	beq.n	8001172 <CharLCD_Set_Cursor+0x1c>
 800116c:	2b01      	cmp	r3, #1
 800116e:	d003      	beq.n	8001178 <CharLCD_Set_Cursor+0x22>
 8001170:	e005      	b.n	800117e <CharLCD_Set_Cursor+0x28>
 case 0:
 address = 0x00; break; // First line starts at address 0x00
 8001172:	2300      	movs	r3, #0
 8001174:	73fb      	strb	r3, [r7, #15]
 8001176:	e004      	b.n	8001182 <CharLCD_Set_Cursor+0x2c>
 case 1:
 address = 0x40; break; // Second line starts at address 0x40
 8001178:	2340      	movs	r3, #64	@ 0x40
 800117a:	73fb      	strb	r3, [r7, #15]
 800117c:	e001      	b.n	8001182 <CharLCD_Set_Cursor+0x2c>
 default:
 address = 0x00; // Default to first line for invalid row
 800117e:	2300      	movs	r3, #0
 8001180:	73fb      	strb	r3, [r7, #15]
 }
 address += column; // Add column offset
 8001182:	7bfa      	ldrb	r2, [r7, #15]
 8001184:	79bb      	ldrb	r3, [r7, #6]
 8001186:	4413      	add	r3, r2
 8001188:	73fb      	strb	r3, [r7, #15]
 CharLCD_Send_Cmd(0x80 | address); // Set DDRAM address command (0x80 + address)
 800118a:	7bfb      	ldrb	r3, [r7, #15]
 800118c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001190:	b2db      	uxtb	r3, r3
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff ff5e 	bl	8001054 <CharLCD_Send_Cmd>
}
 8001198:	bf00      	nop
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <CharLCD_Clear>:
/**
 * @brief Clear LCD display and return cursor to home position
 * @param None
 * @retval None
 */
void CharLCD_Clear(void) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
 CharLCD_Send_Cmd(0x01); // Clear display command
 80011a4:	2001      	movs	r0, #1
 80011a6:	f7ff ff55 	bl	8001054 <CharLCD_Send_Cmd>
 HAL_Delay(2); // Wait for command execution
 80011aa:	2002      	movs	r0, #2
 80011ac:	f000 fd20 	bl	8001bf0 <HAL_Delay>
}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <RecieveHandles>:

//pass handles in from main
void RecieveHandles(I2C_HandleTypeDef* handle){
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
	hi2c = handle;
 80011bc:	4a04      	ldr	r2, [pc, #16]	@ (80011d0 <RecieveHandles+0x1c>)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6013      	str	r3, [r2, #0]
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	20000204 	.word	0x20000204
 80011d4:	00000000 	.word	0x00000000

080011d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011de:	f000 fc8b 	bl	8001af8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011e2:	f000 f889 	bl	80012f8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  RecieveHandles(&hi2c1);
 80011e6:	483c      	ldr	r0, [pc, #240]	@ (80012d8 <main+0x100>)
 80011e8:	f7ff ffe4 	bl	80011b4 <RecieveHandles>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ec:	f000 f9ca 	bl	8001584 <MX_GPIO_Init>
  MX_ADC1_Init();
 80011f0:	f000 f8d4 	bl	800139c <MX_ADC1_Init>
  MX_I2C1_Init();
 80011f4:	f000 f948 	bl	8001488 <MX_I2C1_Init>
  MX_SPI1_Init();
 80011f8:	f000 f986 	bl	8001508 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  CharLCD_Clear();
 80011fc:	f7ff ffd0 	bl	80011a0 <CharLCD_Clear>
  CharLCD_Init(); // Initialize the LCD
 8001200:	f7ff ff65 	bl	80010ce <CharLCD_Init>
  CharLCD_Set_Cursor(0,0); // Set cursor to row 0, column 0
 8001204:	2100      	movs	r1, #0
 8001206:	2000      	movs	r0, #0
 8001208:	f7ff ffa5 	bl	8001156 <CharLCD_Set_Cursor>
  CharLCD_Write_String("INITLZING...");
 800120c:	4833      	ldr	r0, [pc, #204]	@ (80012dc <main+0x104>)
 800120e:	f7ff ff8d 	bl	800112c <CharLCD_Write_String>
  CharLCD_Set_Cursor(1,0); // Set cursor to row 1, column 0
 8001212:	2100      	movs	r1, #0
 8001214:	2001      	movs	r0, #1
 8001216:	f7ff ff9e 	bl	8001156 <CharLCD_Set_Cursor>
  CharLCD_Write_String("CLIBRTING...");
 800121a:	4831      	ldr	r0, [pc, #196]	@ (80012e0 <main+0x108>)
 800121c:	f7ff ff86 	bl	800112c <CharLCD_Write_String>

  //initialize the cc2500 chip
  CharLCD_Clear();
 8001220:	f7ff ffbe 	bl	80011a0 <CharLCD_Clear>
  CC2500_Init();
 8001224:	f7ff fe1c 	bl	8000e60 <CC2500_Init>

  CharLCD_Clear();
 8001228:	f7ff ffba 	bl	80011a0 <CharLCD_Clear>
  CharLCD_Set_Cursor(0,0); // Set cursor to row 0, column 0
 800122c:	2100      	movs	r1, #0
 800122e:	2000      	movs	r0, #0
 8001230:	f7ff ff91 	bl	8001156 <CharLCD_Set_Cursor>
  CharLCD_Write_String("5.8GHZ:  2.4GHZ: ");
 8001234:	482b      	ldr	r0, [pc, #172]	@ (80012e4 <main+0x10c>)
 8001236:	f7ff ff79 	bl	800112c <CharLCD_Write_String>
  CharLCD_Set_Cursor(1,0); // Set cursor to row 1, column 0
 800123a:	2100      	movs	r1, #0
 800123c:	2001      	movs	r0, #1
 800123e:	f7ff ff8a 	bl	8001156 <CharLCD_Set_Cursor>
  CharLCD_Write_String("0.0V    ________");
 8001242:	4829      	ldr	r0, [pc, #164]	@ (80012e8 <main+0x110>)
 8001244:	f7ff ff72 	bl	800112c <CharLCD_Write_String>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Detect with log detector
	  // Start the ADC
	  HAL_ADC_Start(&hadc1);
 8001248:	4828      	ldr	r0, [pc, #160]	@ (80012ec <main+0x114>)
 800124a:	f001 f829 	bl	80022a0 <HAL_ADC_Start>
	  // Wait for the analog-to-digital conversion to complete
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800124e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001252:	4826      	ldr	r0, [pc, #152]	@ (80012ec <main+0x114>)
 8001254:	f001 f8de 	bl	8002414 <HAL_ADC_PollForConversion>

	  // Read ADC value
	  uint16_t logInputValue = HAL_ADC_GetValue(&hadc1);
 8001258:	4824      	ldr	r0, [pc, #144]	@ (80012ec <main+0x114>)
 800125a:	f001 f9b3 	bl	80025c4 <HAL_ADC_GetValue>
 800125e:	4603      	mov	r3, r0
 8001260:	80fb      	strh	r3, [r7, #6]
	  float voltage = (logInputValue / 4095.0) * 3.3f;  // convert to volts
 8001262:	88fb      	ldrh	r3, [r7, #6]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff f95d 	bl	8000524 <__aeabi_i2d>
 800126a:	a317      	add	r3, pc, #92	@ (adr r3, 80012c8 <main+0xf0>)
 800126c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001270:	f7ff faec 	bl	800084c <__aeabi_ddiv>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	4610      	mov	r0, r2
 800127a:	4619      	mov	r1, r3
 800127c:	a314      	add	r3, pc, #80	@ (adr r3, 80012d0 <main+0xf8>)
 800127e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001282:	f7ff f9b9 	bl	80005f8 <__aeabi_dmul>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	4610      	mov	r0, r2
 800128c:	4619      	mov	r1, r3
 800128e:	f7ff fc8b 	bl	8000ba8 <__aeabi_d2f>
 8001292:	4603      	mov	r3, r0
 8001294:	603b      	str	r3, [r7, #0]
	  //checl input val
	  // TODO change to use noise floor. take code from cc2500 driver
	  if (logInputValue >= 0.3){
 8001296:	88fb      	ldrh	r3, [r7, #6]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d00f      	beq.n	80012bc <main+0xe4>
		  //create display message
		  sprintf(logMessage, "V%.2f", voltage);
 800129c:	6838      	ldr	r0, [r7, #0]
 800129e:	f7ff f953 	bl	8000548 <__aeabi_f2d>
 80012a2:	4602      	mov	r2, r0
 80012a4:	460b      	mov	r3, r1
 80012a6:	4912      	ldr	r1, [pc, #72]	@ (80012f0 <main+0x118>)
 80012a8:	4812      	ldr	r0, [pc, #72]	@ (80012f4 <main+0x11c>)
 80012aa:	f005 fc5f 	bl	8006b6c <siprintf>
		  CharLCD_Set_Cursor(1,0); // Set cursor to row 1, column 0
 80012ae:	2100      	movs	r1, #0
 80012b0:	2001      	movs	r0, #1
 80012b2:	f7ff ff50 	bl	8001156 <CharLCD_Set_Cursor>
		  CharLCD_Write_String(logMessage);
 80012b6:	480f      	ldr	r0, [pc, #60]	@ (80012f4 <main+0x11c>)
 80012b8:	f7ff ff38 	bl	800112c <CharLCD_Write_String>

		  //ADD trigger alarm
	  }

	  //Sweep and detect with cc2500 chip
	  CC2500_SweepAndDetect();
 80012bc:	f7ff fe4a 	bl	8000f54 <CC2500_SweepAndDetect>
	  HAL_Delay(100); //TODO rough estimate for sweeping both in about 1 second
 80012c0:	2064      	movs	r0, #100	@ 0x64
 80012c2:	f000 fc95 	bl	8001bf0 <HAL_Delay>
  {
 80012c6:	e7bf      	b.n	8001248 <main+0x70>
 80012c8:	00000000 	.word	0x00000000
 80012cc:	40affe00 	.word	0x40affe00
 80012d0:	60000000 	.word	0x60000000
 80012d4:	400a6666 	.word	0x400a6666
 80012d8:	2000026c 	.word	0x2000026c
 80012dc:	08008f90 	.word	0x08008f90
 80012e0:	08008fa0 	.word	0x08008fa0
 80012e4:	08008fb0 	.word	0x08008fb0
 80012e8:	08008fc4 	.word	0x08008fc4
 80012ec:	20000208 	.word	0x20000208
 80012f0:	08008fd8 	.word	0x08008fd8
 80012f4:	20000324 	.word	0x20000324

080012f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b096      	sub	sp, #88	@ 0x58
 80012fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012fe:	f107 0314 	add.w	r3, r7, #20
 8001302:	2244      	movs	r2, #68	@ 0x44
 8001304:	2100      	movs	r1, #0
 8001306:	4618      	mov	r0, r3
 8001308:	f005 fd14 	bl	8006d34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800130c:	463b      	mov	r3, r7
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	609a      	str	r2, [r3, #8]
 8001316:	60da      	str	r2, [r3, #12]
 8001318:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800131a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800131e:	f002 fdc9 	bl	8003eb4 <HAL_PWREx_ControlVoltageScaling>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001328:	f000 f982 	bl	8001630 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800132c:	2302      	movs	r3, #2
 800132e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001330:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001334:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001336:	2310      	movs	r3, #16
 8001338:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800133a:	2302      	movs	r3, #2
 800133c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800133e:	2302      	movs	r3, #2
 8001340:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001342:	2301      	movs	r3, #1
 8001344:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001346:	230a      	movs	r3, #10
 8001348:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800134a:	2307      	movs	r3, #7
 800134c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800134e:	2302      	movs	r3, #2
 8001350:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001352:	2302      	movs	r3, #2
 8001354:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001356:	f107 0314 	add.w	r3, r7, #20
 800135a:	4618      	mov	r0, r3
 800135c:	f002 fe00 	bl	8003f60 <HAL_RCC_OscConfig>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001366:	f000 f963 	bl	8001630 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800136a:	230f      	movs	r3, #15
 800136c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800136e:	2303      	movs	r3, #3
 8001370:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001372:	2300      	movs	r3, #0
 8001374:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800137a:	2300      	movs	r3, #0
 800137c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800137e:	463b      	mov	r3, r7
 8001380:	2104      	movs	r1, #4
 8001382:	4618      	mov	r0, r3
 8001384:	f003 f9c8 	bl	8004718 <HAL_RCC_ClockConfig>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800138e:	f000 f94f 	bl	8001630 <Error_Handler>
  }
}
 8001392:	bf00      	nop
 8001394:	3758      	adds	r7, #88	@ 0x58
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08a      	sub	sp, #40	@ 0x28
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80013a2:	f107 031c 	add.w	r3, r7, #28
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80013ae:	1d3b      	adds	r3, r7, #4
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
 80013bc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80013be:	4b2f      	ldr	r3, [pc, #188]	@ (800147c <MX_ADC1_Init+0xe0>)
 80013c0:	4a2f      	ldr	r2, [pc, #188]	@ (8001480 <MX_ADC1_Init+0xe4>)
 80013c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80013c4:	4b2d      	ldr	r3, [pc, #180]	@ (800147c <MX_ADC1_Init+0xe0>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013ca:	4b2c      	ldr	r3, [pc, #176]	@ (800147c <MX_ADC1_Init+0xe0>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013d0:	4b2a      	ldr	r3, [pc, #168]	@ (800147c <MX_ADC1_Init+0xe0>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013d6:	4b29      	ldr	r3, [pc, #164]	@ (800147c <MX_ADC1_Init+0xe0>)
 80013d8:	2200      	movs	r2, #0
 80013da:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013dc:	4b27      	ldr	r3, [pc, #156]	@ (800147c <MX_ADC1_Init+0xe0>)
 80013de:	2204      	movs	r2, #4
 80013e0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80013e2:	4b26      	ldr	r3, [pc, #152]	@ (800147c <MX_ADC1_Init+0xe0>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013e8:	4b24      	ldr	r3, [pc, #144]	@ (800147c <MX_ADC1_Init+0xe0>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80013ee:	4b23      	ldr	r3, [pc, #140]	@ (800147c <MX_ADC1_Init+0xe0>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013f4:	4b21      	ldr	r3, [pc, #132]	@ (800147c <MX_ADC1_Init+0xe0>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013fc:	4b1f      	ldr	r3, [pc, #124]	@ (800147c <MX_ADC1_Init+0xe0>)
 80013fe:	2200      	movs	r2, #0
 8001400:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001402:	4b1e      	ldr	r3, [pc, #120]	@ (800147c <MX_ADC1_Init+0xe0>)
 8001404:	2200      	movs	r2, #0
 8001406:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001408:	4b1c      	ldr	r3, [pc, #112]	@ (800147c <MX_ADC1_Init+0xe0>)
 800140a:	2200      	movs	r2, #0
 800140c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001410:	4b1a      	ldr	r3, [pc, #104]	@ (800147c <MX_ADC1_Init+0xe0>)
 8001412:	2200      	movs	r2, #0
 8001414:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001416:	4b19      	ldr	r3, [pc, #100]	@ (800147c <MX_ADC1_Init+0xe0>)
 8001418:	2200      	movs	r2, #0
 800141a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800141e:	4817      	ldr	r0, [pc, #92]	@ (800147c <MX_ADC1_Init+0xe0>)
 8001420:	f000 fdee 	bl	8002000 <HAL_ADC_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800142a:	f000 f901 	bl	8001630 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001432:	f107 031c 	add.w	r3, r7, #28
 8001436:	4619      	mov	r1, r3
 8001438:	4810      	ldr	r0, [pc, #64]	@ (800147c <MX_ADC1_Init+0xe0>)
 800143a:	f001 fd6f 	bl	8002f1c <HAL_ADCEx_MultiModeConfigChannel>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001444:	f000 f8f4 	bl	8001630 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001448:	4b0e      	ldr	r3, [pc, #56]	@ (8001484 <MX_ADC1_Init+0xe8>)
 800144a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800144c:	2306      	movs	r3, #6
 800144e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001450:	2300      	movs	r3, #0
 8001452:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001454:	237f      	movs	r3, #127	@ 0x7f
 8001456:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001458:	2304      	movs	r3, #4
 800145a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800145c:	2300      	movs	r3, #0
 800145e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001460:	1d3b      	adds	r3, r7, #4
 8001462:	4619      	mov	r1, r3
 8001464:	4805      	ldr	r0, [pc, #20]	@ (800147c <MX_ADC1_Init+0xe0>)
 8001466:	f001 f8bb 	bl	80025e0 <HAL_ADC_ConfigChannel>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001470:	f000 f8de 	bl	8001630 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001474:	bf00      	nop
 8001476:	3728      	adds	r7, #40	@ 0x28
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	20000208 	.word	0x20000208
 8001480:	50040000 	.word	0x50040000
 8001484:	14f00020 	.word	0x14f00020

08001488 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800148c:	4b1b      	ldr	r3, [pc, #108]	@ (80014fc <MX_I2C1_Init+0x74>)
 800148e:	4a1c      	ldr	r2, [pc, #112]	@ (8001500 <MX_I2C1_Init+0x78>)
 8001490:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8001492:	4b1a      	ldr	r3, [pc, #104]	@ (80014fc <MX_I2C1_Init+0x74>)
 8001494:	4a1b      	ldr	r2, [pc, #108]	@ (8001504 <MX_I2C1_Init+0x7c>)
 8001496:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001498:	4b18      	ldr	r3, [pc, #96]	@ (80014fc <MX_I2C1_Init+0x74>)
 800149a:	2200      	movs	r2, #0
 800149c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800149e:	4b17      	ldr	r3, [pc, #92]	@ (80014fc <MX_I2C1_Init+0x74>)
 80014a0:	2201      	movs	r2, #1
 80014a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014a4:	4b15      	ldr	r3, [pc, #84]	@ (80014fc <MX_I2C1_Init+0x74>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014aa:	4b14      	ldr	r3, [pc, #80]	@ (80014fc <MX_I2C1_Init+0x74>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014b0:	4b12      	ldr	r3, [pc, #72]	@ (80014fc <MX_I2C1_Init+0x74>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014b6:	4b11      	ldr	r3, [pc, #68]	@ (80014fc <MX_I2C1_Init+0x74>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014bc:	4b0f      	ldr	r3, [pc, #60]	@ (80014fc <MX_I2C1_Init+0x74>)
 80014be:	2200      	movs	r2, #0
 80014c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014c2:	480e      	ldr	r0, [pc, #56]	@ (80014fc <MX_I2C1_Init+0x74>)
 80014c4:	f002 f882 	bl	80035cc <HAL_I2C_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80014ce:	f000 f8af 	bl	8001630 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014d2:	2100      	movs	r1, #0
 80014d4:	4809      	ldr	r0, [pc, #36]	@ (80014fc <MX_I2C1_Init+0x74>)
 80014d6:	f002 fc47 	bl	8003d68 <HAL_I2CEx_ConfigAnalogFilter>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80014e0:	f000 f8a6 	bl	8001630 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80014e4:	2100      	movs	r1, #0
 80014e6:	4805      	ldr	r0, [pc, #20]	@ (80014fc <MX_I2C1_Init+0x74>)
 80014e8:	f002 fc89 	bl	8003dfe <HAL_I2CEx_ConfigDigitalFilter>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80014f2:	f000 f89d 	bl	8001630 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	2000026c 	.word	0x2000026c
 8001500:	40005400 	.word	0x40005400
 8001504:	10d19ce4 	.word	0x10d19ce4

08001508 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800150c:	4b1b      	ldr	r3, [pc, #108]	@ (800157c <MX_SPI1_Init+0x74>)
 800150e:	4a1c      	ldr	r2, [pc, #112]	@ (8001580 <MX_SPI1_Init+0x78>)
 8001510:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001512:	4b1a      	ldr	r3, [pc, #104]	@ (800157c <MX_SPI1_Init+0x74>)
 8001514:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001518:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800151a:	4b18      	ldr	r3, [pc, #96]	@ (800157c <MX_SPI1_Init+0x74>)
 800151c:	2200      	movs	r2, #0
 800151e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001520:	4b16      	ldr	r3, [pc, #88]	@ (800157c <MX_SPI1_Init+0x74>)
 8001522:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001526:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001528:	4b14      	ldr	r3, [pc, #80]	@ (800157c <MX_SPI1_Init+0x74>)
 800152a:	2200      	movs	r2, #0
 800152c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800152e:	4b13      	ldr	r3, [pc, #76]	@ (800157c <MX_SPI1_Init+0x74>)
 8001530:	2200      	movs	r2, #0
 8001532:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001534:	4b11      	ldr	r3, [pc, #68]	@ (800157c <MX_SPI1_Init+0x74>)
 8001536:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800153a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800153c:	4b0f      	ldr	r3, [pc, #60]	@ (800157c <MX_SPI1_Init+0x74>)
 800153e:	2220      	movs	r2, #32
 8001540:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001542:	4b0e      	ldr	r3, [pc, #56]	@ (800157c <MX_SPI1_Init+0x74>)
 8001544:	2200      	movs	r2, #0
 8001546:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001548:	4b0c      	ldr	r3, [pc, #48]	@ (800157c <MX_SPI1_Init+0x74>)
 800154a:	2200      	movs	r2, #0
 800154c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800154e:	4b0b      	ldr	r3, [pc, #44]	@ (800157c <MX_SPI1_Init+0x74>)
 8001550:	2200      	movs	r2, #0
 8001552:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001554:	4b09      	ldr	r3, [pc, #36]	@ (800157c <MX_SPI1_Init+0x74>)
 8001556:	2207      	movs	r2, #7
 8001558:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800155a:	4b08      	ldr	r3, [pc, #32]	@ (800157c <MX_SPI1_Init+0x74>)
 800155c:	2200      	movs	r2, #0
 800155e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001560:	4b06      	ldr	r3, [pc, #24]	@ (800157c <MX_SPI1_Init+0x74>)
 8001562:	2208      	movs	r2, #8
 8001564:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001566:	4805      	ldr	r0, [pc, #20]	@ (800157c <MX_SPI1_Init+0x74>)
 8001568:	f003 ff7e 	bl	8005468 <HAL_SPI_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001572:	f000 f85d 	bl	8001630 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	200002c0 	.word	0x200002c0
 8001580:	40013000 	.word	0x40013000

08001584 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08a      	sub	sp, #40	@ 0x28
 8001588:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158a:	f107 0314 	add.w	r3, r7, #20
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	60da      	str	r2, [r3, #12]
 8001598:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800159a:	4b24      	ldr	r3, [pc, #144]	@ (800162c <MX_GPIO_Init+0xa8>)
 800159c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159e:	4a23      	ldr	r2, [pc, #140]	@ (800162c <MX_GPIO_Init+0xa8>)
 80015a0:	f043 0304 	orr.w	r3, r3, #4
 80015a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015a6:	4b21      	ldr	r3, [pc, #132]	@ (800162c <MX_GPIO_Init+0xa8>)
 80015a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015aa:	f003 0304 	and.w	r3, r3, #4
 80015ae:	613b      	str	r3, [r7, #16]
 80015b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015b2:	4b1e      	ldr	r3, [pc, #120]	@ (800162c <MX_GPIO_Init+0xa8>)
 80015b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b6:	4a1d      	ldr	r2, [pc, #116]	@ (800162c <MX_GPIO_Init+0xa8>)
 80015b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015be:	4b1b      	ldr	r3, [pc, #108]	@ (800162c <MX_GPIO_Init+0xa8>)
 80015c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ca:	4b18      	ldr	r3, [pc, #96]	@ (800162c <MX_GPIO_Init+0xa8>)
 80015cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ce:	4a17      	ldr	r2, [pc, #92]	@ (800162c <MX_GPIO_Init+0xa8>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015d6:	4b15      	ldr	r3, [pc, #84]	@ (800162c <MX_GPIO_Init+0xa8>)
 80015d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e2:	4b12      	ldr	r3, [pc, #72]	@ (800162c <MX_GPIO_Init+0xa8>)
 80015e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e6:	4a11      	ldr	r2, [pc, #68]	@ (800162c <MX_GPIO_Init+0xa8>)
 80015e8:	f043 0302 	orr.w	r3, r3, #2
 80015ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ee:	4b0f      	ldr	r3, [pc, #60]	@ (800162c <MX_GPIO_Init+0xa8>)
 80015f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2110      	movs	r1, #16
 80015fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001602:	f001 ffcb 	bl	800359c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001606:	2310      	movs	r3, #16
 8001608:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160a:	2301      	movs	r3, #1
 800160c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001612:	2302      	movs	r3, #2
 8001614:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001616:	f107 0314 	add.w	r3, r7, #20
 800161a:	4619      	mov	r1, r3
 800161c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001620:	f001 fe12 	bl	8003248 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001624:	bf00      	nop
 8001626:	3728      	adds	r7, #40	@ 0x28
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40021000 	.word	0x40021000

08001630 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001634:	b672      	cpsid	i
}
 8001636:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001638:	bf00      	nop
 800163a:	e7fd      	b.n	8001638 <Error_Handler+0x8>

0800163c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001642:	4b0f      	ldr	r3, [pc, #60]	@ (8001680 <HAL_MspInit+0x44>)
 8001644:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001646:	4a0e      	ldr	r2, [pc, #56]	@ (8001680 <HAL_MspInit+0x44>)
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	6613      	str	r3, [r2, #96]	@ 0x60
 800164e:	4b0c      	ldr	r3, [pc, #48]	@ (8001680 <HAL_MspInit+0x44>)
 8001650:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	607b      	str	r3, [r7, #4]
 8001658:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800165a:	4b09      	ldr	r3, [pc, #36]	@ (8001680 <HAL_MspInit+0x44>)
 800165c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800165e:	4a08      	ldr	r2, [pc, #32]	@ (8001680 <HAL_MspInit+0x44>)
 8001660:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001664:	6593      	str	r3, [r2, #88]	@ 0x58
 8001666:	4b06      	ldr	r3, [pc, #24]	@ (8001680 <HAL_MspInit+0x44>)
 8001668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800166a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800166e:	603b      	str	r3, [r7, #0]
 8001670:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	40021000 	.word	0x40021000

08001684 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b0ac      	sub	sp, #176	@ 0xb0
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	2288      	movs	r2, #136	@ 0x88
 80016a2:	2100      	movs	r1, #0
 80016a4:	4618      	mov	r0, r3
 80016a6:	f005 fb45 	bl	8006d34 <memset>
  if(hadc->Instance==ADC1)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a27      	ldr	r2, [pc, #156]	@ (800174c <HAL_ADC_MspInit+0xc8>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d147      	bne.n	8001744 <HAL_ADC_MspInit+0xc0>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80016b4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80016b8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80016ba:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80016be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80016c2:	2302      	movs	r3, #2
 80016c4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80016c6:	2301      	movs	r3, #1
 80016c8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80016ca:	2308      	movs	r3, #8
 80016cc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80016ce:	2307      	movs	r3, #7
 80016d0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80016d2:	2302      	movs	r3, #2
 80016d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80016d6:	2302      	movs	r3, #2
 80016d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80016da:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80016de:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	4618      	mov	r0, r3
 80016e6:	f003 fa03 	bl	8004af0 <HAL_RCCEx_PeriphCLKConfig>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80016f0:	f7ff ff9e 	bl	8001630 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80016f4:	4b16      	ldr	r3, [pc, #88]	@ (8001750 <HAL_ADC_MspInit+0xcc>)
 80016f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016f8:	4a15      	ldr	r2, [pc, #84]	@ (8001750 <HAL_ADC_MspInit+0xcc>)
 80016fa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80016fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001700:	4b13      	ldr	r3, [pc, #76]	@ (8001750 <HAL_ADC_MspInit+0xcc>)
 8001702:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001704:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001708:	613b      	str	r3, [r7, #16]
 800170a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170c:	4b10      	ldr	r3, [pc, #64]	@ (8001750 <HAL_ADC_MspInit+0xcc>)
 800170e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001710:	4a0f      	ldr	r2, [pc, #60]	@ (8001750 <HAL_ADC_MspInit+0xcc>)
 8001712:	f043 0301 	orr.w	r3, r3, #1
 8001716:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001718:	4b0d      	ldr	r3, [pc, #52]	@ (8001750 <HAL_ADC_MspInit+0xcc>)
 800171a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800171c:	f003 0301 	and.w	r3, r3, #1
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = LOG_IN_Pin;
 8001724:	2301      	movs	r3, #1
 8001726:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800172a:	230b      	movs	r3, #11
 800172c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(LOG_IN_GPIO_Port, &GPIO_InitStruct);
 8001736:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800173a:	4619      	mov	r1, r3
 800173c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001740:	f001 fd82 	bl	8003248 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001744:	bf00      	nop
 8001746:	37b0      	adds	r7, #176	@ 0xb0
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	50040000 	.word	0x50040000
 8001750:	40021000 	.word	0x40021000

08001754 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b0ac      	sub	sp, #176	@ 0xb0
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	2288      	movs	r2, #136	@ 0x88
 8001772:	2100      	movs	r1, #0
 8001774:	4618      	mov	r0, r3
 8001776:	f005 fadd 	bl	8006d34 <memset>
  if(hi2c->Instance==I2C1)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a21      	ldr	r2, [pc, #132]	@ (8001804 <HAL_I2C_MspInit+0xb0>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d13b      	bne.n	80017fc <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001784:	2340      	movs	r3, #64	@ 0x40
 8001786:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001788:	2300      	movs	r3, #0
 800178a:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800178c:	f107 0314 	add.w	r3, r7, #20
 8001790:	4618      	mov	r0, r3
 8001792:	f003 f9ad 	bl	8004af0 <HAL_RCCEx_PeriphCLKConfig>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800179c:	f7ff ff48 	bl	8001630 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a0:	4b19      	ldr	r3, [pc, #100]	@ (8001808 <HAL_I2C_MspInit+0xb4>)
 80017a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017a4:	4a18      	ldr	r2, [pc, #96]	@ (8001808 <HAL_I2C_MspInit+0xb4>)
 80017a6:	f043 0302 	orr.w	r3, r3, #2
 80017aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017ac:	4b16      	ldr	r3, [pc, #88]	@ (8001808 <HAL_I2C_MspInit+0xb4>)
 80017ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	613b      	str	r3, [r7, #16]
 80017b6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_D15_Pin|SDA_D14_Pin;
 80017b8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80017bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017c0:	2312      	movs	r3, #18
 80017c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017c6:	2301      	movs	r3, #1
 80017c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017cc:	2303      	movs	r3, #3
 80017ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017d2:	2304      	movs	r3, #4
 80017d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80017dc:	4619      	mov	r1, r3
 80017de:	480b      	ldr	r0, [pc, #44]	@ (800180c <HAL_I2C_MspInit+0xb8>)
 80017e0:	f001 fd32 	bl	8003248 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017e4:	4b08      	ldr	r3, [pc, #32]	@ (8001808 <HAL_I2C_MspInit+0xb4>)
 80017e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017e8:	4a07      	ldr	r2, [pc, #28]	@ (8001808 <HAL_I2C_MspInit+0xb4>)
 80017ea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80017ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80017f0:	4b05      	ldr	r3, [pc, #20]	@ (8001808 <HAL_I2C_MspInit+0xb4>)
 80017f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80017fc:	bf00      	nop
 80017fe:	37b0      	adds	r7, #176	@ 0xb0
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40005400 	.word	0x40005400
 8001808:	40021000 	.word	0x40021000
 800180c:	48000400 	.word	0x48000400

08001810 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b08a      	sub	sp, #40	@ 0x28
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001818:	f107 0314 	add.w	r3, r7, #20
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a17      	ldr	r2, [pc, #92]	@ (800188c <HAL_SPI_MspInit+0x7c>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d128      	bne.n	8001884 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001832:	4b17      	ldr	r3, [pc, #92]	@ (8001890 <HAL_SPI_MspInit+0x80>)
 8001834:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001836:	4a16      	ldr	r2, [pc, #88]	@ (8001890 <HAL_SPI_MspInit+0x80>)
 8001838:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800183c:	6613      	str	r3, [r2, #96]	@ 0x60
 800183e:	4b14      	ldr	r3, [pc, #80]	@ (8001890 <HAL_SPI_MspInit+0x80>)
 8001840:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001842:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001846:	613b      	str	r3, [r7, #16]
 8001848:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184a:	4b11      	ldr	r3, [pc, #68]	@ (8001890 <HAL_SPI_MspInit+0x80>)
 800184c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800184e:	4a10      	ldr	r2, [pc, #64]	@ (8001890 <HAL_SPI_MspInit+0x80>)
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001856:	4b0e      	ldr	r3, [pc, #56]	@ (8001890 <HAL_SPI_MspInit+0x80>)
 8001858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001862:	23e0      	movs	r3, #224	@ 0xe0
 8001864:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001866:	2302      	movs	r3, #2
 8001868:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800186e:	2303      	movs	r3, #3
 8001870:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001872:	2305      	movs	r3, #5
 8001874:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001876:	f107 0314 	add.w	r3, r7, #20
 800187a:	4619      	mov	r1, r3
 800187c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001880:	f001 fce2 	bl	8003248 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001884:	bf00      	nop
 8001886:	3728      	adds	r7, #40	@ 0x28
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40013000 	.word	0x40013000
 8001890:	40021000 	.word	0x40021000

08001894 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001898:	bf00      	nop
 800189a:	e7fd      	b.n	8001898 <NMI_Handler+0x4>

0800189c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018a0:	bf00      	nop
 80018a2:	e7fd      	b.n	80018a0 <HardFault_Handler+0x4>

080018a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018a8:	bf00      	nop
 80018aa:	e7fd      	b.n	80018a8 <MemManage_Handler+0x4>

080018ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018b0:	bf00      	nop
 80018b2:	e7fd      	b.n	80018b0 <BusFault_Handler+0x4>

080018b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018b8:	bf00      	nop
 80018ba:	e7fd      	b.n	80018b8 <UsageFault_Handler+0x4>

080018bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ca:	b480      	push	{r7}
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ea:	f000 f961 	bl	8001bb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0
  return 1;
 80018f6:	2301      	movs	r3, #1
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <_kill>:

int _kill(int pid, int sig)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b082      	sub	sp, #8
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
 800190a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800190c:	f005 fa1a 	bl	8006d44 <__errno>
 8001910:	4603      	mov	r3, r0
 8001912:	2216      	movs	r2, #22
 8001914:	601a      	str	r2, [r3, #0]
  return -1;
 8001916:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800191a:	4618      	mov	r0, r3
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <_exit>:

void _exit (int status)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b082      	sub	sp, #8
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800192a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f7ff ffe7 	bl	8001902 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001934:	bf00      	nop
 8001936:	e7fd      	b.n	8001934 <_exit+0x12>

08001938 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]
 8001948:	e00a      	b.n	8001960 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800194a:	f3af 8000 	nop.w
 800194e:	4601      	mov	r1, r0
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	1c5a      	adds	r2, r3, #1
 8001954:	60ba      	str	r2, [r7, #8]
 8001956:	b2ca      	uxtb	r2, r1
 8001958:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	3301      	adds	r3, #1
 800195e:	617b      	str	r3, [r7, #20]
 8001960:	697a      	ldr	r2, [r7, #20]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	429a      	cmp	r2, r3
 8001966:	dbf0      	blt.n	800194a <_read+0x12>
  }

  return len;
 8001968:	687b      	ldr	r3, [r7, #4]
}
 800196a:	4618      	mov	r0, r3
 800196c:	3718      	adds	r7, #24
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b086      	sub	sp, #24
 8001976:	af00      	add	r7, sp, #0
 8001978:	60f8      	str	r0, [r7, #12]
 800197a:	60b9      	str	r1, [r7, #8]
 800197c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800197e:	2300      	movs	r3, #0
 8001980:	617b      	str	r3, [r7, #20]
 8001982:	e009      	b.n	8001998 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	1c5a      	adds	r2, r3, #1
 8001988:	60ba      	str	r2, [r7, #8]
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	3301      	adds	r3, #1
 8001996:	617b      	str	r3, [r7, #20]
 8001998:	697a      	ldr	r2, [r7, #20]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	429a      	cmp	r2, r3
 800199e:	dbf1      	blt.n	8001984 <_write+0x12>
  }
  return len;
 80019a0:	687b      	ldr	r3, [r7, #4]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3718      	adds	r7, #24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <_close>:

int _close(int file)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b083      	sub	sp, #12
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b083      	sub	sp, #12
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
 80019ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019d2:	605a      	str	r2, [r3, #4]
  return 0;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <_isatty>:

int _isatty(int file)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b083      	sub	sp, #12
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019ea:	2301      	movs	r3, #1
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3714      	adds	r7, #20
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
	...

08001a14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a1c:	4a14      	ldr	r2, [pc, #80]	@ (8001a70 <_sbrk+0x5c>)
 8001a1e:	4b15      	ldr	r3, [pc, #84]	@ (8001a74 <_sbrk+0x60>)
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a28:	4b13      	ldr	r3, [pc, #76]	@ (8001a78 <_sbrk+0x64>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d102      	bne.n	8001a36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a30:	4b11      	ldr	r3, [pc, #68]	@ (8001a78 <_sbrk+0x64>)
 8001a32:	4a12      	ldr	r2, [pc, #72]	@ (8001a7c <_sbrk+0x68>)
 8001a34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a36:	4b10      	ldr	r3, [pc, #64]	@ (8001a78 <_sbrk+0x64>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d207      	bcs.n	8001a54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a44:	f005 f97e 	bl	8006d44 <__errno>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	220c      	movs	r2, #12
 8001a4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a52:	e009      	b.n	8001a68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a54:	4b08      	ldr	r3, [pc, #32]	@ (8001a78 <_sbrk+0x64>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a5a:	4b07      	ldr	r3, [pc, #28]	@ (8001a78 <_sbrk+0x64>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4413      	add	r3, r2
 8001a62:	4a05      	ldr	r2, [pc, #20]	@ (8001a78 <_sbrk+0x64>)
 8001a64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a66:	68fb      	ldr	r3, [r7, #12]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3718      	adds	r7, #24
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	20018000 	.word	0x20018000
 8001a74:	00000400 	.word	0x00000400
 8001a78:	20000388 	.word	0x20000388
 8001a7c:	200004e0 	.word	0x200004e0

08001a80 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a84:	4b06      	ldr	r3, [pc, #24]	@ (8001aa0 <SystemInit+0x20>)
 8001a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a8a:	4a05      	ldr	r2, [pc, #20]	@ (8001aa0 <SystemInit+0x20>)
 8001a8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	e000ed00 	.word	0xe000ed00

08001aa4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001aa4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001adc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001aa8:	f7ff ffea 	bl	8001a80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001aac:	480c      	ldr	r0, [pc, #48]	@ (8001ae0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001aae:	490d      	ldr	r1, [pc, #52]	@ (8001ae4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ab0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ae8 <LoopForever+0xe>)
  movs r3, #0
 8001ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ab4:	e002      	b.n	8001abc <LoopCopyDataInit>

08001ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aba:	3304      	adds	r3, #4

08001abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ac0:	d3f9      	bcc.n	8001ab6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ac2:	4a0a      	ldr	r2, [pc, #40]	@ (8001aec <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ac4:	4c0a      	ldr	r4, [pc, #40]	@ (8001af0 <LoopForever+0x16>)
  movs r3, #0
 8001ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ac8:	e001      	b.n	8001ace <LoopFillZerobss>

08001aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001acc:	3204      	adds	r2, #4

08001ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ad0:	d3fb      	bcc.n	8001aca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ad2:	f005 f93d 	bl	8006d50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ad6:	f7ff fb7f 	bl	80011d8 <main>

08001ada <LoopForever>:

LoopForever:
    b LoopForever
 8001ada:	e7fe      	b.n	8001ada <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001adc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ae0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ae4:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001ae8:	080093a4 	.word	0x080093a4
  ldr r2, =_sbss
 8001aec:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001af0:	200004dc 	.word	0x200004dc

08001af4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001af4:	e7fe      	b.n	8001af4 <ADC1_2_IRQHandler>
	...

08001af8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001afe:	2300      	movs	r3, #0
 8001b00:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b02:	4b0c      	ldr	r3, [pc, #48]	@ (8001b34 <HAL_Init+0x3c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a0b      	ldr	r2, [pc, #44]	@ (8001b34 <HAL_Init+0x3c>)
 8001b08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b0c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b0e:	2003      	movs	r0, #3
 8001b10:	f001 fb66 	bl	80031e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b14:	2000      	movs	r0, #0
 8001b16:	f000 f80f 	bl	8001b38 <HAL_InitTick>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d002      	beq.n	8001b26 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	71fb      	strb	r3, [r7, #7]
 8001b24:	e001      	b.n	8001b2a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b26:	f7ff fd89 	bl	800163c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40022000 	.word	0x40022000

08001b38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b40:	2300      	movs	r3, #0
 8001b42:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b44:	4b17      	ldr	r3, [pc, #92]	@ (8001ba4 <HAL_InitTick+0x6c>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d023      	beq.n	8001b94 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b4c:	4b16      	ldr	r3, [pc, #88]	@ (8001ba8 <HAL_InitTick+0x70>)
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	4b14      	ldr	r3, [pc, #80]	@ (8001ba4 <HAL_InitTick+0x6c>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	4619      	mov	r1, r3
 8001b56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b62:	4618      	mov	r0, r3
 8001b64:	f001 fb63 	bl	800322e <HAL_SYSTICK_Config>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d10f      	bne.n	8001b8e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2b0f      	cmp	r3, #15
 8001b72:	d809      	bhi.n	8001b88 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b74:	2200      	movs	r2, #0
 8001b76:	6879      	ldr	r1, [r7, #4]
 8001b78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b7c:	f001 fb3b 	bl	80031f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b80:	4a0a      	ldr	r2, [pc, #40]	@ (8001bac <HAL_InitTick+0x74>)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6013      	str	r3, [r2, #0]
 8001b86:	e007      	b.n	8001b98 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	73fb      	strb	r3, [r7, #15]
 8001b8c:	e004      	b.n	8001b98 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	73fb      	strb	r3, [r7, #15]
 8001b92:	e001      	b.n	8001b98 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	2000000c 	.word	0x2000000c
 8001ba8:	20000004 	.word	0x20000004
 8001bac:	20000008 	.word	0x20000008

08001bb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bb4:	4b06      	ldr	r3, [pc, #24]	@ (8001bd0 <HAL_IncTick+0x20>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	461a      	mov	r2, r3
 8001bba:	4b06      	ldr	r3, [pc, #24]	@ (8001bd4 <HAL_IncTick+0x24>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	4a04      	ldr	r2, [pc, #16]	@ (8001bd4 <HAL_IncTick+0x24>)
 8001bc2:	6013      	str	r3, [r2, #0]
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	2000000c 	.word	0x2000000c
 8001bd4:	2000038c 	.word	0x2000038c

08001bd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  return uwTick;
 8001bdc:	4b03      	ldr	r3, [pc, #12]	@ (8001bec <HAL_GetTick+0x14>)
 8001bde:	681b      	ldr	r3, [r3, #0]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	2000038c 	.word	0x2000038c

08001bf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bf8:	f7ff ffee 	bl	8001bd8 <HAL_GetTick>
 8001bfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001c08:	d005      	beq.n	8001c16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c34 <HAL_Delay+0x44>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	4413      	add	r3, r2
 8001c14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c16:	bf00      	nop
 8001c18:	f7ff ffde 	bl	8001bd8 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d8f7      	bhi.n	8001c18 <HAL_Delay+0x28>
  {
  }
}
 8001c28:	bf00      	nop
 8001c2a:	bf00      	nop
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	2000000c 	.word	0x2000000c

08001c38 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	431a      	orrs	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	609a      	str	r2, [r3, #8]
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b083      	sub	sp, #12
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
 8001c66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	431a      	orrs	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	609a      	str	r2, [r3, #8]
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b087      	sub	sp, #28
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
 8001cac:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	3360      	adds	r3, #96	@ 0x60
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4413      	add	r3, r2
 8001cba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	4b08      	ldr	r3, [pc, #32]	@ (8001ce4 <LL_ADC_SetOffset+0x44>)
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001cca:	683a      	ldr	r2, [r7, #0]
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001cd8:	bf00      	nop
 8001cda:	371c      	adds	r7, #28
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	03fff000 	.word	0x03fff000

08001ce8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	3360      	adds	r3, #96	@ 0x60
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	4413      	add	r3, r2
 8001cfe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b087      	sub	sp, #28
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	3360      	adds	r3, #96	@ 0x60
 8001d24:	461a      	mov	r2, r3
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4413      	add	r3, r2
 8001d2c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	431a      	orrs	r2, r3
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001d3e:	bf00      	nop
 8001d40:	371c      	adds	r7, #28
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e000      	b.n	8001d64 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b087      	sub	sp, #28
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	3330      	adds	r3, #48	@ 0x30
 8001d80:	461a      	mov	r2, r3
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	0a1b      	lsrs	r3, r3, #8
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	f003 030c 	and.w	r3, r3, #12
 8001d8c:	4413      	add	r3, r2
 8001d8e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	f003 031f 	and.w	r3, r3, #31
 8001d9a:	211f      	movs	r1, #31
 8001d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001da0:	43db      	mvns	r3, r3
 8001da2:	401a      	ands	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	0e9b      	lsrs	r3, r3, #26
 8001da8:	f003 011f 	and.w	r1, r3, #31
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	f003 031f 	and.w	r3, r3, #31
 8001db2:	fa01 f303 	lsl.w	r3, r1, r3
 8001db6:	431a      	orrs	r2, r3
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001dbc:	bf00      	nop
 8001dbe:	371c      	adds	r7, #28
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b087      	sub	sp, #28
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	3314      	adds	r3, #20
 8001dd8:	461a      	mov	r2, r3
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	0e5b      	lsrs	r3, r3, #25
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	f003 0304 	and.w	r3, r3, #4
 8001de4:	4413      	add	r3, r2
 8001de6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	0d1b      	lsrs	r3, r3, #20
 8001df0:	f003 031f 	and.w	r3, r3, #31
 8001df4:	2107      	movs	r1, #7
 8001df6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfa:	43db      	mvns	r3, r3
 8001dfc:	401a      	ands	r2, r3
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	0d1b      	lsrs	r3, r3, #20
 8001e02:	f003 031f 	and.w	r3, r3, #31
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001e12:	bf00      	nop
 8001e14:	371c      	adds	r7, #28
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
	...

08001e20 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	401a      	ands	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f003 0318 	and.w	r3, r3, #24
 8001e42:	4908      	ldr	r1, [pc, #32]	@ (8001e64 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e44:	40d9      	lsrs	r1, r3
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	400b      	ands	r3, r1
 8001e4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001e56:	bf00      	nop
 8001e58:	3714      	adds	r7, #20
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	0007ffff 	.word	0x0007ffff

08001e68 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f003 031f 	and.w	r3, r3, #31
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001eb0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	6093      	str	r3, [r2, #8]
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ed4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ed8:	d101      	bne.n	8001ede <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001eda:	2301      	movs	r3, #1
 8001edc:	e000      	b.n	8001ee0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001efc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f00:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001f28:	d101      	bne.n	8001f2e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e000      	b.n	8001f30 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f4c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f50:	f043 0201 	orr.w	r2, r3, #1
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d101      	bne.n	8001f7c <LL_ADC_IsEnabled+0x18>
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e000      	b.n	8001f7e <LL_ADC_IsEnabled+0x1a>
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b083      	sub	sp, #12
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f9a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f9e:	f043 0204 	orr.w	r2, r3, #4
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 0304 	and.w	r3, r3, #4
 8001fc2:	2b04      	cmp	r3, #4
 8001fc4:	d101      	bne.n	8001fca <LL_ADC_REG_IsConversionOngoing+0x18>
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e000      	b.n	8001fcc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f003 0308 	and.w	r3, r3, #8
 8001fe8:	2b08      	cmp	r3, #8
 8001fea:	d101      	bne.n	8001ff0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001fec:	2301      	movs	r3, #1
 8001fee:	e000      	b.n	8001ff2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
	...

08002000 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002000:	b590      	push	{r4, r7, lr}
 8002002:	b089      	sub	sp, #36	@ 0x24
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002008:	2300      	movs	r3, #0
 800200a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800200c:	2300      	movs	r3, #0
 800200e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e130      	b.n	800227c <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002024:	2b00      	cmp	r3, #0
 8002026:	d109      	bne.n	800203c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f7ff fb2b 	bl	8001684 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff ff3f 	bl	8001ec4 <LL_ADC_IsDeepPowerDownEnabled>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d004      	beq.n	8002056 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff ff25 	bl	8001ea0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff ff5a 	bl	8001f14 <LL_ADC_IsInternalRegulatorEnabled>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d115      	bne.n	8002092 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff ff3e 	bl	8001eec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002070:	4b84      	ldr	r3, [pc, #528]	@ (8002284 <HAL_ADC_Init+0x284>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	099b      	lsrs	r3, r3, #6
 8002076:	4a84      	ldr	r2, [pc, #528]	@ (8002288 <HAL_ADC_Init+0x288>)
 8002078:	fba2 2303 	umull	r2, r3, r2, r3
 800207c:	099b      	lsrs	r3, r3, #6
 800207e:	3301      	adds	r3, #1
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002084:	e002      	b.n	800208c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	3b01      	subs	r3, #1
 800208a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1f9      	bne.n	8002086 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f7ff ff3c 	bl	8001f14 <LL_ADC_IsInternalRegulatorEnabled>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d10d      	bne.n	80020be <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020a6:	f043 0210 	orr.w	r2, r3, #16
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020b2:	f043 0201 	orr.w	r2, r3, #1
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff ff75 	bl	8001fb2 <LL_ADC_REG_IsConversionOngoing>
 80020c8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ce:	f003 0310 	and.w	r3, r3, #16
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f040 80c9 	bne.w	800226a <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f040 80c5 	bne.w	800226a <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020e4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80020e8:	f043 0202 	orr.w	r2, r3, #2
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff ff35 	bl	8001f64 <LL_ADC_IsEnabled>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d115      	bne.n	800212c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002100:	4862      	ldr	r0, [pc, #392]	@ (800228c <HAL_ADC_Init+0x28c>)
 8002102:	f7ff ff2f 	bl	8001f64 <LL_ADC_IsEnabled>
 8002106:	4604      	mov	r4, r0
 8002108:	4861      	ldr	r0, [pc, #388]	@ (8002290 <HAL_ADC_Init+0x290>)
 800210a:	f7ff ff2b 	bl	8001f64 <LL_ADC_IsEnabled>
 800210e:	4603      	mov	r3, r0
 8002110:	431c      	orrs	r4, r3
 8002112:	4860      	ldr	r0, [pc, #384]	@ (8002294 <HAL_ADC_Init+0x294>)
 8002114:	f7ff ff26 	bl	8001f64 <LL_ADC_IsEnabled>
 8002118:	4603      	mov	r3, r0
 800211a:	4323      	orrs	r3, r4
 800211c:	2b00      	cmp	r3, #0
 800211e:	d105      	bne.n	800212c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	4619      	mov	r1, r3
 8002126:	485c      	ldr	r0, [pc, #368]	@ (8002298 <HAL_ADC_Init+0x298>)
 8002128:	f7ff fd86 	bl	8001c38 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	7e5b      	ldrb	r3, [r3, #25]
 8002130:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002136:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800213c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002142:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f893 3020 	ldrb.w	r3, [r3, #32]
 800214a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800214c:	4313      	orrs	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d106      	bne.n	8002168 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800215e:	3b01      	subs	r3, #1
 8002160:	045b      	lsls	r3, r3, #17
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4313      	orrs	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800216c:	2b00      	cmp	r3, #0
 800216e:	d009      	beq.n	8002184 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002174:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800217c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	4313      	orrs	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68da      	ldr	r2, [r3, #12]
 800218a:	4b44      	ldr	r3, [pc, #272]	@ (800229c <HAL_ADC_Init+0x29c>)
 800218c:	4013      	ands	r3, r2
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	6812      	ldr	r2, [r2, #0]
 8002192:	69b9      	ldr	r1, [r7, #24]
 8002194:	430b      	orrs	r3, r1
 8002196:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff ff1b 	bl	8001fd8 <LL_ADC_INJ_IsConversionOngoing>
 80021a2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d13d      	bne.n	8002226 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d13a      	bne.n	8002226 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80021b4:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80021bc:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80021be:	4313      	orrs	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80021cc:	f023 0302 	bic.w	r3, r3, #2
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	6812      	ldr	r2, [r2, #0]
 80021d4:	69b9      	ldr	r1, [r7, #24]
 80021d6:	430b      	orrs	r3, r1
 80021d8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d118      	bne.n	8002216 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80021ee:	f023 0304 	bic.w	r3, r3, #4
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80021fa:	4311      	orrs	r1, r2
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002200:	4311      	orrs	r1, r2
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002206:	430a      	orrs	r2, r1
 8002208:	431a      	orrs	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f042 0201 	orr.w	r2, r2, #1
 8002212:	611a      	str	r2, [r3, #16]
 8002214:	e007      	b.n	8002226 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	691a      	ldr	r2, [r3, #16]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f022 0201 	bic.w	r2, r2, #1
 8002224:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d10c      	bne.n	8002248 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002234:	f023 010f 	bic.w	r1, r3, #15
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	69db      	ldr	r3, [r3, #28]
 800223c:	1e5a      	subs	r2, r3, #1
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	430a      	orrs	r2, r1
 8002244:	631a      	str	r2, [r3, #48]	@ 0x30
 8002246:	e007      	b.n	8002258 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f022 020f 	bic.w	r2, r2, #15
 8002256:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800225c:	f023 0303 	bic.w	r3, r3, #3
 8002260:	f043 0201 	orr.w	r2, r3, #1
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	655a      	str	r2, [r3, #84]	@ 0x54
 8002268:	e007      	b.n	800227a <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800226e:	f043 0210 	orr.w	r2, r3, #16
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800227a:	7ffb      	ldrb	r3, [r7, #31]
}
 800227c:	4618      	mov	r0, r3
 800227e:	3724      	adds	r7, #36	@ 0x24
 8002280:	46bd      	mov	sp, r7
 8002282:	bd90      	pop	{r4, r7, pc}
 8002284:	20000004 	.word	0x20000004
 8002288:	053e2d63 	.word	0x053e2d63
 800228c:	50040000 	.word	0x50040000
 8002290:	50040100 	.word	0x50040100
 8002294:	50040200 	.word	0x50040200
 8002298:	50040300 	.word	0x50040300
 800229c:	fff0c007 	.word	0xfff0c007

080022a0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022a8:	4857      	ldr	r0, [pc, #348]	@ (8002408 <HAL_ADC_Start+0x168>)
 80022aa:	f7ff fddd 	bl	8001e68 <LL_ADC_GetMultimode>
 80022ae:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff fe7c 	bl	8001fb2 <LL_ADC_REG_IsConversionOngoing>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f040 809c 	bne.w	80023fa <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d101      	bne.n	80022d0 <HAL_ADC_Start+0x30>
 80022cc:	2302      	movs	r3, #2
 80022ce:	e097      	b.n	8002400 <HAL_ADC_Start+0x160>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f000 fd73 	bl	8002dc4 <ADC_Enable>
 80022de:	4603      	mov	r3, r0
 80022e0:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80022e2:	7dfb      	ldrb	r3, [r7, #23]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f040 8083 	bne.w	80023f0 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ee:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80022f2:	f023 0301 	bic.w	r3, r3, #1
 80022f6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a42      	ldr	r2, [pc, #264]	@ (800240c <HAL_ADC_Start+0x16c>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d002      	beq.n	800230e <HAL_ADC_Start+0x6e>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	e000      	b.n	8002310 <HAL_ADC_Start+0x70>
 800230e:	4b40      	ldr	r3, [pc, #256]	@ (8002410 <HAL_ADC_Start+0x170>)
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	6812      	ldr	r2, [r2, #0]
 8002314:	4293      	cmp	r3, r2
 8002316:	d002      	beq.n	800231e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d105      	bne.n	800232a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002322:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800232e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002332:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002336:	d106      	bne.n	8002346 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800233c:	f023 0206 	bic.w	r2, r3, #6
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	659a      	str	r2, [r3, #88]	@ 0x58
 8002344:	e002      	b.n	800234c <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	221c      	movs	r2, #28
 8002352:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a2a      	ldr	r2, [pc, #168]	@ (800240c <HAL_ADC_Start+0x16c>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d002      	beq.n	800236c <HAL_ADC_Start+0xcc>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	e000      	b.n	800236e <HAL_ADC_Start+0xce>
 800236c:	4b28      	ldr	r3, [pc, #160]	@ (8002410 <HAL_ADC_Start+0x170>)
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6812      	ldr	r2, [r2, #0]
 8002372:	4293      	cmp	r3, r2
 8002374:	d008      	beq.n	8002388 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d005      	beq.n	8002388 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	2b05      	cmp	r3, #5
 8002380:	d002      	beq.n	8002388 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	2b09      	cmp	r3, #9
 8002386:	d114      	bne.n	80023b2 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d007      	beq.n	80023a6 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800239a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800239e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff fded 	bl	8001f8a <LL_ADC_REG_StartConversion>
 80023b0:	e025      	b.n	80023fe <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023b6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a12      	ldr	r2, [pc, #72]	@ (800240c <HAL_ADC_Start+0x16c>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d002      	beq.n	80023ce <HAL_ADC_Start+0x12e>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	e000      	b.n	80023d0 <HAL_ADC_Start+0x130>
 80023ce:	4b10      	ldr	r3, [pc, #64]	@ (8002410 <HAL_ADC_Start+0x170>)
 80023d0:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00f      	beq.n	80023fe <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023e2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80023e6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	655a      	str	r2, [r3, #84]	@ 0x54
 80023ee:	e006      	b.n	80023fe <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80023f8:	e001      	b.n	80023fe <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80023fa:	2302      	movs	r3, #2
 80023fc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80023fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002400:	4618      	mov	r0, r3
 8002402:	3718      	adds	r7, #24
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	50040300 	.word	0x50040300
 800240c:	50040100 	.word	0x50040100
 8002410:	50040000 	.word	0x50040000

08002414 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b088      	sub	sp, #32
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800241e:	4866      	ldr	r0, [pc, #408]	@ (80025b8 <HAL_ADC_PollForConversion+0x1a4>)
 8002420:	f7ff fd22 	bl	8001e68 <LL_ADC_GetMultimode>
 8002424:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	2b08      	cmp	r3, #8
 800242c:	d102      	bne.n	8002434 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800242e:	2308      	movs	r3, #8
 8002430:	61fb      	str	r3, [r7, #28]
 8002432:	e02a      	b.n	800248a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d005      	beq.n	8002446 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	2b05      	cmp	r3, #5
 800243e:	d002      	beq.n	8002446 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	2b09      	cmp	r3, #9
 8002444:	d111      	bne.n	800246a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	2b00      	cmp	r3, #0
 8002452:	d007      	beq.n	8002464 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002458:	f043 0220 	orr.w	r2, r3, #32
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e0a4      	b.n	80025ae <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002464:	2304      	movs	r3, #4
 8002466:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002468:	e00f      	b.n	800248a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800246a:	4853      	ldr	r0, [pc, #332]	@ (80025b8 <HAL_ADC_PollForConversion+0x1a4>)
 800246c:	f7ff fd0a 	bl	8001e84 <LL_ADC_GetMultiDMATransfer>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d007      	beq.n	8002486 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800247a:	f043 0220 	orr.w	r2, r3, #32
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e093      	b.n	80025ae <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002486:	2304      	movs	r3, #4
 8002488:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800248a:	f7ff fba5 	bl	8001bd8 <HAL_GetTick>
 800248e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002490:	e021      	b.n	80024d6 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002498:	d01d      	beq.n	80024d6 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800249a:	f7ff fb9d 	bl	8001bd8 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d302      	bcc.n	80024b0 <HAL_ADC_PollForConversion+0x9c>
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d112      	bne.n	80024d6 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	4013      	ands	r3, r2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10b      	bne.n	80024d6 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024c2:	f043 0204 	orr.w	r2, r3, #4
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e06b      	b.n	80025ae <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	4013      	ands	r3, r2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d0d6      	beq.n	8002492 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024e8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff fc28 	bl	8001d4a <LL_ADC_REG_IsTriggerSourceSWStart>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d01c      	beq.n	800253a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	7e5b      	ldrb	r3, [r3, #25]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d118      	bne.n	800253a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0308 	and.w	r3, r3, #8
 8002512:	2b08      	cmp	r3, #8
 8002514:	d111      	bne.n	800253a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800251a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002526:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d105      	bne.n	800253a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002532:	f043 0201 	orr.w	r2, r3, #1
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a1f      	ldr	r2, [pc, #124]	@ (80025bc <HAL_ADC_PollForConversion+0x1a8>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d002      	beq.n	800254a <HAL_ADC_PollForConversion+0x136>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	e000      	b.n	800254c <HAL_ADC_PollForConversion+0x138>
 800254a:	4b1d      	ldr	r3, [pc, #116]	@ (80025c0 <HAL_ADC_PollForConversion+0x1ac>)
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	6812      	ldr	r2, [r2, #0]
 8002550:	4293      	cmp	r3, r2
 8002552:	d008      	beq.n	8002566 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d005      	beq.n	8002566 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	2b05      	cmp	r3, #5
 800255e:	d002      	beq.n	8002566 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	2b09      	cmp	r3, #9
 8002564:	d104      	bne.n	8002570 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	61bb      	str	r3, [r7, #24]
 800256e:	e00c      	b.n	800258a <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a11      	ldr	r2, [pc, #68]	@ (80025bc <HAL_ADC_PollForConversion+0x1a8>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d002      	beq.n	8002580 <HAL_ADC_PollForConversion+0x16c>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	e000      	b.n	8002582 <HAL_ADC_PollForConversion+0x16e>
 8002580:	4b0f      	ldr	r3, [pc, #60]	@ (80025c0 <HAL_ADC_PollForConversion+0x1ac>)
 8002582:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	2b08      	cmp	r3, #8
 800258e:	d104      	bne.n	800259a <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2208      	movs	r2, #8
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	e008      	b.n	80025ac <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d103      	bne.n	80025ac <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	220c      	movs	r2, #12
 80025aa:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3720      	adds	r7, #32
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	50040300 	.word	0x50040300
 80025bc:	50040100 	.word	0x50040100
 80025c0:	50040000 	.word	0x50040000

080025c4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
	...

080025e0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b0b6      	sub	sp, #216	@ 0xd8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025ea:	2300      	movs	r3, #0
 80025ec:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80025f0:	2300      	movs	r3, #0
 80025f2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d101      	bne.n	8002602 <HAL_ADC_ConfigChannel+0x22>
 80025fe:	2302      	movs	r3, #2
 8002600:	e3c9      	b.n	8002d96 <HAL_ADC_ConfigChannel+0x7b6>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4618      	mov	r0, r3
 8002610:	f7ff fccf 	bl	8001fb2 <LL_ADC_REG_IsConversionOngoing>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	f040 83aa 	bne.w	8002d70 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	2b05      	cmp	r3, #5
 800262a:	d824      	bhi.n	8002676 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	3b02      	subs	r3, #2
 8002632:	2b03      	cmp	r3, #3
 8002634:	d81b      	bhi.n	800266e <HAL_ADC_ConfigChannel+0x8e>
 8002636:	a201      	add	r2, pc, #4	@ (adr r2, 800263c <HAL_ADC_ConfigChannel+0x5c>)
 8002638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800263c:	0800264d 	.word	0x0800264d
 8002640:	08002655 	.word	0x08002655
 8002644:	0800265d 	.word	0x0800265d
 8002648:	08002665 	.word	0x08002665
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800264c:	230c      	movs	r3, #12
 800264e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002652:	e010      	b.n	8002676 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002654:	2312      	movs	r3, #18
 8002656:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800265a:	e00c      	b.n	8002676 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800265c:	2318      	movs	r3, #24
 800265e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002662:	e008      	b.n	8002676 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002664:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002668:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800266c:	e003      	b.n	8002676 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800266e:	2306      	movs	r3, #6
 8002670:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002674:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6818      	ldr	r0, [r3, #0]
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	461a      	mov	r2, r3
 8002680:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002684:	f7ff fb74 	bl	8001d70 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff fc90 	bl	8001fb2 <LL_ADC_REG_IsConversionOngoing>
 8002692:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff fc9c 	bl	8001fd8 <LL_ADC_INJ_IsConversionOngoing>
 80026a0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f040 81a4 	bne.w	80029f6 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f040 819f 	bne.w	80029f6 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6818      	ldr	r0, [r3, #0]
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	6819      	ldr	r1, [r3, #0]
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	461a      	mov	r2, r3
 80026c6:	f7ff fb7f 	bl	8001dc8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	695a      	ldr	r2, [r3, #20]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	08db      	lsrs	r3, r3, #3
 80026d6:	f003 0303 	and.w	r3, r3, #3
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	2b04      	cmp	r3, #4
 80026ea:	d00a      	beq.n	8002702 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6818      	ldr	r0, [r3, #0]
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	6919      	ldr	r1, [r3, #16]
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80026fc:	f7ff fad0 	bl	8001ca0 <LL_ADC_SetOffset>
 8002700:	e179      	b.n	80029f6 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2100      	movs	r1, #0
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff faed 	bl	8001ce8 <LL_ADC_GetOffsetChannel>
 800270e:	4603      	mov	r3, r0
 8002710:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002714:	2b00      	cmp	r3, #0
 8002716:	d10a      	bne.n	800272e <HAL_ADC_ConfigChannel+0x14e>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2100      	movs	r1, #0
 800271e:	4618      	mov	r0, r3
 8002720:	f7ff fae2 	bl	8001ce8 <LL_ADC_GetOffsetChannel>
 8002724:	4603      	mov	r3, r0
 8002726:	0e9b      	lsrs	r3, r3, #26
 8002728:	f003 021f 	and.w	r2, r3, #31
 800272c:	e01e      	b.n	800276c <HAL_ADC_ConfigChannel+0x18c>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2100      	movs	r1, #0
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff fad7 	bl	8001ce8 <LL_ADC_GetOffsetChannel>
 800273a:	4603      	mov	r3, r0
 800273c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002740:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002744:	fa93 f3a3 	rbit	r3, r3
 8002748:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800274c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002750:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002754:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800275c:	2320      	movs	r3, #32
 800275e:	e004      	b.n	800276a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002760:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002764:	fab3 f383 	clz	r3, r3
 8002768:	b2db      	uxtb	r3, r3
 800276a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002774:	2b00      	cmp	r3, #0
 8002776:	d105      	bne.n	8002784 <HAL_ADC_ConfigChannel+0x1a4>
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	0e9b      	lsrs	r3, r3, #26
 800277e:	f003 031f 	and.w	r3, r3, #31
 8002782:	e018      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x1d6>
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002790:	fa93 f3a3 	rbit	r3, r3
 8002794:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002798:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800279c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80027a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d101      	bne.n	80027ac <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80027a8:	2320      	movs	r3, #32
 80027aa:	e004      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80027ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80027b0:	fab3 f383 	clz	r3, r3
 80027b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d106      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2200      	movs	r2, #0
 80027c0:	2100      	movs	r1, #0
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff faa6 	bl	8001d14 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2101      	movs	r1, #1
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff fa8a 	bl	8001ce8 <LL_ADC_GetOffsetChannel>
 80027d4:	4603      	mov	r3, r0
 80027d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d10a      	bne.n	80027f4 <HAL_ADC_ConfigChannel+0x214>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2101      	movs	r1, #1
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff fa7f 	bl	8001ce8 <LL_ADC_GetOffsetChannel>
 80027ea:	4603      	mov	r3, r0
 80027ec:	0e9b      	lsrs	r3, r3, #26
 80027ee:	f003 021f 	and.w	r2, r3, #31
 80027f2:	e01e      	b.n	8002832 <HAL_ADC_ConfigChannel+0x252>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2101      	movs	r1, #1
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7ff fa74 	bl	8001ce8 <LL_ADC_GetOffsetChannel>
 8002800:	4603      	mov	r3, r0
 8002802:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002806:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800280a:	fa93 f3a3 	rbit	r3, r3
 800280e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002812:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002816:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800281a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002822:	2320      	movs	r3, #32
 8002824:	e004      	b.n	8002830 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002826:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800282a:	fab3 f383 	clz	r3, r3
 800282e:	b2db      	uxtb	r3, r3
 8002830:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800283a:	2b00      	cmp	r3, #0
 800283c:	d105      	bne.n	800284a <HAL_ADC_ConfigChannel+0x26a>
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	0e9b      	lsrs	r3, r3, #26
 8002844:	f003 031f 	and.w	r3, r3, #31
 8002848:	e018      	b.n	800287c <HAL_ADC_ConfigChannel+0x29c>
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002852:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002856:	fa93 f3a3 	rbit	r3, r3
 800285a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800285e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002862:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002866:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800286e:	2320      	movs	r3, #32
 8002870:	e004      	b.n	800287c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002872:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002876:	fab3 f383 	clz	r3, r3
 800287a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800287c:	429a      	cmp	r2, r3
 800287e:	d106      	bne.n	800288e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2200      	movs	r2, #0
 8002886:	2101      	movs	r1, #1
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff fa43 	bl	8001d14 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2102      	movs	r1, #2
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff fa27 	bl	8001ce8 <LL_ADC_GetOffsetChannel>
 800289a:	4603      	mov	r3, r0
 800289c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d10a      	bne.n	80028ba <HAL_ADC_ConfigChannel+0x2da>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2102      	movs	r1, #2
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7ff fa1c 	bl	8001ce8 <LL_ADC_GetOffsetChannel>
 80028b0:	4603      	mov	r3, r0
 80028b2:	0e9b      	lsrs	r3, r3, #26
 80028b4:	f003 021f 	and.w	r2, r3, #31
 80028b8:	e01e      	b.n	80028f8 <HAL_ADC_ConfigChannel+0x318>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2102      	movs	r1, #2
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff fa11 	bl	8001ce8 <LL_ADC_GetOffsetChannel>
 80028c6:	4603      	mov	r3, r0
 80028c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80028d0:	fa93 f3a3 	rbit	r3, r3
 80028d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80028d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80028dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80028e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d101      	bne.n	80028ec <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80028e8:	2320      	movs	r3, #32
 80028ea:	e004      	b.n	80028f6 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80028ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028f0:	fab3 f383 	clz	r3, r3
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002900:	2b00      	cmp	r3, #0
 8002902:	d105      	bne.n	8002910 <HAL_ADC_ConfigChannel+0x330>
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	0e9b      	lsrs	r3, r3, #26
 800290a:	f003 031f 	and.w	r3, r3, #31
 800290e:	e014      	b.n	800293a <HAL_ADC_ConfigChannel+0x35a>
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002916:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002918:	fa93 f3a3 	rbit	r3, r3
 800291c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800291e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002920:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002924:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002928:	2b00      	cmp	r3, #0
 800292a:	d101      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800292c:	2320      	movs	r3, #32
 800292e:	e004      	b.n	800293a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002930:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002934:	fab3 f383 	clz	r3, r3
 8002938:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800293a:	429a      	cmp	r2, r3
 800293c:	d106      	bne.n	800294c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2200      	movs	r2, #0
 8002944:	2102      	movs	r1, #2
 8002946:	4618      	mov	r0, r3
 8002948:	f7ff f9e4 	bl	8001d14 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2103      	movs	r1, #3
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff f9c8 	bl	8001ce8 <LL_ADC_GetOffsetChannel>
 8002958:	4603      	mov	r3, r0
 800295a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800295e:	2b00      	cmp	r3, #0
 8002960:	d10a      	bne.n	8002978 <HAL_ADC_ConfigChannel+0x398>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2103      	movs	r1, #3
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff f9bd 	bl	8001ce8 <LL_ADC_GetOffsetChannel>
 800296e:	4603      	mov	r3, r0
 8002970:	0e9b      	lsrs	r3, r3, #26
 8002972:	f003 021f 	and.w	r2, r3, #31
 8002976:	e017      	b.n	80029a8 <HAL_ADC_ConfigChannel+0x3c8>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2103      	movs	r1, #3
 800297e:	4618      	mov	r0, r3
 8002980:	f7ff f9b2 	bl	8001ce8 <LL_ADC_GetOffsetChannel>
 8002984:	4603      	mov	r3, r0
 8002986:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002988:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800298a:	fa93 f3a3 	rbit	r3, r3
 800298e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002990:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002992:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002994:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800299a:	2320      	movs	r3, #32
 800299c:	e003      	b.n	80029a6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800299e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029a0:	fab3 f383 	clz	r3, r3
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d105      	bne.n	80029c0 <HAL_ADC_ConfigChannel+0x3e0>
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	0e9b      	lsrs	r3, r3, #26
 80029ba:	f003 031f 	and.w	r3, r3, #31
 80029be:	e011      	b.n	80029e4 <HAL_ADC_ConfigChannel+0x404>
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80029c8:	fa93 f3a3 	rbit	r3, r3
 80029cc:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80029ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80029d0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80029d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d101      	bne.n	80029dc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80029d8:	2320      	movs	r3, #32
 80029da:	e003      	b.n	80029e4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80029dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80029de:	fab3 f383 	clz	r3, r3
 80029e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d106      	bne.n	80029f6 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2200      	movs	r2, #0
 80029ee:	2103      	movs	r1, #3
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff f98f 	bl	8001d14 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff fab2 	bl	8001f64 <LL_ADC_IsEnabled>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	f040 8140 	bne.w	8002c88 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6818      	ldr	r0, [r3, #0]
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	6819      	ldr	r1, [r3, #0]
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	461a      	mov	r2, r3
 8002a16:	f7ff fa03 	bl	8001e20 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	4a8f      	ldr	r2, [pc, #572]	@ (8002c5c <HAL_ADC_ConfigChannel+0x67c>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	f040 8131 	bne.w	8002c88 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d10b      	bne.n	8002a4e <HAL_ADC_ConfigChannel+0x46e>
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	0e9b      	lsrs	r3, r3, #26
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	f003 031f 	and.w	r3, r3, #31
 8002a42:	2b09      	cmp	r3, #9
 8002a44:	bf94      	ite	ls
 8002a46:	2301      	movls	r3, #1
 8002a48:	2300      	movhi	r3, #0
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	e019      	b.n	8002a82 <HAL_ADC_ConfigChannel+0x4a2>
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a56:	fa93 f3a3 	rbit	r3, r3
 8002a5a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002a5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002a60:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002a66:	2320      	movs	r3, #32
 8002a68:	e003      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002a6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a6c:	fab3 f383 	clz	r3, r3
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	3301      	adds	r3, #1
 8002a74:	f003 031f 	and.w	r3, r3, #31
 8002a78:	2b09      	cmp	r3, #9
 8002a7a:	bf94      	ite	ls
 8002a7c:	2301      	movls	r3, #1
 8002a7e:	2300      	movhi	r3, #0
 8002a80:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d079      	beq.n	8002b7a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d107      	bne.n	8002aa2 <HAL_ADC_ConfigChannel+0x4c2>
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	0e9b      	lsrs	r3, r3, #26
 8002a98:	3301      	adds	r3, #1
 8002a9a:	069b      	lsls	r3, r3, #26
 8002a9c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002aa0:	e015      	b.n	8002ace <HAL_ADC_ConfigChannel+0x4ee>
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002aaa:	fa93 f3a3 	rbit	r3, r3
 8002aae:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002ab0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ab2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002ab4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002aba:	2320      	movs	r3, #32
 8002abc:	e003      	b.n	8002ac6 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002abe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ac0:	fab3 f383 	clz	r3, r3
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	069b      	lsls	r3, r3, #26
 8002aca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d109      	bne.n	8002aee <HAL_ADC_ConfigChannel+0x50e>
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	0e9b      	lsrs	r3, r3, #26
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	f003 031f 	and.w	r3, r3, #31
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8002aec:	e017      	b.n	8002b1e <HAL_ADC_ConfigChannel+0x53e>
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002af6:	fa93 f3a3 	rbit	r3, r3
 8002afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002afc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002afe:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002b00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002b06:	2320      	movs	r3, #32
 8002b08:	e003      	b.n	8002b12 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002b0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b0c:	fab3 f383 	clz	r3, r3
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	3301      	adds	r3, #1
 8002b14:	f003 031f 	and.w	r3, r3, #31
 8002b18:	2101      	movs	r1, #1
 8002b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b1e:	ea42 0103 	orr.w	r1, r2, r3
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d10a      	bne.n	8002b44 <HAL_ADC_ConfigChannel+0x564>
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	0e9b      	lsrs	r3, r3, #26
 8002b34:	3301      	adds	r3, #1
 8002b36:	f003 021f 	and.w	r2, r3, #31
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	4413      	add	r3, r2
 8002b40:	051b      	lsls	r3, r3, #20
 8002b42:	e018      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x596>
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b4c:	fa93 f3a3 	rbit	r3, r3
 8002b50:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b54:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d101      	bne.n	8002b60 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002b5c:	2320      	movs	r3, #32
 8002b5e:	e003      	b.n	8002b68 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b62:	fab3 f383 	clz	r3, r3
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	3301      	adds	r3, #1
 8002b6a:	f003 021f 	and.w	r2, r3, #31
 8002b6e:	4613      	mov	r3, r2
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	4413      	add	r3, r2
 8002b74:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b76:	430b      	orrs	r3, r1
 8002b78:	e081      	b.n	8002c7e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d107      	bne.n	8002b96 <HAL_ADC_ConfigChannel+0x5b6>
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	0e9b      	lsrs	r3, r3, #26
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	069b      	lsls	r3, r3, #26
 8002b90:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b94:	e015      	b.n	8002bc2 <HAL_ADC_ConfigChannel+0x5e2>
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b9e:	fa93 f3a3 	rbit	r3, r3
 8002ba2:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002bae:	2320      	movs	r3, #32
 8002bb0:	e003      	b.n	8002bba <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bb4:	fab3 f383 	clz	r3, r3
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	3301      	adds	r3, #1
 8002bbc:	069b      	lsls	r3, r3, #26
 8002bbe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d109      	bne.n	8002be2 <HAL_ADC_ConfigChannel+0x602>
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	0e9b      	lsrs	r3, r3, #26
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	f003 031f 	and.w	r3, r3, #31
 8002bda:	2101      	movs	r1, #1
 8002bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8002be0:	e017      	b.n	8002c12 <HAL_ADC_ConfigChannel+0x632>
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	fa93 f3a3 	rbit	r3, r3
 8002bee:	61bb      	str	r3, [r7, #24]
  return result;
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002bf4:	6a3b      	ldr	r3, [r7, #32]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002bfa:	2320      	movs	r3, #32
 8002bfc:	e003      	b.n	8002c06 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002bfe:	6a3b      	ldr	r3, [r7, #32]
 8002c00:	fab3 f383 	clz	r3, r3
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	3301      	adds	r3, #1
 8002c08:	f003 031f 	and.w	r3, r3, #31
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c12:	ea42 0103 	orr.w	r1, r2, r3
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d10d      	bne.n	8002c3e <HAL_ADC_ConfigChannel+0x65e>
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	0e9b      	lsrs	r3, r3, #26
 8002c28:	3301      	adds	r3, #1
 8002c2a:	f003 021f 	and.w	r2, r3, #31
 8002c2e:	4613      	mov	r3, r2
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	4413      	add	r3, r2
 8002c34:	3b1e      	subs	r3, #30
 8002c36:	051b      	lsls	r3, r3, #20
 8002c38:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002c3c:	e01e      	b.n	8002c7c <HAL_ADC_ConfigChannel+0x69c>
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	fa93 f3a3 	rbit	r3, r3
 8002c4a:	60fb      	str	r3, [r7, #12]
  return result;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d104      	bne.n	8002c60 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002c56:	2320      	movs	r3, #32
 8002c58:	e006      	b.n	8002c68 <HAL_ADC_ConfigChannel+0x688>
 8002c5a:	bf00      	nop
 8002c5c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	fab3 f383 	clz	r3, r3
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	3301      	adds	r3, #1
 8002c6a:	f003 021f 	and.w	r2, r3, #31
 8002c6e:	4613      	mov	r3, r2
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	4413      	add	r3, r2
 8002c74:	3b1e      	subs	r3, #30
 8002c76:	051b      	lsls	r3, r3, #20
 8002c78:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c7c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002c7e:	683a      	ldr	r2, [r7, #0]
 8002c80:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c82:	4619      	mov	r1, r3
 8002c84:	f7ff f8a0 	bl	8001dc8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	4b44      	ldr	r3, [pc, #272]	@ (8002da0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002c8e:	4013      	ands	r3, r2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d07a      	beq.n	8002d8a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c94:	4843      	ldr	r0, [pc, #268]	@ (8002da4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002c96:	f7fe fff5 	bl	8001c84 <LL_ADC_GetCommonPathInternalCh>
 8002c9a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a41      	ldr	r2, [pc, #260]	@ (8002da8 <HAL_ADC_ConfigChannel+0x7c8>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d12c      	bne.n	8002d02 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ca8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002cac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d126      	bne.n	8002d02 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a3c      	ldr	r2, [pc, #240]	@ (8002dac <HAL_ADC_ConfigChannel+0x7cc>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d004      	beq.n	8002cc8 <HAL_ADC_ConfigChannel+0x6e8>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a3b      	ldr	r2, [pc, #236]	@ (8002db0 <HAL_ADC_ConfigChannel+0x7d0>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d15d      	bne.n	8002d84 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cc8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ccc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4834      	ldr	r0, [pc, #208]	@ (8002da4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002cd4:	f7fe ffc3 	bl	8001c5e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cd8:	4b36      	ldr	r3, [pc, #216]	@ (8002db4 <HAL_ADC_ConfigChannel+0x7d4>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	099b      	lsrs	r3, r3, #6
 8002cde:	4a36      	ldr	r2, [pc, #216]	@ (8002db8 <HAL_ADC_ConfigChannel+0x7d8>)
 8002ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce4:	099b      	lsrs	r3, r3, #6
 8002ce6:	1c5a      	adds	r2, r3, #1
 8002ce8:	4613      	mov	r3, r2
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	4413      	add	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002cf2:	e002      	b.n	8002cfa <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1f9      	bne.n	8002cf4 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d00:	e040      	b.n	8002d84 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a2d      	ldr	r2, [pc, #180]	@ (8002dbc <HAL_ADC_ConfigChannel+0x7dc>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d118      	bne.n	8002d3e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002d10:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d112      	bne.n	8002d3e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a23      	ldr	r2, [pc, #140]	@ (8002dac <HAL_ADC_ConfigChannel+0x7cc>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d004      	beq.n	8002d2c <HAL_ADC_ConfigChannel+0x74c>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a22      	ldr	r2, [pc, #136]	@ (8002db0 <HAL_ADC_ConfigChannel+0x7d0>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d12d      	bne.n	8002d88 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002d30:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d34:	4619      	mov	r1, r3
 8002d36:	481b      	ldr	r0, [pc, #108]	@ (8002da4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002d38:	f7fe ff91 	bl	8001c5e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d3c:	e024      	b.n	8002d88 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a1f      	ldr	r2, [pc, #124]	@ (8002dc0 <HAL_ADC_ConfigChannel+0x7e0>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d120      	bne.n	8002d8a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002d4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d11a      	bne.n	8002d8a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a14      	ldr	r2, [pc, #80]	@ (8002dac <HAL_ADC_ConfigChannel+0x7cc>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d115      	bne.n	8002d8a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002d62:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002d66:	4619      	mov	r1, r3
 8002d68:	480e      	ldr	r0, [pc, #56]	@ (8002da4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002d6a:	f7fe ff78 	bl	8001c5e <LL_ADC_SetCommonPathInternalCh>
 8002d6e:	e00c      	b.n	8002d8a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d74:	f043 0220 	orr.w	r2, r3, #32
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002d82:	e002      	b.n	8002d8a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d84:	bf00      	nop
 8002d86:	e000      	b.n	8002d8a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d88:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d92:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	37d8      	adds	r7, #216	@ 0xd8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	80080000 	.word	0x80080000
 8002da4:	50040300 	.word	0x50040300
 8002da8:	c7520000 	.word	0xc7520000
 8002dac:	50040000 	.word	0x50040000
 8002db0:	50040200 	.word	0x50040200
 8002db4:	20000004 	.word	0x20000004
 8002db8:	053e2d63 	.word	0x053e2d63
 8002dbc:	cb840000 	.word	0xcb840000
 8002dc0:	80000001 	.word	0x80000001

08002dc4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7ff f8c5 	bl	8001f64 <LL_ADC_IsEnabled>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d169      	bne.n	8002eb4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689a      	ldr	r2, [r3, #8]
 8002de6:	4b36      	ldr	r3, [pc, #216]	@ (8002ec0 <ADC_Enable+0xfc>)
 8002de8:	4013      	ands	r3, r2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00d      	beq.n	8002e0a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002df2:	f043 0210 	orr.w	r2, r3, #16
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dfe:	f043 0201 	orr.w	r2, r3, #1
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e055      	b.n	8002eb6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7ff f894 	bl	8001f3c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002e14:	482b      	ldr	r0, [pc, #172]	@ (8002ec4 <ADC_Enable+0x100>)
 8002e16:	f7fe ff35 	bl	8001c84 <LL_ADC_GetCommonPathInternalCh>
 8002e1a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002e1c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d013      	beq.n	8002e4c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e24:	4b28      	ldr	r3, [pc, #160]	@ (8002ec8 <ADC_Enable+0x104>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	099b      	lsrs	r3, r3, #6
 8002e2a:	4a28      	ldr	r2, [pc, #160]	@ (8002ecc <ADC_Enable+0x108>)
 8002e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e30:	099b      	lsrs	r3, r3, #6
 8002e32:	1c5a      	adds	r2, r3, #1
 8002e34:	4613      	mov	r3, r2
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	4413      	add	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002e3e:	e002      	b.n	8002e46 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	3b01      	subs	r3, #1
 8002e44:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d1f9      	bne.n	8002e40 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002e4c:	f7fe fec4 	bl	8001bd8 <HAL_GetTick>
 8002e50:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e52:	e028      	b.n	8002ea6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff f883 	bl	8001f64 <LL_ADC_IsEnabled>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d104      	bne.n	8002e6e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7ff f867 	bl	8001f3c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e6e:	f7fe feb3 	bl	8001bd8 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d914      	bls.n	8002ea6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d00d      	beq.n	8002ea6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e8e:	f043 0210 	orr.w	r2, r3, #16
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e9a:	f043 0201 	orr.w	r2, r3, #1
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e007      	b.n	8002eb6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d1cf      	bne.n	8002e54 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	8000003f 	.word	0x8000003f
 8002ec4:	50040300 	.word	0x50040300
 8002ec8:	20000004 	.word	0x20000004
 8002ecc:	053e2d63 	.word	0x053e2d63

08002ed0 <LL_ADC_IsEnabled>:
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d101      	bne.n	8002ee8 <LL_ADC_IsEnabled+0x18>
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e000      	b.n	8002eea <LL_ADC_IsEnabled+0x1a>
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr

08002ef6 <LL_ADC_REG_IsConversionOngoing>:
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	b083      	sub	sp, #12
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f003 0304 	and.w	r3, r3, #4
 8002f06:	2b04      	cmp	r3, #4
 8002f08:	d101      	bne.n	8002f0e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e000      	b.n	8002f10 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002f1c:	b590      	push	{r4, r7, lr}
 8002f1e:	b09f      	sub	sp, #124	@ 0x7c
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f26:	2300      	movs	r3, #0
 8002f28:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d101      	bne.n	8002f3a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002f36:	2302      	movs	r3, #2
 8002f38:	e093      	b.n	8003062 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002f42:	2300      	movs	r3, #0
 8002f44:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002f46:	2300      	movs	r3, #0
 8002f48:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a47      	ldr	r2, [pc, #284]	@ (800306c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d102      	bne.n	8002f5a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002f54:	4b46      	ldr	r3, [pc, #280]	@ (8003070 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002f56:	60bb      	str	r3, [r7, #8]
 8002f58:	e001      	b.n	8002f5e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d10b      	bne.n	8002f7c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f68:	f043 0220 	orr.w	r2, r3, #32
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e072      	b.n	8003062 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff ffb9 	bl	8002ef6 <LL_ADC_REG_IsConversionOngoing>
 8002f84:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7ff ffb3 	bl	8002ef6 <LL_ADC_REG_IsConversionOngoing>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d154      	bne.n	8003040 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002f96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d151      	bne.n	8003040 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002f9c:	4b35      	ldr	r3, [pc, #212]	@ (8003074 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002f9e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d02c      	beq.n	8003002 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002fa8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	6859      	ldr	r1, [r3, #4]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002fba:	035b      	lsls	r3, r3, #13
 8002fbc:	430b      	orrs	r3, r1
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fc2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fc4:	4829      	ldr	r0, [pc, #164]	@ (800306c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002fc6:	f7ff ff83 	bl	8002ed0 <LL_ADC_IsEnabled>
 8002fca:	4604      	mov	r4, r0
 8002fcc:	4828      	ldr	r0, [pc, #160]	@ (8003070 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002fce:	f7ff ff7f 	bl	8002ed0 <LL_ADC_IsEnabled>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	431c      	orrs	r4, r3
 8002fd6:	4828      	ldr	r0, [pc, #160]	@ (8003078 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002fd8:	f7ff ff7a 	bl	8002ed0 <LL_ADC_IsEnabled>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	4323      	orrs	r3, r4
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d137      	bne.n	8003054 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002fe4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002fec:	f023 030f 	bic.w	r3, r3, #15
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	6811      	ldr	r1, [r2, #0]
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	6892      	ldr	r2, [r2, #8]
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ffe:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003000:	e028      	b.n	8003054 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003002:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800300a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800300c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800300e:	4817      	ldr	r0, [pc, #92]	@ (800306c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003010:	f7ff ff5e 	bl	8002ed0 <LL_ADC_IsEnabled>
 8003014:	4604      	mov	r4, r0
 8003016:	4816      	ldr	r0, [pc, #88]	@ (8003070 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003018:	f7ff ff5a 	bl	8002ed0 <LL_ADC_IsEnabled>
 800301c:	4603      	mov	r3, r0
 800301e:	431c      	orrs	r4, r3
 8003020:	4815      	ldr	r0, [pc, #84]	@ (8003078 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003022:	f7ff ff55 	bl	8002ed0 <LL_ADC_IsEnabled>
 8003026:	4603      	mov	r3, r0
 8003028:	4323      	orrs	r3, r4
 800302a:	2b00      	cmp	r3, #0
 800302c:	d112      	bne.n	8003054 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800302e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003036:	f023 030f 	bic.w	r3, r3, #15
 800303a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800303c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800303e:	e009      	b.n	8003054 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003044:	f043 0220 	orr.w	r2, r3, #32
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003052:	e000      	b.n	8003056 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003054:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800305e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003062:	4618      	mov	r0, r3
 8003064:	377c      	adds	r7, #124	@ 0x7c
 8003066:	46bd      	mov	sp, r7
 8003068:	bd90      	pop	{r4, r7, pc}
 800306a:	bf00      	nop
 800306c:	50040000 	.word	0x50040000
 8003070:	50040100 	.word	0x50040100
 8003074:	50040300 	.word	0x50040300
 8003078:	50040200 	.word	0x50040200

0800307c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f003 0307 	and.w	r3, r3, #7
 800308a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800308c:	4b0c      	ldr	r3, [pc, #48]	@ (80030c0 <__NVIC_SetPriorityGrouping+0x44>)
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003092:	68ba      	ldr	r2, [r7, #8]
 8003094:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003098:	4013      	ands	r3, r2
 800309a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80030a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030ae:	4a04      	ldr	r2, [pc, #16]	@ (80030c0 <__NVIC_SetPriorityGrouping+0x44>)
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	60d3      	str	r3, [r2, #12]
}
 80030b4:	bf00      	nop
 80030b6:	3714      	adds	r7, #20
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr
 80030c0:	e000ed00 	.word	0xe000ed00

080030c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030c8:	4b04      	ldr	r3, [pc, #16]	@ (80030dc <__NVIC_GetPriorityGrouping+0x18>)
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	0a1b      	lsrs	r3, r3, #8
 80030ce:	f003 0307 	and.w	r3, r3, #7
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	e000ed00 	.word	0xe000ed00

080030e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	4603      	mov	r3, r0
 80030e8:	6039      	str	r1, [r7, #0]
 80030ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	db0a      	blt.n	800310a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	b2da      	uxtb	r2, r3
 80030f8:	490c      	ldr	r1, [pc, #48]	@ (800312c <__NVIC_SetPriority+0x4c>)
 80030fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fe:	0112      	lsls	r2, r2, #4
 8003100:	b2d2      	uxtb	r2, r2
 8003102:	440b      	add	r3, r1
 8003104:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003108:	e00a      	b.n	8003120 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	b2da      	uxtb	r2, r3
 800310e:	4908      	ldr	r1, [pc, #32]	@ (8003130 <__NVIC_SetPriority+0x50>)
 8003110:	79fb      	ldrb	r3, [r7, #7]
 8003112:	f003 030f 	and.w	r3, r3, #15
 8003116:	3b04      	subs	r3, #4
 8003118:	0112      	lsls	r2, r2, #4
 800311a:	b2d2      	uxtb	r2, r2
 800311c:	440b      	add	r3, r1
 800311e:	761a      	strb	r2, [r3, #24]
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr
 800312c:	e000e100 	.word	0xe000e100
 8003130:	e000ed00 	.word	0xe000ed00

08003134 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003134:	b480      	push	{r7}
 8003136:	b089      	sub	sp, #36	@ 0x24
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f003 0307 	and.w	r3, r3, #7
 8003146:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	f1c3 0307 	rsb	r3, r3, #7
 800314e:	2b04      	cmp	r3, #4
 8003150:	bf28      	it	cs
 8003152:	2304      	movcs	r3, #4
 8003154:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	3304      	adds	r3, #4
 800315a:	2b06      	cmp	r3, #6
 800315c:	d902      	bls.n	8003164 <NVIC_EncodePriority+0x30>
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	3b03      	subs	r3, #3
 8003162:	e000      	b.n	8003166 <NVIC_EncodePriority+0x32>
 8003164:	2300      	movs	r3, #0
 8003166:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003168:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	43da      	mvns	r2, r3
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	401a      	ands	r2, r3
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800317c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	fa01 f303 	lsl.w	r3, r1, r3
 8003186:	43d9      	mvns	r1, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800318c:	4313      	orrs	r3, r2
         );
}
 800318e:	4618      	mov	r0, r3
 8003190:	3724      	adds	r7, #36	@ 0x24
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
	...

0800319c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	3b01      	subs	r3, #1
 80031a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031ac:	d301      	bcc.n	80031b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031ae:	2301      	movs	r3, #1
 80031b0:	e00f      	b.n	80031d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031b2:	4a0a      	ldr	r2, [pc, #40]	@ (80031dc <SysTick_Config+0x40>)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	3b01      	subs	r3, #1
 80031b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031ba:	210f      	movs	r1, #15
 80031bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80031c0:	f7ff ff8e 	bl	80030e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031c4:	4b05      	ldr	r3, [pc, #20]	@ (80031dc <SysTick_Config+0x40>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031ca:	4b04      	ldr	r3, [pc, #16]	@ (80031dc <SysTick_Config+0x40>)
 80031cc:	2207      	movs	r2, #7
 80031ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	e000e010 	.word	0xe000e010

080031e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f7ff ff47 	bl	800307c <__NVIC_SetPriorityGrouping>
}
 80031ee:	bf00      	nop
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b086      	sub	sp, #24
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	4603      	mov	r3, r0
 80031fe:	60b9      	str	r1, [r7, #8]
 8003200:	607a      	str	r2, [r7, #4]
 8003202:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003204:	2300      	movs	r3, #0
 8003206:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003208:	f7ff ff5c 	bl	80030c4 <__NVIC_GetPriorityGrouping>
 800320c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	68b9      	ldr	r1, [r7, #8]
 8003212:	6978      	ldr	r0, [r7, #20]
 8003214:	f7ff ff8e 	bl	8003134 <NVIC_EncodePriority>
 8003218:	4602      	mov	r2, r0
 800321a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800321e:	4611      	mov	r1, r2
 8003220:	4618      	mov	r0, r3
 8003222:	f7ff ff5d 	bl	80030e0 <__NVIC_SetPriority>
}
 8003226:	bf00      	nop
 8003228:	3718      	adds	r7, #24
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b082      	sub	sp, #8
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f7ff ffb0 	bl	800319c <SysTick_Config>
 800323c:	4603      	mov	r3, r0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
	...

08003248 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003248:	b480      	push	{r7}
 800324a:	b087      	sub	sp, #28
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003252:	2300      	movs	r3, #0
 8003254:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003256:	e17f      	b.n	8003558 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	2101      	movs	r1, #1
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	fa01 f303 	lsl.w	r3, r1, r3
 8003264:	4013      	ands	r3, r2
 8003266:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2b00      	cmp	r3, #0
 800326c:	f000 8171 	beq.w	8003552 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f003 0303 	and.w	r3, r3, #3
 8003278:	2b01      	cmp	r3, #1
 800327a:	d005      	beq.n	8003288 <HAL_GPIO_Init+0x40>
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f003 0303 	and.w	r3, r3, #3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d130      	bne.n	80032ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	2203      	movs	r2, #3
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	43db      	mvns	r3, r3
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	4013      	ands	r3, r2
 800329e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	68da      	ldr	r2, [r3, #12]
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032be:	2201      	movs	r2, #1
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	fa02 f303 	lsl.w	r3, r2, r3
 80032c6:	43db      	mvns	r3, r3
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	4013      	ands	r3, r2
 80032cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	091b      	lsrs	r3, r3, #4
 80032d4:	f003 0201 	and.w	r2, r3, #1
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	fa02 f303 	lsl.w	r3, r2, r3
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f003 0303 	and.w	r3, r3, #3
 80032f2:	2b03      	cmp	r3, #3
 80032f4:	d118      	bne.n	8003328 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80032fc:	2201      	movs	r2, #1
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	43db      	mvns	r3, r3
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	4013      	ands	r3, r2
 800330a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	08db      	lsrs	r3, r3, #3
 8003312:	f003 0201 	and.w	r2, r3, #1
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	4313      	orrs	r3, r2
 8003320:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f003 0303 	and.w	r3, r3, #3
 8003330:	2b03      	cmp	r3, #3
 8003332:	d017      	beq.n	8003364 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	2203      	movs	r2, #3
 8003340:	fa02 f303 	lsl.w	r3, r2, r3
 8003344:	43db      	mvns	r3, r3
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	4013      	ands	r3, r2
 800334a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	689a      	ldr	r2, [r3, #8]
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	4313      	orrs	r3, r2
 800335c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f003 0303 	and.w	r3, r3, #3
 800336c:	2b02      	cmp	r3, #2
 800336e:	d123      	bne.n	80033b8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	08da      	lsrs	r2, r3, #3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	3208      	adds	r2, #8
 8003378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800337c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	f003 0307 	and.w	r3, r3, #7
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	220f      	movs	r2, #15
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	43db      	mvns	r3, r3
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	4013      	ands	r3, r2
 8003392:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	691a      	ldr	r2, [r3, #16]
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	f003 0307 	and.w	r3, r3, #7
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	08da      	lsrs	r2, r3, #3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	3208      	adds	r2, #8
 80033b2:	6939      	ldr	r1, [r7, #16]
 80033b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	2203      	movs	r2, #3
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	43db      	mvns	r3, r3
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	4013      	ands	r3, r2
 80033ce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f003 0203 	and.w	r2, r3, #3
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f000 80ac 	beq.w	8003552 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033fa:	4b5f      	ldr	r3, [pc, #380]	@ (8003578 <HAL_GPIO_Init+0x330>)
 80033fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033fe:	4a5e      	ldr	r2, [pc, #376]	@ (8003578 <HAL_GPIO_Init+0x330>)
 8003400:	f043 0301 	orr.w	r3, r3, #1
 8003404:	6613      	str	r3, [r2, #96]	@ 0x60
 8003406:	4b5c      	ldr	r3, [pc, #368]	@ (8003578 <HAL_GPIO_Init+0x330>)
 8003408:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	60bb      	str	r3, [r7, #8]
 8003410:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003412:	4a5a      	ldr	r2, [pc, #360]	@ (800357c <HAL_GPIO_Init+0x334>)
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	089b      	lsrs	r3, r3, #2
 8003418:	3302      	adds	r3, #2
 800341a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800341e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	f003 0303 	and.w	r3, r3, #3
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	220f      	movs	r2, #15
 800342a:	fa02 f303 	lsl.w	r3, r2, r3
 800342e:	43db      	mvns	r3, r3
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	4013      	ands	r3, r2
 8003434:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800343c:	d025      	beq.n	800348a <HAL_GPIO_Init+0x242>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a4f      	ldr	r2, [pc, #316]	@ (8003580 <HAL_GPIO_Init+0x338>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d01f      	beq.n	8003486 <HAL_GPIO_Init+0x23e>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a4e      	ldr	r2, [pc, #312]	@ (8003584 <HAL_GPIO_Init+0x33c>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d019      	beq.n	8003482 <HAL_GPIO_Init+0x23a>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a4d      	ldr	r2, [pc, #308]	@ (8003588 <HAL_GPIO_Init+0x340>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d013      	beq.n	800347e <HAL_GPIO_Init+0x236>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a4c      	ldr	r2, [pc, #304]	@ (800358c <HAL_GPIO_Init+0x344>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d00d      	beq.n	800347a <HAL_GPIO_Init+0x232>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a4b      	ldr	r2, [pc, #300]	@ (8003590 <HAL_GPIO_Init+0x348>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d007      	beq.n	8003476 <HAL_GPIO_Init+0x22e>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a4a      	ldr	r2, [pc, #296]	@ (8003594 <HAL_GPIO_Init+0x34c>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d101      	bne.n	8003472 <HAL_GPIO_Init+0x22a>
 800346e:	2306      	movs	r3, #6
 8003470:	e00c      	b.n	800348c <HAL_GPIO_Init+0x244>
 8003472:	2307      	movs	r3, #7
 8003474:	e00a      	b.n	800348c <HAL_GPIO_Init+0x244>
 8003476:	2305      	movs	r3, #5
 8003478:	e008      	b.n	800348c <HAL_GPIO_Init+0x244>
 800347a:	2304      	movs	r3, #4
 800347c:	e006      	b.n	800348c <HAL_GPIO_Init+0x244>
 800347e:	2303      	movs	r3, #3
 8003480:	e004      	b.n	800348c <HAL_GPIO_Init+0x244>
 8003482:	2302      	movs	r3, #2
 8003484:	e002      	b.n	800348c <HAL_GPIO_Init+0x244>
 8003486:	2301      	movs	r3, #1
 8003488:	e000      	b.n	800348c <HAL_GPIO_Init+0x244>
 800348a:	2300      	movs	r3, #0
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	f002 0203 	and.w	r2, r2, #3
 8003492:	0092      	lsls	r2, r2, #2
 8003494:	4093      	lsls	r3, r2
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	4313      	orrs	r3, r2
 800349a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800349c:	4937      	ldr	r1, [pc, #220]	@ (800357c <HAL_GPIO_Init+0x334>)
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	089b      	lsrs	r3, r3, #2
 80034a2:	3302      	adds	r3, #2
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034aa:	4b3b      	ldr	r3, [pc, #236]	@ (8003598 <HAL_GPIO_Init+0x350>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	43db      	mvns	r3, r3
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	4013      	ands	r3, r2
 80034b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d003      	beq.n	80034ce <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80034ce:	4a32      	ldr	r2, [pc, #200]	@ (8003598 <HAL_GPIO_Init+0x350>)
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80034d4:	4b30      	ldr	r3, [pc, #192]	@ (8003598 <HAL_GPIO_Init+0x350>)
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	43db      	mvns	r3, r3
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	4013      	ands	r3, r2
 80034e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d003      	beq.n	80034f8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80034f8:	4a27      	ldr	r2, [pc, #156]	@ (8003598 <HAL_GPIO_Init+0x350>)
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80034fe:	4b26      	ldr	r3, [pc, #152]	@ (8003598 <HAL_GPIO_Init+0x350>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	43db      	mvns	r3, r3
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	4013      	ands	r3, r2
 800350c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	4313      	orrs	r3, r2
 8003520:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003522:	4a1d      	ldr	r2, [pc, #116]	@ (8003598 <HAL_GPIO_Init+0x350>)
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003528:	4b1b      	ldr	r3, [pc, #108]	@ (8003598 <HAL_GPIO_Init+0x350>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	43db      	mvns	r3, r3
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	4013      	ands	r3, r2
 8003536:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d003      	beq.n	800354c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	4313      	orrs	r3, r2
 800354a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800354c:	4a12      	ldr	r2, [pc, #72]	@ (8003598 <HAL_GPIO_Init+0x350>)
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	3301      	adds	r3, #1
 8003556:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	fa22 f303 	lsr.w	r3, r2, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	f47f ae78 	bne.w	8003258 <HAL_GPIO_Init+0x10>
  }
}
 8003568:	bf00      	nop
 800356a:	bf00      	nop
 800356c:	371c      	adds	r7, #28
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	40021000 	.word	0x40021000
 800357c:	40010000 	.word	0x40010000
 8003580:	48000400 	.word	0x48000400
 8003584:	48000800 	.word	0x48000800
 8003588:	48000c00 	.word	0x48000c00
 800358c:	48001000 	.word	0x48001000
 8003590:	48001400 	.word	0x48001400
 8003594:	48001800 	.word	0x48001800
 8003598:	40010400 	.word	0x40010400

0800359c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	460b      	mov	r3, r1
 80035a6:	807b      	strh	r3, [r7, #2]
 80035a8:	4613      	mov	r3, r2
 80035aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035ac:	787b      	ldrb	r3, [r7, #1]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d003      	beq.n	80035ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035b2:	887a      	ldrh	r2, [r7, #2]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035b8:	e002      	b.n	80035c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035ba:	887a      	ldrh	r2, [r7, #2]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80035c0:	bf00      	nop
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e08d      	b.n	80036fa <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d106      	bne.n	80035f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f7fe f8ae 	bl	8001754 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2224      	movs	r2, #36	@ 0x24
 80035fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 0201 	bic.w	r2, r2, #1
 800360e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800361c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	689a      	ldr	r2, [r3, #8]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800362c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	2b01      	cmp	r3, #1
 8003634:	d107      	bne.n	8003646 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	689a      	ldr	r2, [r3, #8]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003642:	609a      	str	r2, [r3, #8]
 8003644:	e006      	b.n	8003654 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	689a      	ldr	r2, [r3, #8]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003652:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	2b02      	cmp	r3, #2
 800365a:	d108      	bne.n	800366e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800366a:	605a      	str	r2, [r3, #4]
 800366c:	e007      	b.n	800367e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800367c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	6812      	ldr	r2, [r2, #0]
 8003688:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800368c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003690:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68da      	ldr	r2, [r3, #12]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	691a      	ldr	r2, [r3, #16]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	430a      	orrs	r2, r1
 80036ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	69d9      	ldr	r1, [r3, #28]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a1a      	ldr	r2, [r3, #32]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	430a      	orrs	r2, r1
 80036ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f042 0201 	orr.w	r2, r2, #1
 80036da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2220      	movs	r2, #32
 80036e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
	...

08003704 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b088      	sub	sp, #32
 8003708:	af02      	add	r7, sp, #8
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	607a      	str	r2, [r7, #4]
 800370e:	461a      	mov	r2, r3
 8003710:	460b      	mov	r3, r1
 8003712:	817b      	strh	r3, [r7, #10]
 8003714:	4613      	mov	r3, r2
 8003716:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2b20      	cmp	r3, #32
 8003722:	f040 80fd 	bne.w	8003920 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800372c:	2b01      	cmp	r3, #1
 800372e:	d101      	bne.n	8003734 <HAL_I2C_Master_Transmit+0x30>
 8003730:	2302      	movs	r3, #2
 8003732:	e0f6      	b.n	8003922 <HAL_I2C_Master_Transmit+0x21e>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800373c:	f7fe fa4c 	bl	8001bd8 <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	2319      	movs	r3, #25
 8003748:	2201      	movs	r2, #1
 800374a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f000 f914 	bl	800397c <I2C_WaitOnFlagUntilTimeout>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e0e1      	b.n	8003922 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2221      	movs	r2, #33	@ 0x21
 8003762:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2210      	movs	r2, #16
 800376a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	893a      	ldrh	r2, [r7, #8]
 800377e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800378a:	b29b      	uxth	r3, r3
 800378c:	2bff      	cmp	r3, #255	@ 0xff
 800378e:	d906      	bls.n	800379e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	22ff      	movs	r2, #255	@ 0xff
 8003794:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003796:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800379a:	617b      	str	r3, [r7, #20]
 800379c:	e007      	b.n	80037ae <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037a2:	b29a      	uxth	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80037a8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037ac:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d024      	beq.n	8003800 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ba:	781a      	ldrb	r2, [r3, #0]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c6:	1c5a      	adds	r2, r3, #1
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	3b01      	subs	r3, #1
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037de:	3b01      	subs	r3, #1
 80037e0:	b29a      	uxth	r2, r3
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	3301      	adds	r3, #1
 80037ee:	b2da      	uxtb	r2, r3
 80037f0:	8979      	ldrh	r1, [r7, #10]
 80037f2:	4b4e      	ldr	r3, [pc, #312]	@ (800392c <HAL_I2C_Master_Transmit+0x228>)
 80037f4:	9300      	str	r3, [sp, #0]
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	f000 fa83 	bl	8003d04 <I2C_TransferConfig>
 80037fe:	e066      	b.n	80038ce <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003804:	b2da      	uxtb	r2, r3
 8003806:	8979      	ldrh	r1, [r7, #10]
 8003808:	4b48      	ldr	r3, [pc, #288]	@ (800392c <HAL_I2C_Master_Transmit+0x228>)
 800380a:	9300      	str	r3, [sp, #0]
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f000 fa78 	bl	8003d04 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003814:	e05b      	b.n	80038ce <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	6a39      	ldr	r1, [r7, #32]
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f000 f907 	bl	8003a2e <I2C_WaitOnTXISFlagUntilTimeout>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e07b      	b.n	8003922 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800382e:	781a      	ldrb	r2, [r3, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383a:	1c5a      	adds	r2, r3, #1
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003844:	b29b      	uxth	r3, r3
 8003846:	3b01      	subs	r3, #1
 8003848:	b29a      	uxth	r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003852:	3b01      	subs	r3, #1
 8003854:	b29a      	uxth	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800385e:	b29b      	uxth	r3, r3
 8003860:	2b00      	cmp	r3, #0
 8003862:	d034      	beq.n	80038ce <HAL_I2C_Master_Transmit+0x1ca>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003868:	2b00      	cmp	r3, #0
 800386a:	d130      	bne.n	80038ce <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	9300      	str	r3, [sp, #0]
 8003870:	6a3b      	ldr	r3, [r7, #32]
 8003872:	2200      	movs	r2, #0
 8003874:	2180      	movs	r1, #128	@ 0x80
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f000 f880 	bl	800397c <I2C_WaitOnFlagUntilTimeout>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e04d      	b.n	8003922 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800388a:	b29b      	uxth	r3, r3
 800388c:	2bff      	cmp	r3, #255	@ 0xff
 800388e:	d90e      	bls.n	80038ae <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	22ff      	movs	r2, #255	@ 0xff
 8003894:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800389a:	b2da      	uxtb	r2, r3
 800389c:	8979      	ldrh	r1, [r7, #10]
 800389e:	2300      	movs	r3, #0
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f000 fa2c 	bl	8003d04 <I2C_TransferConfig>
 80038ac:	e00f      	b.n	80038ce <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038bc:	b2da      	uxtb	r2, r3
 80038be:	8979      	ldrh	r1, [r7, #10]
 80038c0:	2300      	movs	r3, #0
 80038c2:	9300      	str	r3, [sp, #0]
 80038c4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f000 fa1b 	bl	8003d04 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d19e      	bne.n	8003816 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	6a39      	ldr	r1, [r7, #32]
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f000 f8ed 	bl	8003abc <I2C_WaitOnSTOPFlagUntilTimeout>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e01a      	b.n	8003922 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2220      	movs	r2, #32
 80038f2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6859      	ldr	r1, [r3, #4]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	4b0c      	ldr	r3, [pc, #48]	@ (8003930 <HAL_I2C_Master_Transmit+0x22c>)
 8003900:	400b      	ands	r3, r1
 8003902:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2220      	movs	r2, #32
 8003908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800391c:	2300      	movs	r3, #0
 800391e:	e000      	b.n	8003922 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003920:	2302      	movs	r3, #2
  }
}
 8003922:	4618      	mov	r0, r3
 8003924:	3718      	adds	r7, #24
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	80002000 	.word	0x80002000
 8003930:	fe00e800 	.word	0xfe00e800

08003934 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b02      	cmp	r3, #2
 8003948:	d103      	bne.n	8003952 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2200      	movs	r2, #0
 8003950:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	2b01      	cmp	r3, #1
 800395e:	d007      	beq.n	8003970 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	699a      	ldr	r2, [r3, #24]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f042 0201 	orr.w	r2, r2, #1
 800396e:	619a      	str	r2, [r3, #24]
  }
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	603b      	str	r3, [r7, #0]
 8003988:	4613      	mov	r3, r2
 800398a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800398c:	e03b      	b.n	8003a06 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	6839      	ldr	r1, [r7, #0]
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f000 f8d6 	bl	8003b44 <I2C_IsErrorOccurred>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e041      	b.n	8003a26 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039a8:	d02d      	beq.n	8003a06 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039aa:	f7fe f915 	bl	8001bd8 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	683a      	ldr	r2, [r7, #0]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d302      	bcc.n	80039c0 <I2C_WaitOnFlagUntilTimeout+0x44>
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d122      	bne.n	8003a06 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	699a      	ldr	r2, [r3, #24]
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	4013      	ands	r3, r2
 80039ca:	68ba      	ldr	r2, [r7, #8]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	bf0c      	ite	eq
 80039d0:	2301      	moveq	r3, #1
 80039d2:	2300      	movne	r3, #0
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	461a      	mov	r2, r3
 80039d8:	79fb      	ldrb	r3, [r7, #7]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d113      	bne.n	8003a06 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039e2:	f043 0220 	orr.w	r2, r3, #32
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2220      	movs	r2, #32
 80039ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e00f      	b.n	8003a26 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	699a      	ldr	r2, [r3, #24]
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	4013      	ands	r3, r2
 8003a10:	68ba      	ldr	r2, [r7, #8]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	bf0c      	ite	eq
 8003a16:	2301      	moveq	r3, #1
 8003a18:	2300      	movne	r3, #0
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	79fb      	ldrb	r3, [r7, #7]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d0b4      	beq.n	800398e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b084      	sub	sp, #16
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	60f8      	str	r0, [r7, #12]
 8003a36:	60b9      	str	r1, [r7, #8]
 8003a38:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a3a:	e033      	b.n	8003aa4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	68b9      	ldr	r1, [r7, #8]
 8003a40:	68f8      	ldr	r0, [r7, #12]
 8003a42:	f000 f87f 	bl	8003b44 <I2C_IsErrorOccurred>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d001      	beq.n	8003a50 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e031      	b.n	8003ab4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a56:	d025      	beq.n	8003aa4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a58:	f7fe f8be 	bl	8001bd8 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	68ba      	ldr	r2, [r7, #8]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d302      	bcc.n	8003a6e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d11a      	bne.n	8003aa4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	f003 0302 	and.w	r3, r3, #2
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d013      	beq.n	8003aa4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a80:	f043 0220 	orr.w	r2, r3, #32
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e007      	b.n	8003ab4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d1c4      	bne.n	8003a3c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ab2:	2300      	movs	r3, #0
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3710      	adds	r7, #16
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ac8:	e02f      	b.n	8003b2a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	68b9      	ldr	r1, [r7, #8]
 8003ace:	68f8      	ldr	r0, [r7, #12]
 8003ad0:	f000 f838 	bl	8003b44 <I2C_IsErrorOccurred>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e02d      	b.n	8003b3a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ade:	f7fe f87b 	bl	8001bd8 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	68ba      	ldr	r2, [r7, #8]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d302      	bcc.n	8003af4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d11a      	bne.n	8003b2a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	f003 0320 	and.w	r3, r3, #32
 8003afe:	2b20      	cmp	r3, #32
 8003b00:	d013      	beq.n	8003b2a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b06:	f043 0220 	orr.w	r2, r3, #32
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2220      	movs	r2, #32
 8003b12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e007      	b.n	8003b3a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	f003 0320 	and.w	r3, r3, #32
 8003b34:	2b20      	cmp	r3, #32
 8003b36:	d1c8      	bne.n	8003aca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
	...

08003b44 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b08a      	sub	sp, #40	@ 0x28
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b50:	2300      	movs	r3, #0
 8003b52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	f003 0310 	and.w	r3, r3, #16
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d068      	beq.n	8003c42 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2210      	movs	r2, #16
 8003b76:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003b78:	e049      	b.n	8003c0e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b80:	d045      	beq.n	8003c0e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003b82:	f7fe f829 	bl	8001bd8 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	68ba      	ldr	r2, [r7, #8]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d302      	bcc.n	8003b98 <I2C_IsErrorOccurred+0x54>
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d13a      	bne.n	8003c0e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ba2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003baa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003bb6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bba:	d121      	bne.n	8003c00 <I2C_IsErrorOccurred+0xbc>
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003bc2:	d01d      	beq.n	8003c00 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003bc4:	7cfb      	ldrb	r3, [r7, #19]
 8003bc6:	2b20      	cmp	r3, #32
 8003bc8:	d01a      	beq.n	8003c00 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	685a      	ldr	r2, [r3, #4]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003bd8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003bda:	f7fd fffd 	bl	8001bd8 <HAL_GetTick>
 8003bde:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003be0:	e00e      	b.n	8003c00 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003be2:	f7fd fff9 	bl	8001bd8 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	2b19      	cmp	r3, #25
 8003bee:	d907      	bls.n	8003c00 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003bf0:	6a3b      	ldr	r3, [r7, #32]
 8003bf2:	f043 0320 	orr.w	r3, r3, #32
 8003bf6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003bfe:	e006      	b.n	8003c0e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	f003 0320 	and.w	r3, r3, #32
 8003c0a:	2b20      	cmp	r3, #32
 8003c0c:	d1e9      	bne.n	8003be2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	f003 0320 	and.w	r3, r3, #32
 8003c18:	2b20      	cmp	r3, #32
 8003c1a:	d003      	beq.n	8003c24 <I2C_IsErrorOccurred+0xe0>
 8003c1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d0aa      	beq.n	8003b7a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003c24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d103      	bne.n	8003c34 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2220      	movs	r2, #32
 8003c32:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003c34:	6a3b      	ldr	r3, [r7, #32]
 8003c36:	f043 0304 	orr.w	r3, r3, #4
 8003c3a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00b      	beq.n	8003c6c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003c54:	6a3b      	ldr	r3, [r7, #32]
 8003c56:	f043 0301 	orr.w	r3, r3, #1
 8003c5a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c64:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00b      	beq.n	8003c8e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003c76:	6a3b      	ldr	r3, [r7, #32]
 8003c78:	f043 0308 	orr.w	r3, r3, #8
 8003c7c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c86:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00b      	beq.n	8003cb0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003c98:	6a3b      	ldr	r3, [r7, #32]
 8003c9a:	f043 0302 	orr.w	r3, r3, #2
 8003c9e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ca8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003cb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d01c      	beq.n	8003cf2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f7ff fe3b 	bl	8003934 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	6859      	ldr	r1, [r3, #4]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	4b0d      	ldr	r3, [pc, #52]	@ (8003d00 <I2C_IsErrorOccurred+0x1bc>)
 8003cca:	400b      	ands	r3, r1
 8003ccc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003cd2:	6a3b      	ldr	r3, [r7, #32]
 8003cd4:	431a      	orrs	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2220      	movs	r2, #32
 8003cde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003cf2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3728      	adds	r7, #40	@ 0x28
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	fe00e800 	.word	0xfe00e800

08003d04 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b087      	sub	sp, #28
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	607b      	str	r3, [r7, #4]
 8003d0e:	460b      	mov	r3, r1
 8003d10:	817b      	strh	r3, [r7, #10]
 8003d12:	4613      	mov	r3, r2
 8003d14:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d16:	897b      	ldrh	r3, [r7, #10]
 8003d18:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d1c:	7a7b      	ldrb	r3, [r7, #9]
 8003d1e:	041b      	lsls	r3, r3, #16
 8003d20:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d24:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d2a:	6a3b      	ldr	r3, [r7, #32]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003d32:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	685a      	ldr	r2, [r3, #4]
 8003d3a:	6a3b      	ldr	r3, [r7, #32]
 8003d3c:	0d5b      	lsrs	r3, r3, #21
 8003d3e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003d42:	4b08      	ldr	r3, [pc, #32]	@ (8003d64 <I2C_TransferConfig+0x60>)
 8003d44:	430b      	orrs	r3, r1
 8003d46:	43db      	mvns	r3, r3
 8003d48:	ea02 0103 	and.w	r1, r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	430a      	orrs	r2, r1
 8003d54:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003d56:	bf00      	nop
 8003d58:	371c      	adds	r7, #28
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	03ff63ff 	.word	0x03ff63ff

08003d68 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b20      	cmp	r3, #32
 8003d7c:	d138      	bne.n	8003df0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d101      	bne.n	8003d8c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d88:	2302      	movs	r3, #2
 8003d8a:	e032      	b.n	8003df2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2224      	movs	r2, #36	@ 0x24
 8003d98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 0201 	bic.w	r2, r2, #1
 8003daa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003dba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6819      	ldr	r1, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	683a      	ldr	r2, [r7, #0]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f042 0201 	orr.w	r2, r2, #1
 8003dda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2220      	movs	r2, #32
 8003de0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003dec:	2300      	movs	r3, #0
 8003dee:	e000      	b.n	8003df2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003df0:	2302      	movs	r3, #2
  }
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b085      	sub	sp, #20
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
 8003e06:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	2b20      	cmp	r3, #32
 8003e12:	d139      	bne.n	8003e88 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d101      	bne.n	8003e22 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e1e:	2302      	movs	r3, #2
 8003e20:	e033      	b.n	8003e8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2224      	movs	r2, #36	@ 0x24
 8003e2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 0201 	bic.w	r2, r2, #1
 8003e40:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003e50:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	021b      	lsls	r3, r3, #8
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f042 0201 	orr.w	r2, r2, #1
 8003e72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2220      	movs	r2, #32
 8003e78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e84:	2300      	movs	r3, #0
 8003e86:	e000      	b.n	8003e8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e88:	2302      	movs	r3, #2
  }
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3714      	adds	r7, #20
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
	...

08003e98 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003e9c:	4b04      	ldr	r3, [pc, #16]	@ (8003eb0 <HAL_PWREx_GetVoltageRange+0x18>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	40007000 	.word	0x40007000

08003eb4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ec2:	d130      	bne.n	8003f26 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ec4:	4b23      	ldr	r3, [pc, #140]	@ (8003f54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003ecc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ed0:	d038      	beq.n	8003f44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ed2:	4b20      	ldr	r3, [pc, #128]	@ (8003f54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003eda:	4a1e      	ldr	r2, [pc, #120]	@ (8003f54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003edc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003ee0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ee2:	4b1d      	ldr	r3, [pc, #116]	@ (8003f58 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2232      	movs	r2, #50	@ 0x32
 8003ee8:	fb02 f303 	mul.w	r3, r2, r3
 8003eec:	4a1b      	ldr	r2, [pc, #108]	@ (8003f5c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003eee:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef2:	0c9b      	lsrs	r3, r3, #18
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ef8:	e002      	b.n	8003f00 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	3b01      	subs	r3, #1
 8003efe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f00:	4b14      	ldr	r3, [pc, #80]	@ (8003f54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f0c:	d102      	bne.n	8003f14 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d1f2      	bne.n	8003efa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f14:	4b0f      	ldr	r3, [pc, #60]	@ (8003f54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f16:	695b      	ldr	r3, [r3, #20]
 8003f18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f20:	d110      	bne.n	8003f44 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e00f      	b.n	8003f46 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f26:	4b0b      	ldr	r3, [pc, #44]	@ (8003f54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003f2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f32:	d007      	beq.n	8003f44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003f34:	4b07      	ldr	r3, [pc, #28]	@ (8003f54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003f3c:	4a05      	ldr	r2, [pc, #20]	@ (8003f54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f3e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003f42:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3714      	adds	r7, #20
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	40007000 	.word	0x40007000
 8003f58:	20000004 	.word	0x20000004
 8003f5c:	431bde83 	.word	0x431bde83

08003f60 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b088      	sub	sp, #32
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e3ca      	b.n	8004708 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f72:	4b97      	ldr	r3, [pc, #604]	@ (80041d0 <HAL_RCC_OscConfig+0x270>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f003 030c 	and.w	r3, r3, #12
 8003f7a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f7c:	4b94      	ldr	r3, [pc, #592]	@ (80041d0 <HAL_RCC_OscConfig+0x270>)
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	f003 0303 	and.w	r3, r3, #3
 8003f84:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0310 	and.w	r3, r3, #16
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f000 80e4 	beq.w	800415c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d007      	beq.n	8003faa <HAL_RCC_OscConfig+0x4a>
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	2b0c      	cmp	r3, #12
 8003f9e:	f040 808b 	bne.w	80040b8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	f040 8087 	bne.w	80040b8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003faa:	4b89      	ldr	r3, [pc, #548]	@ (80041d0 <HAL_RCC_OscConfig+0x270>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d005      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x62>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d101      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e3a2      	b.n	8004708 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a1a      	ldr	r2, [r3, #32]
 8003fc6:	4b82      	ldr	r3, [pc, #520]	@ (80041d0 <HAL_RCC_OscConfig+0x270>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0308 	and.w	r3, r3, #8
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d004      	beq.n	8003fdc <HAL_RCC_OscConfig+0x7c>
 8003fd2:	4b7f      	ldr	r3, [pc, #508]	@ (80041d0 <HAL_RCC_OscConfig+0x270>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003fda:	e005      	b.n	8003fe8 <HAL_RCC_OscConfig+0x88>
 8003fdc:	4b7c      	ldr	r3, [pc, #496]	@ (80041d0 <HAL_RCC_OscConfig+0x270>)
 8003fde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fe2:	091b      	lsrs	r3, r3, #4
 8003fe4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d223      	bcs.n	8004034 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f000 fd1d 	bl	8004a30 <RCC_SetFlashLatencyFromMSIRange>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d001      	beq.n	8004000 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e383      	b.n	8004708 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004000:	4b73      	ldr	r3, [pc, #460]	@ (80041d0 <HAL_RCC_OscConfig+0x270>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a72      	ldr	r2, [pc, #456]	@ (80041d0 <HAL_RCC_OscConfig+0x270>)
 8004006:	f043 0308 	orr.w	r3, r3, #8
 800400a:	6013      	str	r3, [r2, #0]
 800400c:	4b70      	ldr	r3, [pc, #448]	@ (80041d0 <HAL_RCC_OscConfig+0x270>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a1b      	ldr	r3, [r3, #32]
 8004018:	496d      	ldr	r1, [pc, #436]	@ (80041d0 <HAL_RCC_OscConfig+0x270>)
 800401a:	4313      	orrs	r3, r2
 800401c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800401e:	4b6c      	ldr	r3, [pc, #432]	@ (80041d0 <HAL_RCC_OscConfig+0x270>)
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	69db      	ldr	r3, [r3, #28]
 800402a:	021b      	lsls	r3, r3, #8
 800402c:	4968      	ldr	r1, [pc, #416]	@ (80041d0 <HAL_RCC_OscConfig+0x270>)
 800402e:	4313      	orrs	r3, r2
 8004030:	604b      	str	r3, [r1, #4]
 8004032:	e025      	b.n	8004080 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004034:	4b66      	ldr	r3, [pc, #408]	@ (80041d0 <HAL_RCC_OscConfig+0x270>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a65      	ldr	r2, [pc, #404]	@ (80041d0 <HAL_RCC_OscConfig+0x270>)
 800403a:	f043 0308 	orr.w	r3, r3, #8
 800403e:	6013      	str	r3, [r2, #0]
 8004040:	4b63      	ldr	r3, [pc, #396]	@ (80041d0 <HAL_RCC_OscConfig+0x270>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	4960      	ldr	r1, [pc, #384]	@ (80041d0 <HAL_RCC_OscConfig+0x270>)
 800404e:	4313      	orrs	r3, r2
 8004050:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004052:	4b5f      	ldr	r3, [pc, #380]	@ (80041d0 <HAL_RCC_OscConfig+0x270>)
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	69db      	ldr	r3, [r3, #28]
 800405e:	021b      	lsls	r3, r3, #8
 8004060:	495b      	ldr	r1, [pc, #364]	@ (80041d0 <HAL_RCC_OscConfig+0x270>)
 8004062:	4313      	orrs	r3, r2
 8004064:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d109      	bne.n	8004080 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a1b      	ldr	r3, [r3, #32]
 8004070:	4618      	mov	r0, r3
 8004072:	f000 fcdd 	bl	8004a30 <RCC_SetFlashLatencyFromMSIRange>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d001      	beq.n	8004080 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e343      	b.n	8004708 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004080:	f000 fc4a 	bl	8004918 <HAL_RCC_GetSysClockFreq>
 8004084:	4602      	mov	r2, r0
 8004086:	4b52      	ldr	r3, [pc, #328]	@ (80041d0 <HAL_RCC_OscConfig+0x270>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	091b      	lsrs	r3, r3, #4
 800408c:	f003 030f 	and.w	r3, r3, #15
 8004090:	4950      	ldr	r1, [pc, #320]	@ (80041d4 <HAL_RCC_OscConfig+0x274>)
 8004092:	5ccb      	ldrb	r3, [r1, r3]
 8004094:	f003 031f 	and.w	r3, r3, #31
 8004098:	fa22 f303 	lsr.w	r3, r2, r3
 800409c:	4a4e      	ldr	r2, [pc, #312]	@ (80041d8 <HAL_RCC_OscConfig+0x278>)
 800409e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80040a0:	4b4e      	ldr	r3, [pc, #312]	@ (80041dc <HAL_RCC_OscConfig+0x27c>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7fd fd47 	bl	8001b38 <HAL_InitTick>
 80040aa:	4603      	mov	r3, r0
 80040ac:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80040ae:	7bfb      	ldrb	r3, [r7, #15]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d052      	beq.n	800415a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80040b4:	7bfb      	ldrb	r3, [r7, #15]
 80040b6:	e327      	b.n	8004708 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d032      	beq.n	8004126 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80040c0:	4b43      	ldr	r3, [pc, #268]	@ (80041d0 <HAL_RCC_OscConfig+0x270>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a42      	ldr	r2, [pc, #264]	@ (80041d0 <HAL_RCC_OscConfig+0x270>)
 80040c6:	f043 0301 	orr.w	r3, r3, #1
 80040ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80040cc:	f7fd fd84 	bl	8001bd8 <HAL_GetTick>
 80040d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040d2:	e008      	b.n	80040e6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040d4:	f7fd fd80 	bl	8001bd8 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e310      	b.n	8004708 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040e6:	4b3a      	ldr	r3, [pc, #232]	@ (80041d0 <HAL_RCC_OscConfig+0x270>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d0f0      	beq.n	80040d4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040f2:	4b37      	ldr	r3, [pc, #220]	@ (80041d0 <HAL_RCC_OscConfig+0x270>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a36      	ldr	r2, [pc, #216]	@ (80041d0 <HAL_RCC_OscConfig+0x270>)
 80040f8:	f043 0308 	orr.w	r3, r3, #8
 80040fc:	6013      	str	r3, [r2, #0]
 80040fe:	4b34      	ldr	r3, [pc, #208]	@ (80041d0 <HAL_RCC_OscConfig+0x270>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	4931      	ldr	r1, [pc, #196]	@ (80041d0 <HAL_RCC_OscConfig+0x270>)
 800410c:	4313      	orrs	r3, r2
 800410e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004110:	4b2f      	ldr	r3, [pc, #188]	@ (80041d0 <HAL_RCC_OscConfig+0x270>)
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	69db      	ldr	r3, [r3, #28]
 800411c:	021b      	lsls	r3, r3, #8
 800411e:	492c      	ldr	r1, [pc, #176]	@ (80041d0 <HAL_RCC_OscConfig+0x270>)
 8004120:	4313      	orrs	r3, r2
 8004122:	604b      	str	r3, [r1, #4]
 8004124:	e01a      	b.n	800415c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004126:	4b2a      	ldr	r3, [pc, #168]	@ (80041d0 <HAL_RCC_OscConfig+0x270>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a29      	ldr	r2, [pc, #164]	@ (80041d0 <HAL_RCC_OscConfig+0x270>)
 800412c:	f023 0301 	bic.w	r3, r3, #1
 8004130:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004132:	f7fd fd51 	bl	8001bd8 <HAL_GetTick>
 8004136:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004138:	e008      	b.n	800414c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800413a:	f7fd fd4d 	bl	8001bd8 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	2b02      	cmp	r3, #2
 8004146:	d901      	bls.n	800414c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e2dd      	b.n	8004708 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800414c:	4b20      	ldr	r3, [pc, #128]	@ (80041d0 <HAL_RCC_OscConfig+0x270>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1f0      	bne.n	800413a <HAL_RCC_OscConfig+0x1da>
 8004158:	e000      	b.n	800415c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800415a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0301 	and.w	r3, r3, #1
 8004164:	2b00      	cmp	r3, #0
 8004166:	d074      	beq.n	8004252 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	2b08      	cmp	r3, #8
 800416c:	d005      	beq.n	800417a <HAL_RCC_OscConfig+0x21a>
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	2b0c      	cmp	r3, #12
 8004172:	d10e      	bne.n	8004192 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	2b03      	cmp	r3, #3
 8004178:	d10b      	bne.n	8004192 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800417a:	4b15      	ldr	r3, [pc, #84]	@ (80041d0 <HAL_RCC_OscConfig+0x270>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d064      	beq.n	8004250 <HAL_RCC_OscConfig+0x2f0>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d160      	bne.n	8004250 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e2ba      	b.n	8004708 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800419a:	d106      	bne.n	80041aa <HAL_RCC_OscConfig+0x24a>
 800419c:	4b0c      	ldr	r3, [pc, #48]	@ (80041d0 <HAL_RCC_OscConfig+0x270>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a0b      	ldr	r2, [pc, #44]	@ (80041d0 <HAL_RCC_OscConfig+0x270>)
 80041a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041a6:	6013      	str	r3, [r2, #0]
 80041a8:	e026      	b.n	80041f8 <HAL_RCC_OscConfig+0x298>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80041b2:	d115      	bne.n	80041e0 <HAL_RCC_OscConfig+0x280>
 80041b4:	4b06      	ldr	r3, [pc, #24]	@ (80041d0 <HAL_RCC_OscConfig+0x270>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a05      	ldr	r2, [pc, #20]	@ (80041d0 <HAL_RCC_OscConfig+0x270>)
 80041ba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041be:	6013      	str	r3, [r2, #0]
 80041c0:	4b03      	ldr	r3, [pc, #12]	@ (80041d0 <HAL_RCC_OscConfig+0x270>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a02      	ldr	r2, [pc, #8]	@ (80041d0 <HAL_RCC_OscConfig+0x270>)
 80041c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041ca:	6013      	str	r3, [r2, #0]
 80041cc:	e014      	b.n	80041f8 <HAL_RCC_OscConfig+0x298>
 80041ce:	bf00      	nop
 80041d0:	40021000 	.word	0x40021000
 80041d4:	08008fe0 	.word	0x08008fe0
 80041d8:	20000004 	.word	0x20000004
 80041dc:	20000008 	.word	0x20000008
 80041e0:	4ba0      	ldr	r3, [pc, #640]	@ (8004464 <HAL_RCC_OscConfig+0x504>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a9f      	ldr	r2, [pc, #636]	@ (8004464 <HAL_RCC_OscConfig+0x504>)
 80041e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041ea:	6013      	str	r3, [r2, #0]
 80041ec:	4b9d      	ldr	r3, [pc, #628]	@ (8004464 <HAL_RCC_OscConfig+0x504>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a9c      	ldr	r2, [pc, #624]	@ (8004464 <HAL_RCC_OscConfig+0x504>)
 80041f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d013      	beq.n	8004228 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004200:	f7fd fcea 	bl	8001bd8 <HAL_GetTick>
 8004204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004206:	e008      	b.n	800421a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004208:	f7fd fce6 	bl	8001bd8 <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	2b64      	cmp	r3, #100	@ 0x64
 8004214:	d901      	bls.n	800421a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e276      	b.n	8004708 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800421a:	4b92      	ldr	r3, [pc, #584]	@ (8004464 <HAL_RCC_OscConfig+0x504>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d0f0      	beq.n	8004208 <HAL_RCC_OscConfig+0x2a8>
 8004226:	e014      	b.n	8004252 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004228:	f7fd fcd6 	bl	8001bd8 <HAL_GetTick>
 800422c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800422e:	e008      	b.n	8004242 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004230:	f7fd fcd2 	bl	8001bd8 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b64      	cmp	r3, #100	@ 0x64
 800423c:	d901      	bls.n	8004242 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e262      	b.n	8004708 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004242:	4b88      	ldr	r3, [pc, #544]	@ (8004464 <HAL_RCC_OscConfig+0x504>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1f0      	bne.n	8004230 <HAL_RCC_OscConfig+0x2d0>
 800424e:	e000      	b.n	8004252 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004250:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d060      	beq.n	8004320 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	2b04      	cmp	r3, #4
 8004262:	d005      	beq.n	8004270 <HAL_RCC_OscConfig+0x310>
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	2b0c      	cmp	r3, #12
 8004268:	d119      	bne.n	800429e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	2b02      	cmp	r3, #2
 800426e:	d116      	bne.n	800429e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004270:	4b7c      	ldr	r3, [pc, #496]	@ (8004464 <HAL_RCC_OscConfig+0x504>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004278:	2b00      	cmp	r3, #0
 800427a:	d005      	beq.n	8004288 <HAL_RCC_OscConfig+0x328>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d101      	bne.n	8004288 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e23f      	b.n	8004708 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004288:	4b76      	ldr	r3, [pc, #472]	@ (8004464 <HAL_RCC_OscConfig+0x504>)
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	061b      	lsls	r3, r3, #24
 8004296:	4973      	ldr	r1, [pc, #460]	@ (8004464 <HAL_RCC_OscConfig+0x504>)
 8004298:	4313      	orrs	r3, r2
 800429a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800429c:	e040      	b.n	8004320 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d023      	beq.n	80042ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042a6:	4b6f      	ldr	r3, [pc, #444]	@ (8004464 <HAL_RCC_OscConfig+0x504>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a6e      	ldr	r2, [pc, #440]	@ (8004464 <HAL_RCC_OscConfig+0x504>)
 80042ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b2:	f7fd fc91 	bl	8001bd8 <HAL_GetTick>
 80042b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042b8:	e008      	b.n	80042cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042ba:	f7fd fc8d 	bl	8001bd8 <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d901      	bls.n	80042cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e21d      	b.n	8004708 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042cc:	4b65      	ldr	r3, [pc, #404]	@ (8004464 <HAL_RCC_OscConfig+0x504>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d0f0      	beq.n	80042ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042d8:	4b62      	ldr	r3, [pc, #392]	@ (8004464 <HAL_RCC_OscConfig+0x504>)
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	061b      	lsls	r3, r3, #24
 80042e6:	495f      	ldr	r1, [pc, #380]	@ (8004464 <HAL_RCC_OscConfig+0x504>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	604b      	str	r3, [r1, #4]
 80042ec:	e018      	b.n	8004320 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042ee:	4b5d      	ldr	r3, [pc, #372]	@ (8004464 <HAL_RCC_OscConfig+0x504>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a5c      	ldr	r2, [pc, #368]	@ (8004464 <HAL_RCC_OscConfig+0x504>)
 80042f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042fa:	f7fd fc6d 	bl	8001bd8 <HAL_GetTick>
 80042fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004300:	e008      	b.n	8004314 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004302:	f7fd fc69 	bl	8001bd8 <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	2b02      	cmp	r3, #2
 800430e:	d901      	bls.n	8004314 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e1f9      	b.n	8004708 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004314:	4b53      	ldr	r3, [pc, #332]	@ (8004464 <HAL_RCC_OscConfig+0x504>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1f0      	bne.n	8004302 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0308 	and.w	r3, r3, #8
 8004328:	2b00      	cmp	r3, #0
 800432a:	d03c      	beq.n	80043a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	695b      	ldr	r3, [r3, #20]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d01c      	beq.n	800436e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004334:	4b4b      	ldr	r3, [pc, #300]	@ (8004464 <HAL_RCC_OscConfig+0x504>)
 8004336:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800433a:	4a4a      	ldr	r2, [pc, #296]	@ (8004464 <HAL_RCC_OscConfig+0x504>)
 800433c:	f043 0301 	orr.w	r3, r3, #1
 8004340:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004344:	f7fd fc48 	bl	8001bd8 <HAL_GetTick>
 8004348:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800434a:	e008      	b.n	800435e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800434c:	f7fd fc44 	bl	8001bd8 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b02      	cmp	r3, #2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e1d4      	b.n	8004708 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800435e:	4b41      	ldr	r3, [pc, #260]	@ (8004464 <HAL_RCC_OscConfig+0x504>)
 8004360:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004364:	f003 0302 	and.w	r3, r3, #2
 8004368:	2b00      	cmp	r3, #0
 800436a:	d0ef      	beq.n	800434c <HAL_RCC_OscConfig+0x3ec>
 800436c:	e01b      	b.n	80043a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800436e:	4b3d      	ldr	r3, [pc, #244]	@ (8004464 <HAL_RCC_OscConfig+0x504>)
 8004370:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004374:	4a3b      	ldr	r2, [pc, #236]	@ (8004464 <HAL_RCC_OscConfig+0x504>)
 8004376:	f023 0301 	bic.w	r3, r3, #1
 800437a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800437e:	f7fd fc2b 	bl	8001bd8 <HAL_GetTick>
 8004382:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004384:	e008      	b.n	8004398 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004386:	f7fd fc27 	bl	8001bd8 <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	2b02      	cmp	r3, #2
 8004392:	d901      	bls.n	8004398 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e1b7      	b.n	8004708 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004398:	4b32      	ldr	r3, [pc, #200]	@ (8004464 <HAL_RCC_OscConfig+0x504>)
 800439a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1ef      	bne.n	8004386 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0304 	and.w	r3, r3, #4
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	f000 80a6 	beq.w	8004500 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043b4:	2300      	movs	r3, #0
 80043b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80043b8:	4b2a      	ldr	r3, [pc, #168]	@ (8004464 <HAL_RCC_OscConfig+0x504>)
 80043ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10d      	bne.n	80043e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043c4:	4b27      	ldr	r3, [pc, #156]	@ (8004464 <HAL_RCC_OscConfig+0x504>)
 80043c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043c8:	4a26      	ldr	r2, [pc, #152]	@ (8004464 <HAL_RCC_OscConfig+0x504>)
 80043ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80043d0:	4b24      	ldr	r3, [pc, #144]	@ (8004464 <HAL_RCC_OscConfig+0x504>)
 80043d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043d8:	60bb      	str	r3, [r7, #8]
 80043da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043dc:	2301      	movs	r3, #1
 80043de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043e0:	4b21      	ldr	r3, [pc, #132]	@ (8004468 <HAL_RCC_OscConfig+0x508>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d118      	bne.n	800441e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043ec:	4b1e      	ldr	r3, [pc, #120]	@ (8004468 <HAL_RCC_OscConfig+0x508>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a1d      	ldr	r2, [pc, #116]	@ (8004468 <HAL_RCC_OscConfig+0x508>)
 80043f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043f8:	f7fd fbee 	bl	8001bd8 <HAL_GetTick>
 80043fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043fe:	e008      	b.n	8004412 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004400:	f7fd fbea 	bl	8001bd8 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b02      	cmp	r3, #2
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e17a      	b.n	8004708 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004412:	4b15      	ldr	r3, [pc, #84]	@ (8004468 <HAL_RCC_OscConfig+0x508>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800441a:	2b00      	cmp	r3, #0
 800441c:	d0f0      	beq.n	8004400 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d108      	bne.n	8004438 <HAL_RCC_OscConfig+0x4d8>
 8004426:	4b0f      	ldr	r3, [pc, #60]	@ (8004464 <HAL_RCC_OscConfig+0x504>)
 8004428:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800442c:	4a0d      	ldr	r2, [pc, #52]	@ (8004464 <HAL_RCC_OscConfig+0x504>)
 800442e:	f043 0301 	orr.w	r3, r3, #1
 8004432:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004436:	e029      	b.n	800448c <HAL_RCC_OscConfig+0x52c>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	2b05      	cmp	r3, #5
 800443e:	d115      	bne.n	800446c <HAL_RCC_OscConfig+0x50c>
 8004440:	4b08      	ldr	r3, [pc, #32]	@ (8004464 <HAL_RCC_OscConfig+0x504>)
 8004442:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004446:	4a07      	ldr	r2, [pc, #28]	@ (8004464 <HAL_RCC_OscConfig+0x504>)
 8004448:	f043 0304 	orr.w	r3, r3, #4
 800444c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004450:	4b04      	ldr	r3, [pc, #16]	@ (8004464 <HAL_RCC_OscConfig+0x504>)
 8004452:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004456:	4a03      	ldr	r2, [pc, #12]	@ (8004464 <HAL_RCC_OscConfig+0x504>)
 8004458:	f043 0301 	orr.w	r3, r3, #1
 800445c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004460:	e014      	b.n	800448c <HAL_RCC_OscConfig+0x52c>
 8004462:	bf00      	nop
 8004464:	40021000 	.word	0x40021000
 8004468:	40007000 	.word	0x40007000
 800446c:	4b9c      	ldr	r3, [pc, #624]	@ (80046e0 <HAL_RCC_OscConfig+0x780>)
 800446e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004472:	4a9b      	ldr	r2, [pc, #620]	@ (80046e0 <HAL_RCC_OscConfig+0x780>)
 8004474:	f023 0301 	bic.w	r3, r3, #1
 8004478:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800447c:	4b98      	ldr	r3, [pc, #608]	@ (80046e0 <HAL_RCC_OscConfig+0x780>)
 800447e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004482:	4a97      	ldr	r2, [pc, #604]	@ (80046e0 <HAL_RCC_OscConfig+0x780>)
 8004484:	f023 0304 	bic.w	r3, r3, #4
 8004488:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d016      	beq.n	80044c2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004494:	f7fd fba0 	bl	8001bd8 <HAL_GetTick>
 8004498:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800449a:	e00a      	b.n	80044b2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800449c:	f7fd fb9c 	bl	8001bd8 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e12a      	b.n	8004708 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044b2:	4b8b      	ldr	r3, [pc, #556]	@ (80046e0 <HAL_RCC_OscConfig+0x780>)
 80044b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d0ed      	beq.n	800449c <HAL_RCC_OscConfig+0x53c>
 80044c0:	e015      	b.n	80044ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c2:	f7fd fb89 	bl	8001bd8 <HAL_GetTick>
 80044c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044c8:	e00a      	b.n	80044e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044ca:	f7fd fb85 	bl	8001bd8 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044d8:	4293      	cmp	r3, r2
 80044da:	d901      	bls.n	80044e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e113      	b.n	8004708 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044e0:	4b7f      	ldr	r3, [pc, #508]	@ (80046e0 <HAL_RCC_OscConfig+0x780>)
 80044e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1ed      	bne.n	80044ca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044ee:	7ffb      	ldrb	r3, [r7, #31]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d105      	bne.n	8004500 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044f4:	4b7a      	ldr	r3, [pc, #488]	@ (80046e0 <HAL_RCC_OscConfig+0x780>)
 80044f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044f8:	4a79      	ldr	r2, [pc, #484]	@ (80046e0 <HAL_RCC_OscConfig+0x780>)
 80044fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044fe:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004504:	2b00      	cmp	r3, #0
 8004506:	f000 80fe 	beq.w	8004706 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800450e:	2b02      	cmp	r3, #2
 8004510:	f040 80d0 	bne.w	80046b4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004514:	4b72      	ldr	r3, [pc, #456]	@ (80046e0 <HAL_RCC_OscConfig+0x780>)
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	f003 0203 	and.w	r2, r3, #3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004524:	429a      	cmp	r2, r3
 8004526:	d130      	bne.n	800458a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004532:	3b01      	subs	r3, #1
 8004534:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004536:	429a      	cmp	r2, r3
 8004538:	d127      	bne.n	800458a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004544:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004546:	429a      	cmp	r2, r3
 8004548:	d11f      	bne.n	800458a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004554:	2a07      	cmp	r2, #7
 8004556:	bf14      	ite	ne
 8004558:	2201      	movne	r2, #1
 800455a:	2200      	moveq	r2, #0
 800455c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800455e:	4293      	cmp	r3, r2
 8004560:	d113      	bne.n	800458a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800456c:	085b      	lsrs	r3, r3, #1
 800456e:	3b01      	subs	r3, #1
 8004570:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004572:	429a      	cmp	r2, r3
 8004574:	d109      	bne.n	800458a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004580:	085b      	lsrs	r3, r3, #1
 8004582:	3b01      	subs	r3, #1
 8004584:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004586:	429a      	cmp	r2, r3
 8004588:	d06e      	beq.n	8004668 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	2b0c      	cmp	r3, #12
 800458e:	d069      	beq.n	8004664 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004590:	4b53      	ldr	r3, [pc, #332]	@ (80046e0 <HAL_RCC_OscConfig+0x780>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d105      	bne.n	80045a8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800459c:	4b50      	ldr	r3, [pc, #320]	@ (80046e0 <HAL_RCC_OscConfig+0x780>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e0ad      	b.n	8004708 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80045ac:	4b4c      	ldr	r3, [pc, #304]	@ (80046e0 <HAL_RCC_OscConfig+0x780>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a4b      	ldr	r2, [pc, #300]	@ (80046e0 <HAL_RCC_OscConfig+0x780>)
 80045b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045b6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80045b8:	f7fd fb0e 	bl	8001bd8 <HAL_GetTick>
 80045bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045be:	e008      	b.n	80045d2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045c0:	f7fd fb0a 	bl	8001bd8 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e09a      	b.n	8004708 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045d2:	4b43      	ldr	r3, [pc, #268]	@ (80046e0 <HAL_RCC_OscConfig+0x780>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1f0      	bne.n	80045c0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045de:	4b40      	ldr	r3, [pc, #256]	@ (80046e0 <HAL_RCC_OscConfig+0x780>)
 80045e0:	68da      	ldr	r2, [r3, #12]
 80045e2:	4b40      	ldr	r3, [pc, #256]	@ (80046e4 <HAL_RCC_OscConfig+0x784>)
 80045e4:	4013      	ands	r3, r2
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80045ee:	3a01      	subs	r2, #1
 80045f0:	0112      	lsls	r2, r2, #4
 80045f2:	4311      	orrs	r1, r2
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80045f8:	0212      	lsls	r2, r2, #8
 80045fa:	4311      	orrs	r1, r2
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004600:	0852      	lsrs	r2, r2, #1
 8004602:	3a01      	subs	r2, #1
 8004604:	0552      	lsls	r2, r2, #21
 8004606:	4311      	orrs	r1, r2
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800460c:	0852      	lsrs	r2, r2, #1
 800460e:	3a01      	subs	r2, #1
 8004610:	0652      	lsls	r2, r2, #25
 8004612:	4311      	orrs	r1, r2
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004618:	0912      	lsrs	r2, r2, #4
 800461a:	0452      	lsls	r2, r2, #17
 800461c:	430a      	orrs	r2, r1
 800461e:	4930      	ldr	r1, [pc, #192]	@ (80046e0 <HAL_RCC_OscConfig+0x780>)
 8004620:	4313      	orrs	r3, r2
 8004622:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004624:	4b2e      	ldr	r3, [pc, #184]	@ (80046e0 <HAL_RCC_OscConfig+0x780>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a2d      	ldr	r2, [pc, #180]	@ (80046e0 <HAL_RCC_OscConfig+0x780>)
 800462a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800462e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004630:	4b2b      	ldr	r3, [pc, #172]	@ (80046e0 <HAL_RCC_OscConfig+0x780>)
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	4a2a      	ldr	r2, [pc, #168]	@ (80046e0 <HAL_RCC_OscConfig+0x780>)
 8004636:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800463a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800463c:	f7fd facc 	bl	8001bd8 <HAL_GetTick>
 8004640:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004642:	e008      	b.n	8004656 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004644:	f7fd fac8 	bl	8001bd8 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b02      	cmp	r3, #2
 8004650:	d901      	bls.n	8004656 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e058      	b.n	8004708 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004656:	4b22      	ldr	r3, [pc, #136]	@ (80046e0 <HAL_RCC_OscConfig+0x780>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d0f0      	beq.n	8004644 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004662:	e050      	b.n	8004706 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e04f      	b.n	8004708 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004668:	4b1d      	ldr	r3, [pc, #116]	@ (80046e0 <HAL_RCC_OscConfig+0x780>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d148      	bne.n	8004706 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004674:	4b1a      	ldr	r3, [pc, #104]	@ (80046e0 <HAL_RCC_OscConfig+0x780>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a19      	ldr	r2, [pc, #100]	@ (80046e0 <HAL_RCC_OscConfig+0x780>)
 800467a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800467e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004680:	4b17      	ldr	r3, [pc, #92]	@ (80046e0 <HAL_RCC_OscConfig+0x780>)
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	4a16      	ldr	r2, [pc, #88]	@ (80046e0 <HAL_RCC_OscConfig+0x780>)
 8004686:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800468a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800468c:	f7fd faa4 	bl	8001bd8 <HAL_GetTick>
 8004690:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004692:	e008      	b.n	80046a6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004694:	f7fd faa0 	bl	8001bd8 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e030      	b.n	8004708 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046a6:	4b0e      	ldr	r3, [pc, #56]	@ (80046e0 <HAL_RCC_OscConfig+0x780>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d0f0      	beq.n	8004694 <HAL_RCC_OscConfig+0x734>
 80046b2:	e028      	b.n	8004706 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	2b0c      	cmp	r3, #12
 80046b8:	d023      	beq.n	8004702 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ba:	4b09      	ldr	r3, [pc, #36]	@ (80046e0 <HAL_RCC_OscConfig+0x780>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a08      	ldr	r2, [pc, #32]	@ (80046e0 <HAL_RCC_OscConfig+0x780>)
 80046c0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80046c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c6:	f7fd fa87 	bl	8001bd8 <HAL_GetTick>
 80046ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046cc:	e00c      	b.n	80046e8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ce:	f7fd fa83 	bl	8001bd8 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d905      	bls.n	80046e8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e013      	b.n	8004708 <HAL_RCC_OscConfig+0x7a8>
 80046e0:	40021000 	.word	0x40021000
 80046e4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046e8:	4b09      	ldr	r3, [pc, #36]	@ (8004710 <HAL_RCC_OscConfig+0x7b0>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d1ec      	bne.n	80046ce <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80046f4:	4b06      	ldr	r3, [pc, #24]	@ (8004710 <HAL_RCC_OscConfig+0x7b0>)
 80046f6:	68da      	ldr	r2, [r3, #12]
 80046f8:	4905      	ldr	r1, [pc, #20]	@ (8004710 <HAL_RCC_OscConfig+0x7b0>)
 80046fa:	4b06      	ldr	r3, [pc, #24]	@ (8004714 <HAL_RCC_OscConfig+0x7b4>)
 80046fc:	4013      	ands	r3, r2
 80046fe:	60cb      	str	r3, [r1, #12]
 8004700:	e001      	b.n	8004706 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e000      	b.n	8004708 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3720      	adds	r7, #32
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	40021000 	.word	0x40021000
 8004714:	feeefffc 	.word	0xfeeefffc

08004718 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d101      	bne.n	800472c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e0e7      	b.n	80048fc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800472c:	4b75      	ldr	r3, [pc, #468]	@ (8004904 <HAL_RCC_ClockConfig+0x1ec>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0307 	and.w	r3, r3, #7
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	429a      	cmp	r2, r3
 8004738:	d910      	bls.n	800475c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800473a:	4b72      	ldr	r3, [pc, #456]	@ (8004904 <HAL_RCC_ClockConfig+0x1ec>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f023 0207 	bic.w	r2, r3, #7
 8004742:	4970      	ldr	r1, [pc, #448]	@ (8004904 <HAL_RCC_ClockConfig+0x1ec>)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	4313      	orrs	r3, r2
 8004748:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800474a:	4b6e      	ldr	r3, [pc, #440]	@ (8004904 <HAL_RCC_ClockConfig+0x1ec>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0307 	and.w	r3, r3, #7
 8004752:	683a      	ldr	r2, [r7, #0]
 8004754:	429a      	cmp	r2, r3
 8004756:	d001      	beq.n	800475c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e0cf      	b.n	80048fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0302 	and.w	r3, r3, #2
 8004764:	2b00      	cmp	r3, #0
 8004766:	d010      	beq.n	800478a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	689a      	ldr	r2, [r3, #8]
 800476c:	4b66      	ldr	r3, [pc, #408]	@ (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004774:	429a      	cmp	r2, r3
 8004776:	d908      	bls.n	800478a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004778:	4b63      	ldr	r3, [pc, #396]	@ (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	4960      	ldr	r1, [pc, #384]	@ (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 8004786:	4313      	orrs	r3, r2
 8004788:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b00      	cmp	r3, #0
 8004794:	d04c      	beq.n	8004830 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	2b03      	cmp	r3, #3
 800479c:	d107      	bne.n	80047ae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800479e:	4b5a      	ldr	r3, [pc, #360]	@ (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d121      	bne.n	80047ee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e0a6      	b.n	80048fc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d107      	bne.n	80047c6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047b6:	4b54      	ldr	r3, [pc, #336]	@ (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d115      	bne.n	80047ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e09a      	b.n	80048fc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d107      	bne.n	80047de <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80047ce:	4b4e      	ldr	r3, [pc, #312]	@ (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d109      	bne.n	80047ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e08e      	b.n	80048fc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047de:	4b4a      	ldr	r3, [pc, #296]	@ (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d101      	bne.n	80047ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e086      	b.n	80048fc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80047ee:	4b46      	ldr	r3, [pc, #280]	@ (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f023 0203 	bic.w	r2, r3, #3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	4943      	ldr	r1, [pc, #268]	@ (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004800:	f7fd f9ea 	bl	8001bd8 <HAL_GetTick>
 8004804:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004806:	e00a      	b.n	800481e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004808:	f7fd f9e6 	bl	8001bd8 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004816:	4293      	cmp	r3, r2
 8004818:	d901      	bls.n	800481e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e06e      	b.n	80048fc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800481e:	4b3a      	ldr	r3, [pc, #232]	@ (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f003 020c 	and.w	r2, r3, #12
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	429a      	cmp	r2, r3
 800482e:	d1eb      	bne.n	8004808 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0302 	and.w	r3, r3, #2
 8004838:	2b00      	cmp	r3, #0
 800483a:	d010      	beq.n	800485e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	689a      	ldr	r2, [r3, #8]
 8004840:	4b31      	ldr	r3, [pc, #196]	@ (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004848:	429a      	cmp	r2, r3
 800484a:	d208      	bcs.n	800485e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800484c:	4b2e      	ldr	r3, [pc, #184]	@ (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	492b      	ldr	r1, [pc, #172]	@ (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 800485a:	4313      	orrs	r3, r2
 800485c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800485e:	4b29      	ldr	r3, [pc, #164]	@ (8004904 <HAL_RCC_ClockConfig+0x1ec>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0307 	and.w	r3, r3, #7
 8004866:	683a      	ldr	r2, [r7, #0]
 8004868:	429a      	cmp	r2, r3
 800486a:	d210      	bcs.n	800488e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800486c:	4b25      	ldr	r3, [pc, #148]	@ (8004904 <HAL_RCC_ClockConfig+0x1ec>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f023 0207 	bic.w	r2, r3, #7
 8004874:	4923      	ldr	r1, [pc, #140]	@ (8004904 <HAL_RCC_ClockConfig+0x1ec>)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	4313      	orrs	r3, r2
 800487a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800487c:	4b21      	ldr	r3, [pc, #132]	@ (8004904 <HAL_RCC_ClockConfig+0x1ec>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0307 	and.w	r3, r3, #7
 8004884:	683a      	ldr	r2, [r7, #0]
 8004886:	429a      	cmp	r2, r3
 8004888:	d001      	beq.n	800488e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e036      	b.n	80048fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0304 	and.w	r3, r3, #4
 8004896:	2b00      	cmp	r3, #0
 8004898:	d008      	beq.n	80048ac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800489a:	4b1b      	ldr	r3, [pc, #108]	@ (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	4918      	ldr	r1, [pc, #96]	@ (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0308 	and.w	r3, r3, #8
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d009      	beq.n	80048cc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048b8:	4b13      	ldr	r3, [pc, #76]	@ (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	00db      	lsls	r3, r3, #3
 80048c6:	4910      	ldr	r1, [pc, #64]	@ (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80048cc:	f000 f824 	bl	8004918 <HAL_RCC_GetSysClockFreq>
 80048d0:	4602      	mov	r2, r0
 80048d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	091b      	lsrs	r3, r3, #4
 80048d8:	f003 030f 	and.w	r3, r3, #15
 80048dc:	490b      	ldr	r1, [pc, #44]	@ (800490c <HAL_RCC_ClockConfig+0x1f4>)
 80048de:	5ccb      	ldrb	r3, [r1, r3]
 80048e0:	f003 031f 	and.w	r3, r3, #31
 80048e4:	fa22 f303 	lsr.w	r3, r2, r3
 80048e8:	4a09      	ldr	r2, [pc, #36]	@ (8004910 <HAL_RCC_ClockConfig+0x1f8>)
 80048ea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80048ec:	4b09      	ldr	r3, [pc, #36]	@ (8004914 <HAL_RCC_ClockConfig+0x1fc>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4618      	mov	r0, r3
 80048f2:	f7fd f921 	bl	8001b38 <HAL_InitTick>
 80048f6:	4603      	mov	r3, r0
 80048f8:	72fb      	strb	r3, [r7, #11]

  return status;
 80048fa:	7afb      	ldrb	r3, [r7, #11]
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3710      	adds	r7, #16
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	40022000 	.word	0x40022000
 8004908:	40021000 	.word	0x40021000
 800490c:	08008fe0 	.word	0x08008fe0
 8004910:	20000004 	.word	0x20000004
 8004914:	20000008 	.word	0x20000008

08004918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004918:	b480      	push	{r7}
 800491a:	b089      	sub	sp, #36	@ 0x24
 800491c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800491e:	2300      	movs	r3, #0
 8004920:	61fb      	str	r3, [r7, #28]
 8004922:	2300      	movs	r3, #0
 8004924:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004926:	4b3e      	ldr	r3, [pc, #248]	@ (8004a20 <HAL_RCC_GetSysClockFreq+0x108>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f003 030c 	and.w	r3, r3, #12
 800492e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004930:	4b3b      	ldr	r3, [pc, #236]	@ (8004a20 <HAL_RCC_GetSysClockFreq+0x108>)
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	f003 0303 	and.w	r3, r3, #3
 8004938:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d005      	beq.n	800494c <HAL_RCC_GetSysClockFreq+0x34>
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	2b0c      	cmp	r3, #12
 8004944:	d121      	bne.n	800498a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2b01      	cmp	r3, #1
 800494a:	d11e      	bne.n	800498a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800494c:	4b34      	ldr	r3, [pc, #208]	@ (8004a20 <HAL_RCC_GetSysClockFreq+0x108>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0308 	and.w	r3, r3, #8
 8004954:	2b00      	cmp	r3, #0
 8004956:	d107      	bne.n	8004968 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004958:	4b31      	ldr	r3, [pc, #196]	@ (8004a20 <HAL_RCC_GetSysClockFreq+0x108>)
 800495a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800495e:	0a1b      	lsrs	r3, r3, #8
 8004960:	f003 030f 	and.w	r3, r3, #15
 8004964:	61fb      	str	r3, [r7, #28]
 8004966:	e005      	b.n	8004974 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004968:	4b2d      	ldr	r3, [pc, #180]	@ (8004a20 <HAL_RCC_GetSysClockFreq+0x108>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	091b      	lsrs	r3, r3, #4
 800496e:	f003 030f 	and.w	r3, r3, #15
 8004972:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004974:	4a2b      	ldr	r2, [pc, #172]	@ (8004a24 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800497c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d10d      	bne.n	80049a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004988:	e00a      	b.n	80049a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	2b04      	cmp	r3, #4
 800498e:	d102      	bne.n	8004996 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004990:	4b25      	ldr	r3, [pc, #148]	@ (8004a28 <HAL_RCC_GetSysClockFreq+0x110>)
 8004992:	61bb      	str	r3, [r7, #24]
 8004994:	e004      	b.n	80049a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	2b08      	cmp	r3, #8
 800499a:	d101      	bne.n	80049a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800499c:	4b23      	ldr	r3, [pc, #140]	@ (8004a2c <HAL_RCC_GetSysClockFreq+0x114>)
 800499e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	2b0c      	cmp	r3, #12
 80049a4:	d134      	bne.n	8004a10 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80049a6:	4b1e      	ldr	r3, [pc, #120]	@ (8004a20 <HAL_RCC_GetSysClockFreq+0x108>)
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	f003 0303 	and.w	r3, r3, #3
 80049ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d003      	beq.n	80049be <HAL_RCC_GetSysClockFreq+0xa6>
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	2b03      	cmp	r3, #3
 80049ba:	d003      	beq.n	80049c4 <HAL_RCC_GetSysClockFreq+0xac>
 80049bc:	e005      	b.n	80049ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80049be:	4b1a      	ldr	r3, [pc, #104]	@ (8004a28 <HAL_RCC_GetSysClockFreq+0x110>)
 80049c0:	617b      	str	r3, [r7, #20]
      break;
 80049c2:	e005      	b.n	80049d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80049c4:	4b19      	ldr	r3, [pc, #100]	@ (8004a2c <HAL_RCC_GetSysClockFreq+0x114>)
 80049c6:	617b      	str	r3, [r7, #20]
      break;
 80049c8:	e002      	b.n	80049d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	617b      	str	r3, [r7, #20]
      break;
 80049ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80049d0:	4b13      	ldr	r3, [pc, #76]	@ (8004a20 <HAL_RCC_GetSysClockFreq+0x108>)
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	091b      	lsrs	r3, r3, #4
 80049d6:	f003 0307 	and.w	r3, r3, #7
 80049da:	3301      	adds	r3, #1
 80049dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80049de:	4b10      	ldr	r3, [pc, #64]	@ (8004a20 <HAL_RCC_GetSysClockFreq+0x108>)
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	0a1b      	lsrs	r3, r3, #8
 80049e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049e8:	697a      	ldr	r2, [r7, #20]
 80049ea:	fb03 f202 	mul.w	r2, r3, r2
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80049f6:	4b0a      	ldr	r3, [pc, #40]	@ (8004a20 <HAL_RCC_GetSysClockFreq+0x108>)
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	0e5b      	lsrs	r3, r3, #25
 80049fc:	f003 0303 	and.w	r3, r3, #3
 8004a00:	3301      	adds	r3, #1
 8004a02:	005b      	lsls	r3, r3, #1
 8004a04:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004a06:	697a      	ldr	r2, [r7, #20]
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a0e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004a10:	69bb      	ldr	r3, [r7, #24]
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3724      	adds	r7, #36	@ 0x24
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	40021000 	.word	0x40021000
 8004a24:	08008ff0 	.word	0x08008ff0
 8004a28:	00f42400 	.word	0x00f42400
 8004a2c:	007a1200 	.word	0x007a1200

08004a30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004a38:	2300      	movs	r3, #0
 8004a3a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004a3c:	4b2a      	ldr	r3, [pc, #168]	@ (8004ae8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d003      	beq.n	8004a50 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004a48:	f7ff fa26 	bl	8003e98 <HAL_PWREx_GetVoltageRange>
 8004a4c:	6178      	str	r0, [r7, #20]
 8004a4e:	e014      	b.n	8004a7a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a50:	4b25      	ldr	r3, [pc, #148]	@ (8004ae8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a54:	4a24      	ldr	r2, [pc, #144]	@ (8004ae8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a5c:	4b22      	ldr	r3, [pc, #136]	@ (8004ae8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a64:	60fb      	str	r3, [r7, #12]
 8004a66:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004a68:	f7ff fa16 	bl	8003e98 <HAL_PWREx_GetVoltageRange>
 8004a6c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004a6e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ae8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a72:	4a1d      	ldr	r2, [pc, #116]	@ (8004ae8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a78:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a80:	d10b      	bne.n	8004a9a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2b80      	cmp	r3, #128	@ 0x80
 8004a86:	d919      	bls.n	8004abc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2ba0      	cmp	r3, #160	@ 0xa0
 8004a8c:	d902      	bls.n	8004a94 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004a8e:	2302      	movs	r3, #2
 8004a90:	613b      	str	r3, [r7, #16]
 8004a92:	e013      	b.n	8004abc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a94:	2301      	movs	r3, #1
 8004a96:	613b      	str	r3, [r7, #16]
 8004a98:	e010      	b.n	8004abc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2b80      	cmp	r3, #128	@ 0x80
 8004a9e:	d902      	bls.n	8004aa6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	613b      	str	r3, [r7, #16]
 8004aa4:	e00a      	b.n	8004abc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2b80      	cmp	r3, #128	@ 0x80
 8004aaa:	d102      	bne.n	8004ab2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004aac:	2302      	movs	r3, #2
 8004aae:	613b      	str	r3, [r7, #16]
 8004ab0:	e004      	b.n	8004abc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b70      	cmp	r3, #112	@ 0x70
 8004ab6:	d101      	bne.n	8004abc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ab8:	2301      	movs	r3, #1
 8004aba:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004abc:	4b0b      	ldr	r3, [pc, #44]	@ (8004aec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f023 0207 	bic.w	r2, r3, #7
 8004ac4:	4909      	ldr	r1, [pc, #36]	@ (8004aec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004acc:	4b07      	ldr	r3, [pc, #28]	@ (8004aec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0307 	and.w	r3, r3, #7
 8004ad4:	693a      	ldr	r2, [r7, #16]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d001      	beq.n	8004ade <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e000      	b.n	8004ae0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3718      	adds	r7, #24
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	40021000 	.word	0x40021000
 8004aec:	40022000 	.word	0x40022000

08004af0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b086      	sub	sp, #24
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004af8:	2300      	movs	r3, #0
 8004afa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004afc:	2300      	movs	r3, #0
 8004afe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d041      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b10:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004b14:	d02a      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004b16:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004b1a:	d824      	bhi.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004b1c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004b20:	d008      	beq.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004b22:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004b26:	d81e      	bhi.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00a      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004b2c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b30:	d010      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004b32:	e018      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004b34:	4b86      	ldr	r3, [pc, #536]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	4a85      	ldr	r2, [pc, #532]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b3e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b40:	e015      	b.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	3304      	adds	r3, #4
 8004b46:	2100      	movs	r1, #0
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f000 fabb 	bl	80050c4 <RCCEx_PLLSAI1_Config>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b52:	e00c      	b.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	3320      	adds	r3, #32
 8004b58:	2100      	movs	r1, #0
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f000 fba6 	bl	80052ac <RCCEx_PLLSAI2_Config>
 8004b60:	4603      	mov	r3, r0
 8004b62:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b64:	e003      	b.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	74fb      	strb	r3, [r7, #19]
      break;
 8004b6a:	e000      	b.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004b6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b6e:	7cfb      	ldrb	r3, [r7, #19]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d10b      	bne.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b74:	4b76      	ldr	r3, [pc, #472]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b7a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b82:	4973      	ldr	r1, [pc, #460]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004b8a:	e001      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b8c:	7cfb      	ldrb	r3, [r7, #19]
 8004b8e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d041      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ba0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004ba4:	d02a      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004ba6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004baa:	d824      	bhi.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004bac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004bb0:	d008      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004bb2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004bb6:	d81e      	bhi.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00a      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004bbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004bc0:	d010      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004bc2:	e018      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004bc4:	4b62      	ldr	r3, [pc, #392]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	4a61      	ldr	r2, [pc, #388]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bce:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004bd0:	e015      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	3304      	adds	r3, #4
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f000 fa73 	bl	80050c4 <RCCEx_PLLSAI1_Config>
 8004bde:	4603      	mov	r3, r0
 8004be0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004be2:	e00c      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	3320      	adds	r3, #32
 8004be8:	2100      	movs	r1, #0
 8004bea:	4618      	mov	r0, r3
 8004bec:	f000 fb5e 	bl	80052ac <RCCEx_PLLSAI2_Config>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004bf4:	e003      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	74fb      	strb	r3, [r7, #19]
      break;
 8004bfa:	e000      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004bfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bfe:	7cfb      	ldrb	r3, [r7, #19]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d10b      	bne.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004c04:	4b52      	ldr	r3, [pc, #328]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c0a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c12:	494f      	ldr	r1, [pc, #316]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004c1a:	e001      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c1c:	7cfb      	ldrb	r3, [r7, #19]
 8004c1e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f000 80a0 	beq.w	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004c32:	4b47      	ldr	r3, [pc, #284]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d101      	bne.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e000      	b.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004c42:	2300      	movs	r3, #0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d00d      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c48:	4b41      	ldr	r3, [pc, #260]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c4c:	4a40      	ldr	r2, [pc, #256]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c52:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c54:	4b3e      	ldr	r3, [pc, #248]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c5c:	60bb      	str	r3, [r7, #8]
 8004c5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c60:	2301      	movs	r3, #1
 8004c62:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c64:	4b3b      	ldr	r3, [pc, #236]	@ (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a3a      	ldr	r2, [pc, #232]	@ (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004c6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c6e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c70:	f7fc ffb2 	bl	8001bd8 <HAL_GetTick>
 8004c74:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004c76:	e009      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c78:	f7fc ffae 	bl	8001bd8 <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d902      	bls.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	74fb      	strb	r3, [r7, #19]
        break;
 8004c8a:	e005      	b.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004c8c:	4b31      	ldr	r3, [pc, #196]	@ (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d0ef      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004c98:	7cfb      	ldrb	r3, [r7, #19]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d15c      	bne.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c9e:	4b2c      	ldr	r3, [pc, #176]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ca4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ca8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d01f      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d019      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004cbc:	4b24      	ldr	r3, [pc, #144]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cc6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004cc8:	4b21      	ldr	r3, [pc, #132]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cce:	4a20      	ldr	r2, [pc, #128]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004cd8:	4b1d      	ldr	r3, [pc, #116]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cde:	4a1c      	ldr	r2, [pc, #112]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ce0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ce4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ce8:	4a19      	ldr	r2, [pc, #100]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d016      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cfa:	f7fc ff6d 	bl	8001bd8 <HAL_GetTick>
 8004cfe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d00:	e00b      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d02:	f7fc ff69 	bl	8001bd8 <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d902      	bls.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	74fb      	strb	r3, [r7, #19]
            break;
 8004d18:	e006      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d20:	f003 0302 	and.w	r3, r3, #2
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d0ec      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004d28:	7cfb      	ldrb	r3, [r7, #19]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10c      	bne.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d2e:	4b08      	ldr	r3, [pc, #32]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d34:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d3e:	4904      	ldr	r1, [pc, #16]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004d46:	e009      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d48:	7cfb      	ldrb	r3, [r7, #19]
 8004d4a:	74bb      	strb	r3, [r7, #18]
 8004d4c:	e006      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004d4e:	bf00      	nop
 8004d50:	40021000 	.word	0x40021000
 8004d54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d58:	7cfb      	ldrb	r3, [r7, #19]
 8004d5a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d5c:	7c7b      	ldrb	r3, [r7, #17]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d105      	bne.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d62:	4b9e      	ldr	r3, [pc, #632]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d66:	4a9d      	ldr	r2, [pc, #628]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d6c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0301 	and.w	r3, r3, #1
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00a      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d7a:	4b98      	ldr	r3, [pc, #608]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d80:	f023 0203 	bic.w	r2, r3, #3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d88:	4994      	ldr	r1, [pc, #592]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0302 	and.w	r3, r3, #2
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00a      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d9c:	4b8f      	ldr	r3, [pc, #572]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004da2:	f023 020c 	bic.w	r2, r3, #12
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004daa:	498c      	ldr	r1, [pc, #560]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0304 	and.w	r3, r3, #4
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00a      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004dbe:	4b87      	ldr	r3, [pc, #540]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dc4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dcc:	4983      	ldr	r1, [pc, #524]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0308 	and.w	r3, r3, #8
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00a      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004de0:	4b7e      	ldr	r3, [pc, #504]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004de6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dee:	497b      	ldr	r1, [pc, #492]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0310 	and.w	r3, r3, #16
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00a      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e02:	4b76      	ldr	r3, [pc, #472]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e10:	4972      	ldr	r1, [pc, #456]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0320 	and.w	r3, r3, #32
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d00a      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e24:	4b6d      	ldr	r3, [pc, #436]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e2a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e32:	496a      	ldr	r1, [pc, #424]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00a      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e46:	4b65      	ldr	r3, [pc, #404]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e4c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e54:	4961      	ldr	r1, [pc, #388]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00a      	beq.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e68:	4b5c      	ldr	r3, [pc, #368]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e6e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e76:	4959      	ldr	r1, [pc, #356]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00a      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e8a:	4b54      	ldr	r3, [pc, #336]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e90:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e98:	4950      	ldr	r1, [pc, #320]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d00a      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004eac:	4b4b      	ldr	r3, [pc, #300]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eb2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eba:	4948      	ldr	r1, [pc, #288]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00a      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ece:	4b43      	ldr	r3, [pc, #268]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ed4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004edc:	493f      	ldr	r1, [pc, #252]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d028      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ef0:	4b3a      	ldr	r3, [pc, #232]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ef6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004efe:	4937      	ldr	r1, [pc, #220]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f00:	4313      	orrs	r3, r2
 8004f02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f0a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f0e:	d106      	bne.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f10:	4b32      	ldr	r3, [pc, #200]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	4a31      	ldr	r2, [pc, #196]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f1a:	60d3      	str	r3, [r2, #12]
 8004f1c:	e011      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f22:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004f26:	d10c      	bne.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	3304      	adds	r3, #4
 8004f2c:	2101      	movs	r1, #1
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f000 f8c8 	bl	80050c4 <RCCEx_PLLSAI1_Config>
 8004f34:	4603      	mov	r3, r0
 8004f36:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004f38:	7cfb      	ldrb	r3, [r7, #19]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d001      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004f3e:	7cfb      	ldrb	r3, [r7, #19]
 8004f40:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d028      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004f4e:	4b23      	ldr	r3, [pc, #140]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f54:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f5c:	491f      	ldr	r1, [pc, #124]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f6c:	d106      	bne.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f6e:	4b1b      	ldr	r3, [pc, #108]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	4a1a      	ldr	r2, [pc, #104]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f74:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f78:	60d3      	str	r3, [r2, #12]
 8004f7a:	e011      	b.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f80:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004f84:	d10c      	bne.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	3304      	adds	r3, #4
 8004f8a:	2101      	movs	r1, #1
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f000 f899 	bl	80050c4 <RCCEx_PLLSAI1_Config>
 8004f92:	4603      	mov	r3, r0
 8004f94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f96:	7cfb      	ldrb	r3, [r7, #19]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d001      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004f9c:	7cfb      	ldrb	r3, [r7, #19]
 8004f9e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d02b      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004fac:	4b0b      	ldr	r3, [pc, #44]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fb2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fba:	4908      	ldr	r1, [pc, #32]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fc6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004fca:	d109      	bne.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fcc:	4b03      	ldr	r3, [pc, #12]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	4a02      	ldr	r2, [pc, #8]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004fd6:	60d3      	str	r3, [r2, #12]
 8004fd8:	e014      	b.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004fda:	bf00      	nop
 8004fdc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fe4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004fe8:	d10c      	bne.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	3304      	adds	r3, #4
 8004fee:	2101      	movs	r1, #1
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f000 f867 	bl	80050c4 <RCCEx_PLLSAI1_Config>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ffa:	7cfb      	ldrb	r3, [r7, #19]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d001      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005000:	7cfb      	ldrb	r3, [r7, #19]
 8005002:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d02f      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005010:	4b2b      	ldr	r3, [pc, #172]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005016:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800501e:	4928      	ldr	r1, [pc, #160]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005020:	4313      	orrs	r3, r2
 8005022:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800502a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800502e:	d10d      	bne.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	3304      	adds	r3, #4
 8005034:	2102      	movs	r1, #2
 8005036:	4618      	mov	r0, r3
 8005038:	f000 f844 	bl	80050c4 <RCCEx_PLLSAI1_Config>
 800503c:	4603      	mov	r3, r0
 800503e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005040:	7cfb      	ldrb	r3, [r7, #19]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d014      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005046:	7cfb      	ldrb	r3, [r7, #19]
 8005048:	74bb      	strb	r3, [r7, #18]
 800504a:	e011      	b.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005050:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005054:	d10c      	bne.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	3320      	adds	r3, #32
 800505a:	2102      	movs	r1, #2
 800505c:	4618      	mov	r0, r3
 800505e:	f000 f925 	bl	80052ac <RCCEx_PLLSAI2_Config>
 8005062:	4603      	mov	r3, r0
 8005064:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005066:	7cfb      	ldrb	r3, [r7, #19]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d001      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800506c:	7cfb      	ldrb	r3, [r7, #19]
 800506e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00a      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800507c:	4b10      	ldr	r3, [pc, #64]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800507e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005082:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800508a:	490d      	ldr	r1, [pc, #52]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800508c:	4313      	orrs	r3, r2
 800508e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00b      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800509e:	4b08      	ldr	r3, [pc, #32]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80050a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050a4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050ae:	4904      	ldr	r1, [pc, #16]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80050b6:	7cbb      	ldrb	r3, [r7, #18]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3718      	adds	r7, #24
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	40021000 	.word	0x40021000

080050c4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050ce:	2300      	movs	r3, #0
 80050d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80050d2:	4b75      	ldr	r3, [pc, #468]	@ (80052a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	f003 0303 	and.w	r3, r3, #3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d018      	beq.n	8005110 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80050de:	4b72      	ldr	r3, [pc, #456]	@ (80052a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	f003 0203 	and.w	r2, r3, #3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d10d      	bne.n	800510a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
       ||
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d009      	beq.n	800510a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80050f6:	4b6c      	ldr	r3, [pc, #432]	@ (80052a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	091b      	lsrs	r3, r3, #4
 80050fc:	f003 0307 	and.w	r3, r3, #7
 8005100:	1c5a      	adds	r2, r3, #1
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
       ||
 8005106:	429a      	cmp	r2, r3
 8005108:	d047      	beq.n	800519a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	73fb      	strb	r3, [r7, #15]
 800510e:	e044      	b.n	800519a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2b03      	cmp	r3, #3
 8005116:	d018      	beq.n	800514a <RCCEx_PLLSAI1_Config+0x86>
 8005118:	2b03      	cmp	r3, #3
 800511a:	d825      	bhi.n	8005168 <RCCEx_PLLSAI1_Config+0xa4>
 800511c:	2b01      	cmp	r3, #1
 800511e:	d002      	beq.n	8005126 <RCCEx_PLLSAI1_Config+0x62>
 8005120:	2b02      	cmp	r3, #2
 8005122:	d009      	beq.n	8005138 <RCCEx_PLLSAI1_Config+0x74>
 8005124:	e020      	b.n	8005168 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005126:	4b60      	ldr	r3, [pc, #384]	@ (80052a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0302 	and.w	r3, r3, #2
 800512e:	2b00      	cmp	r3, #0
 8005130:	d11d      	bne.n	800516e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005136:	e01a      	b.n	800516e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005138:	4b5b      	ldr	r3, [pc, #364]	@ (80052a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005140:	2b00      	cmp	r3, #0
 8005142:	d116      	bne.n	8005172 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005148:	e013      	b.n	8005172 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800514a:	4b57      	ldr	r3, [pc, #348]	@ (80052a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d10f      	bne.n	8005176 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005156:	4b54      	ldr	r3, [pc, #336]	@ (80052a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d109      	bne.n	8005176 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005166:	e006      	b.n	8005176 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	73fb      	strb	r3, [r7, #15]
      break;
 800516c:	e004      	b.n	8005178 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800516e:	bf00      	nop
 8005170:	e002      	b.n	8005178 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005172:	bf00      	nop
 8005174:	e000      	b.n	8005178 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005176:	bf00      	nop
    }

    if(status == HAL_OK)
 8005178:	7bfb      	ldrb	r3, [r7, #15]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d10d      	bne.n	800519a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800517e:	4b4a      	ldr	r3, [pc, #296]	@ (80052a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6819      	ldr	r1, [r3, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	3b01      	subs	r3, #1
 8005190:	011b      	lsls	r3, r3, #4
 8005192:	430b      	orrs	r3, r1
 8005194:	4944      	ldr	r1, [pc, #272]	@ (80052a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005196:	4313      	orrs	r3, r2
 8005198:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800519a:	7bfb      	ldrb	r3, [r7, #15]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d17d      	bne.n	800529c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80051a0:	4b41      	ldr	r3, [pc, #260]	@ (80052a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a40      	ldr	r2, [pc, #256]	@ (80052a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80051aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051ac:	f7fc fd14 	bl	8001bd8 <HAL_GetTick>
 80051b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80051b2:	e009      	b.n	80051c8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051b4:	f7fc fd10 	bl	8001bd8 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d902      	bls.n	80051c8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	73fb      	strb	r3, [r7, #15]
        break;
 80051c6:	e005      	b.n	80051d4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80051c8:	4b37      	ldr	r3, [pc, #220]	@ (80052a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1ef      	bne.n	80051b4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80051d4:	7bfb      	ldrb	r3, [r7, #15]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d160      	bne.n	800529c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d111      	bne.n	8005204 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80051e0:	4b31      	ldr	r3, [pc, #196]	@ (80052a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80051e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	6892      	ldr	r2, [r2, #8]
 80051f0:	0211      	lsls	r1, r2, #8
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	68d2      	ldr	r2, [r2, #12]
 80051f6:	0912      	lsrs	r2, r2, #4
 80051f8:	0452      	lsls	r2, r2, #17
 80051fa:	430a      	orrs	r2, r1
 80051fc:	492a      	ldr	r1, [pc, #168]	@ (80052a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	610b      	str	r3, [r1, #16]
 8005202:	e027      	b.n	8005254 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	2b01      	cmp	r3, #1
 8005208:	d112      	bne.n	8005230 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800520a:	4b27      	ldr	r3, [pc, #156]	@ (80052a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005212:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	6892      	ldr	r2, [r2, #8]
 800521a:	0211      	lsls	r1, r2, #8
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	6912      	ldr	r2, [r2, #16]
 8005220:	0852      	lsrs	r2, r2, #1
 8005222:	3a01      	subs	r2, #1
 8005224:	0552      	lsls	r2, r2, #21
 8005226:	430a      	orrs	r2, r1
 8005228:	491f      	ldr	r1, [pc, #124]	@ (80052a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800522a:	4313      	orrs	r3, r2
 800522c:	610b      	str	r3, [r1, #16]
 800522e:	e011      	b.n	8005254 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005230:	4b1d      	ldr	r3, [pc, #116]	@ (80052a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005238:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	6892      	ldr	r2, [r2, #8]
 8005240:	0211      	lsls	r1, r2, #8
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	6952      	ldr	r2, [r2, #20]
 8005246:	0852      	lsrs	r2, r2, #1
 8005248:	3a01      	subs	r2, #1
 800524a:	0652      	lsls	r2, r2, #25
 800524c:	430a      	orrs	r2, r1
 800524e:	4916      	ldr	r1, [pc, #88]	@ (80052a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005250:	4313      	orrs	r3, r2
 8005252:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005254:	4b14      	ldr	r3, [pc, #80]	@ (80052a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a13      	ldr	r2, [pc, #76]	@ (80052a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800525a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800525e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005260:	f7fc fcba 	bl	8001bd8 <HAL_GetTick>
 8005264:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005266:	e009      	b.n	800527c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005268:	f7fc fcb6 	bl	8001bd8 <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	2b02      	cmp	r3, #2
 8005274:	d902      	bls.n	800527c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	73fb      	strb	r3, [r7, #15]
          break;
 800527a:	e005      	b.n	8005288 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800527c:	4b0a      	ldr	r3, [pc, #40]	@ (80052a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005284:	2b00      	cmp	r3, #0
 8005286:	d0ef      	beq.n	8005268 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005288:	7bfb      	ldrb	r3, [r7, #15]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d106      	bne.n	800529c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800528e:	4b06      	ldr	r3, [pc, #24]	@ (80052a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005290:	691a      	ldr	r2, [r3, #16]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	4904      	ldr	r1, [pc, #16]	@ (80052a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005298:	4313      	orrs	r3, r2
 800529a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800529c:	7bfb      	ldrb	r3, [r7, #15]
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3710      	adds	r7, #16
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	40021000 	.word	0x40021000

080052ac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052b6:	2300      	movs	r3, #0
 80052b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80052ba:	4b6a      	ldr	r3, [pc, #424]	@ (8005464 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	f003 0303 	and.w	r3, r3, #3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d018      	beq.n	80052f8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80052c6:	4b67      	ldr	r3, [pc, #412]	@ (8005464 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	f003 0203 	and.w	r2, r3, #3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d10d      	bne.n	80052f2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
       ||
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d009      	beq.n	80052f2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80052de:	4b61      	ldr	r3, [pc, #388]	@ (8005464 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	091b      	lsrs	r3, r3, #4
 80052e4:	f003 0307 	and.w	r3, r3, #7
 80052e8:	1c5a      	adds	r2, r3, #1
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
       ||
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d047      	beq.n	8005382 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	73fb      	strb	r3, [r7, #15]
 80052f6:	e044      	b.n	8005382 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2b03      	cmp	r3, #3
 80052fe:	d018      	beq.n	8005332 <RCCEx_PLLSAI2_Config+0x86>
 8005300:	2b03      	cmp	r3, #3
 8005302:	d825      	bhi.n	8005350 <RCCEx_PLLSAI2_Config+0xa4>
 8005304:	2b01      	cmp	r3, #1
 8005306:	d002      	beq.n	800530e <RCCEx_PLLSAI2_Config+0x62>
 8005308:	2b02      	cmp	r3, #2
 800530a:	d009      	beq.n	8005320 <RCCEx_PLLSAI2_Config+0x74>
 800530c:	e020      	b.n	8005350 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800530e:	4b55      	ldr	r3, [pc, #340]	@ (8005464 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	2b00      	cmp	r3, #0
 8005318:	d11d      	bne.n	8005356 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800531e:	e01a      	b.n	8005356 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005320:	4b50      	ldr	r3, [pc, #320]	@ (8005464 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005328:	2b00      	cmp	r3, #0
 800532a:	d116      	bne.n	800535a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005330:	e013      	b.n	800535a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005332:	4b4c      	ldr	r3, [pc, #304]	@ (8005464 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d10f      	bne.n	800535e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800533e:	4b49      	ldr	r3, [pc, #292]	@ (8005464 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d109      	bne.n	800535e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800534e:	e006      	b.n	800535e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	73fb      	strb	r3, [r7, #15]
      break;
 8005354:	e004      	b.n	8005360 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005356:	bf00      	nop
 8005358:	e002      	b.n	8005360 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800535a:	bf00      	nop
 800535c:	e000      	b.n	8005360 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800535e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005360:	7bfb      	ldrb	r3, [r7, #15]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d10d      	bne.n	8005382 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005366:	4b3f      	ldr	r3, [pc, #252]	@ (8005464 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6819      	ldr	r1, [r3, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	3b01      	subs	r3, #1
 8005378:	011b      	lsls	r3, r3, #4
 800537a:	430b      	orrs	r3, r1
 800537c:	4939      	ldr	r1, [pc, #228]	@ (8005464 <RCCEx_PLLSAI2_Config+0x1b8>)
 800537e:	4313      	orrs	r3, r2
 8005380:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005382:	7bfb      	ldrb	r3, [r7, #15]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d167      	bne.n	8005458 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005388:	4b36      	ldr	r3, [pc, #216]	@ (8005464 <RCCEx_PLLSAI2_Config+0x1b8>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a35      	ldr	r2, [pc, #212]	@ (8005464 <RCCEx_PLLSAI2_Config+0x1b8>)
 800538e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005392:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005394:	f7fc fc20 	bl	8001bd8 <HAL_GetTick>
 8005398:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800539a:	e009      	b.n	80053b0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800539c:	f7fc fc1c 	bl	8001bd8 <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d902      	bls.n	80053b0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	73fb      	strb	r3, [r7, #15]
        break;
 80053ae:	e005      	b.n	80053bc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80053b0:	4b2c      	ldr	r3, [pc, #176]	@ (8005464 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1ef      	bne.n	800539c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80053bc:	7bfb      	ldrb	r3, [r7, #15]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d14a      	bne.n	8005458 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d111      	bne.n	80053ec <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80053c8:	4b26      	ldr	r3, [pc, #152]	@ (8005464 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053ca:	695b      	ldr	r3, [r3, #20]
 80053cc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80053d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	6892      	ldr	r2, [r2, #8]
 80053d8:	0211      	lsls	r1, r2, #8
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	68d2      	ldr	r2, [r2, #12]
 80053de:	0912      	lsrs	r2, r2, #4
 80053e0:	0452      	lsls	r2, r2, #17
 80053e2:	430a      	orrs	r2, r1
 80053e4:	491f      	ldr	r1, [pc, #124]	@ (8005464 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	614b      	str	r3, [r1, #20]
 80053ea:	e011      	b.n	8005410 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80053ec:	4b1d      	ldr	r3, [pc, #116]	@ (8005464 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053ee:	695b      	ldr	r3, [r3, #20]
 80053f0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80053f4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	6892      	ldr	r2, [r2, #8]
 80053fc:	0211      	lsls	r1, r2, #8
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	6912      	ldr	r2, [r2, #16]
 8005402:	0852      	lsrs	r2, r2, #1
 8005404:	3a01      	subs	r2, #1
 8005406:	0652      	lsls	r2, r2, #25
 8005408:	430a      	orrs	r2, r1
 800540a:	4916      	ldr	r1, [pc, #88]	@ (8005464 <RCCEx_PLLSAI2_Config+0x1b8>)
 800540c:	4313      	orrs	r3, r2
 800540e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005410:	4b14      	ldr	r3, [pc, #80]	@ (8005464 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a13      	ldr	r2, [pc, #76]	@ (8005464 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005416:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800541a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800541c:	f7fc fbdc 	bl	8001bd8 <HAL_GetTick>
 8005420:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005422:	e009      	b.n	8005438 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005424:	f7fc fbd8 	bl	8001bd8 <HAL_GetTick>
 8005428:	4602      	mov	r2, r0
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	2b02      	cmp	r3, #2
 8005430:	d902      	bls.n	8005438 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	73fb      	strb	r3, [r7, #15]
          break;
 8005436:	e005      	b.n	8005444 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005438:	4b0a      	ldr	r3, [pc, #40]	@ (8005464 <RCCEx_PLLSAI2_Config+0x1b8>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005440:	2b00      	cmp	r3, #0
 8005442:	d0ef      	beq.n	8005424 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005444:	7bfb      	ldrb	r3, [r7, #15]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d106      	bne.n	8005458 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800544a:	4b06      	ldr	r3, [pc, #24]	@ (8005464 <RCCEx_PLLSAI2_Config+0x1b8>)
 800544c:	695a      	ldr	r2, [r3, #20]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	4904      	ldr	r1, [pc, #16]	@ (8005464 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005454:	4313      	orrs	r3, r2
 8005456:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005458:	7bfb      	ldrb	r3, [r7, #15]
}
 800545a:	4618      	mov	r0, r3
 800545c:	3710      	adds	r7, #16
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	40021000 	.word	0x40021000

08005468 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d101      	bne.n	800547a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e095      	b.n	80055a6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800547e:	2b00      	cmp	r3, #0
 8005480:	d108      	bne.n	8005494 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800548a:	d009      	beq.n	80054a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	61da      	str	r2, [r3, #28]
 8005492:	e005      	b.n	80054a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d106      	bne.n	80054c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f7fc f9a8 	bl	8001810 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2202      	movs	r2, #2
 80054c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054d6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80054e0:	d902      	bls.n	80054e8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80054e2:	2300      	movs	r3, #0
 80054e4:	60fb      	str	r3, [r7, #12]
 80054e6:	e002      	b.n	80054ee <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80054e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80054ec:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80054f6:	d007      	beq.n	8005508 <HAL_SPI_Init+0xa0>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005500:	d002      	beq.n	8005508 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005518:	431a      	orrs	r2, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	f003 0302 	and.w	r3, r3, #2
 8005522:	431a      	orrs	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	695b      	ldr	r3, [r3, #20]
 8005528:	f003 0301 	and.w	r3, r3, #1
 800552c:	431a      	orrs	r2, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005536:	431a      	orrs	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	69db      	ldr	r3, [r3, #28]
 800553c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005540:	431a      	orrs	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a1b      	ldr	r3, [r3, #32]
 8005546:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800554a:	ea42 0103 	orr.w	r1, r2, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005552:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	430a      	orrs	r2, r1
 800555c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	0c1b      	lsrs	r3, r3, #16
 8005564:	f003 0204 	and.w	r2, r3, #4
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800556c:	f003 0310 	and.w	r3, r3, #16
 8005570:	431a      	orrs	r2, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005576:	f003 0308 	and.w	r3, r3, #8
 800557a:	431a      	orrs	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005584:	ea42 0103 	orr.w	r1, r2, r3
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	430a      	orrs	r2, r1
 8005594:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3710      	adds	r7, #16
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b088      	sub	sp, #32
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	60f8      	str	r0, [r7, #12]
 80055b6:	60b9      	str	r1, [r7, #8]
 80055b8:	603b      	str	r3, [r7, #0]
 80055ba:	4613      	mov	r3, r2
 80055bc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055be:	f7fc fb0b 	bl	8001bd8 <HAL_GetTick>
 80055c2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80055c4:	88fb      	ldrh	r3, [r7, #6]
 80055c6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d001      	beq.n	80055d8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80055d4:	2302      	movs	r3, #2
 80055d6:	e15c      	b.n	8005892 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d002      	beq.n	80055e4 <HAL_SPI_Transmit+0x36>
 80055de:	88fb      	ldrh	r3, [r7, #6]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d101      	bne.n	80055e8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e154      	b.n	8005892 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d101      	bne.n	80055f6 <HAL_SPI_Transmit+0x48>
 80055f2:	2302      	movs	r3, #2
 80055f4:	e14d      	b.n	8005892 <HAL_SPI_Transmit+0x2e4>
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2201      	movs	r2, #1
 80055fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2203      	movs	r2, #3
 8005602:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	68ba      	ldr	r2, [r7, #8]
 8005610:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	88fa      	ldrh	r2, [r7, #6]
 8005616:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	88fa      	ldrh	r2, [r7, #6]
 800561c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2200      	movs	r2, #0
 8005638:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005648:	d10f      	bne.n	800566a <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005658:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005668:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005674:	2b40      	cmp	r3, #64	@ 0x40
 8005676:	d007      	beq.n	8005688 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005686:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005690:	d952      	bls.n	8005738 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d002      	beq.n	80056a0 <HAL_SPI_Transmit+0xf2>
 800569a:	8b7b      	ldrh	r3, [r7, #26]
 800569c:	2b01      	cmp	r3, #1
 800569e:	d145      	bne.n	800572c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056a4:	881a      	ldrh	r2, [r3, #0]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056b0:	1c9a      	adds	r2, r3, #2
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	3b01      	subs	r3, #1
 80056be:	b29a      	uxth	r2, r3
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80056c4:	e032      	b.n	800572c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f003 0302 	and.w	r3, r3, #2
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d112      	bne.n	80056fa <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056d8:	881a      	ldrh	r2, [r3, #0]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056e4:	1c9a      	adds	r2, r3, #2
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	3b01      	subs	r3, #1
 80056f2:	b29a      	uxth	r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80056f8:	e018      	b.n	800572c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056fa:	f7fc fa6d 	bl	8001bd8 <HAL_GetTick>
 80056fe:	4602      	mov	r2, r0
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	683a      	ldr	r2, [r7, #0]
 8005706:	429a      	cmp	r2, r3
 8005708:	d803      	bhi.n	8005712 <HAL_SPI_Transmit+0x164>
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005710:	d102      	bne.n	8005718 <HAL_SPI_Transmit+0x16a>
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d109      	bne.n	800572c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005728:	2303      	movs	r3, #3
 800572a:	e0b2      	b.n	8005892 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005730:	b29b      	uxth	r3, r3
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1c7      	bne.n	80056c6 <HAL_SPI_Transmit+0x118>
 8005736:	e083      	b.n	8005840 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d002      	beq.n	8005746 <HAL_SPI_Transmit+0x198>
 8005740:	8b7b      	ldrh	r3, [r7, #26]
 8005742:	2b01      	cmp	r3, #1
 8005744:	d177      	bne.n	8005836 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800574a:	b29b      	uxth	r3, r3
 800574c:	2b01      	cmp	r3, #1
 800574e:	d912      	bls.n	8005776 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005754:	881a      	ldrh	r2, [r3, #0]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005760:	1c9a      	adds	r2, r3, #2
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800576a:	b29b      	uxth	r3, r3
 800576c:	3b02      	subs	r3, #2
 800576e:	b29a      	uxth	r2, r3
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005774:	e05f      	b.n	8005836 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	330c      	adds	r3, #12
 8005780:	7812      	ldrb	r2, [r2, #0]
 8005782:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005788:	1c5a      	adds	r2, r3, #1
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005792:	b29b      	uxth	r3, r3
 8005794:	3b01      	subs	r3, #1
 8005796:	b29a      	uxth	r2, r3
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800579c:	e04b      	b.n	8005836 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f003 0302 	and.w	r3, r3, #2
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	d12b      	bne.n	8005804 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d912      	bls.n	80057dc <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ba:	881a      	ldrh	r2, [r3, #0]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057c6:	1c9a      	adds	r2, r3, #2
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	3b02      	subs	r3, #2
 80057d4:	b29a      	uxth	r2, r3
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80057da:	e02c      	b.n	8005836 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	330c      	adds	r3, #12
 80057e6:	7812      	ldrb	r2, [r2, #0]
 80057e8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ee:	1c5a      	adds	r2, r3, #1
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	3b01      	subs	r3, #1
 80057fc:	b29a      	uxth	r2, r3
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005802:	e018      	b.n	8005836 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005804:	f7fc f9e8 	bl	8001bd8 <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	683a      	ldr	r2, [r7, #0]
 8005810:	429a      	cmp	r2, r3
 8005812:	d803      	bhi.n	800581c <HAL_SPI_Transmit+0x26e>
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800581a:	d102      	bne.n	8005822 <HAL_SPI_Transmit+0x274>
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d109      	bne.n	8005836 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2201      	movs	r2, #1
 8005826:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e02d      	b.n	8005892 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800583a:	b29b      	uxth	r3, r3
 800583c:	2b00      	cmp	r3, #0
 800583e:	d1ae      	bne.n	800579e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005840:	69fa      	ldr	r2, [r7, #28]
 8005842:	6839      	ldr	r1, [r7, #0]
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	f000 fcf5 	bl	8006234 <SPI_EndRxTxTransaction>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d002      	beq.n	8005856 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2220      	movs	r2, #32
 8005854:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d10a      	bne.n	8005874 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800585e:	2300      	movs	r3, #0
 8005860:	617b      	str	r3, [r7, #20]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	617b      	str	r3, [r7, #20]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	617b      	str	r3, [r7, #20]
 8005872:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005888:	2b00      	cmp	r3, #0
 800588a:	d001      	beq.n	8005890 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e000      	b.n	8005892 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8005890:	2300      	movs	r3, #0
  }
}
 8005892:	4618      	mov	r0, r3
 8005894:	3720      	adds	r7, #32
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}

0800589a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800589a:	b580      	push	{r7, lr}
 800589c:	b088      	sub	sp, #32
 800589e:	af02      	add	r7, sp, #8
 80058a0:	60f8      	str	r0, [r7, #12]
 80058a2:	60b9      	str	r1, [r7, #8]
 80058a4:	603b      	str	r3, [r7, #0]
 80058a6:	4613      	mov	r3, r2
 80058a8:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d001      	beq.n	80058ba <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80058b6:	2302      	movs	r3, #2
 80058b8:	e123      	b.n	8005b02 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80058c2:	d112      	bne.n	80058ea <HAL_SPI_Receive+0x50>
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d10e      	bne.n	80058ea <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2204      	movs	r2, #4
 80058d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80058d4:	88fa      	ldrh	r2, [r7, #6]
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	9300      	str	r3, [sp, #0]
 80058da:	4613      	mov	r3, r2
 80058dc:	68ba      	ldr	r2, [r7, #8]
 80058de:	68b9      	ldr	r1, [r7, #8]
 80058e0:	68f8      	ldr	r0, [r7, #12]
 80058e2:	f000 f912 	bl	8005b0a <HAL_SPI_TransmitReceive>
 80058e6:	4603      	mov	r3, r0
 80058e8:	e10b      	b.n	8005b02 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058ea:	f7fc f975 	bl	8001bd8 <HAL_GetTick>
 80058ee:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d002      	beq.n	80058fc <HAL_SPI_Receive+0x62>
 80058f6:	88fb      	ldrh	r3, [r7, #6]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d101      	bne.n	8005900 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e100      	b.n	8005b02 <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005906:	2b01      	cmp	r3, #1
 8005908:	d101      	bne.n	800590e <HAL_SPI_Receive+0x74>
 800590a:	2302      	movs	r3, #2
 800590c:	e0f9      	b.n	8005b02 <HAL_SPI_Receive+0x268>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2201      	movs	r2, #1
 8005912:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2204      	movs	r2, #4
 800591a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	68ba      	ldr	r2, [r7, #8]
 8005928:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	88fa      	ldrh	r2, [r7, #6]
 800592e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	88fa      	ldrh	r2, [r7, #6]
 8005936:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2200      	movs	r2, #0
 800593e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2200      	movs	r2, #0
 800594a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2200      	movs	r2, #0
 8005950:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005960:	d908      	bls.n	8005974 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	685a      	ldr	r2, [r3, #4]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005970:	605a      	str	r2, [r3, #4]
 8005972:	e007      	b.n	8005984 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	685a      	ldr	r2, [r3, #4]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005982:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800598c:	d10f      	bne.n	80059ae <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800599c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80059ac:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059b8:	2b40      	cmp	r3, #64	@ 0x40
 80059ba:	d007      	beq.n	80059cc <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80059ca:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80059d4:	d875      	bhi.n	8005ac2 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80059d6:	e037      	b.n	8005a48 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	f003 0301 	and.w	r3, r3, #1
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d117      	bne.n	8005a16 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f103 020c 	add.w	r2, r3, #12
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059f2:	7812      	ldrb	r2, [r2, #0]
 80059f4:	b2d2      	uxtb	r2, r2
 80059f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059fc:	1c5a      	adds	r2, r3, #1
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	3b01      	subs	r3, #1
 8005a0c:	b29a      	uxth	r2, r3
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005a14:	e018      	b.n	8005a48 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a16:	f7fc f8df 	bl	8001bd8 <HAL_GetTick>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	1ad3      	subs	r3, r2, r3
 8005a20:	683a      	ldr	r2, [r7, #0]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d803      	bhi.n	8005a2e <HAL_SPI_Receive+0x194>
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a2c:	d102      	bne.n	8005a34 <HAL_SPI_Receive+0x19a>
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d109      	bne.n	8005a48 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005a44:	2303      	movs	r3, #3
 8005a46:	e05c      	b.n	8005b02 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d1c1      	bne.n	80059d8 <HAL_SPI_Receive+0x13e>
 8005a54:	e03b      	b.n	8005ace <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	f003 0301 	and.w	r3, r3, #1
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d115      	bne.n	8005a90 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68da      	ldr	r2, [r3, #12]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a6e:	b292      	uxth	r2, r2
 8005a70:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a76:	1c9a      	adds	r2, r3, #2
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	3b01      	subs	r3, #1
 8005a86:	b29a      	uxth	r2, r3
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005a8e:	e018      	b.n	8005ac2 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a90:	f7fc f8a2 	bl	8001bd8 <HAL_GetTick>
 8005a94:	4602      	mov	r2, r0
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	1ad3      	subs	r3, r2, r3
 8005a9a:	683a      	ldr	r2, [r7, #0]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d803      	bhi.n	8005aa8 <HAL_SPI_Receive+0x20e>
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005aa6:	d102      	bne.n	8005aae <HAL_SPI_Receive+0x214>
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d109      	bne.n	8005ac2 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e01f      	b.n	8005b02 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d1c3      	bne.n	8005a56 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ace:	697a      	ldr	r2, [r7, #20]
 8005ad0:	6839      	ldr	r1, [r7, #0]
 8005ad2:	68f8      	ldr	r0, [r7, #12]
 8005ad4:	f000 fb56 	bl	8006184 <SPI_EndRxTransaction>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d002      	beq.n	8005ae4 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2220      	movs	r2, #32
 8005ae2:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d001      	beq.n	8005b00 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e000      	b.n	8005b02 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8005b00:	2300      	movs	r3, #0
  }
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3718      	adds	r7, #24
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b08a      	sub	sp, #40	@ 0x28
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	60f8      	str	r0, [r7, #12]
 8005b12:	60b9      	str	r1, [r7, #8]
 8005b14:	607a      	str	r2, [r7, #4]
 8005b16:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b1c:	f7fc f85c 	bl	8001bd8 <HAL_GetTick>
 8005b20:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005b28:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005b30:	887b      	ldrh	r3, [r7, #2]
 8005b32:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8005b34:	887b      	ldrh	r3, [r7, #2]
 8005b36:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005b38:	7ffb      	ldrb	r3, [r7, #31]
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d00c      	beq.n	8005b58 <HAL_SPI_TransmitReceive+0x4e>
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b44:	d106      	bne.n	8005b54 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d102      	bne.n	8005b54 <HAL_SPI_TransmitReceive+0x4a>
 8005b4e:	7ffb      	ldrb	r3, [r7, #31]
 8005b50:	2b04      	cmp	r3, #4
 8005b52:	d001      	beq.n	8005b58 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005b54:	2302      	movs	r3, #2
 8005b56:	e1f3      	b.n	8005f40 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d005      	beq.n	8005b6a <HAL_SPI_TransmitReceive+0x60>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d002      	beq.n	8005b6a <HAL_SPI_TransmitReceive+0x60>
 8005b64:	887b      	ldrh	r3, [r7, #2]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d101      	bne.n	8005b6e <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e1e8      	b.n	8005f40 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d101      	bne.n	8005b7c <HAL_SPI_TransmitReceive+0x72>
 8005b78:	2302      	movs	r3, #2
 8005b7a:	e1e1      	b.n	8005f40 <HAL_SPI_TransmitReceive+0x436>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	2b04      	cmp	r3, #4
 8005b8e:	d003      	beq.n	8005b98 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2205      	movs	r2, #5
 8005b94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	887a      	ldrh	r2, [r7, #2]
 8005ba8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	887a      	ldrh	r2, [r7, #2]
 8005bb0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	68ba      	ldr	r2, [r7, #8]
 8005bb8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	887a      	ldrh	r2, [r7, #2]
 8005bbe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	887a      	ldrh	r2, [r7, #2]
 8005bc4:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005bda:	d802      	bhi.n	8005be2 <HAL_SPI_TransmitReceive+0xd8>
 8005bdc:	8abb      	ldrh	r3, [r7, #20]
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d908      	bls.n	8005bf4 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	685a      	ldr	r2, [r3, #4]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005bf0:	605a      	str	r2, [r3, #4]
 8005bf2:	e007      	b.n	8005c04 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	685a      	ldr	r2, [r3, #4]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005c02:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c0e:	2b40      	cmp	r3, #64	@ 0x40
 8005c10:	d007      	beq.n	8005c22 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c20:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005c2a:	f240 8083 	bls.w	8005d34 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d002      	beq.n	8005c3c <HAL_SPI_TransmitReceive+0x132>
 8005c36:	8afb      	ldrh	r3, [r7, #22]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d16f      	bne.n	8005d1c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c40:	881a      	ldrh	r2, [r3, #0]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c4c:	1c9a      	adds	r2, r3, #2
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	3b01      	subs	r3, #1
 8005c5a:	b29a      	uxth	r2, r3
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c60:	e05c      	b.n	8005d1c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	f003 0302 	and.w	r3, r3, #2
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d11b      	bne.n	8005ca8 <HAL_SPI_TransmitReceive+0x19e>
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d016      	beq.n	8005ca8 <HAL_SPI_TransmitReceive+0x19e>
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d113      	bne.n	8005ca8 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c84:	881a      	ldrh	r2, [r3, #0]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c90:	1c9a      	adds	r2, r3, #2
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	f003 0301 	and.w	r3, r3, #1
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d11c      	bne.n	8005cf0 <HAL_SPI_TransmitReceive+0x1e6>
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d016      	beq.n	8005cf0 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68da      	ldr	r2, [r3, #12]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ccc:	b292      	uxth	r2, r2
 8005cce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cd4:	1c9a      	adds	r2, r3, #2
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	b29a      	uxth	r2, r3
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005cec:	2301      	movs	r3, #1
 8005cee:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005cf0:	f7fb ff72 	bl	8001bd8 <HAL_GetTick>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	6a3b      	ldr	r3, [r7, #32]
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d80d      	bhi.n	8005d1c <HAL_SPI_TransmitReceive+0x212>
 8005d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d02:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d06:	d009      	beq.n	8005d1c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005d18:	2303      	movs	r3, #3
 8005d1a:	e111      	b.n	8005f40 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d19d      	bne.n	8005c62 <HAL_SPI_TransmitReceive+0x158>
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d197      	bne.n	8005c62 <HAL_SPI_TransmitReceive+0x158>
 8005d32:	e0e5      	b.n	8005f00 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d003      	beq.n	8005d44 <HAL_SPI_TransmitReceive+0x23a>
 8005d3c:	8afb      	ldrh	r3, [r7, #22]
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	f040 80d1 	bne.w	8005ee6 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d912      	bls.n	8005d74 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d52:	881a      	ldrh	r2, [r3, #0]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d5e:	1c9a      	adds	r2, r3, #2
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	3b02      	subs	r3, #2
 8005d6c:	b29a      	uxth	r2, r3
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005d72:	e0b8      	b.n	8005ee6 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	330c      	adds	r3, #12
 8005d7e:	7812      	ldrb	r2, [r2, #0]
 8005d80:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d86:	1c5a      	adds	r2, r3, #1
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	3b01      	subs	r3, #1
 8005d94:	b29a      	uxth	r2, r3
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d9a:	e0a4      	b.n	8005ee6 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f003 0302 	and.w	r3, r3, #2
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d134      	bne.n	8005e14 <HAL_SPI_TransmitReceive+0x30a>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d02f      	beq.n	8005e14 <HAL_SPI_TransmitReceive+0x30a>
 8005db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d12c      	bne.n	8005e14 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d912      	bls.n	8005dea <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dc8:	881a      	ldrh	r2, [r3, #0]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dd4:	1c9a      	adds	r2, r3, #2
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	3b02      	subs	r3, #2
 8005de2:	b29a      	uxth	r2, r3
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005de8:	e012      	b.n	8005e10 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	330c      	adds	r3, #12
 8005df4:	7812      	ldrb	r2, [r2, #0]
 8005df6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dfc:	1c5a      	adds	r2, r3, #1
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	b29a      	uxth	r2, r3
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e10:	2300      	movs	r3, #0
 8005e12:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	f003 0301 	and.w	r3, r3, #1
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d148      	bne.n	8005eb4 <HAL_SPI_TransmitReceive+0x3aa>
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d042      	beq.n	8005eb4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d923      	bls.n	8005e82 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	68da      	ldr	r2, [r3, #12]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e44:	b292      	uxth	r2, r2
 8005e46:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e4c:	1c9a      	adds	r2, r3, #2
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	3b02      	subs	r3, #2
 8005e5c:	b29a      	uxth	r2, r3
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d81f      	bhi.n	8005eb0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	685a      	ldr	r2, [r3, #4]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005e7e:	605a      	str	r2, [r3, #4]
 8005e80:	e016      	b.n	8005eb0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f103 020c 	add.w	r2, r3, #12
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e8e:	7812      	ldrb	r2, [r2, #0]
 8005e90:	b2d2      	uxtb	r2, r2
 8005e92:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e98:	1c5a      	adds	r2, r3, #1
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	3b01      	subs	r3, #1
 8005ea8:	b29a      	uxth	r2, r3
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005eb4:	f7fb fe90 	bl	8001bd8 <HAL_GetTick>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	6a3b      	ldr	r3, [r7, #32]
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d803      	bhi.n	8005ecc <HAL_SPI_TransmitReceive+0x3c2>
 8005ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005eca:	d102      	bne.n	8005ed2 <HAL_SPI_TransmitReceive+0x3c8>
 8005ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d109      	bne.n	8005ee6 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	e02c      	b.n	8005f40 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f47f af55 	bne.w	8005d9c <HAL_SPI_TransmitReceive+0x292>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	f47f af4e 	bne.w	8005d9c <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f00:	6a3a      	ldr	r2, [r7, #32]
 8005f02:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005f04:	68f8      	ldr	r0, [r7, #12]
 8005f06:	f000 f995 	bl	8006234 <SPI_EndRxTxTransaction>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d008      	beq.n	8005f22 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2220      	movs	r2, #32
 8005f14:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e00e      	b.n	8005f40 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d001      	beq.n	8005f3e <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e000      	b.n	8005f40 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
  }
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3728      	adds	r7, #40	@ 0x28
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b088      	sub	sp, #32
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	603b      	str	r3, [r7, #0]
 8005f54:	4613      	mov	r3, r2
 8005f56:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005f58:	f7fb fe3e 	bl	8001bd8 <HAL_GetTick>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f60:	1a9b      	subs	r3, r3, r2
 8005f62:	683a      	ldr	r2, [r7, #0]
 8005f64:	4413      	add	r3, r2
 8005f66:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005f68:	f7fb fe36 	bl	8001bd8 <HAL_GetTick>
 8005f6c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005f6e:	4b39      	ldr	r3, [pc, #228]	@ (8006054 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	015b      	lsls	r3, r3, #5
 8005f74:	0d1b      	lsrs	r3, r3, #20
 8005f76:	69fa      	ldr	r2, [r7, #28]
 8005f78:	fb02 f303 	mul.w	r3, r2, r3
 8005f7c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f7e:	e054      	b.n	800602a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f86:	d050      	beq.n	800602a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f88:	f7fb fe26 	bl	8001bd8 <HAL_GetTick>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	69fa      	ldr	r2, [r7, #28]
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d902      	bls.n	8005f9e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d13d      	bne.n	800601a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	685a      	ldr	r2, [r3, #4]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005fac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005fb6:	d111      	bne.n	8005fdc <SPI_WaitFlagStateUntilTimeout+0x94>
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fc0:	d004      	beq.n	8005fcc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fca:	d107      	bne.n	8005fdc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005fda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fe0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fe4:	d10f      	bne.n	8006006 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005ff4:	601a      	str	r2, [r3, #0]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006004:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2201      	movs	r2, #1
 800600a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2200      	movs	r2, #0
 8006012:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006016:	2303      	movs	r3, #3
 8006018:	e017      	b.n	800604a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d101      	bne.n	8006024 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006020:	2300      	movs	r3, #0
 8006022:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	3b01      	subs	r3, #1
 8006028:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	689a      	ldr	r2, [r3, #8]
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	4013      	ands	r3, r2
 8006034:	68ba      	ldr	r2, [r7, #8]
 8006036:	429a      	cmp	r2, r3
 8006038:	bf0c      	ite	eq
 800603a:	2301      	moveq	r3, #1
 800603c:	2300      	movne	r3, #0
 800603e:	b2db      	uxtb	r3, r3
 8006040:	461a      	mov	r2, r3
 8006042:	79fb      	ldrb	r3, [r7, #7]
 8006044:	429a      	cmp	r2, r3
 8006046:	d19b      	bne.n	8005f80 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006048:	2300      	movs	r3, #0
}
 800604a:	4618      	mov	r0, r3
 800604c:	3720      	adds	r7, #32
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	20000004 	.word	0x20000004

08006058 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b08a      	sub	sp, #40	@ 0x28
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	607a      	str	r2, [r7, #4]
 8006064:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006066:	2300      	movs	r3, #0
 8006068:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800606a:	f7fb fdb5 	bl	8001bd8 <HAL_GetTick>
 800606e:	4602      	mov	r2, r0
 8006070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006072:	1a9b      	subs	r3, r3, r2
 8006074:	683a      	ldr	r2, [r7, #0]
 8006076:	4413      	add	r3, r2
 8006078:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800607a:	f7fb fdad 	bl	8001bd8 <HAL_GetTick>
 800607e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	330c      	adds	r3, #12
 8006086:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006088:	4b3d      	ldr	r3, [pc, #244]	@ (8006180 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	4613      	mov	r3, r2
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	4413      	add	r3, r2
 8006092:	00da      	lsls	r2, r3, #3
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	0d1b      	lsrs	r3, r3, #20
 8006098:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800609a:	fb02 f303 	mul.w	r3, r2, r3
 800609e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80060a0:	e060      	b.n	8006164 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80060a8:	d107      	bne.n	80060ba <SPI_WaitFifoStateUntilTimeout+0x62>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d104      	bne.n	80060ba <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80060b8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80060c0:	d050      	beq.n	8006164 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80060c2:	f7fb fd89 	bl	8001bd8 <HAL_GetTick>
 80060c6:	4602      	mov	r2, r0
 80060c8:	6a3b      	ldr	r3, [r7, #32]
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d902      	bls.n	80060d8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80060d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d13d      	bne.n	8006154 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	685a      	ldr	r2, [r3, #4]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80060e6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060f0:	d111      	bne.n	8006116 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060fa:	d004      	beq.n	8006106 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006104:	d107      	bne.n	8006116 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006114:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800611a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800611e:	d10f      	bne.n	8006140 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800612e:	601a      	str	r2, [r3, #0]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800613e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2200      	movs	r2, #0
 800614c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006150:	2303      	movs	r3, #3
 8006152:	e010      	b.n	8006176 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d101      	bne.n	800615e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800615a:	2300      	movs	r3, #0
 800615c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	3b01      	subs	r3, #1
 8006162:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	689a      	ldr	r2, [r3, #8]
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	4013      	ands	r3, r2
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	429a      	cmp	r2, r3
 8006172:	d196      	bne.n	80060a2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3728      	adds	r7, #40	@ 0x28
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	20000004 	.word	0x20000004

08006184 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b086      	sub	sp, #24
 8006188:	af02      	add	r7, sp, #8
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006198:	d111      	bne.n	80061be <SPI_EndRxTransaction+0x3a>
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061a2:	d004      	beq.n	80061ae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061ac:	d107      	bne.n	80061be <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80061bc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	9300      	str	r3, [sp, #0]
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	2200      	movs	r2, #0
 80061c6:	2180      	movs	r1, #128	@ 0x80
 80061c8:	68f8      	ldr	r0, [r7, #12]
 80061ca:	f7ff febd 	bl	8005f48 <SPI_WaitFlagStateUntilTimeout>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d007      	beq.n	80061e4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061d8:	f043 0220 	orr.w	r2, r3, #32
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80061e0:	2303      	movs	r3, #3
 80061e2:	e023      	b.n	800622c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80061ec:	d11d      	bne.n	800622a <SPI_EndRxTransaction+0xa6>
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061f6:	d004      	beq.n	8006202 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006200:	d113      	bne.n	800622a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	9300      	str	r3, [sp, #0]
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	2200      	movs	r2, #0
 800620a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800620e:	68f8      	ldr	r0, [r7, #12]
 8006210:	f7ff ff22 	bl	8006058 <SPI_WaitFifoStateUntilTimeout>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d007      	beq.n	800622a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800621e:	f043 0220 	orr.w	r2, r3, #32
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8006226:	2303      	movs	r3, #3
 8006228:	e000      	b.n	800622c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800622a:	2300      	movs	r3, #0
}
 800622c:	4618      	mov	r0, r3
 800622e:	3710      	adds	r7, #16
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b086      	sub	sp, #24
 8006238:	af02      	add	r7, sp, #8
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	9300      	str	r3, [sp, #0]
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	2200      	movs	r2, #0
 8006248:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800624c:	68f8      	ldr	r0, [r7, #12]
 800624e:	f7ff ff03 	bl	8006058 <SPI_WaitFifoStateUntilTimeout>
 8006252:	4603      	mov	r3, r0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d007      	beq.n	8006268 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800625c:	f043 0220 	orr.w	r2, r3, #32
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006264:	2303      	movs	r3, #3
 8006266:	e027      	b.n	80062b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	9300      	str	r3, [sp, #0]
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	2200      	movs	r2, #0
 8006270:	2180      	movs	r1, #128	@ 0x80
 8006272:	68f8      	ldr	r0, [r7, #12]
 8006274:	f7ff fe68 	bl	8005f48 <SPI_WaitFlagStateUntilTimeout>
 8006278:	4603      	mov	r3, r0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d007      	beq.n	800628e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006282:	f043 0220 	orr.w	r2, r3, #32
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	e014      	b.n	80062b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	9300      	str	r3, [sp, #0]
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	2200      	movs	r2, #0
 8006296:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800629a:	68f8      	ldr	r0, [r7, #12]
 800629c:	f7ff fedc 	bl	8006058 <SPI_WaitFifoStateUntilTimeout>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d007      	beq.n	80062b6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062aa:	f043 0220 	orr.w	r2, r3, #32
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80062b2:	2303      	movs	r3, #3
 80062b4:	e000      	b.n	80062b8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80062b6:	2300      	movs	r3, #0
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3710      	adds	r7, #16
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <__cvt>:
 80062c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062c4:	ec57 6b10 	vmov	r6, r7, d0
 80062c8:	2f00      	cmp	r7, #0
 80062ca:	460c      	mov	r4, r1
 80062cc:	4619      	mov	r1, r3
 80062ce:	463b      	mov	r3, r7
 80062d0:	bfbb      	ittet	lt
 80062d2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80062d6:	461f      	movlt	r7, r3
 80062d8:	2300      	movge	r3, #0
 80062da:	232d      	movlt	r3, #45	@ 0x2d
 80062dc:	700b      	strb	r3, [r1, #0]
 80062de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80062e0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80062e4:	4691      	mov	r9, r2
 80062e6:	f023 0820 	bic.w	r8, r3, #32
 80062ea:	bfbc      	itt	lt
 80062ec:	4632      	movlt	r2, r6
 80062ee:	4616      	movlt	r6, r2
 80062f0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80062f4:	d005      	beq.n	8006302 <__cvt+0x42>
 80062f6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80062fa:	d100      	bne.n	80062fe <__cvt+0x3e>
 80062fc:	3401      	adds	r4, #1
 80062fe:	2102      	movs	r1, #2
 8006300:	e000      	b.n	8006304 <__cvt+0x44>
 8006302:	2103      	movs	r1, #3
 8006304:	ab03      	add	r3, sp, #12
 8006306:	9301      	str	r3, [sp, #4]
 8006308:	ab02      	add	r3, sp, #8
 800630a:	9300      	str	r3, [sp, #0]
 800630c:	ec47 6b10 	vmov	d0, r6, r7
 8006310:	4653      	mov	r3, sl
 8006312:	4622      	mov	r2, r4
 8006314:	f000 fdd0 	bl	8006eb8 <_dtoa_r>
 8006318:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800631c:	4605      	mov	r5, r0
 800631e:	d119      	bne.n	8006354 <__cvt+0x94>
 8006320:	f019 0f01 	tst.w	r9, #1
 8006324:	d00e      	beq.n	8006344 <__cvt+0x84>
 8006326:	eb00 0904 	add.w	r9, r0, r4
 800632a:	2200      	movs	r2, #0
 800632c:	2300      	movs	r3, #0
 800632e:	4630      	mov	r0, r6
 8006330:	4639      	mov	r1, r7
 8006332:	f7fa fbc9 	bl	8000ac8 <__aeabi_dcmpeq>
 8006336:	b108      	cbz	r0, 800633c <__cvt+0x7c>
 8006338:	f8cd 900c 	str.w	r9, [sp, #12]
 800633c:	2230      	movs	r2, #48	@ 0x30
 800633e:	9b03      	ldr	r3, [sp, #12]
 8006340:	454b      	cmp	r3, r9
 8006342:	d31e      	bcc.n	8006382 <__cvt+0xc2>
 8006344:	9b03      	ldr	r3, [sp, #12]
 8006346:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006348:	1b5b      	subs	r3, r3, r5
 800634a:	4628      	mov	r0, r5
 800634c:	6013      	str	r3, [r2, #0]
 800634e:	b004      	add	sp, #16
 8006350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006354:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006358:	eb00 0904 	add.w	r9, r0, r4
 800635c:	d1e5      	bne.n	800632a <__cvt+0x6a>
 800635e:	7803      	ldrb	r3, [r0, #0]
 8006360:	2b30      	cmp	r3, #48	@ 0x30
 8006362:	d10a      	bne.n	800637a <__cvt+0xba>
 8006364:	2200      	movs	r2, #0
 8006366:	2300      	movs	r3, #0
 8006368:	4630      	mov	r0, r6
 800636a:	4639      	mov	r1, r7
 800636c:	f7fa fbac 	bl	8000ac8 <__aeabi_dcmpeq>
 8006370:	b918      	cbnz	r0, 800637a <__cvt+0xba>
 8006372:	f1c4 0401 	rsb	r4, r4, #1
 8006376:	f8ca 4000 	str.w	r4, [sl]
 800637a:	f8da 3000 	ldr.w	r3, [sl]
 800637e:	4499      	add	r9, r3
 8006380:	e7d3      	b.n	800632a <__cvt+0x6a>
 8006382:	1c59      	adds	r1, r3, #1
 8006384:	9103      	str	r1, [sp, #12]
 8006386:	701a      	strb	r2, [r3, #0]
 8006388:	e7d9      	b.n	800633e <__cvt+0x7e>

0800638a <__exponent>:
 800638a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800638c:	2900      	cmp	r1, #0
 800638e:	bfba      	itte	lt
 8006390:	4249      	neglt	r1, r1
 8006392:	232d      	movlt	r3, #45	@ 0x2d
 8006394:	232b      	movge	r3, #43	@ 0x2b
 8006396:	2909      	cmp	r1, #9
 8006398:	7002      	strb	r2, [r0, #0]
 800639a:	7043      	strb	r3, [r0, #1]
 800639c:	dd29      	ble.n	80063f2 <__exponent+0x68>
 800639e:	f10d 0307 	add.w	r3, sp, #7
 80063a2:	461d      	mov	r5, r3
 80063a4:	270a      	movs	r7, #10
 80063a6:	461a      	mov	r2, r3
 80063a8:	fbb1 f6f7 	udiv	r6, r1, r7
 80063ac:	fb07 1416 	mls	r4, r7, r6, r1
 80063b0:	3430      	adds	r4, #48	@ 0x30
 80063b2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80063b6:	460c      	mov	r4, r1
 80063b8:	2c63      	cmp	r4, #99	@ 0x63
 80063ba:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80063be:	4631      	mov	r1, r6
 80063c0:	dcf1      	bgt.n	80063a6 <__exponent+0x1c>
 80063c2:	3130      	adds	r1, #48	@ 0x30
 80063c4:	1e94      	subs	r4, r2, #2
 80063c6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80063ca:	1c41      	adds	r1, r0, #1
 80063cc:	4623      	mov	r3, r4
 80063ce:	42ab      	cmp	r3, r5
 80063d0:	d30a      	bcc.n	80063e8 <__exponent+0x5e>
 80063d2:	f10d 0309 	add.w	r3, sp, #9
 80063d6:	1a9b      	subs	r3, r3, r2
 80063d8:	42ac      	cmp	r4, r5
 80063da:	bf88      	it	hi
 80063dc:	2300      	movhi	r3, #0
 80063de:	3302      	adds	r3, #2
 80063e0:	4403      	add	r3, r0
 80063e2:	1a18      	subs	r0, r3, r0
 80063e4:	b003      	add	sp, #12
 80063e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063e8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80063ec:	f801 6f01 	strb.w	r6, [r1, #1]!
 80063f0:	e7ed      	b.n	80063ce <__exponent+0x44>
 80063f2:	2330      	movs	r3, #48	@ 0x30
 80063f4:	3130      	adds	r1, #48	@ 0x30
 80063f6:	7083      	strb	r3, [r0, #2]
 80063f8:	70c1      	strb	r1, [r0, #3]
 80063fa:	1d03      	adds	r3, r0, #4
 80063fc:	e7f1      	b.n	80063e2 <__exponent+0x58>
	...

08006400 <_printf_float>:
 8006400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006404:	b08d      	sub	sp, #52	@ 0x34
 8006406:	460c      	mov	r4, r1
 8006408:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800640c:	4616      	mov	r6, r2
 800640e:	461f      	mov	r7, r3
 8006410:	4605      	mov	r5, r0
 8006412:	f000 fcc5 	bl	8006da0 <_localeconv_r>
 8006416:	6803      	ldr	r3, [r0, #0]
 8006418:	9304      	str	r3, [sp, #16]
 800641a:	4618      	mov	r0, r3
 800641c:	f7f9 ff28 	bl	8000270 <strlen>
 8006420:	2300      	movs	r3, #0
 8006422:	930a      	str	r3, [sp, #40]	@ 0x28
 8006424:	f8d8 3000 	ldr.w	r3, [r8]
 8006428:	9005      	str	r0, [sp, #20]
 800642a:	3307      	adds	r3, #7
 800642c:	f023 0307 	bic.w	r3, r3, #7
 8006430:	f103 0208 	add.w	r2, r3, #8
 8006434:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006438:	f8d4 b000 	ldr.w	fp, [r4]
 800643c:	f8c8 2000 	str.w	r2, [r8]
 8006440:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006444:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006448:	9307      	str	r3, [sp, #28]
 800644a:	f8cd 8018 	str.w	r8, [sp, #24]
 800644e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006452:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006456:	4b9c      	ldr	r3, [pc, #624]	@ (80066c8 <_printf_float+0x2c8>)
 8006458:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800645c:	f7fa fb66 	bl	8000b2c <__aeabi_dcmpun>
 8006460:	bb70      	cbnz	r0, 80064c0 <_printf_float+0xc0>
 8006462:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006466:	4b98      	ldr	r3, [pc, #608]	@ (80066c8 <_printf_float+0x2c8>)
 8006468:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800646c:	f7fa fb40 	bl	8000af0 <__aeabi_dcmple>
 8006470:	bb30      	cbnz	r0, 80064c0 <_printf_float+0xc0>
 8006472:	2200      	movs	r2, #0
 8006474:	2300      	movs	r3, #0
 8006476:	4640      	mov	r0, r8
 8006478:	4649      	mov	r1, r9
 800647a:	f7fa fb2f 	bl	8000adc <__aeabi_dcmplt>
 800647e:	b110      	cbz	r0, 8006486 <_printf_float+0x86>
 8006480:	232d      	movs	r3, #45	@ 0x2d
 8006482:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006486:	4a91      	ldr	r2, [pc, #580]	@ (80066cc <_printf_float+0x2cc>)
 8006488:	4b91      	ldr	r3, [pc, #580]	@ (80066d0 <_printf_float+0x2d0>)
 800648a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800648e:	bf8c      	ite	hi
 8006490:	4690      	movhi	r8, r2
 8006492:	4698      	movls	r8, r3
 8006494:	2303      	movs	r3, #3
 8006496:	6123      	str	r3, [r4, #16]
 8006498:	f02b 0304 	bic.w	r3, fp, #4
 800649c:	6023      	str	r3, [r4, #0]
 800649e:	f04f 0900 	mov.w	r9, #0
 80064a2:	9700      	str	r7, [sp, #0]
 80064a4:	4633      	mov	r3, r6
 80064a6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80064a8:	4621      	mov	r1, r4
 80064aa:	4628      	mov	r0, r5
 80064ac:	f000 f9d2 	bl	8006854 <_printf_common>
 80064b0:	3001      	adds	r0, #1
 80064b2:	f040 808d 	bne.w	80065d0 <_printf_float+0x1d0>
 80064b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80064ba:	b00d      	add	sp, #52	@ 0x34
 80064bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064c0:	4642      	mov	r2, r8
 80064c2:	464b      	mov	r3, r9
 80064c4:	4640      	mov	r0, r8
 80064c6:	4649      	mov	r1, r9
 80064c8:	f7fa fb30 	bl	8000b2c <__aeabi_dcmpun>
 80064cc:	b140      	cbz	r0, 80064e0 <_printf_float+0xe0>
 80064ce:	464b      	mov	r3, r9
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	bfbc      	itt	lt
 80064d4:	232d      	movlt	r3, #45	@ 0x2d
 80064d6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80064da:	4a7e      	ldr	r2, [pc, #504]	@ (80066d4 <_printf_float+0x2d4>)
 80064dc:	4b7e      	ldr	r3, [pc, #504]	@ (80066d8 <_printf_float+0x2d8>)
 80064de:	e7d4      	b.n	800648a <_printf_float+0x8a>
 80064e0:	6863      	ldr	r3, [r4, #4]
 80064e2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80064e6:	9206      	str	r2, [sp, #24]
 80064e8:	1c5a      	adds	r2, r3, #1
 80064ea:	d13b      	bne.n	8006564 <_printf_float+0x164>
 80064ec:	2306      	movs	r3, #6
 80064ee:	6063      	str	r3, [r4, #4]
 80064f0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80064f4:	2300      	movs	r3, #0
 80064f6:	6022      	str	r2, [r4, #0]
 80064f8:	9303      	str	r3, [sp, #12]
 80064fa:	ab0a      	add	r3, sp, #40	@ 0x28
 80064fc:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006500:	ab09      	add	r3, sp, #36	@ 0x24
 8006502:	9300      	str	r3, [sp, #0]
 8006504:	6861      	ldr	r1, [r4, #4]
 8006506:	ec49 8b10 	vmov	d0, r8, r9
 800650a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800650e:	4628      	mov	r0, r5
 8006510:	f7ff fed6 	bl	80062c0 <__cvt>
 8006514:	9b06      	ldr	r3, [sp, #24]
 8006516:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006518:	2b47      	cmp	r3, #71	@ 0x47
 800651a:	4680      	mov	r8, r0
 800651c:	d129      	bne.n	8006572 <_printf_float+0x172>
 800651e:	1cc8      	adds	r0, r1, #3
 8006520:	db02      	blt.n	8006528 <_printf_float+0x128>
 8006522:	6863      	ldr	r3, [r4, #4]
 8006524:	4299      	cmp	r1, r3
 8006526:	dd41      	ble.n	80065ac <_printf_float+0x1ac>
 8006528:	f1aa 0a02 	sub.w	sl, sl, #2
 800652c:	fa5f fa8a 	uxtb.w	sl, sl
 8006530:	3901      	subs	r1, #1
 8006532:	4652      	mov	r2, sl
 8006534:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006538:	9109      	str	r1, [sp, #36]	@ 0x24
 800653a:	f7ff ff26 	bl	800638a <__exponent>
 800653e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006540:	1813      	adds	r3, r2, r0
 8006542:	2a01      	cmp	r2, #1
 8006544:	4681      	mov	r9, r0
 8006546:	6123      	str	r3, [r4, #16]
 8006548:	dc02      	bgt.n	8006550 <_printf_float+0x150>
 800654a:	6822      	ldr	r2, [r4, #0]
 800654c:	07d2      	lsls	r2, r2, #31
 800654e:	d501      	bpl.n	8006554 <_printf_float+0x154>
 8006550:	3301      	adds	r3, #1
 8006552:	6123      	str	r3, [r4, #16]
 8006554:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006558:	2b00      	cmp	r3, #0
 800655a:	d0a2      	beq.n	80064a2 <_printf_float+0xa2>
 800655c:	232d      	movs	r3, #45	@ 0x2d
 800655e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006562:	e79e      	b.n	80064a2 <_printf_float+0xa2>
 8006564:	9a06      	ldr	r2, [sp, #24]
 8006566:	2a47      	cmp	r2, #71	@ 0x47
 8006568:	d1c2      	bne.n	80064f0 <_printf_float+0xf0>
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1c0      	bne.n	80064f0 <_printf_float+0xf0>
 800656e:	2301      	movs	r3, #1
 8006570:	e7bd      	b.n	80064ee <_printf_float+0xee>
 8006572:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006576:	d9db      	bls.n	8006530 <_printf_float+0x130>
 8006578:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800657c:	d118      	bne.n	80065b0 <_printf_float+0x1b0>
 800657e:	2900      	cmp	r1, #0
 8006580:	6863      	ldr	r3, [r4, #4]
 8006582:	dd0b      	ble.n	800659c <_printf_float+0x19c>
 8006584:	6121      	str	r1, [r4, #16]
 8006586:	b913      	cbnz	r3, 800658e <_printf_float+0x18e>
 8006588:	6822      	ldr	r2, [r4, #0]
 800658a:	07d0      	lsls	r0, r2, #31
 800658c:	d502      	bpl.n	8006594 <_printf_float+0x194>
 800658e:	3301      	adds	r3, #1
 8006590:	440b      	add	r3, r1
 8006592:	6123      	str	r3, [r4, #16]
 8006594:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006596:	f04f 0900 	mov.w	r9, #0
 800659a:	e7db      	b.n	8006554 <_printf_float+0x154>
 800659c:	b913      	cbnz	r3, 80065a4 <_printf_float+0x1a4>
 800659e:	6822      	ldr	r2, [r4, #0]
 80065a0:	07d2      	lsls	r2, r2, #31
 80065a2:	d501      	bpl.n	80065a8 <_printf_float+0x1a8>
 80065a4:	3302      	adds	r3, #2
 80065a6:	e7f4      	b.n	8006592 <_printf_float+0x192>
 80065a8:	2301      	movs	r3, #1
 80065aa:	e7f2      	b.n	8006592 <_printf_float+0x192>
 80065ac:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80065b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065b2:	4299      	cmp	r1, r3
 80065b4:	db05      	blt.n	80065c2 <_printf_float+0x1c2>
 80065b6:	6823      	ldr	r3, [r4, #0]
 80065b8:	6121      	str	r1, [r4, #16]
 80065ba:	07d8      	lsls	r0, r3, #31
 80065bc:	d5ea      	bpl.n	8006594 <_printf_float+0x194>
 80065be:	1c4b      	adds	r3, r1, #1
 80065c0:	e7e7      	b.n	8006592 <_printf_float+0x192>
 80065c2:	2900      	cmp	r1, #0
 80065c4:	bfd4      	ite	le
 80065c6:	f1c1 0202 	rsble	r2, r1, #2
 80065ca:	2201      	movgt	r2, #1
 80065cc:	4413      	add	r3, r2
 80065ce:	e7e0      	b.n	8006592 <_printf_float+0x192>
 80065d0:	6823      	ldr	r3, [r4, #0]
 80065d2:	055a      	lsls	r2, r3, #21
 80065d4:	d407      	bmi.n	80065e6 <_printf_float+0x1e6>
 80065d6:	6923      	ldr	r3, [r4, #16]
 80065d8:	4642      	mov	r2, r8
 80065da:	4631      	mov	r1, r6
 80065dc:	4628      	mov	r0, r5
 80065de:	47b8      	blx	r7
 80065e0:	3001      	adds	r0, #1
 80065e2:	d12b      	bne.n	800663c <_printf_float+0x23c>
 80065e4:	e767      	b.n	80064b6 <_printf_float+0xb6>
 80065e6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80065ea:	f240 80dd 	bls.w	80067a8 <_printf_float+0x3a8>
 80065ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80065f2:	2200      	movs	r2, #0
 80065f4:	2300      	movs	r3, #0
 80065f6:	f7fa fa67 	bl	8000ac8 <__aeabi_dcmpeq>
 80065fa:	2800      	cmp	r0, #0
 80065fc:	d033      	beq.n	8006666 <_printf_float+0x266>
 80065fe:	4a37      	ldr	r2, [pc, #220]	@ (80066dc <_printf_float+0x2dc>)
 8006600:	2301      	movs	r3, #1
 8006602:	4631      	mov	r1, r6
 8006604:	4628      	mov	r0, r5
 8006606:	47b8      	blx	r7
 8006608:	3001      	adds	r0, #1
 800660a:	f43f af54 	beq.w	80064b6 <_printf_float+0xb6>
 800660e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006612:	4543      	cmp	r3, r8
 8006614:	db02      	blt.n	800661c <_printf_float+0x21c>
 8006616:	6823      	ldr	r3, [r4, #0]
 8006618:	07d8      	lsls	r0, r3, #31
 800661a:	d50f      	bpl.n	800663c <_printf_float+0x23c>
 800661c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006620:	4631      	mov	r1, r6
 8006622:	4628      	mov	r0, r5
 8006624:	47b8      	blx	r7
 8006626:	3001      	adds	r0, #1
 8006628:	f43f af45 	beq.w	80064b6 <_printf_float+0xb6>
 800662c:	f04f 0900 	mov.w	r9, #0
 8006630:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8006634:	f104 0a1a 	add.w	sl, r4, #26
 8006638:	45c8      	cmp	r8, r9
 800663a:	dc09      	bgt.n	8006650 <_printf_float+0x250>
 800663c:	6823      	ldr	r3, [r4, #0]
 800663e:	079b      	lsls	r3, r3, #30
 8006640:	f100 8103 	bmi.w	800684a <_printf_float+0x44a>
 8006644:	68e0      	ldr	r0, [r4, #12]
 8006646:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006648:	4298      	cmp	r0, r3
 800664a:	bfb8      	it	lt
 800664c:	4618      	movlt	r0, r3
 800664e:	e734      	b.n	80064ba <_printf_float+0xba>
 8006650:	2301      	movs	r3, #1
 8006652:	4652      	mov	r2, sl
 8006654:	4631      	mov	r1, r6
 8006656:	4628      	mov	r0, r5
 8006658:	47b8      	blx	r7
 800665a:	3001      	adds	r0, #1
 800665c:	f43f af2b 	beq.w	80064b6 <_printf_float+0xb6>
 8006660:	f109 0901 	add.w	r9, r9, #1
 8006664:	e7e8      	b.n	8006638 <_printf_float+0x238>
 8006666:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006668:	2b00      	cmp	r3, #0
 800666a:	dc39      	bgt.n	80066e0 <_printf_float+0x2e0>
 800666c:	4a1b      	ldr	r2, [pc, #108]	@ (80066dc <_printf_float+0x2dc>)
 800666e:	2301      	movs	r3, #1
 8006670:	4631      	mov	r1, r6
 8006672:	4628      	mov	r0, r5
 8006674:	47b8      	blx	r7
 8006676:	3001      	adds	r0, #1
 8006678:	f43f af1d 	beq.w	80064b6 <_printf_float+0xb6>
 800667c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006680:	ea59 0303 	orrs.w	r3, r9, r3
 8006684:	d102      	bne.n	800668c <_printf_float+0x28c>
 8006686:	6823      	ldr	r3, [r4, #0]
 8006688:	07d9      	lsls	r1, r3, #31
 800668a:	d5d7      	bpl.n	800663c <_printf_float+0x23c>
 800668c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006690:	4631      	mov	r1, r6
 8006692:	4628      	mov	r0, r5
 8006694:	47b8      	blx	r7
 8006696:	3001      	adds	r0, #1
 8006698:	f43f af0d 	beq.w	80064b6 <_printf_float+0xb6>
 800669c:	f04f 0a00 	mov.w	sl, #0
 80066a0:	f104 0b1a 	add.w	fp, r4, #26
 80066a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066a6:	425b      	negs	r3, r3
 80066a8:	4553      	cmp	r3, sl
 80066aa:	dc01      	bgt.n	80066b0 <_printf_float+0x2b0>
 80066ac:	464b      	mov	r3, r9
 80066ae:	e793      	b.n	80065d8 <_printf_float+0x1d8>
 80066b0:	2301      	movs	r3, #1
 80066b2:	465a      	mov	r2, fp
 80066b4:	4631      	mov	r1, r6
 80066b6:	4628      	mov	r0, r5
 80066b8:	47b8      	blx	r7
 80066ba:	3001      	adds	r0, #1
 80066bc:	f43f aefb 	beq.w	80064b6 <_printf_float+0xb6>
 80066c0:	f10a 0a01 	add.w	sl, sl, #1
 80066c4:	e7ee      	b.n	80066a4 <_printf_float+0x2a4>
 80066c6:	bf00      	nop
 80066c8:	7fefffff 	.word	0x7fefffff
 80066cc:	08009024 	.word	0x08009024
 80066d0:	08009020 	.word	0x08009020
 80066d4:	0800902c 	.word	0x0800902c
 80066d8:	08009028 	.word	0x08009028
 80066dc:	08009030 	.word	0x08009030
 80066e0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80066e2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80066e6:	4553      	cmp	r3, sl
 80066e8:	bfa8      	it	ge
 80066ea:	4653      	movge	r3, sl
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	4699      	mov	r9, r3
 80066f0:	dc36      	bgt.n	8006760 <_printf_float+0x360>
 80066f2:	f04f 0b00 	mov.w	fp, #0
 80066f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066fa:	f104 021a 	add.w	r2, r4, #26
 80066fe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006700:	9306      	str	r3, [sp, #24]
 8006702:	eba3 0309 	sub.w	r3, r3, r9
 8006706:	455b      	cmp	r3, fp
 8006708:	dc31      	bgt.n	800676e <_printf_float+0x36e>
 800670a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800670c:	459a      	cmp	sl, r3
 800670e:	dc3a      	bgt.n	8006786 <_printf_float+0x386>
 8006710:	6823      	ldr	r3, [r4, #0]
 8006712:	07da      	lsls	r2, r3, #31
 8006714:	d437      	bmi.n	8006786 <_printf_float+0x386>
 8006716:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006718:	ebaa 0903 	sub.w	r9, sl, r3
 800671c:	9b06      	ldr	r3, [sp, #24]
 800671e:	ebaa 0303 	sub.w	r3, sl, r3
 8006722:	4599      	cmp	r9, r3
 8006724:	bfa8      	it	ge
 8006726:	4699      	movge	r9, r3
 8006728:	f1b9 0f00 	cmp.w	r9, #0
 800672c:	dc33      	bgt.n	8006796 <_printf_float+0x396>
 800672e:	f04f 0800 	mov.w	r8, #0
 8006732:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006736:	f104 0b1a 	add.w	fp, r4, #26
 800673a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800673c:	ebaa 0303 	sub.w	r3, sl, r3
 8006740:	eba3 0309 	sub.w	r3, r3, r9
 8006744:	4543      	cmp	r3, r8
 8006746:	f77f af79 	ble.w	800663c <_printf_float+0x23c>
 800674a:	2301      	movs	r3, #1
 800674c:	465a      	mov	r2, fp
 800674e:	4631      	mov	r1, r6
 8006750:	4628      	mov	r0, r5
 8006752:	47b8      	blx	r7
 8006754:	3001      	adds	r0, #1
 8006756:	f43f aeae 	beq.w	80064b6 <_printf_float+0xb6>
 800675a:	f108 0801 	add.w	r8, r8, #1
 800675e:	e7ec      	b.n	800673a <_printf_float+0x33a>
 8006760:	4642      	mov	r2, r8
 8006762:	4631      	mov	r1, r6
 8006764:	4628      	mov	r0, r5
 8006766:	47b8      	blx	r7
 8006768:	3001      	adds	r0, #1
 800676a:	d1c2      	bne.n	80066f2 <_printf_float+0x2f2>
 800676c:	e6a3      	b.n	80064b6 <_printf_float+0xb6>
 800676e:	2301      	movs	r3, #1
 8006770:	4631      	mov	r1, r6
 8006772:	4628      	mov	r0, r5
 8006774:	9206      	str	r2, [sp, #24]
 8006776:	47b8      	blx	r7
 8006778:	3001      	adds	r0, #1
 800677a:	f43f ae9c 	beq.w	80064b6 <_printf_float+0xb6>
 800677e:	9a06      	ldr	r2, [sp, #24]
 8006780:	f10b 0b01 	add.w	fp, fp, #1
 8006784:	e7bb      	b.n	80066fe <_printf_float+0x2fe>
 8006786:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800678a:	4631      	mov	r1, r6
 800678c:	4628      	mov	r0, r5
 800678e:	47b8      	blx	r7
 8006790:	3001      	adds	r0, #1
 8006792:	d1c0      	bne.n	8006716 <_printf_float+0x316>
 8006794:	e68f      	b.n	80064b6 <_printf_float+0xb6>
 8006796:	9a06      	ldr	r2, [sp, #24]
 8006798:	464b      	mov	r3, r9
 800679a:	4442      	add	r2, r8
 800679c:	4631      	mov	r1, r6
 800679e:	4628      	mov	r0, r5
 80067a0:	47b8      	blx	r7
 80067a2:	3001      	adds	r0, #1
 80067a4:	d1c3      	bne.n	800672e <_printf_float+0x32e>
 80067a6:	e686      	b.n	80064b6 <_printf_float+0xb6>
 80067a8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80067ac:	f1ba 0f01 	cmp.w	sl, #1
 80067b0:	dc01      	bgt.n	80067b6 <_printf_float+0x3b6>
 80067b2:	07db      	lsls	r3, r3, #31
 80067b4:	d536      	bpl.n	8006824 <_printf_float+0x424>
 80067b6:	2301      	movs	r3, #1
 80067b8:	4642      	mov	r2, r8
 80067ba:	4631      	mov	r1, r6
 80067bc:	4628      	mov	r0, r5
 80067be:	47b8      	blx	r7
 80067c0:	3001      	adds	r0, #1
 80067c2:	f43f ae78 	beq.w	80064b6 <_printf_float+0xb6>
 80067c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067ca:	4631      	mov	r1, r6
 80067cc:	4628      	mov	r0, r5
 80067ce:	47b8      	blx	r7
 80067d0:	3001      	adds	r0, #1
 80067d2:	f43f ae70 	beq.w	80064b6 <_printf_float+0xb6>
 80067d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80067da:	2200      	movs	r2, #0
 80067dc:	2300      	movs	r3, #0
 80067de:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80067e2:	f7fa f971 	bl	8000ac8 <__aeabi_dcmpeq>
 80067e6:	b9c0      	cbnz	r0, 800681a <_printf_float+0x41a>
 80067e8:	4653      	mov	r3, sl
 80067ea:	f108 0201 	add.w	r2, r8, #1
 80067ee:	4631      	mov	r1, r6
 80067f0:	4628      	mov	r0, r5
 80067f2:	47b8      	blx	r7
 80067f4:	3001      	adds	r0, #1
 80067f6:	d10c      	bne.n	8006812 <_printf_float+0x412>
 80067f8:	e65d      	b.n	80064b6 <_printf_float+0xb6>
 80067fa:	2301      	movs	r3, #1
 80067fc:	465a      	mov	r2, fp
 80067fe:	4631      	mov	r1, r6
 8006800:	4628      	mov	r0, r5
 8006802:	47b8      	blx	r7
 8006804:	3001      	adds	r0, #1
 8006806:	f43f ae56 	beq.w	80064b6 <_printf_float+0xb6>
 800680a:	f108 0801 	add.w	r8, r8, #1
 800680e:	45d0      	cmp	r8, sl
 8006810:	dbf3      	blt.n	80067fa <_printf_float+0x3fa>
 8006812:	464b      	mov	r3, r9
 8006814:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006818:	e6df      	b.n	80065da <_printf_float+0x1da>
 800681a:	f04f 0800 	mov.w	r8, #0
 800681e:	f104 0b1a 	add.w	fp, r4, #26
 8006822:	e7f4      	b.n	800680e <_printf_float+0x40e>
 8006824:	2301      	movs	r3, #1
 8006826:	4642      	mov	r2, r8
 8006828:	e7e1      	b.n	80067ee <_printf_float+0x3ee>
 800682a:	2301      	movs	r3, #1
 800682c:	464a      	mov	r2, r9
 800682e:	4631      	mov	r1, r6
 8006830:	4628      	mov	r0, r5
 8006832:	47b8      	blx	r7
 8006834:	3001      	adds	r0, #1
 8006836:	f43f ae3e 	beq.w	80064b6 <_printf_float+0xb6>
 800683a:	f108 0801 	add.w	r8, r8, #1
 800683e:	68e3      	ldr	r3, [r4, #12]
 8006840:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006842:	1a5b      	subs	r3, r3, r1
 8006844:	4543      	cmp	r3, r8
 8006846:	dcf0      	bgt.n	800682a <_printf_float+0x42a>
 8006848:	e6fc      	b.n	8006644 <_printf_float+0x244>
 800684a:	f04f 0800 	mov.w	r8, #0
 800684e:	f104 0919 	add.w	r9, r4, #25
 8006852:	e7f4      	b.n	800683e <_printf_float+0x43e>

08006854 <_printf_common>:
 8006854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006858:	4616      	mov	r6, r2
 800685a:	4698      	mov	r8, r3
 800685c:	688a      	ldr	r2, [r1, #8]
 800685e:	690b      	ldr	r3, [r1, #16]
 8006860:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006864:	4293      	cmp	r3, r2
 8006866:	bfb8      	it	lt
 8006868:	4613      	movlt	r3, r2
 800686a:	6033      	str	r3, [r6, #0]
 800686c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006870:	4607      	mov	r7, r0
 8006872:	460c      	mov	r4, r1
 8006874:	b10a      	cbz	r2, 800687a <_printf_common+0x26>
 8006876:	3301      	adds	r3, #1
 8006878:	6033      	str	r3, [r6, #0]
 800687a:	6823      	ldr	r3, [r4, #0]
 800687c:	0699      	lsls	r1, r3, #26
 800687e:	bf42      	ittt	mi
 8006880:	6833      	ldrmi	r3, [r6, #0]
 8006882:	3302      	addmi	r3, #2
 8006884:	6033      	strmi	r3, [r6, #0]
 8006886:	6825      	ldr	r5, [r4, #0]
 8006888:	f015 0506 	ands.w	r5, r5, #6
 800688c:	d106      	bne.n	800689c <_printf_common+0x48>
 800688e:	f104 0a19 	add.w	sl, r4, #25
 8006892:	68e3      	ldr	r3, [r4, #12]
 8006894:	6832      	ldr	r2, [r6, #0]
 8006896:	1a9b      	subs	r3, r3, r2
 8006898:	42ab      	cmp	r3, r5
 800689a:	dc26      	bgt.n	80068ea <_printf_common+0x96>
 800689c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80068a0:	6822      	ldr	r2, [r4, #0]
 80068a2:	3b00      	subs	r3, #0
 80068a4:	bf18      	it	ne
 80068a6:	2301      	movne	r3, #1
 80068a8:	0692      	lsls	r2, r2, #26
 80068aa:	d42b      	bmi.n	8006904 <_printf_common+0xb0>
 80068ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80068b0:	4641      	mov	r1, r8
 80068b2:	4638      	mov	r0, r7
 80068b4:	47c8      	blx	r9
 80068b6:	3001      	adds	r0, #1
 80068b8:	d01e      	beq.n	80068f8 <_printf_common+0xa4>
 80068ba:	6823      	ldr	r3, [r4, #0]
 80068bc:	6922      	ldr	r2, [r4, #16]
 80068be:	f003 0306 	and.w	r3, r3, #6
 80068c2:	2b04      	cmp	r3, #4
 80068c4:	bf02      	ittt	eq
 80068c6:	68e5      	ldreq	r5, [r4, #12]
 80068c8:	6833      	ldreq	r3, [r6, #0]
 80068ca:	1aed      	subeq	r5, r5, r3
 80068cc:	68a3      	ldr	r3, [r4, #8]
 80068ce:	bf0c      	ite	eq
 80068d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068d4:	2500      	movne	r5, #0
 80068d6:	4293      	cmp	r3, r2
 80068d8:	bfc4      	itt	gt
 80068da:	1a9b      	subgt	r3, r3, r2
 80068dc:	18ed      	addgt	r5, r5, r3
 80068de:	2600      	movs	r6, #0
 80068e0:	341a      	adds	r4, #26
 80068e2:	42b5      	cmp	r5, r6
 80068e4:	d11a      	bne.n	800691c <_printf_common+0xc8>
 80068e6:	2000      	movs	r0, #0
 80068e8:	e008      	b.n	80068fc <_printf_common+0xa8>
 80068ea:	2301      	movs	r3, #1
 80068ec:	4652      	mov	r2, sl
 80068ee:	4641      	mov	r1, r8
 80068f0:	4638      	mov	r0, r7
 80068f2:	47c8      	blx	r9
 80068f4:	3001      	adds	r0, #1
 80068f6:	d103      	bne.n	8006900 <_printf_common+0xac>
 80068f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80068fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006900:	3501      	adds	r5, #1
 8006902:	e7c6      	b.n	8006892 <_printf_common+0x3e>
 8006904:	18e1      	adds	r1, r4, r3
 8006906:	1c5a      	adds	r2, r3, #1
 8006908:	2030      	movs	r0, #48	@ 0x30
 800690a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800690e:	4422      	add	r2, r4
 8006910:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006914:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006918:	3302      	adds	r3, #2
 800691a:	e7c7      	b.n	80068ac <_printf_common+0x58>
 800691c:	2301      	movs	r3, #1
 800691e:	4622      	mov	r2, r4
 8006920:	4641      	mov	r1, r8
 8006922:	4638      	mov	r0, r7
 8006924:	47c8      	blx	r9
 8006926:	3001      	adds	r0, #1
 8006928:	d0e6      	beq.n	80068f8 <_printf_common+0xa4>
 800692a:	3601      	adds	r6, #1
 800692c:	e7d9      	b.n	80068e2 <_printf_common+0x8e>
	...

08006930 <_printf_i>:
 8006930:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006934:	7e0f      	ldrb	r7, [r1, #24]
 8006936:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006938:	2f78      	cmp	r7, #120	@ 0x78
 800693a:	4691      	mov	r9, r2
 800693c:	4680      	mov	r8, r0
 800693e:	460c      	mov	r4, r1
 8006940:	469a      	mov	sl, r3
 8006942:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006946:	d807      	bhi.n	8006958 <_printf_i+0x28>
 8006948:	2f62      	cmp	r7, #98	@ 0x62
 800694a:	d80a      	bhi.n	8006962 <_printf_i+0x32>
 800694c:	2f00      	cmp	r7, #0
 800694e:	f000 80d1 	beq.w	8006af4 <_printf_i+0x1c4>
 8006952:	2f58      	cmp	r7, #88	@ 0x58
 8006954:	f000 80b8 	beq.w	8006ac8 <_printf_i+0x198>
 8006958:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800695c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006960:	e03a      	b.n	80069d8 <_printf_i+0xa8>
 8006962:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006966:	2b15      	cmp	r3, #21
 8006968:	d8f6      	bhi.n	8006958 <_printf_i+0x28>
 800696a:	a101      	add	r1, pc, #4	@ (adr r1, 8006970 <_printf_i+0x40>)
 800696c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006970:	080069c9 	.word	0x080069c9
 8006974:	080069dd 	.word	0x080069dd
 8006978:	08006959 	.word	0x08006959
 800697c:	08006959 	.word	0x08006959
 8006980:	08006959 	.word	0x08006959
 8006984:	08006959 	.word	0x08006959
 8006988:	080069dd 	.word	0x080069dd
 800698c:	08006959 	.word	0x08006959
 8006990:	08006959 	.word	0x08006959
 8006994:	08006959 	.word	0x08006959
 8006998:	08006959 	.word	0x08006959
 800699c:	08006adb 	.word	0x08006adb
 80069a0:	08006a07 	.word	0x08006a07
 80069a4:	08006a95 	.word	0x08006a95
 80069a8:	08006959 	.word	0x08006959
 80069ac:	08006959 	.word	0x08006959
 80069b0:	08006afd 	.word	0x08006afd
 80069b4:	08006959 	.word	0x08006959
 80069b8:	08006a07 	.word	0x08006a07
 80069bc:	08006959 	.word	0x08006959
 80069c0:	08006959 	.word	0x08006959
 80069c4:	08006a9d 	.word	0x08006a9d
 80069c8:	6833      	ldr	r3, [r6, #0]
 80069ca:	1d1a      	adds	r2, r3, #4
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	6032      	str	r2, [r6, #0]
 80069d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80069d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80069d8:	2301      	movs	r3, #1
 80069da:	e09c      	b.n	8006b16 <_printf_i+0x1e6>
 80069dc:	6833      	ldr	r3, [r6, #0]
 80069de:	6820      	ldr	r0, [r4, #0]
 80069e0:	1d19      	adds	r1, r3, #4
 80069e2:	6031      	str	r1, [r6, #0]
 80069e4:	0606      	lsls	r6, r0, #24
 80069e6:	d501      	bpl.n	80069ec <_printf_i+0xbc>
 80069e8:	681d      	ldr	r5, [r3, #0]
 80069ea:	e003      	b.n	80069f4 <_printf_i+0xc4>
 80069ec:	0645      	lsls	r5, r0, #25
 80069ee:	d5fb      	bpl.n	80069e8 <_printf_i+0xb8>
 80069f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80069f4:	2d00      	cmp	r5, #0
 80069f6:	da03      	bge.n	8006a00 <_printf_i+0xd0>
 80069f8:	232d      	movs	r3, #45	@ 0x2d
 80069fa:	426d      	negs	r5, r5
 80069fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a00:	4858      	ldr	r0, [pc, #352]	@ (8006b64 <_printf_i+0x234>)
 8006a02:	230a      	movs	r3, #10
 8006a04:	e011      	b.n	8006a2a <_printf_i+0xfa>
 8006a06:	6821      	ldr	r1, [r4, #0]
 8006a08:	6833      	ldr	r3, [r6, #0]
 8006a0a:	0608      	lsls	r0, r1, #24
 8006a0c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006a10:	d402      	bmi.n	8006a18 <_printf_i+0xe8>
 8006a12:	0649      	lsls	r1, r1, #25
 8006a14:	bf48      	it	mi
 8006a16:	b2ad      	uxthmi	r5, r5
 8006a18:	2f6f      	cmp	r7, #111	@ 0x6f
 8006a1a:	4852      	ldr	r0, [pc, #328]	@ (8006b64 <_printf_i+0x234>)
 8006a1c:	6033      	str	r3, [r6, #0]
 8006a1e:	bf14      	ite	ne
 8006a20:	230a      	movne	r3, #10
 8006a22:	2308      	moveq	r3, #8
 8006a24:	2100      	movs	r1, #0
 8006a26:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006a2a:	6866      	ldr	r6, [r4, #4]
 8006a2c:	60a6      	str	r6, [r4, #8]
 8006a2e:	2e00      	cmp	r6, #0
 8006a30:	db05      	blt.n	8006a3e <_printf_i+0x10e>
 8006a32:	6821      	ldr	r1, [r4, #0]
 8006a34:	432e      	orrs	r6, r5
 8006a36:	f021 0104 	bic.w	r1, r1, #4
 8006a3a:	6021      	str	r1, [r4, #0]
 8006a3c:	d04b      	beq.n	8006ad6 <_printf_i+0x1a6>
 8006a3e:	4616      	mov	r6, r2
 8006a40:	fbb5 f1f3 	udiv	r1, r5, r3
 8006a44:	fb03 5711 	mls	r7, r3, r1, r5
 8006a48:	5dc7      	ldrb	r7, [r0, r7]
 8006a4a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006a4e:	462f      	mov	r7, r5
 8006a50:	42bb      	cmp	r3, r7
 8006a52:	460d      	mov	r5, r1
 8006a54:	d9f4      	bls.n	8006a40 <_printf_i+0x110>
 8006a56:	2b08      	cmp	r3, #8
 8006a58:	d10b      	bne.n	8006a72 <_printf_i+0x142>
 8006a5a:	6823      	ldr	r3, [r4, #0]
 8006a5c:	07df      	lsls	r7, r3, #31
 8006a5e:	d508      	bpl.n	8006a72 <_printf_i+0x142>
 8006a60:	6923      	ldr	r3, [r4, #16]
 8006a62:	6861      	ldr	r1, [r4, #4]
 8006a64:	4299      	cmp	r1, r3
 8006a66:	bfde      	ittt	le
 8006a68:	2330      	movle	r3, #48	@ 0x30
 8006a6a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006a6e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006a72:	1b92      	subs	r2, r2, r6
 8006a74:	6122      	str	r2, [r4, #16]
 8006a76:	f8cd a000 	str.w	sl, [sp]
 8006a7a:	464b      	mov	r3, r9
 8006a7c:	aa03      	add	r2, sp, #12
 8006a7e:	4621      	mov	r1, r4
 8006a80:	4640      	mov	r0, r8
 8006a82:	f7ff fee7 	bl	8006854 <_printf_common>
 8006a86:	3001      	adds	r0, #1
 8006a88:	d14a      	bne.n	8006b20 <_printf_i+0x1f0>
 8006a8a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006a8e:	b004      	add	sp, #16
 8006a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a94:	6823      	ldr	r3, [r4, #0]
 8006a96:	f043 0320 	orr.w	r3, r3, #32
 8006a9a:	6023      	str	r3, [r4, #0]
 8006a9c:	4832      	ldr	r0, [pc, #200]	@ (8006b68 <_printf_i+0x238>)
 8006a9e:	2778      	movs	r7, #120	@ 0x78
 8006aa0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006aa4:	6823      	ldr	r3, [r4, #0]
 8006aa6:	6831      	ldr	r1, [r6, #0]
 8006aa8:	061f      	lsls	r7, r3, #24
 8006aaa:	f851 5b04 	ldr.w	r5, [r1], #4
 8006aae:	d402      	bmi.n	8006ab6 <_printf_i+0x186>
 8006ab0:	065f      	lsls	r7, r3, #25
 8006ab2:	bf48      	it	mi
 8006ab4:	b2ad      	uxthmi	r5, r5
 8006ab6:	6031      	str	r1, [r6, #0]
 8006ab8:	07d9      	lsls	r1, r3, #31
 8006aba:	bf44      	itt	mi
 8006abc:	f043 0320 	orrmi.w	r3, r3, #32
 8006ac0:	6023      	strmi	r3, [r4, #0]
 8006ac2:	b11d      	cbz	r5, 8006acc <_printf_i+0x19c>
 8006ac4:	2310      	movs	r3, #16
 8006ac6:	e7ad      	b.n	8006a24 <_printf_i+0xf4>
 8006ac8:	4826      	ldr	r0, [pc, #152]	@ (8006b64 <_printf_i+0x234>)
 8006aca:	e7e9      	b.n	8006aa0 <_printf_i+0x170>
 8006acc:	6823      	ldr	r3, [r4, #0]
 8006ace:	f023 0320 	bic.w	r3, r3, #32
 8006ad2:	6023      	str	r3, [r4, #0]
 8006ad4:	e7f6      	b.n	8006ac4 <_printf_i+0x194>
 8006ad6:	4616      	mov	r6, r2
 8006ad8:	e7bd      	b.n	8006a56 <_printf_i+0x126>
 8006ada:	6833      	ldr	r3, [r6, #0]
 8006adc:	6825      	ldr	r5, [r4, #0]
 8006ade:	6961      	ldr	r1, [r4, #20]
 8006ae0:	1d18      	adds	r0, r3, #4
 8006ae2:	6030      	str	r0, [r6, #0]
 8006ae4:	062e      	lsls	r6, r5, #24
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	d501      	bpl.n	8006aee <_printf_i+0x1be>
 8006aea:	6019      	str	r1, [r3, #0]
 8006aec:	e002      	b.n	8006af4 <_printf_i+0x1c4>
 8006aee:	0668      	lsls	r0, r5, #25
 8006af0:	d5fb      	bpl.n	8006aea <_printf_i+0x1ba>
 8006af2:	8019      	strh	r1, [r3, #0]
 8006af4:	2300      	movs	r3, #0
 8006af6:	6123      	str	r3, [r4, #16]
 8006af8:	4616      	mov	r6, r2
 8006afa:	e7bc      	b.n	8006a76 <_printf_i+0x146>
 8006afc:	6833      	ldr	r3, [r6, #0]
 8006afe:	1d1a      	adds	r2, r3, #4
 8006b00:	6032      	str	r2, [r6, #0]
 8006b02:	681e      	ldr	r6, [r3, #0]
 8006b04:	6862      	ldr	r2, [r4, #4]
 8006b06:	2100      	movs	r1, #0
 8006b08:	4630      	mov	r0, r6
 8006b0a:	f7f9 fb61 	bl	80001d0 <memchr>
 8006b0e:	b108      	cbz	r0, 8006b14 <_printf_i+0x1e4>
 8006b10:	1b80      	subs	r0, r0, r6
 8006b12:	6060      	str	r0, [r4, #4]
 8006b14:	6863      	ldr	r3, [r4, #4]
 8006b16:	6123      	str	r3, [r4, #16]
 8006b18:	2300      	movs	r3, #0
 8006b1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b1e:	e7aa      	b.n	8006a76 <_printf_i+0x146>
 8006b20:	6923      	ldr	r3, [r4, #16]
 8006b22:	4632      	mov	r2, r6
 8006b24:	4649      	mov	r1, r9
 8006b26:	4640      	mov	r0, r8
 8006b28:	47d0      	blx	sl
 8006b2a:	3001      	adds	r0, #1
 8006b2c:	d0ad      	beq.n	8006a8a <_printf_i+0x15a>
 8006b2e:	6823      	ldr	r3, [r4, #0]
 8006b30:	079b      	lsls	r3, r3, #30
 8006b32:	d413      	bmi.n	8006b5c <_printf_i+0x22c>
 8006b34:	68e0      	ldr	r0, [r4, #12]
 8006b36:	9b03      	ldr	r3, [sp, #12]
 8006b38:	4298      	cmp	r0, r3
 8006b3a:	bfb8      	it	lt
 8006b3c:	4618      	movlt	r0, r3
 8006b3e:	e7a6      	b.n	8006a8e <_printf_i+0x15e>
 8006b40:	2301      	movs	r3, #1
 8006b42:	4632      	mov	r2, r6
 8006b44:	4649      	mov	r1, r9
 8006b46:	4640      	mov	r0, r8
 8006b48:	47d0      	blx	sl
 8006b4a:	3001      	adds	r0, #1
 8006b4c:	d09d      	beq.n	8006a8a <_printf_i+0x15a>
 8006b4e:	3501      	adds	r5, #1
 8006b50:	68e3      	ldr	r3, [r4, #12]
 8006b52:	9903      	ldr	r1, [sp, #12]
 8006b54:	1a5b      	subs	r3, r3, r1
 8006b56:	42ab      	cmp	r3, r5
 8006b58:	dcf2      	bgt.n	8006b40 <_printf_i+0x210>
 8006b5a:	e7eb      	b.n	8006b34 <_printf_i+0x204>
 8006b5c:	2500      	movs	r5, #0
 8006b5e:	f104 0619 	add.w	r6, r4, #25
 8006b62:	e7f5      	b.n	8006b50 <_printf_i+0x220>
 8006b64:	08009032 	.word	0x08009032
 8006b68:	08009043 	.word	0x08009043

08006b6c <siprintf>:
 8006b6c:	b40e      	push	{r1, r2, r3}
 8006b6e:	b510      	push	{r4, lr}
 8006b70:	b09d      	sub	sp, #116	@ 0x74
 8006b72:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006b74:	9002      	str	r0, [sp, #8]
 8006b76:	9006      	str	r0, [sp, #24]
 8006b78:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006b7c:	480a      	ldr	r0, [pc, #40]	@ (8006ba8 <siprintf+0x3c>)
 8006b7e:	9107      	str	r1, [sp, #28]
 8006b80:	9104      	str	r1, [sp, #16]
 8006b82:	490a      	ldr	r1, [pc, #40]	@ (8006bac <siprintf+0x40>)
 8006b84:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b88:	9105      	str	r1, [sp, #20]
 8006b8a:	2400      	movs	r4, #0
 8006b8c:	a902      	add	r1, sp, #8
 8006b8e:	6800      	ldr	r0, [r0, #0]
 8006b90:	9301      	str	r3, [sp, #4]
 8006b92:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006b94:	f000 ffbc 	bl	8007b10 <_svfiprintf_r>
 8006b98:	9b02      	ldr	r3, [sp, #8]
 8006b9a:	701c      	strb	r4, [r3, #0]
 8006b9c:	b01d      	add	sp, #116	@ 0x74
 8006b9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ba2:	b003      	add	sp, #12
 8006ba4:	4770      	bx	lr
 8006ba6:	bf00      	nop
 8006ba8:	2000001c 	.word	0x2000001c
 8006bac:	ffff0208 	.word	0xffff0208

08006bb0 <std>:
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	b510      	push	{r4, lr}
 8006bb4:	4604      	mov	r4, r0
 8006bb6:	e9c0 3300 	strd	r3, r3, [r0]
 8006bba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006bbe:	6083      	str	r3, [r0, #8]
 8006bc0:	8181      	strh	r1, [r0, #12]
 8006bc2:	6643      	str	r3, [r0, #100]	@ 0x64
 8006bc4:	81c2      	strh	r2, [r0, #14]
 8006bc6:	6183      	str	r3, [r0, #24]
 8006bc8:	4619      	mov	r1, r3
 8006bca:	2208      	movs	r2, #8
 8006bcc:	305c      	adds	r0, #92	@ 0x5c
 8006bce:	f000 f8b1 	bl	8006d34 <memset>
 8006bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8006c08 <std+0x58>)
 8006bd4:	6263      	str	r3, [r4, #36]	@ 0x24
 8006bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8006c0c <std+0x5c>)
 8006bd8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006bda:	4b0d      	ldr	r3, [pc, #52]	@ (8006c10 <std+0x60>)
 8006bdc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006bde:	4b0d      	ldr	r3, [pc, #52]	@ (8006c14 <std+0x64>)
 8006be0:	6323      	str	r3, [r4, #48]	@ 0x30
 8006be2:	4b0d      	ldr	r3, [pc, #52]	@ (8006c18 <std+0x68>)
 8006be4:	6224      	str	r4, [r4, #32]
 8006be6:	429c      	cmp	r4, r3
 8006be8:	d006      	beq.n	8006bf8 <std+0x48>
 8006bea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006bee:	4294      	cmp	r4, r2
 8006bf0:	d002      	beq.n	8006bf8 <std+0x48>
 8006bf2:	33d0      	adds	r3, #208	@ 0xd0
 8006bf4:	429c      	cmp	r4, r3
 8006bf6:	d105      	bne.n	8006c04 <std+0x54>
 8006bf8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c00:	f000 b8ca 	b.w	8006d98 <__retarget_lock_init_recursive>
 8006c04:	bd10      	pop	{r4, pc}
 8006c06:	bf00      	nop
 8006c08:	080086c1 	.word	0x080086c1
 8006c0c:	080086e3 	.word	0x080086e3
 8006c10:	0800871b 	.word	0x0800871b
 8006c14:	0800873f 	.word	0x0800873f
 8006c18:	20000390 	.word	0x20000390

08006c1c <stdio_exit_handler>:
 8006c1c:	4a02      	ldr	r2, [pc, #8]	@ (8006c28 <stdio_exit_handler+0xc>)
 8006c1e:	4903      	ldr	r1, [pc, #12]	@ (8006c2c <stdio_exit_handler+0x10>)
 8006c20:	4803      	ldr	r0, [pc, #12]	@ (8006c30 <stdio_exit_handler+0x14>)
 8006c22:	f000 b869 	b.w	8006cf8 <_fwalk_sglue>
 8006c26:	bf00      	nop
 8006c28:	20000010 	.word	0x20000010
 8006c2c:	08007f65 	.word	0x08007f65
 8006c30:	20000020 	.word	0x20000020

08006c34 <cleanup_stdio>:
 8006c34:	6841      	ldr	r1, [r0, #4]
 8006c36:	4b0c      	ldr	r3, [pc, #48]	@ (8006c68 <cleanup_stdio+0x34>)
 8006c38:	4299      	cmp	r1, r3
 8006c3a:	b510      	push	{r4, lr}
 8006c3c:	4604      	mov	r4, r0
 8006c3e:	d001      	beq.n	8006c44 <cleanup_stdio+0x10>
 8006c40:	f001 f990 	bl	8007f64 <_fflush_r>
 8006c44:	68a1      	ldr	r1, [r4, #8]
 8006c46:	4b09      	ldr	r3, [pc, #36]	@ (8006c6c <cleanup_stdio+0x38>)
 8006c48:	4299      	cmp	r1, r3
 8006c4a:	d002      	beq.n	8006c52 <cleanup_stdio+0x1e>
 8006c4c:	4620      	mov	r0, r4
 8006c4e:	f001 f989 	bl	8007f64 <_fflush_r>
 8006c52:	68e1      	ldr	r1, [r4, #12]
 8006c54:	4b06      	ldr	r3, [pc, #24]	@ (8006c70 <cleanup_stdio+0x3c>)
 8006c56:	4299      	cmp	r1, r3
 8006c58:	d004      	beq.n	8006c64 <cleanup_stdio+0x30>
 8006c5a:	4620      	mov	r0, r4
 8006c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c60:	f001 b980 	b.w	8007f64 <_fflush_r>
 8006c64:	bd10      	pop	{r4, pc}
 8006c66:	bf00      	nop
 8006c68:	20000390 	.word	0x20000390
 8006c6c:	200003f8 	.word	0x200003f8
 8006c70:	20000460 	.word	0x20000460

08006c74 <global_stdio_init.part.0>:
 8006c74:	b510      	push	{r4, lr}
 8006c76:	4b0b      	ldr	r3, [pc, #44]	@ (8006ca4 <global_stdio_init.part.0+0x30>)
 8006c78:	4c0b      	ldr	r4, [pc, #44]	@ (8006ca8 <global_stdio_init.part.0+0x34>)
 8006c7a:	4a0c      	ldr	r2, [pc, #48]	@ (8006cac <global_stdio_init.part.0+0x38>)
 8006c7c:	601a      	str	r2, [r3, #0]
 8006c7e:	4620      	mov	r0, r4
 8006c80:	2200      	movs	r2, #0
 8006c82:	2104      	movs	r1, #4
 8006c84:	f7ff ff94 	bl	8006bb0 <std>
 8006c88:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	2109      	movs	r1, #9
 8006c90:	f7ff ff8e 	bl	8006bb0 <std>
 8006c94:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006c98:	2202      	movs	r2, #2
 8006c9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c9e:	2112      	movs	r1, #18
 8006ca0:	f7ff bf86 	b.w	8006bb0 <std>
 8006ca4:	200004c8 	.word	0x200004c8
 8006ca8:	20000390 	.word	0x20000390
 8006cac:	08006c1d 	.word	0x08006c1d

08006cb0 <__sfp_lock_acquire>:
 8006cb0:	4801      	ldr	r0, [pc, #4]	@ (8006cb8 <__sfp_lock_acquire+0x8>)
 8006cb2:	f000 b872 	b.w	8006d9a <__retarget_lock_acquire_recursive>
 8006cb6:	bf00      	nop
 8006cb8:	200004cd 	.word	0x200004cd

08006cbc <__sfp_lock_release>:
 8006cbc:	4801      	ldr	r0, [pc, #4]	@ (8006cc4 <__sfp_lock_release+0x8>)
 8006cbe:	f000 b86d 	b.w	8006d9c <__retarget_lock_release_recursive>
 8006cc2:	bf00      	nop
 8006cc4:	200004cd 	.word	0x200004cd

08006cc8 <__sinit>:
 8006cc8:	b510      	push	{r4, lr}
 8006cca:	4604      	mov	r4, r0
 8006ccc:	f7ff fff0 	bl	8006cb0 <__sfp_lock_acquire>
 8006cd0:	6a23      	ldr	r3, [r4, #32]
 8006cd2:	b11b      	cbz	r3, 8006cdc <__sinit+0x14>
 8006cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cd8:	f7ff bff0 	b.w	8006cbc <__sfp_lock_release>
 8006cdc:	4b04      	ldr	r3, [pc, #16]	@ (8006cf0 <__sinit+0x28>)
 8006cde:	6223      	str	r3, [r4, #32]
 8006ce0:	4b04      	ldr	r3, [pc, #16]	@ (8006cf4 <__sinit+0x2c>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d1f5      	bne.n	8006cd4 <__sinit+0xc>
 8006ce8:	f7ff ffc4 	bl	8006c74 <global_stdio_init.part.0>
 8006cec:	e7f2      	b.n	8006cd4 <__sinit+0xc>
 8006cee:	bf00      	nop
 8006cf0:	08006c35 	.word	0x08006c35
 8006cf4:	200004c8 	.word	0x200004c8

08006cf8 <_fwalk_sglue>:
 8006cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cfc:	4607      	mov	r7, r0
 8006cfe:	4688      	mov	r8, r1
 8006d00:	4614      	mov	r4, r2
 8006d02:	2600      	movs	r6, #0
 8006d04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d08:	f1b9 0901 	subs.w	r9, r9, #1
 8006d0c:	d505      	bpl.n	8006d1a <_fwalk_sglue+0x22>
 8006d0e:	6824      	ldr	r4, [r4, #0]
 8006d10:	2c00      	cmp	r4, #0
 8006d12:	d1f7      	bne.n	8006d04 <_fwalk_sglue+0xc>
 8006d14:	4630      	mov	r0, r6
 8006d16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d1a:	89ab      	ldrh	r3, [r5, #12]
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d907      	bls.n	8006d30 <_fwalk_sglue+0x38>
 8006d20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d24:	3301      	adds	r3, #1
 8006d26:	d003      	beq.n	8006d30 <_fwalk_sglue+0x38>
 8006d28:	4629      	mov	r1, r5
 8006d2a:	4638      	mov	r0, r7
 8006d2c:	47c0      	blx	r8
 8006d2e:	4306      	orrs	r6, r0
 8006d30:	3568      	adds	r5, #104	@ 0x68
 8006d32:	e7e9      	b.n	8006d08 <_fwalk_sglue+0x10>

08006d34 <memset>:
 8006d34:	4402      	add	r2, r0
 8006d36:	4603      	mov	r3, r0
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d100      	bne.n	8006d3e <memset+0xa>
 8006d3c:	4770      	bx	lr
 8006d3e:	f803 1b01 	strb.w	r1, [r3], #1
 8006d42:	e7f9      	b.n	8006d38 <memset+0x4>

08006d44 <__errno>:
 8006d44:	4b01      	ldr	r3, [pc, #4]	@ (8006d4c <__errno+0x8>)
 8006d46:	6818      	ldr	r0, [r3, #0]
 8006d48:	4770      	bx	lr
 8006d4a:	bf00      	nop
 8006d4c:	2000001c 	.word	0x2000001c

08006d50 <__libc_init_array>:
 8006d50:	b570      	push	{r4, r5, r6, lr}
 8006d52:	4d0d      	ldr	r5, [pc, #52]	@ (8006d88 <__libc_init_array+0x38>)
 8006d54:	4c0d      	ldr	r4, [pc, #52]	@ (8006d8c <__libc_init_array+0x3c>)
 8006d56:	1b64      	subs	r4, r4, r5
 8006d58:	10a4      	asrs	r4, r4, #2
 8006d5a:	2600      	movs	r6, #0
 8006d5c:	42a6      	cmp	r6, r4
 8006d5e:	d109      	bne.n	8006d74 <__libc_init_array+0x24>
 8006d60:	4d0b      	ldr	r5, [pc, #44]	@ (8006d90 <__libc_init_array+0x40>)
 8006d62:	4c0c      	ldr	r4, [pc, #48]	@ (8006d94 <__libc_init_array+0x44>)
 8006d64:	f002 f8f6 	bl	8008f54 <_init>
 8006d68:	1b64      	subs	r4, r4, r5
 8006d6a:	10a4      	asrs	r4, r4, #2
 8006d6c:	2600      	movs	r6, #0
 8006d6e:	42a6      	cmp	r6, r4
 8006d70:	d105      	bne.n	8006d7e <__libc_init_array+0x2e>
 8006d72:	bd70      	pop	{r4, r5, r6, pc}
 8006d74:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d78:	4798      	blx	r3
 8006d7a:	3601      	adds	r6, #1
 8006d7c:	e7ee      	b.n	8006d5c <__libc_init_array+0xc>
 8006d7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d82:	4798      	blx	r3
 8006d84:	3601      	adds	r6, #1
 8006d86:	e7f2      	b.n	8006d6e <__libc_init_array+0x1e>
 8006d88:	0800939c 	.word	0x0800939c
 8006d8c:	0800939c 	.word	0x0800939c
 8006d90:	0800939c 	.word	0x0800939c
 8006d94:	080093a0 	.word	0x080093a0

08006d98 <__retarget_lock_init_recursive>:
 8006d98:	4770      	bx	lr

08006d9a <__retarget_lock_acquire_recursive>:
 8006d9a:	4770      	bx	lr

08006d9c <__retarget_lock_release_recursive>:
 8006d9c:	4770      	bx	lr
	...

08006da0 <_localeconv_r>:
 8006da0:	4800      	ldr	r0, [pc, #0]	@ (8006da4 <_localeconv_r+0x4>)
 8006da2:	4770      	bx	lr
 8006da4:	2000015c 	.word	0x2000015c

08006da8 <quorem>:
 8006da8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dac:	6903      	ldr	r3, [r0, #16]
 8006dae:	690c      	ldr	r4, [r1, #16]
 8006db0:	42a3      	cmp	r3, r4
 8006db2:	4607      	mov	r7, r0
 8006db4:	db7e      	blt.n	8006eb4 <quorem+0x10c>
 8006db6:	3c01      	subs	r4, #1
 8006db8:	f101 0814 	add.w	r8, r1, #20
 8006dbc:	00a3      	lsls	r3, r4, #2
 8006dbe:	f100 0514 	add.w	r5, r0, #20
 8006dc2:	9300      	str	r3, [sp, #0]
 8006dc4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006dc8:	9301      	str	r3, [sp, #4]
 8006dca:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006dce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006dda:	fbb2 f6f3 	udiv	r6, r2, r3
 8006dde:	d32e      	bcc.n	8006e3e <quorem+0x96>
 8006de0:	f04f 0a00 	mov.w	sl, #0
 8006de4:	46c4      	mov	ip, r8
 8006de6:	46ae      	mov	lr, r5
 8006de8:	46d3      	mov	fp, sl
 8006dea:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006dee:	b298      	uxth	r0, r3
 8006df0:	fb06 a000 	mla	r0, r6, r0, sl
 8006df4:	0c02      	lsrs	r2, r0, #16
 8006df6:	0c1b      	lsrs	r3, r3, #16
 8006df8:	fb06 2303 	mla	r3, r6, r3, r2
 8006dfc:	f8de 2000 	ldr.w	r2, [lr]
 8006e00:	b280      	uxth	r0, r0
 8006e02:	b292      	uxth	r2, r2
 8006e04:	1a12      	subs	r2, r2, r0
 8006e06:	445a      	add	r2, fp
 8006e08:	f8de 0000 	ldr.w	r0, [lr]
 8006e0c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006e16:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006e1a:	b292      	uxth	r2, r2
 8006e1c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006e20:	45e1      	cmp	r9, ip
 8006e22:	f84e 2b04 	str.w	r2, [lr], #4
 8006e26:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006e2a:	d2de      	bcs.n	8006dea <quorem+0x42>
 8006e2c:	9b00      	ldr	r3, [sp, #0]
 8006e2e:	58eb      	ldr	r3, [r5, r3]
 8006e30:	b92b      	cbnz	r3, 8006e3e <quorem+0x96>
 8006e32:	9b01      	ldr	r3, [sp, #4]
 8006e34:	3b04      	subs	r3, #4
 8006e36:	429d      	cmp	r5, r3
 8006e38:	461a      	mov	r2, r3
 8006e3a:	d32f      	bcc.n	8006e9c <quorem+0xf4>
 8006e3c:	613c      	str	r4, [r7, #16]
 8006e3e:	4638      	mov	r0, r7
 8006e40:	f001 fb36 	bl	80084b0 <__mcmp>
 8006e44:	2800      	cmp	r0, #0
 8006e46:	db25      	blt.n	8006e94 <quorem+0xec>
 8006e48:	4629      	mov	r1, r5
 8006e4a:	2000      	movs	r0, #0
 8006e4c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006e50:	f8d1 c000 	ldr.w	ip, [r1]
 8006e54:	fa1f fe82 	uxth.w	lr, r2
 8006e58:	fa1f f38c 	uxth.w	r3, ip
 8006e5c:	eba3 030e 	sub.w	r3, r3, lr
 8006e60:	4403      	add	r3, r0
 8006e62:	0c12      	lsrs	r2, r2, #16
 8006e64:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006e68:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e72:	45c1      	cmp	r9, r8
 8006e74:	f841 3b04 	str.w	r3, [r1], #4
 8006e78:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006e7c:	d2e6      	bcs.n	8006e4c <quorem+0xa4>
 8006e7e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e86:	b922      	cbnz	r2, 8006e92 <quorem+0xea>
 8006e88:	3b04      	subs	r3, #4
 8006e8a:	429d      	cmp	r5, r3
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	d30b      	bcc.n	8006ea8 <quorem+0x100>
 8006e90:	613c      	str	r4, [r7, #16]
 8006e92:	3601      	adds	r6, #1
 8006e94:	4630      	mov	r0, r6
 8006e96:	b003      	add	sp, #12
 8006e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e9c:	6812      	ldr	r2, [r2, #0]
 8006e9e:	3b04      	subs	r3, #4
 8006ea0:	2a00      	cmp	r2, #0
 8006ea2:	d1cb      	bne.n	8006e3c <quorem+0x94>
 8006ea4:	3c01      	subs	r4, #1
 8006ea6:	e7c6      	b.n	8006e36 <quorem+0x8e>
 8006ea8:	6812      	ldr	r2, [r2, #0]
 8006eaa:	3b04      	subs	r3, #4
 8006eac:	2a00      	cmp	r2, #0
 8006eae:	d1ef      	bne.n	8006e90 <quorem+0xe8>
 8006eb0:	3c01      	subs	r4, #1
 8006eb2:	e7ea      	b.n	8006e8a <quorem+0xe2>
 8006eb4:	2000      	movs	r0, #0
 8006eb6:	e7ee      	b.n	8006e96 <quorem+0xee>

08006eb8 <_dtoa_r>:
 8006eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ebc:	69c7      	ldr	r7, [r0, #28]
 8006ebe:	b097      	sub	sp, #92	@ 0x5c
 8006ec0:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006ec4:	ec55 4b10 	vmov	r4, r5, d0
 8006ec8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8006eca:	9107      	str	r1, [sp, #28]
 8006ecc:	4681      	mov	r9, r0
 8006ece:	920c      	str	r2, [sp, #48]	@ 0x30
 8006ed0:	9311      	str	r3, [sp, #68]	@ 0x44
 8006ed2:	b97f      	cbnz	r7, 8006ef4 <_dtoa_r+0x3c>
 8006ed4:	2010      	movs	r0, #16
 8006ed6:	f000 ff17 	bl	8007d08 <malloc>
 8006eda:	4602      	mov	r2, r0
 8006edc:	f8c9 001c 	str.w	r0, [r9, #28]
 8006ee0:	b920      	cbnz	r0, 8006eec <_dtoa_r+0x34>
 8006ee2:	4ba9      	ldr	r3, [pc, #676]	@ (8007188 <_dtoa_r+0x2d0>)
 8006ee4:	21ef      	movs	r1, #239	@ 0xef
 8006ee6:	48a9      	ldr	r0, [pc, #676]	@ (800718c <_dtoa_r+0x2d4>)
 8006ee8:	f001 fcda 	bl	80088a0 <__assert_func>
 8006eec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006ef0:	6007      	str	r7, [r0, #0]
 8006ef2:	60c7      	str	r7, [r0, #12]
 8006ef4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006ef8:	6819      	ldr	r1, [r3, #0]
 8006efa:	b159      	cbz	r1, 8006f14 <_dtoa_r+0x5c>
 8006efc:	685a      	ldr	r2, [r3, #4]
 8006efe:	604a      	str	r2, [r1, #4]
 8006f00:	2301      	movs	r3, #1
 8006f02:	4093      	lsls	r3, r2
 8006f04:	608b      	str	r3, [r1, #8]
 8006f06:	4648      	mov	r0, r9
 8006f08:	f001 f8a0 	bl	800804c <_Bfree>
 8006f0c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006f10:	2200      	movs	r2, #0
 8006f12:	601a      	str	r2, [r3, #0]
 8006f14:	1e2b      	subs	r3, r5, #0
 8006f16:	bfb9      	ittee	lt
 8006f18:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006f1c:	9305      	strlt	r3, [sp, #20]
 8006f1e:	2300      	movge	r3, #0
 8006f20:	6033      	strge	r3, [r6, #0]
 8006f22:	9f05      	ldr	r7, [sp, #20]
 8006f24:	4b9a      	ldr	r3, [pc, #616]	@ (8007190 <_dtoa_r+0x2d8>)
 8006f26:	bfbc      	itt	lt
 8006f28:	2201      	movlt	r2, #1
 8006f2a:	6032      	strlt	r2, [r6, #0]
 8006f2c:	43bb      	bics	r3, r7
 8006f2e:	d112      	bne.n	8006f56 <_dtoa_r+0x9e>
 8006f30:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006f32:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006f36:	6013      	str	r3, [r2, #0]
 8006f38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006f3c:	4323      	orrs	r3, r4
 8006f3e:	f000 855a 	beq.w	80079f6 <_dtoa_r+0xb3e>
 8006f42:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006f44:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80071a4 <_dtoa_r+0x2ec>
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	f000 855c 	beq.w	8007a06 <_dtoa_r+0xb4e>
 8006f4e:	f10a 0303 	add.w	r3, sl, #3
 8006f52:	f000 bd56 	b.w	8007a02 <_dtoa_r+0xb4a>
 8006f56:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	ec51 0b17 	vmov	r0, r1, d7
 8006f60:	2300      	movs	r3, #0
 8006f62:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8006f66:	f7f9 fdaf 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f6a:	4680      	mov	r8, r0
 8006f6c:	b158      	cbz	r0, 8006f86 <_dtoa_r+0xce>
 8006f6e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006f70:	2301      	movs	r3, #1
 8006f72:	6013      	str	r3, [r2, #0]
 8006f74:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006f76:	b113      	cbz	r3, 8006f7e <_dtoa_r+0xc6>
 8006f78:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006f7a:	4b86      	ldr	r3, [pc, #536]	@ (8007194 <_dtoa_r+0x2dc>)
 8006f7c:	6013      	str	r3, [r2, #0]
 8006f7e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80071a8 <_dtoa_r+0x2f0>
 8006f82:	f000 bd40 	b.w	8007a06 <_dtoa_r+0xb4e>
 8006f86:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8006f8a:	aa14      	add	r2, sp, #80	@ 0x50
 8006f8c:	a915      	add	r1, sp, #84	@ 0x54
 8006f8e:	4648      	mov	r0, r9
 8006f90:	f001 fb3e 	bl	8008610 <__d2b>
 8006f94:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006f98:	9002      	str	r0, [sp, #8]
 8006f9a:	2e00      	cmp	r6, #0
 8006f9c:	d078      	beq.n	8007090 <_dtoa_r+0x1d8>
 8006f9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006fa0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8006fa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006fa8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006fac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006fb0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006fb4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006fb8:	4619      	mov	r1, r3
 8006fba:	2200      	movs	r2, #0
 8006fbc:	4b76      	ldr	r3, [pc, #472]	@ (8007198 <_dtoa_r+0x2e0>)
 8006fbe:	f7f9 f963 	bl	8000288 <__aeabi_dsub>
 8006fc2:	a36b      	add	r3, pc, #428	@ (adr r3, 8007170 <_dtoa_r+0x2b8>)
 8006fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc8:	f7f9 fb16 	bl	80005f8 <__aeabi_dmul>
 8006fcc:	a36a      	add	r3, pc, #424	@ (adr r3, 8007178 <_dtoa_r+0x2c0>)
 8006fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd2:	f7f9 f95b 	bl	800028c <__adddf3>
 8006fd6:	4604      	mov	r4, r0
 8006fd8:	4630      	mov	r0, r6
 8006fda:	460d      	mov	r5, r1
 8006fdc:	f7f9 faa2 	bl	8000524 <__aeabi_i2d>
 8006fe0:	a367      	add	r3, pc, #412	@ (adr r3, 8007180 <_dtoa_r+0x2c8>)
 8006fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe6:	f7f9 fb07 	bl	80005f8 <__aeabi_dmul>
 8006fea:	4602      	mov	r2, r0
 8006fec:	460b      	mov	r3, r1
 8006fee:	4620      	mov	r0, r4
 8006ff0:	4629      	mov	r1, r5
 8006ff2:	f7f9 f94b 	bl	800028c <__adddf3>
 8006ff6:	4604      	mov	r4, r0
 8006ff8:	460d      	mov	r5, r1
 8006ffa:	f7f9 fdad 	bl	8000b58 <__aeabi_d2iz>
 8006ffe:	2200      	movs	r2, #0
 8007000:	4607      	mov	r7, r0
 8007002:	2300      	movs	r3, #0
 8007004:	4620      	mov	r0, r4
 8007006:	4629      	mov	r1, r5
 8007008:	f7f9 fd68 	bl	8000adc <__aeabi_dcmplt>
 800700c:	b140      	cbz	r0, 8007020 <_dtoa_r+0x168>
 800700e:	4638      	mov	r0, r7
 8007010:	f7f9 fa88 	bl	8000524 <__aeabi_i2d>
 8007014:	4622      	mov	r2, r4
 8007016:	462b      	mov	r3, r5
 8007018:	f7f9 fd56 	bl	8000ac8 <__aeabi_dcmpeq>
 800701c:	b900      	cbnz	r0, 8007020 <_dtoa_r+0x168>
 800701e:	3f01      	subs	r7, #1
 8007020:	2f16      	cmp	r7, #22
 8007022:	d852      	bhi.n	80070ca <_dtoa_r+0x212>
 8007024:	4b5d      	ldr	r3, [pc, #372]	@ (800719c <_dtoa_r+0x2e4>)
 8007026:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800702a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800702e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007032:	f7f9 fd53 	bl	8000adc <__aeabi_dcmplt>
 8007036:	2800      	cmp	r0, #0
 8007038:	d049      	beq.n	80070ce <_dtoa_r+0x216>
 800703a:	3f01      	subs	r7, #1
 800703c:	2300      	movs	r3, #0
 800703e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007040:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007042:	1b9b      	subs	r3, r3, r6
 8007044:	1e5a      	subs	r2, r3, #1
 8007046:	bf45      	ittet	mi
 8007048:	f1c3 0301 	rsbmi	r3, r3, #1
 800704c:	9300      	strmi	r3, [sp, #0]
 800704e:	2300      	movpl	r3, #0
 8007050:	2300      	movmi	r3, #0
 8007052:	9206      	str	r2, [sp, #24]
 8007054:	bf54      	ite	pl
 8007056:	9300      	strpl	r3, [sp, #0]
 8007058:	9306      	strmi	r3, [sp, #24]
 800705a:	2f00      	cmp	r7, #0
 800705c:	db39      	blt.n	80070d2 <_dtoa_r+0x21a>
 800705e:	9b06      	ldr	r3, [sp, #24]
 8007060:	970d      	str	r7, [sp, #52]	@ 0x34
 8007062:	443b      	add	r3, r7
 8007064:	9306      	str	r3, [sp, #24]
 8007066:	2300      	movs	r3, #0
 8007068:	9308      	str	r3, [sp, #32]
 800706a:	9b07      	ldr	r3, [sp, #28]
 800706c:	2b09      	cmp	r3, #9
 800706e:	d863      	bhi.n	8007138 <_dtoa_r+0x280>
 8007070:	2b05      	cmp	r3, #5
 8007072:	bfc4      	itt	gt
 8007074:	3b04      	subgt	r3, #4
 8007076:	9307      	strgt	r3, [sp, #28]
 8007078:	9b07      	ldr	r3, [sp, #28]
 800707a:	f1a3 0302 	sub.w	r3, r3, #2
 800707e:	bfcc      	ite	gt
 8007080:	2400      	movgt	r4, #0
 8007082:	2401      	movle	r4, #1
 8007084:	2b03      	cmp	r3, #3
 8007086:	d863      	bhi.n	8007150 <_dtoa_r+0x298>
 8007088:	e8df f003 	tbb	[pc, r3]
 800708c:	2b375452 	.word	0x2b375452
 8007090:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007094:	441e      	add	r6, r3
 8007096:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800709a:	2b20      	cmp	r3, #32
 800709c:	bfc1      	itttt	gt
 800709e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80070a2:	409f      	lslgt	r7, r3
 80070a4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80070a8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80070ac:	bfd6      	itet	le
 80070ae:	f1c3 0320 	rsble	r3, r3, #32
 80070b2:	ea47 0003 	orrgt.w	r0, r7, r3
 80070b6:	fa04 f003 	lslle.w	r0, r4, r3
 80070ba:	f7f9 fa23 	bl	8000504 <__aeabi_ui2d>
 80070be:	2201      	movs	r2, #1
 80070c0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80070c4:	3e01      	subs	r6, #1
 80070c6:	9212      	str	r2, [sp, #72]	@ 0x48
 80070c8:	e776      	b.n	8006fb8 <_dtoa_r+0x100>
 80070ca:	2301      	movs	r3, #1
 80070cc:	e7b7      	b.n	800703e <_dtoa_r+0x186>
 80070ce:	9010      	str	r0, [sp, #64]	@ 0x40
 80070d0:	e7b6      	b.n	8007040 <_dtoa_r+0x188>
 80070d2:	9b00      	ldr	r3, [sp, #0]
 80070d4:	1bdb      	subs	r3, r3, r7
 80070d6:	9300      	str	r3, [sp, #0]
 80070d8:	427b      	negs	r3, r7
 80070da:	9308      	str	r3, [sp, #32]
 80070dc:	2300      	movs	r3, #0
 80070de:	930d      	str	r3, [sp, #52]	@ 0x34
 80070e0:	e7c3      	b.n	800706a <_dtoa_r+0x1b2>
 80070e2:	2301      	movs	r3, #1
 80070e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80070e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80070e8:	eb07 0b03 	add.w	fp, r7, r3
 80070ec:	f10b 0301 	add.w	r3, fp, #1
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	9303      	str	r3, [sp, #12]
 80070f4:	bfb8      	it	lt
 80070f6:	2301      	movlt	r3, #1
 80070f8:	e006      	b.n	8007108 <_dtoa_r+0x250>
 80070fa:	2301      	movs	r3, #1
 80070fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80070fe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007100:	2b00      	cmp	r3, #0
 8007102:	dd28      	ble.n	8007156 <_dtoa_r+0x29e>
 8007104:	469b      	mov	fp, r3
 8007106:	9303      	str	r3, [sp, #12]
 8007108:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800710c:	2100      	movs	r1, #0
 800710e:	2204      	movs	r2, #4
 8007110:	f102 0514 	add.w	r5, r2, #20
 8007114:	429d      	cmp	r5, r3
 8007116:	d926      	bls.n	8007166 <_dtoa_r+0x2ae>
 8007118:	6041      	str	r1, [r0, #4]
 800711a:	4648      	mov	r0, r9
 800711c:	f000 ff56 	bl	8007fcc <_Balloc>
 8007120:	4682      	mov	sl, r0
 8007122:	2800      	cmp	r0, #0
 8007124:	d142      	bne.n	80071ac <_dtoa_r+0x2f4>
 8007126:	4b1e      	ldr	r3, [pc, #120]	@ (80071a0 <_dtoa_r+0x2e8>)
 8007128:	4602      	mov	r2, r0
 800712a:	f240 11af 	movw	r1, #431	@ 0x1af
 800712e:	e6da      	b.n	8006ee6 <_dtoa_r+0x2e>
 8007130:	2300      	movs	r3, #0
 8007132:	e7e3      	b.n	80070fc <_dtoa_r+0x244>
 8007134:	2300      	movs	r3, #0
 8007136:	e7d5      	b.n	80070e4 <_dtoa_r+0x22c>
 8007138:	2401      	movs	r4, #1
 800713a:	2300      	movs	r3, #0
 800713c:	9307      	str	r3, [sp, #28]
 800713e:	9409      	str	r4, [sp, #36]	@ 0x24
 8007140:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8007144:	2200      	movs	r2, #0
 8007146:	f8cd b00c 	str.w	fp, [sp, #12]
 800714a:	2312      	movs	r3, #18
 800714c:	920c      	str	r2, [sp, #48]	@ 0x30
 800714e:	e7db      	b.n	8007108 <_dtoa_r+0x250>
 8007150:	2301      	movs	r3, #1
 8007152:	9309      	str	r3, [sp, #36]	@ 0x24
 8007154:	e7f4      	b.n	8007140 <_dtoa_r+0x288>
 8007156:	f04f 0b01 	mov.w	fp, #1
 800715a:	f8cd b00c 	str.w	fp, [sp, #12]
 800715e:	465b      	mov	r3, fp
 8007160:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8007164:	e7d0      	b.n	8007108 <_dtoa_r+0x250>
 8007166:	3101      	adds	r1, #1
 8007168:	0052      	lsls	r2, r2, #1
 800716a:	e7d1      	b.n	8007110 <_dtoa_r+0x258>
 800716c:	f3af 8000 	nop.w
 8007170:	636f4361 	.word	0x636f4361
 8007174:	3fd287a7 	.word	0x3fd287a7
 8007178:	8b60c8b3 	.word	0x8b60c8b3
 800717c:	3fc68a28 	.word	0x3fc68a28
 8007180:	509f79fb 	.word	0x509f79fb
 8007184:	3fd34413 	.word	0x3fd34413
 8007188:	08009061 	.word	0x08009061
 800718c:	08009078 	.word	0x08009078
 8007190:	7ff00000 	.word	0x7ff00000
 8007194:	08009031 	.word	0x08009031
 8007198:	3ff80000 	.word	0x3ff80000
 800719c:	080091c8 	.word	0x080091c8
 80071a0:	080090d0 	.word	0x080090d0
 80071a4:	0800905d 	.word	0x0800905d
 80071a8:	08009030 	.word	0x08009030
 80071ac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80071b0:	6018      	str	r0, [r3, #0]
 80071b2:	9b03      	ldr	r3, [sp, #12]
 80071b4:	2b0e      	cmp	r3, #14
 80071b6:	f200 80a1 	bhi.w	80072fc <_dtoa_r+0x444>
 80071ba:	2c00      	cmp	r4, #0
 80071bc:	f000 809e 	beq.w	80072fc <_dtoa_r+0x444>
 80071c0:	2f00      	cmp	r7, #0
 80071c2:	dd33      	ble.n	800722c <_dtoa_r+0x374>
 80071c4:	4b9c      	ldr	r3, [pc, #624]	@ (8007438 <_dtoa_r+0x580>)
 80071c6:	f007 020f 	and.w	r2, r7, #15
 80071ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80071ce:	ed93 7b00 	vldr	d7, [r3]
 80071d2:	05f8      	lsls	r0, r7, #23
 80071d4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80071d8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80071dc:	d516      	bpl.n	800720c <_dtoa_r+0x354>
 80071de:	4b97      	ldr	r3, [pc, #604]	@ (800743c <_dtoa_r+0x584>)
 80071e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80071e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80071e8:	f7f9 fb30 	bl	800084c <__aeabi_ddiv>
 80071ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80071f0:	f004 040f 	and.w	r4, r4, #15
 80071f4:	2603      	movs	r6, #3
 80071f6:	4d91      	ldr	r5, [pc, #580]	@ (800743c <_dtoa_r+0x584>)
 80071f8:	b954      	cbnz	r4, 8007210 <_dtoa_r+0x358>
 80071fa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80071fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007202:	f7f9 fb23 	bl	800084c <__aeabi_ddiv>
 8007206:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800720a:	e028      	b.n	800725e <_dtoa_r+0x3a6>
 800720c:	2602      	movs	r6, #2
 800720e:	e7f2      	b.n	80071f6 <_dtoa_r+0x33e>
 8007210:	07e1      	lsls	r1, r4, #31
 8007212:	d508      	bpl.n	8007226 <_dtoa_r+0x36e>
 8007214:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007218:	e9d5 2300 	ldrd	r2, r3, [r5]
 800721c:	f7f9 f9ec 	bl	80005f8 <__aeabi_dmul>
 8007220:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007224:	3601      	adds	r6, #1
 8007226:	1064      	asrs	r4, r4, #1
 8007228:	3508      	adds	r5, #8
 800722a:	e7e5      	b.n	80071f8 <_dtoa_r+0x340>
 800722c:	f000 80af 	beq.w	800738e <_dtoa_r+0x4d6>
 8007230:	427c      	negs	r4, r7
 8007232:	4b81      	ldr	r3, [pc, #516]	@ (8007438 <_dtoa_r+0x580>)
 8007234:	4d81      	ldr	r5, [pc, #516]	@ (800743c <_dtoa_r+0x584>)
 8007236:	f004 020f 	and.w	r2, r4, #15
 800723a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800723e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007242:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007246:	f7f9 f9d7 	bl	80005f8 <__aeabi_dmul>
 800724a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800724e:	1124      	asrs	r4, r4, #4
 8007250:	2300      	movs	r3, #0
 8007252:	2602      	movs	r6, #2
 8007254:	2c00      	cmp	r4, #0
 8007256:	f040 808f 	bne.w	8007378 <_dtoa_r+0x4c0>
 800725a:	2b00      	cmp	r3, #0
 800725c:	d1d3      	bne.n	8007206 <_dtoa_r+0x34e>
 800725e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007260:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007264:	2b00      	cmp	r3, #0
 8007266:	f000 8094 	beq.w	8007392 <_dtoa_r+0x4da>
 800726a:	4b75      	ldr	r3, [pc, #468]	@ (8007440 <_dtoa_r+0x588>)
 800726c:	2200      	movs	r2, #0
 800726e:	4620      	mov	r0, r4
 8007270:	4629      	mov	r1, r5
 8007272:	f7f9 fc33 	bl	8000adc <__aeabi_dcmplt>
 8007276:	2800      	cmp	r0, #0
 8007278:	f000 808b 	beq.w	8007392 <_dtoa_r+0x4da>
 800727c:	9b03      	ldr	r3, [sp, #12]
 800727e:	2b00      	cmp	r3, #0
 8007280:	f000 8087 	beq.w	8007392 <_dtoa_r+0x4da>
 8007284:	f1bb 0f00 	cmp.w	fp, #0
 8007288:	dd34      	ble.n	80072f4 <_dtoa_r+0x43c>
 800728a:	4620      	mov	r0, r4
 800728c:	4b6d      	ldr	r3, [pc, #436]	@ (8007444 <_dtoa_r+0x58c>)
 800728e:	2200      	movs	r2, #0
 8007290:	4629      	mov	r1, r5
 8007292:	f7f9 f9b1 	bl	80005f8 <__aeabi_dmul>
 8007296:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800729a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800729e:	3601      	adds	r6, #1
 80072a0:	465c      	mov	r4, fp
 80072a2:	4630      	mov	r0, r6
 80072a4:	f7f9 f93e 	bl	8000524 <__aeabi_i2d>
 80072a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072ac:	f7f9 f9a4 	bl	80005f8 <__aeabi_dmul>
 80072b0:	4b65      	ldr	r3, [pc, #404]	@ (8007448 <_dtoa_r+0x590>)
 80072b2:	2200      	movs	r2, #0
 80072b4:	f7f8 ffea 	bl	800028c <__adddf3>
 80072b8:	4605      	mov	r5, r0
 80072ba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80072be:	2c00      	cmp	r4, #0
 80072c0:	d16a      	bne.n	8007398 <_dtoa_r+0x4e0>
 80072c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80072c6:	4b61      	ldr	r3, [pc, #388]	@ (800744c <_dtoa_r+0x594>)
 80072c8:	2200      	movs	r2, #0
 80072ca:	f7f8 ffdd 	bl	8000288 <__aeabi_dsub>
 80072ce:	4602      	mov	r2, r0
 80072d0:	460b      	mov	r3, r1
 80072d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80072d6:	462a      	mov	r2, r5
 80072d8:	4633      	mov	r3, r6
 80072da:	f7f9 fc1d 	bl	8000b18 <__aeabi_dcmpgt>
 80072de:	2800      	cmp	r0, #0
 80072e0:	f040 8298 	bne.w	8007814 <_dtoa_r+0x95c>
 80072e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80072e8:	462a      	mov	r2, r5
 80072ea:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80072ee:	f7f9 fbf5 	bl	8000adc <__aeabi_dcmplt>
 80072f2:	bb38      	cbnz	r0, 8007344 <_dtoa_r+0x48c>
 80072f4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80072f8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80072fc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80072fe:	2b00      	cmp	r3, #0
 8007300:	f2c0 8157 	blt.w	80075b2 <_dtoa_r+0x6fa>
 8007304:	2f0e      	cmp	r7, #14
 8007306:	f300 8154 	bgt.w	80075b2 <_dtoa_r+0x6fa>
 800730a:	4b4b      	ldr	r3, [pc, #300]	@ (8007438 <_dtoa_r+0x580>)
 800730c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007310:	ed93 7b00 	vldr	d7, [r3]
 8007314:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007316:	2b00      	cmp	r3, #0
 8007318:	ed8d 7b00 	vstr	d7, [sp]
 800731c:	f280 80e5 	bge.w	80074ea <_dtoa_r+0x632>
 8007320:	9b03      	ldr	r3, [sp, #12]
 8007322:	2b00      	cmp	r3, #0
 8007324:	f300 80e1 	bgt.w	80074ea <_dtoa_r+0x632>
 8007328:	d10c      	bne.n	8007344 <_dtoa_r+0x48c>
 800732a:	4b48      	ldr	r3, [pc, #288]	@ (800744c <_dtoa_r+0x594>)
 800732c:	2200      	movs	r2, #0
 800732e:	ec51 0b17 	vmov	r0, r1, d7
 8007332:	f7f9 f961 	bl	80005f8 <__aeabi_dmul>
 8007336:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800733a:	f7f9 fbe3 	bl	8000b04 <__aeabi_dcmpge>
 800733e:	2800      	cmp	r0, #0
 8007340:	f000 8266 	beq.w	8007810 <_dtoa_r+0x958>
 8007344:	2400      	movs	r4, #0
 8007346:	4625      	mov	r5, r4
 8007348:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800734a:	4656      	mov	r6, sl
 800734c:	ea6f 0803 	mvn.w	r8, r3
 8007350:	2700      	movs	r7, #0
 8007352:	4621      	mov	r1, r4
 8007354:	4648      	mov	r0, r9
 8007356:	f000 fe79 	bl	800804c <_Bfree>
 800735a:	2d00      	cmp	r5, #0
 800735c:	f000 80bd 	beq.w	80074da <_dtoa_r+0x622>
 8007360:	b12f      	cbz	r7, 800736e <_dtoa_r+0x4b6>
 8007362:	42af      	cmp	r7, r5
 8007364:	d003      	beq.n	800736e <_dtoa_r+0x4b6>
 8007366:	4639      	mov	r1, r7
 8007368:	4648      	mov	r0, r9
 800736a:	f000 fe6f 	bl	800804c <_Bfree>
 800736e:	4629      	mov	r1, r5
 8007370:	4648      	mov	r0, r9
 8007372:	f000 fe6b 	bl	800804c <_Bfree>
 8007376:	e0b0      	b.n	80074da <_dtoa_r+0x622>
 8007378:	07e2      	lsls	r2, r4, #31
 800737a:	d505      	bpl.n	8007388 <_dtoa_r+0x4d0>
 800737c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007380:	f7f9 f93a 	bl	80005f8 <__aeabi_dmul>
 8007384:	3601      	adds	r6, #1
 8007386:	2301      	movs	r3, #1
 8007388:	1064      	asrs	r4, r4, #1
 800738a:	3508      	adds	r5, #8
 800738c:	e762      	b.n	8007254 <_dtoa_r+0x39c>
 800738e:	2602      	movs	r6, #2
 8007390:	e765      	b.n	800725e <_dtoa_r+0x3a6>
 8007392:	9c03      	ldr	r4, [sp, #12]
 8007394:	46b8      	mov	r8, r7
 8007396:	e784      	b.n	80072a2 <_dtoa_r+0x3ea>
 8007398:	4b27      	ldr	r3, [pc, #156]	@ (8007438 <_dtoa_r+0x580>)
 800739a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800739c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80073a0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80073a4:	4454      	add	r4, sl
 80073a6:	2900      	cmp	r1, #0
 80073a8:	d054      	beq.n	8007454 <_dtoa_r+0x59c>
 80073aa:	4929      	ldr	r1, [pc, #164]	@ (8007450 <_dtoa_r+0x598>)
 80073ac:	2000      	movs	r0, #0
 80073ae:	f7f9 fa4d 	bl	800084c <__aeabi_ddiv>
 80073b2:	4633      	mov	r3, r6
 80073b4:	462a      	mov	r2, r5
 80073b6:	f7f8 ff67 	bl	8000288 <__aeabi_dsub>
 80073ba:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80073be:	4656      	mov	r6, sl
 80073c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80073c4:	f7f9 fbc8 	bl	8000b58 <__aeabi_d2iz>
 80073c8:	4605      	mov	r5, r0
 80073ca:	f7f9 f8ab 	bl	8000524 <__aeabi_i2d>
 80073ce:	4602      	mov	r2, r0
 80073d0:	460b      	mov	r3, r1
 80073d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80073d6:	f7f8 ff57 	bl	8000288 <__aeabi_dsub>
 80073da:	3530      	adds	r5, #48	@ 0x30
 80073dc:	4602      	mov	r2, r0
 80073de:	460b      	mov	r3, r1
 80073e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80073e4:	f806 5b01 	strb.w	r5, [r6], #1
 80073e8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80073ec:	f7f9 fb76 	bl	8000adc <__aeabi_dcmplt>
 80073f0:	2800      	cmp	r0, #0
 80073f2:	d172      	bne.n	80074da <_dtoa_r+0x622>
 80073f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073f8:	4911      	ldr	r1, [pc, #68]	@ (8007440 <_dtoa_r+0x588>)
 80073fa:	2000      	movs	r0, #0
 80073fc:	f7f8 ff44 	bl	8000288 <__aeabi_dsub>
 8007400:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007404:	f7f9 fb6a 	bl	8000adc <__aeabi_dcmplt>
 8007408:	2800      	cmp	r0, #0
 800740a:	f040 80b4 	bne.w	8007576 <_dtoa_r+0x6be>
 800740e:	42a6      	cmp	r6, r4
 8007410:	f43f af70 	beq.w	80072f4 <_dtoa_r+0x43c>
 8007414:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007418:	4b0a      	ldr	r3, [pc, #40]	@ (8007444 <_dtoa_r+0x58c>)
 800741a:	2200      	movs	r2, #0
 800741c:	f7f9 f8ec 	bl	80005f8 <__aeabi_dmul>
 8007420:	4b08      	ldr	r3, [pc, #32]	@ (8007444 <_dtoa_r+0x58c>)
 8007422:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007426:	2200      	movs	r2, #0
 8007428:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800742c:	f7f9 f8e4 	bl	80005f8 <__aeabi_dmul>
 8007430:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007434:	e7c4      	b.n	80073c0 <_dtoa_r+0x508>
 8007436:	bf00      	nop
 8007438:	080091c8 	.word	0x080091c8
 800743c:	080091a0 	.word	0x080091a0
 8007440:	3ff00000 	.word	0x3ff00000
 8007444:	40240000 	.word	0x40240000
 8007448:	401c0000 	.word	0x401c0000
 800744c:	40140000 	.word	0x40140000
 8007450:	3fe00000 	.word	0x3fe00000
 8007454:	4631      	mov	r1, r6
 8007456:	4628      	mov	r0, r5
 8007458:	f7f9 f8ce 	bl	80005f8 <__aeabi_dmul>
 800745c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007460:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007462:	4656      	mov	r6, sl
 8007464:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007468:	f7f9 fb76 	bl	8000b58 <__aeabi_d2iz>
 800746c:	4605      	mov	r5, r0
 800746e:	f7f9 f859 	bl	8000524 <__aeabi_i2d>
 8007472:	4602      	mov	r2, r0
 8007474:	460b      	mov	r3, r1
 8007476:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800747a:	f7f8 ff05 	bl	8000288 <__aeabi_dsub>
 800747e:	3530      	adds	r5, #48	@ 0x30
 8007480:	f806 5b01 	strb.w	r5, [r6], #1
 8007484:	4602      	mov	r2, r0
 8007486:	460b      	mov	r3, r1
 8007488:	42a6      	cmp	r6, r4
 800748a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800748e:	f04f 0200 	mov.w	r2, #0
 8007492:	d124      	bne.n	80074de <_dtoa_r+0x626>
 8007494:	4baf      	ldr	r3, [pc, #700]	@ (8007754 <_dtoa_r+0x89c>)
 8007496:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800749a:	f7f8 fef7 	bl	800028c <__adddf3>
 800749e:	4602      	mov	r2, r0
 80074a0:	460b      	mov	r3, r1
 80074a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074a6:	f7f9 fb37 	bl	8000b18 <__aeabi_dcmpgt>
 80074aa:	2800      	cmp	r0, #0
 80074ac:	d163      	bne.n	8007576 <_dtoa_r+0x6be>
 80074ae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80074b2:	49a8      	ldr	r1, [pc, #672]	@ (8007754 <_dtoa_r+0x89c>)
 80074b4:	2000      	movs	r0, #0
 80074b6:	f7f8 fee7 	bl	8000288 <__aeabi_dsub>
 80074ba:	4602      	mov	r2, r0
 80074bc:	460b      	mov	r3, r1
 80074be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074c2:	f7f9 fb0b 	bl	8000adc <__aeabi_dcmplt>
 80074c6:	2800      	cmp	r0, #0
 80074c8:	f43f af14 	beq.w	80072f4 <_dtoa_r+0x43c>
 80074cc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80074ce:	1e73      	subs	r3, r6, #1
 80074d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80074d2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80074d6:	2b30      	cmp	r3, #48	@ 0x30
 80074d8:	d0f8      	beq.n	80074cc <_dtoa_r+0x614>
 80074da:	4647      	mov	r7, r8
 80074dc:	e03b      	b.n	8007556 <_dtoa_r+0x69e>
 80074de:	4b9e      	ldr	r3, [pc, #632]	@ (8007758 <_dtoa_r+0x8a0>)
 80074e0:	f7f9 f88a 	bl	80005f8 <__aeabi_dmul>
 80074e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80074e8:	e7bc      	b.n	8007464 <_dtoa_r+0x5ac>
 80074ea:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80074ee:	4656      	mov	r6, sl
 80074f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074f4:	4620      	mov	r0, r4
 80074f6:	4629      	mov	r1, r5
 80074f8:	f7f9 f9a8 	bl	800084c <__aeabi_ddiv>
 80074fc:	f7f9 fb2c 	bl	8000b58 <__aeabi_d2iz>
 8007500:	4680      	mov	r8, r0
 8007502:	f7f9 f80f 	bl	8000524 <__aeabi_i2d>
 8007506:	e9dd 2300 	ldrd	r2, r3, [sp]
 800750a:	f7f9 f875 	bl	80005f8 <__aeabi_dmul>
 800750e:	4602      	mov	r2, r0
 8007510:	460b      	mov	r3, r1
 8007512:	4620      	mov	r0, r4
 8007514:	4629      	mov	r1, r5
 8007516:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800751a:	f7f8 feb5 	bl	8000288 <__aeabi_dsub>
 800751e:	f806 4b01 	strb.w	r4, [r6], #1
 8007522:	9d03      	ldr	r5, [sp, #12]
 8007524:	eba6 040a 	sub.w	r4, r6, sl
 8007528:	42a5      	cmp	r5, r4
 800752a:	4602      	mov	r2, r0
 800752c:	460b      	mov	r3, r1
 800752e:	d133      	bne.n	8007598 <_dtoa_r+0x6e0>
 8007530:	f7f8 feac 	bl	800028c <__adddf3>
 8007534:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007538:	4604      	mov	r4, r0
 800753a:	460d      	mov	r5, r1
 800753c:	f7f9 faec 	bl	8000b18 <__aeabi_dcmpgt>
 8007540:	b9c0      	cbnz	r0, 8007574 <_dtoa_r+0x6bc>
 8007542:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007546:	4620      	mov	r0, r4
 8007548:	4629      	mov	r1, r5
 800754a:	f7f9 fabd 	bl	8000ac8 <__aeabi_dcmpeq>
 800754e:	b110      	cbz	r0, 8007556 <_dtoa_r+0x69e>
 8007550:	f018 0f01 	tst.w	r8, #1
 8007554:	d10e      	bne.n	8007574 <_dtoa_r+0x6bc>
 8007556:	9902      	ldr	r1, [sp, #8]
 8007558:	4648      	mov	r0, r9
 800755a:	f000 fd77 	bl	800804c <_Bfree>
 800755e:	2300      	movs	r3, #0
 8007560:	7033      	strb	r3, [r6, #0]
 8007562:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007564:	3701      	adds	r7, #1
 8007566:	601f      	str	r7, [r3, #0]
 8007568:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800756a:	2b00      	cmp	r3, #0
 800756c:	f000 824b 	beq.w	8007a06 <_dtoa_r+0xb4e>
 8007570:	601e      	str	r6, [r3, #0]
 8007572:	e248      	b.n	8007a06 <_dtoa_r+0xb4e>
 8007574:	46b8      	mov	r8, r7
 8007576:	4633      	mov	r3, r6
 8007578:	461e      	mov	r6, r3
 800757a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800757e:	2a39      	cmp	r2, #57	@ 0x39
 8007580:	d106      	bne.n	8007590 <_dtoa_r+0x6d8>
 8007582:	459a      	cmp	sl, r3
 8007584:	d1f8      	bne.n	8007578 <_dtoa_r+0x6c0>
 8007586:	2230      	movs	r2, #48	@ 0x30
 8007588:	f108 0801 	add.w	r8, r8, #1
 800758c:	f88a 2000 	strb.w	r2, [sl]
 8007590:	781a      	ldrb	r2, [r3, #0]
 8007592:	3201      	adds	r2, #1
 8007594:	701a      	strb	r2, [r3, #0]
 8007596:	e7a0      	b.n	80074da <_dtoa_r+0x622>
 8007598:	4b6f      	ldr	r3, [pc, #444]	@ (8007758 <_dtoa_r+0x8a0>)
 800759a:	2200      	movs	r2, #0
 800759c:	f7f9 f82c 	bl	80005f8 <__aeabi_dmul>
 80075a0:	2200      	movs	r2, #0
 80075a2:	2300      	movs	r3, #0
 80075a4:	4604      	mov	r4, r0
 80075a6:	460d      	mov	r5, r1
 80075a8:	f7f9 fa8e 	bl	8000ac8 <__aeabi_dcmpeq>
 80075ac:	2800      	cmp	r0, #0
 80075ae:	d09f      	beq.n	80074f0 <_dtoa_r+0x638>
 80075b0:	e7d1      	b.n	8007556 <_dtoa_r+0x69e>
 80075b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80075b4:	2a00      	cmp	r2, #0
 80075b6:	f000 80ea 	beq.w	800778e <_dtoa_r+0x8d6>
 80075ba:	9a07      	ldr	r2, [sp, #28]
 80075bc:	2a01      	cmp	r2, #1
 80075be:	f300 80cd 	bgt.w	800775c <_dtoa_r+0x8a4>
 80075c2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80075c4:	2a00      	cmp	r2, #0
 80075c6:	f000 80c1 	beq.w	800774c <_dtoa_r+0x894>
 80075ca:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80075ce:	9c08      	ldr	r4, [sp, #32]
 80075d0:	9e00      	ldr	r6, [sp, #0]
 80075d2:	9a00      	ldr	r2, [sp, #0]
 80075d4:	441a      	add	r2, r3
 80075d6:	9200      	str	r2, [sp, #0]
 80075d8:	9a06      	ldr	r2, [sp, #24]
 80075da:	2101      	movs	r1, #1
 80075dc:	441a      	add	r2, r3
 80075de:	4648      	mov	r0, r9
 80075e0:	9206      	str	r2, [sp, #24]
 80075e2:	f000 fde7 	bl	80081b4 <__i2b>
 80075e6:	4605      	mov	r5, r0
 80075e8:	b166      	cbz	r6, 8007604 <_dtoa_r+0x74c>
 80075ea:	9b06      	ldr	r3, [sp, #24]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	dd09      	ble.n	8007604 <_dtoa_r+0x74c>
 80075f0:	42b3      	cmp	r3, r6
 80075f2:	9a00      	ldr	r2, [sp, #0]
 80075f4:	bfa8      	it	ge
 80075f6:	4633      	movge	r3, r6
 80075f8:	1ad2      	subs	r2, r2, r3
 80075fa:	9200      	str	r2, [sp, #0]
 80075fc:	9a06      	ldr	r2, [sp, #24]
 80075fe:	1af6      	subs	r6, r6, r3
 8007600:	1ad3      	subs	r3, r2, r3
 8007602:	9306      	str	r3, [sp, #24]
 8007604:	9b08      	ldr	r3, [sp, #32]
 8007606:	b30b      	cbz	r3, 800764c <_dtoa_r+0x794>
 8007608:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800760a:	2b00      	cmp	r3, #0
 800760c:	f000 80c6 	beq.w	800779c <_dtoa_r+0x8e4>
 8007610:	2c00      	cmp	r4, #0
 8007612:	f000 80c0 	beq.w	8007796 <_dtoa_r+0x8de>
 8007616:	4629      	mov	r1, r5
 8007618:	4622      	mov	r2, r4
 800761a:	4648      	mov	r0, r9
 800761c:	f000 fe82 	bl	8008324 <__pow5mult>
 8007620:	9a02      	ldr	r2, [sp, #8]
 8007622:	4601      	mov	r1, r0
 8007624:	4605      	mov	r5, r0
 8007626:	4648      	mov	r0, r9
 8007628:	f000 fdda 	bl	80081e0 <__multiply>
 800762c:	9902      	ldr	r1, [sp, #8]
 800762e:	4680      	mov	r8, r0
 8007630:	4648      	mov	r0, r9
 8007632:	f000 fd0b 	bl	800804c <_Bfree>
 8007636:	9b08      	ldr	r3, [sp, #32]
 8007638:	1b1b      	subs	r3, r3, r4
 800763a:	9308      	str	r3, [sp, #32]
 800763c:	f000 80b1 	beq.w	80077a2 <_dtoa_r+0x8ea>
 8007640:	9a08      	ldr	r2, [sp, #32]
 8007642:	4641      	mov	r1, r8
 8007644:	4648      	mov	r0, r9
 8007646:	f000 fe6d 	bl	8008324 <__pow5mult>
 800764a:	9002      	str	r0, [sp, #8]
 800764c:	2101      	movs	r1, #1
 800764e:	4648      	mov	r0, r9
 8007650:	f000 fdb0 	bl	80081b4 <__i2b>
 8007654:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007656:	4604      	mov	r4, r0
 8007658:	2b00      	cmp	r3, #0
 800765a:	f000 81d8 	beq.w	8007a0e <_dtoa_r+0xb56>
 800765e:	461a      	mov	r2, r3
 8007660:	4601      	mov	r1, r0
 8007662:	4648      	mov	r0, r9
 8007664:	f000 fe5e 	bl	8008324 <__pow5mult>
 8007668:	9b07      	ldr	r3, [sp, #28]
 800766a:	2b01      	cmp	r3, #1
 800766c:	4604      	mov	r4, r0
 800766e:	f300 809f 	bgt.w	80077b0 <_dtoa_r+0x8f8>
 8007672:	9b04      	ldr	r3, [sp, #16]
 8007674:	2b00      	cmp	r3, #0
 8007676:	f040 8097 	bne.w	80077a8 <_dtoa_r+0x8f0>
 800767a:	9b05      	ldr	r3, [sp, #20]
 800767c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007680:	2b00      	cmp	r3, #0
 8007682:	f040 8093 	bne.w	80077ac <_dtoa_r+0x8f4>
 8007686:	9b05      	ldr	r3, [sp, #20]
 8007688:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800768c:	0d1b      	lsrs	r3, r3, #20
 800768e:	051b      	lsls	r3, r3, #20
 8007690:	b133      	cbz	r3, 80076a0 <_dtoa_r+0x7e8>
 8007692:	9b00      	ldr	r3, [sp, #0]
 8007694:	3301      	adds	r3, #1
 8007696:	9300      	str	r3, [sp, #0]
 8007698:	9b06      	ldr	r3, [sp, #24]
 800769a:	3301      	adds	r3, #1
 800769c:	9306      	str	r3, [sp, #24]
 800769e:	2301      	movs	r3, #1
 80076a0:	9308      	str	r3, [sp, #32]
 80076a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	f000 81b8 	beq.w	8007a1a <_dtoa_r+0xb62>
 80076aa:	6923      	ldr	r3, [r4, #16]
 80076ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80076b0:	6918      	ldr	r0, [r3, #16]
 80076b2:	f000 fd33 	bl	800811c <__hi0bits>
 80076b6:	f1c0 0020 	rsb	r0, r0, #32
 80076ba:	9b06      	ldr	r3, [sp, #24]
 80076bc:	4418      	add	r0, r3
 80076be:	f010 001f 	ands.w	r0, r0, #31
 80076c2:	f000 8082 	beq.w	80077ca <_dtoa_r+0x912>
 80076c6:	f1c0 0320 	rsb	r3, r0, #32
 80076ca:	2b04      	cmp	r3, #4
 80076cc:	dd73      	ble.n	80077b6 <_dtoa_r+0x8fe>
 80076ce:	9b00      	ldr	r3, [sp, #0]
 80076d0:	f1c0 001c 	rsb	r0, r0, #28
 80076d4:	4403      	add	r3, r0
 80076d6:	9300      	str	r3, [sp, #0]
 80076d8:	9b06      	ldr	r3, [sp, #24]
 80076da:	4403      	add	r3, r0
 80076dc:	4406      	add	r6, r0
 80076de:	9306      	str	r3, [sp, #24]
 80076e0:	9b00      	ldr	r3, [sp, #0]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	dd05      	ble.n	80076f2 <_dtoa_r+0x83a>
 80076e6:	9902      	ldr	r1, [sp, #8]
 80076e8:	461a      	mov	r2, r3
 80076ea:	4648      	mov	r0, r9
 80076ec:	f000 fe74 	bl	80083d8 <__lshift>
 80076f0:	9002      	str	r0, [sp, #8]
 80076f2:	9b06      	ldr	r3, [sp, #24]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	dd05      	ble.n	8007704 <_dtoa_r+0x84c>
 80076f8:	4621      	mov	r1, r4
 80076fa:	461a      	mov	r2, r3
 80076fc:	4648      	mov	r0, r9
 80076fe:	f000 fe6b 	bl	80083d8 <__lshift>
 8007702:	4604      	mov	r4, r0
 8007704:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007706:	2b00      	cmp	r3, #0
 8007708:	d061      	beq.n	80077ce <_dtoa_r+0x916>
 800770a:	9802      	ldr	r0, [sp, #8]
 800770c:	4621      	mov	r1, r4
 800770e:	f000 fecf 	bl	80084b0 <__mcmp>
 8007712:	2800      	cmp	r0, #0
 8007714:	da5b      	bge.n	80077ce <_dtoa_r+0x916>
 8007716:	2300      	movs	r3, #0
 8007718:	9902      	ldr	r1, [sp, #8]
 800771a:	220a      	movs	r2, #10
 800771c:	4648      	mov	r0, r9
 800771e:	f000 fcb7 	bl	8008090 <__multadd>
 8007722:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007724:	9002      	str	r0, [sp, #8]
 8007726:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800772a:	2b00      	cmp	r3, #0
 800772c:	f000 8177 	beq.w	8007a1e <_dtoa_r+0xb66>
 8007730:	4629      	mov	r1, r5
 8007732:	2300      	movs	r3, #0
 8007734:	220a      	movs	r2, #10
 8007736:	4648      	mov	r0, r9
 8007738:	f000 fcaa 	bl	8008090 <__multadd>
 800773c:	f1bb 0f00 	cmp.w	fp, #0
 8007740:	4605      	mov	r5, r0
 8007742:	dc6f      	bgt.n	8007824 <_dtoa_r+0x96c>
 8007744:	9b07      	ldr	r3, [sp, #28]
 8007746:	2b02      	cmp	r3, #2
 8007748:	dc49      	bgt.n	80077de <_dtoa_r+0x926>
 800774a:	e06b      	b.n	8007824 <_dtoa_r+0x96c>
 800774c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800774e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007752:	e73c      	b.n	80075ce <_dtoa_r+0x716>
 8007754:	3fe00000 	.word	0x3fe00000
 8007758:	40240000 	.word	0x40240000
 800775c:	9b03      	ldr	r3, [sp, #12]
 800775e:	1e5c      	subs	r4, r3, #1
 8007760:	9b08      	ldr	r3, [sp, #32]
 8007762:	42a3      	cmp	r3, r4
 8007764:	db09      	blt.n	800777a <_dtoa_r+0x8c2>
 8007766:	1b1c      	subs	r4, r3, r4
 8007768:	9b03      	ldr	r3, [sp, #12]
 800776a:	2b00      	cmp	r3, #0
 800776c:	f6bf af30 	bge.w	80075d0 <_dtoa_r+0x718>
 8007770:	9b00      	ldr	r3, [sp, #0]
 8007772:	9a03      	ldr	r2, [sp, #12]
 8007774:	1a9e      	subs	r6, r3, r2
 8007776:	2300      	movs	r3, #0
 8007778:	e72b      	b.n	80075d2 <_dtoa_r+0x71a>
 800777a:	9b08      	ldr	r3, [sp, #32]
 800777c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800777e:	9408      	str	r4, [sp, #32]
 8007780:	1ae3      	subs	r3, r4, r3
 8007782:	441a      	add	r2, r3
 8007784:	9e00      	ldr	r6, [sp, #0]
 8007786:	9b03      	ldr	r3, [sp, #12]
 8007788:	920d      	str	r2, [sp, #52]	@ 0x34
 800778a:	2400      	movs	r4, #0
 800778c:	e721      	b.n	80075d2 <_dtoa_r+0x71a>
 800778e:	9c08      	ldr	r4, [sp, #32]
 8007790:	9e00      	ldr	r6, [sp, #0]
 8007792:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8007794:	e728      	b.n	80075e8 <_dtoa_r+0x730>
 8007796:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800779a:	e751      	b.n	8007640 <_dtoa_r+0x788>
 800779c:	9a08      	ldr	r2, [sp, #32]
 800779e:	9902      	ldr	r1, [sp, #8]
 80077a0:	e750      	b.n	8007644 <_dtoa_r+0x78c>
 80077a2:	f8cd 8008 	str.w	r8, [sp, #8]
 80077a6:	e751      	b.n	800764c <_dtoa_r+0x794>
 80077a8:	2300      	movs	r3, #0
 80077aa:	e779      	b.n	80076a0 <_dtoa_r+0x7e8>
 80077ac:	9b04      	ldr	r3, [sp, #16]
 80077ae:	e777      	b.n	80076a0 <_dtoa_r+0x7e8>
 80077b0:	2300      	movs	r3, #0
 80077b2:	9308      	str	r3, [sp, #32]
 80077b4:	e779      	b.n	80076aa <_dtoa_r+0x7f2>
 80077b6:	d093      	beq.n	80076e0 <_dtoa_r+0x828>
 80077b8:	9a00      	ldr	r2, [sp, #0]
 80077ba:	331c      	adds	r3, #28
 80077bc:	441a      	add	r2, r3
 80077be:	9200      	str	r2, [sp, #0]
 80077c0:	9a06      	ldr	r2, [sp, #24]
 80077c2:	441a      	add	r2, r3
 80077c4:	441e      	add	r6, r3
 80077c6:	9206      	str	r2, [sp, #24]
 80077c8:	e78a      	b.n	80076e0 <_dtoa_r+0x828>
 80077ca:	4603      	mov	r3, r0
 80077cc:	e7f4      	b.n	80077b8 <_dtoa_r+0x900>
 80077ce:	9b03      	ldr	r3, [sp, #12]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	46b8      	mov	r8, r7
 80077d4:	dc20      	bgt.n	8007818 <_dtoa_r+0x960>
 80077d6:	469b      	mov	fp, r3
 80077d8:	9b07      	ldr	r3, [sp, #28]
 80077da:	2b02      	cmp	r3, #2
 80077dc:	dd1e      	ble.n	800781c <_dtoa_r+0x964>
 80077de:	f1bb 0f00 	cmp.w	fp, #0
 80077e2:	f47f adb1 	bne.w	8007348 <_dtoa_r+0x490>
 80077e6:	4621      	mov	r1, r4
 80077e8:	465b      	mov	r3, fp
 80077ea:	2205      	movs	r2, #5
 80077ec:	4648      	mov	r0, r9
 80077ee:	f000 fc4f 	bl	8008090 <__multadd>
 80077f2:	4601      	mov	r1, r0
 80077f4:	4604      	mov	r4, r0
 80077f6:	9802      	ldr	r0, [sp, #8]
 80077f8:	f000 fe5a 	bl	80084b0 <__mcmp>
 80077fc:	2800      	cmp	r0, #0
 80077fe:	f77f ada3 	ble.w	8007348 <_dtoa_r+0x490>
 8007802:	4656      	mov	r6, sl
 8007804:	2331      	movs	r3, #49	@ 0x31
 8007806:	f806 3b01 	strb.w	r3, [r6], #1
 800780a:	f108 0801 	add.w	r8, r8, #1
 800780e:	e59f      	b.n	8007350 <_dtoa_r+0x498>
 8007810:	9c03      	ldr	r4, [sp, #12]
 8007812:	46b8      	mov	r8, r7
 8007814:	4625      	mov	r5, r4
 8007816:	e7f4      	b.n	8007802 <_dtoa_r+0x94a>
 8007818:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800781c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800781e:	2b00      	cmp	r3, #0
 8007820:	f000 8101 	beq.w	8007a26 <_dtoa_r+0xb6e>
 8007824:	2e00      	cmp	r6, #0
 8007826:	dd05      	ble.n	8007834 <_dtoa_r+0x97c>
 8007828:	4629      	mov	r1, r5
 800782a:	4632      	mov	r2, r6
 800782c:	4648      	mov	r0, r9
 800782e:	f000 fdd3 	bl	80083d8 <__lshift>
 8007832:	4605      	mov	r5, r0
 8007834:	9b08      	ldr	r3, [sp, #32]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d05c      	beq.n	80078f4 <_dtoa_r+0xa3c>
 800783a:	6869      	ldr	r1, [r5, #4]
 800783c:	4648      	mov	r0, r9
 800783e:	f000 fbc5 	bl	8007fcc <_Balloc>
 8007842:	4606      	mov	r6, r0
 8007844:	b928      	cbnz	r0, 8007852 <_dtoa_r+0x99a>
 8007846:	4b82      	ldr	r3, [pc, #520]	@ (8007a50 <_dtoa_r+0xb98>)
 8007848:	4602      	mov	r2, r0
 800784a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800784e:	f7ff bb4a 	b.w	8006ee6 <_dtoa_r+0x2e>
 8007852:	692a      	ldr	r2, [r5, #16]
 8007854:	3202      	adds	r2, #2
 8007856:	0092      	lsls	r2, r2, #2
 8007858:	f105 010c 	add.w	r1, r5, #12
 800785c:	300c      	adds	r0, #12
 800785e:	f001 f811 	bl	8008884 <memcpy>
 8007862:	2201      	movs	r2, #1
 8007864:	4631      	mov	r1, r6
 8007866:	4648      	mov	r0, r9
 8007868:	f000 fdb6 	bl	80083d8 <__lshift>
 800786c:	f10a 0301 	add.w	r3, sl, #1
 8007870:	9300      	str	r3, [sp, #0]
 8007872:	eb0a 030b 	add.w	r3, sl, fp
 8007876:	9308      	str	r3, [sp, #32]
 8007878:	9b04      	ldr	r3, [sp, #16]
 800787a:	f003 0301 	and.w	r3, r3, #1
 800787e:	462f      	mov	r7, r5
 8007880:	9306      	str	r3, [sp, #24]
 8007882:	4605      	mov	r5, r0
 8007884:	9b00      	ldr	r3, [sp, #0]
 8007886:	9802      	ldr	r0, [sp, #8]
 8007888:	4621      	mov	r1, r4
 800788a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800788e:	f7ff fa8b 	bl	8006da8 <quorem>
 8007892:	4603      	mov	r3, r0
 8007894:	3330      	adds	r3, #48	@ 0x30
 8007896:	9003      	str	r0, [sp, #12]
 8007898:	4639      	mov	r1, r7
 800789a:	9802      	ldr	r0, [sp, #8]
 800789c:	9309      	str	r3, [sp, #36]	@ 0x24
 800789e:	f000 fe07 	bl	80084b0 <__mcmp>
 80078a2:	462a      	mov	r2, r5
 80078a4:	9004      	str	r0, [sp, #16]
 80078a6:	4621      	mov	r1, r4
 80078a8:	4648      	mov	r0, r9
 80078aa:	f000 fe1d 	bl	80084e8 <__mdiff>
 80078ae:	68c2      	ldr	r2, [r0, #12]
 80078b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078b2:	4606      	mov	r6, r0
 80078b4:	bb02      	cbnz	r2, 80078f8 <_dtoa_r+0xa40>
 80078b6:	4601      	mov	r1, r0
 80078b8:	9802      	ldr	r0, [sp, #8]
 80078ba:	f000 fdf9 	bl	80084b0 <__mcmp>
 80078be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078c0:	4602      	mov	r2, r0
 80078c2:	4631      	mov	r1, r6
 80078c4:	4648      	mov	r0, r9
 80078c6:	920c      	str	r2, [sp, #48]	@ 0x30
 80078c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80078ca:	f000 fbbf 	bl	800804c <_Bfree>
 80078ce:	9b07      	ldr	r3, [sp, #28]
 80078d0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80078d2:	9e00      	ldr	r6, [sp, #0]
 80078d4:	ea42 0103 	orr.w	r1, r2, r3
 80078d8:	9b06      	ldr	r3, [sp, #24]
 80078da:	4319      	orrs	r1, r3
 80078dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078de:	d10d      	bne.n	80078fc <_dtoa_r+0xa44>
 80078e0:	2b39      	cmp	r3, #57	@ 0x39
 80078e2:	d027      	beq.n	8007934 <_dtoa_r+0xa7c>
 80078e4:	9a04      	ldr	r2, [sp, #16]
 80078e6:	2a00      	cmp	r2, #0
 80078e8:	dd01      	ble.n	80078ee <_dtoa_r+0xa36>
 80078ea:	9b03      	ldr	r3, [sp, #12]
 80078ec:	3331      	adds	r3, #49	@ 0x31
 80078ee:	f88b 3000 	strb.w	r3, [fp]
 80078f2:	e52e      	b.n	8007352 <_dtoa_r+0x49a>
 80078f4:	4628      	mov	r0, r5
 80078f6:	e7b9      	b.n	800786c <_dtoa_r+0x9b4>
 80078f8:	2201      	movs	r2, #1
 80078fa:	e7e2      	b.n	80078c2 <_dtoa_r+0xa0a>
 80078fc:	9904      	ldr	r1, [sp, #16]
 80078fe:	2900      	cmp	r1, #0
 8007900:	db04      	blt.n	800790c <_dtoa_r+0xa54>
 8007902:	9807      	ldr	r0, [sp, #28]
 8007904:	4301      	orrs	r1, r0
 8007906:	9806      	ldr	r0, [sp, #24]
 8007908:	4301      	orrs	r1, r0
 800790a:	d120      	bne.n	800794e <_dtoa_r+0xa96>
 800790c:	2a00      	cmp	r2, #0
 800790e:	ddee      	ble.n	80078ee <_dtoa_r+0xa36>
 8007910:	9902      	ldr	r1, [sp, #8]
 8007912:	9300      	str	r3, [sp, #0]
 8007914:	2201      	movs	r2, #1
 8007916:	4648      	mov	r0, r9
 8007918:	f000 fd5e 	bl	80083d8 <__lshift>
 800791c:	4621      	mov	r1, r4
 800791e:	9002      	str	r0, [sp, #8]
 8007920:	f000 fdc6 	bl	80084b0 <__mcmp>
 8007924:	2800      	cmp	r0, #0
 8007926:	9b00      	ldr	r3, [sp, #0]
 8007928:	dc02      	bgt.n	8007930 <_dtoa_r+0xa78>
 800792a:	d1e0      	bne.n	80078ee <_dtoa_r+0xa36>
 800792c:	07da      	lsls	r2, r3, #31
 800792e:	d5de      	bpl.n	80078ee <_dtoa_r+0xa36>
 8007930:	2b39      	cmp	r3, #57	@ 0x39
 8007932:	d1da      	bne.n	80078ea <_dtoa_r+0xa32>
 8007934:	2339      	movs	r3, #57	@ 0x39
 8007936:	f88b 3000 	strb.w	r3, [fp]
 800793a:	4633      	mov	r3, r6
 800793c:	461e      	mov	r6, r3
 800793e:	3b01      	subs	r3, #1
 8007940:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007944:	2a39      	cmp	r2, #57	@ 0x39
 8007946:	d04e      	beq.n	80079e6 <_dtoa_r+0xb2e>
 8007948:	3201      	adds	r2, #1
 800794a:	701a      	strb	r2, [r3, #0]
 800794c:	e501      	b.n	8007352 <_dtoa_r+0x49a>
 800794e:	2a00      	cmp	r2, #0
 8007950:	dd03      	ble.n	800795a <_dtoa_r+0xaa2>
 8007952:	2b39      	cmp	r3, #57	@ 0x39
 8007954:	d0ee      	beq.n	8007934 <_dtoa_r+0xa7c>
 8007956:	3301      	adds	r3, #1
 8007958:	e7c9      	b.n	80078ee <_dtoa_r+0xa36>
 800795a:	9a00      	ldr	r2, [sp, #0]
 800795c:	9908      	ldr	r1, [sp, #32]
 800795e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007962:	428a      	cmp	r2, r1
 8007964:	d028      	beq.n	80079b8 <_dtoa_r+0xb00>
 8007966:	9902      	ldr	r1, [sp, #8]
 8007968:	2300      	movs	r3, #0
 800796a:	220a      	movs	r2, #10
 800796c:	4648      	mov	r0, r9
 800796e:	f000 fb8f 	bl	8008090 <__multadd>
 8007972:	42af      	cmp	r7, r5
 8007974:	9002      	str	r0, [sp, #8]
 8007976:	f04f 0300 	mov.w	r3, #0
 800797a:	f04f 020a 	mov.w	r2, #10
 800797e:	4639      	mov	r1, r7
 8007980:	4648      	mov	r0, r9
 8007982:	d107      	bne.n	8007994 <_dtoa_r+0xadc>
 8007984:	f000 fb84 	bl	8008090 <__multadd>
 8007988:	4607      	mov	r7, r0
 800798a:	4605      	mov	r5, r0
 800798c:	9b00      	ldr	r3, [sp, #0]
 800798e:	3301      	adds	r3, #1
 8007990:	9300      	str	r3, [sp, #0]
 8007992:	e777      	b.n	8007884 <_dtoa_r+0x9cc>
 8007994:	f000 fb7c 	bl	8008090 <__multadd>
 8007998:	4629      	mov	r1, r5
 800799a:	4607      	mov	r7, r0
 800799c:	2300      	movs	r3, #0
 800799e:	220a      	movs	r2, #10
 80079a0:	4648      	mov	r0, r9
 80079a2:	f000 fb75 	bl	8008090 <__multadd>
 80079a6:	4605      	mov	r5, r0
 80079a8:	e7f0      	b.n	800798c <_dtoa_r+0xad4>
 80079aa:	f1bb 0f00 	cmp.w	fp, #0
 80079ae:	bfcc      	ite	gt
 80079b0:	465e      	movgt	r6, fp
 80079b2:	2601      	movle	r6, #1
 80079b4:	4456      	add	r6, sl
 80079b6:	2700      	movs	r7, #0
 80079b8:	9902      	ldr	r1, [sp, #8]
 80079ba:	9300      	str	r3, [sp, #0]
 80079bc:	2201      	movs	r2, #1
 80079be:	4648      	mov	r0, r9
 80079c0:	f000 fd0a 	bl	80083d8 <__lshift>
 80079c4:	4621      	mov	r1, r4
 80079c6:	9002      	str	r0, [sp, #8]
 80079c8:	f000 fd72 	bl	80084b0 <__mcmp>
 80079cc:	2800      	cmp	r0, #0
 80079ce:	dcb4      	bgt.n	800793a <_dtoa_r+0xa82>
 80079d0:	d102      	bne.n	80079d8 <_dtoa_r+0xb20>
 80079d2:	9b00      	ldr	r3, [sp, #0]
 80079d4:	07db      	lsls	r3, r3, #31
 80079d6:	d4b0      	bmi.n	800793a <_dtoa_r+0xa82>
 80079d8:	4633      	mov	r3, r6
 80079da:	461e      	mov	r6, r3
 80079dc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80079e0:	2a30      	cmp	r2, #48	@ 0x30
 80079e2:	d0fa      	beq.n	80079da <_dtoa_r+0xb22>
 80079e4:	e4b5      	b.n	8007352 <_dtoa_r+0x49a>
 80079e6:	459a      	cmp	sl, r3
 80079e8:	d1a8      	bne.n	800793c <_dtoa_r+0xa84>
 80079ea:	2331      	movs	r3, #49	@ 0x31
 80079ec:	f108 0801 	add.w	r8, r8, #1
 80079f0:	f88a 3000 	strb.w	r3, [sl]
 80079f4:	e4ad      	b.n	8007352 <_dtoa_r+0x49a>
 80079f6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80079f8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007a54 <_dtoa_r+0xb9c>
 80079fc:	b11b      	cbz	r3, 8007a06 <_dtoa_r+0xb4e>
 80079fe:	f10a 0308 	add.w	r3, sl, #8
 8007a02:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007a04:	6013      	str	r3, [r2, #0]
 8007a06:	4650      	mov	r0, sl
 8007a08:	b017      	add	sp, #92	@ 0x5c
 8007a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a0e:	9b07      	ldr	r3, [sp, #28]
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	f77f ae2e 	ble.w	8007672 <_dtoa_r+0x7ba>
 8007a16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007a18:	9308      	str	r3, [sp, #32]
 8007a1a:	2001      	movs	r0, #1
 8007a1c:	e64d      	b.n	80076ba <_dtoa_r+0x802>
 8007a1e:	f1bb 0f00 	cmp.w	fp, #0
 8007a22:	f77f aed9 	ble.w	80077d8 <_dtoa_r+0x920>
 8007a26:	4656      	mov	r6, sl
 8007a28:	9802      	ldr	r0, [sp, #8]
 8007a2a:	4621      	mov	r1, r4
 8007a2c:	f7ff f9bc 	bl	8006da8 <quorem>
 8007a30:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007a34:	f806 3b01 	strb.w	r3, [r6], #1
 8007a38:	eba6 020a 	sub.w	r2, r6, sl
 8007a3c:	4593      	cmp	fp, r2
 8007a3e:	ddb4      	ble.n	80079aa <_dtoa_r+0xaf2>
 8007a40:	9902      	ldr	r1, [sp, #8]
 8007a42:	2300      	movs	r3, #0
 8007a44:	220a      	movs	r2, #10
 8007a46:	4648      	mov	r0, r9
 8007a48:	f000 fb22 	bl	8008090 <__multadd>
 8007a4c:	9002      	str	r0, [sp, #8]
 8007a4e:	e7eb      	b.n	8007a28 <_dtoa_r+0xb70>
 8007a50:	080090d0 	.word	0x080090d0
 8007a54:	08009054 	.word	0x08009054

08007a58 <__ssputs_r>:
 8007a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a5c:	688e      	ldr	r6, [r1, #8]
 8007a5e:	461f      	mov	r7, r3
 8007a60:	42be      	cmp	r6, r7
 8007a62:	680b      	ldr	r3, [r1, #0]
 8007a64:	4682      	mov	sl, r0
 8007a66:	460c      	mov	r4, r1
 8007a68:	4690      	mov	r8, r2
 8007a6a:	d82d      	bhi.n	8007ac8 <__ssputs_r+0x70>
 8007a6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007a70:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007a74:	d026      	beq.n	8007ac4 <__ssputs_r+0x6c>
 8007a76:	6965      	ldr	r5, [r4, #20]
 8007a78:	6909      	ldr	r1, [r1, #16]
 8007a7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a7e:	eba3 0901 	sub.w	r9, r3, r1
 8007a82:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a86:	1c7b      	adds	r3, r7, #1
 8007a88:	444b      	add	r3, r9
 8007a8a:	106d      	asrs	r5, r5, #1
 8007a8c:	429d      	cmp	r5, r3
 8007a8e:	bf38      	it	cc
 8007a90:	461d      	movcc	r5, r3
 8007a92:	0553      	lsls	r3, r2, #21
 8007a94:	d527      	bpl.n	8007ae6 <__ssputs_r+0x8e>
 8007a96:	4629      	mov	r1, r5
 8007a98:	f000 f960 	bl	8007d5c <_malloc_r>
 8007a9c:	4606      	mov	r6, r0
 8007a9e:	b360      	cbz	r0, 8007afa <__ssputs_r+0xa2>
 8007aa0:	6921      	ldr	r1, [r4, #16]
 8007aa2:	464a      	mov	r2, r9
 8007aa4:	f000 feee 	bl	8008884 <memcpy>
 8007aa8:	89a3      	ldrh	r3, [r4, #12]
 8007aaa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007aae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ab2:	81a3      	strh	r3, [r4, #12]
 8007ab4:	6126      	str	r6, [r4, #16]
 8007ab6:	6165      	str	r5, [r4, #20]
 8007ab8:	444e      	add	r6, r9
 8007aba:	eba5 0509 	sub.w	r5, r5, r9
 8007abe:	6026      	str	r6, [r4, #0]
 8007ac0:	60a5      	str	r5, [r4, #8]
 8007ac2:	463e      	mov	r6, r7
 8007ac4:	42be      	cmp	r6, r7
 8007ac6:	d900      	bls.n	8007aca <__ssputs_r+0x72>
 8007ac8:	463e      	mov	r6, r7
 8007aca:	6820      	ldr	r0, [r4, #0]
 8007acc:	4632      	mov	r2, r6
 8007ace:	4641      	mov	r1, r8
 8007ad0:	f000 fe67 	bl	80087a2 <memmove>
 8007ad4:	68a3      	ldr	r3, [r4, #8]
 8007ad6:	1b9b      	subs	r3, r3, r6
 8007ad8:	60a3      	str	r3, [r4, #8]
 8007ada:	6823      	ldr	r3, [r4, #0]
 8007adc:	4433      	add	r3, r6
 8007ade:	6023      	str	r3, [r4, #0]
 8007ae0:	2000      	movs	r0, #0
 8007ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ae6:	462a      	mov	r2, r5
 8007ae8:	f000 fe2d 	bl	8008746 <_realloc_r>
 8007aec:	4606      	mov	r6, r0
 8007aee:	2800      	cmp	r0, #0
 8007af0:	d1e0      	bne.n	8007ab4 <__ssputs_r+0x5c>
 8007af2:	6921      	ldr	r1, [r4, #16]
 8007af4:	4650      	mov	r0, sl
 8007af6:	f000 ff05 	bl	8008904 <_free_r>
 8007afa:	230c      	movs	r3, #12
 8007afc:	f8ca 3000 	str.w	r3, [sl]
 8007b00:	89a3      	ldrh	r3, [r4, #12]
 8007b02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b06:	81a3      	strh	r3, [r4, #12]
 8007b08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007b0c:	e7e9      	b.n	8007ae2 <__ssputs_r+0x8a>
	...

08007b10 <_svfiprintf_r>:
 8007b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b14:	4698      	mov	r8, r3
 8007b16:	898b      	ldrh	r3, [r1, #12]
 8007b18:	061b      	lsls	r3, r3, #24
 8007b1a:	b09d      	sub	sp, #116	@ 0x74
 8007b1c:	4607      	mov	r7, r0
 8007b1e:	460d      	mov	r5, r1
 8007b20:	4614      	mov	r4, r2
 8007b22:	d510      	bpl.n	8007b46 <_svfiprintf_r+0x36>
 8007b24:	690b      	ldr	r3, [r1, #16]
 8007b26:	b973      	cbnz	r3, 8007b46 <_svfiprintf_r+0x36>
 8007b28:	2140      	movs	r1, #64	@ 0x40
 8007b2a:	f000 f917 	bl	8007d5c <_malloc_r>
 8007b2e:	6028      	str	r0, [r5, #0]
 8007b30:	6128      	str	r0, [r5, #16]
 8007b32:	b930      	cbnz	r0, 8007b42 <_svfiprintf_r+0x32>
 8007b34:	230c      	movs	r3, #12
 8007b36:	603b      	str	r3, [r7, #0]
 8007b38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007b3c:	b01d      	add	sp, #116	@ 0x74
 8007b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b42:	2340      	movs	r3, #64	@ 0x40
 8007b44:	616b      	str	r3, [r5, #20]
 8007b46:	2300      	movs	r3, #0
 8007b48:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b4a:	2320      	movs	r3, #32
 8007b4c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007b50:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b54:	2330      	movs	r3, #48	@ 0x30
 8007b56:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007cf4 <_svfiprintf_r+0x1e4>
 8007b5a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007b5e:	f04f 0901 	mov.w	r9, #1
 8007b62:	4623      	mov	r3, r4
 8007b64:	469a      	mov	sl, r3
 8007b66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b6a:	b10a      	cbz	r2, 8007b70 <_svfiprintf_r+0x60>
 8007b6c:	2a25      	cmp	r2, #37	@ 0x25
 8007b6e:	d1f9      	bne.n	8007b64 <_svfiprintf_r+0x54>
 8007b70:	ebba 0b04 	subs.w	fp, sl, r4
 8007b74:	d00b      	beq.n	8007b8e <_svfiprintf_r+0x7e>
 8007b76:	465b      	mov	r3, fp
 8007b78:	4622      	mov	r2, r4
 8007b7a:	4629      	mov	r1, r5
 8007b7c:	4638      	mov	r0, r7
 8007b7e:	f7ff ff6b 	bl	8007a58 <__ssputs_r>
 8007b82:	3001      	adds	r0, #1
 8007b84:	f000 80a7 	beq.w	8007cd6 <_svfiprintf_r+0x1c6>
 8007b88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b8a:	445a      	add	r2, fp
 8007b8c:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b8e:	f89a 3000 	ldrb.w	r3, [sl]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	f000 809f 	beq.w	8007cd6 <_svfiprintf_r+0x1c6>
 8007b98:	2300      	movs	r3, #0
 8007b9a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007b9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ba2:	f10a 0a01 	add.w	sl, sl, #1
 8007ba6:	9304      	str	r3, [sp, #16]
 8007ba8:	9307      	str	r3, [sp, #28]
 8007baa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007bae:	931a      	str	r3, [sp, #104]	@ 0x68
 8007bb0:	4654      	mov	r4, sl
 8007bb2:	2205      	movs	r2, #5
 8007bb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bb8:	484e      	ldr	r0, [pc, #312]	@ (8007cf4 <_svfiprintf_r+0x1e4>)
 8007bba:	f7f8 fb09 	bl	80001d0 <memchr>
 8007bbe:	9a04      	ldr	r2, [sp, #16]
 8007bc0:	b9d8      	cbnz	r0, 8007bfa <_svfiprintf_r+0xea>
 8007bc2:	06d0      	lsls	r0, r2, #27
 8007bc4:	bf44      	itt	mi
 8007bc6:	2320      	movmi	r3, #32
 8007bc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007bcc:	0711      	lsls	r1, r2, #28
 8007bce:	bf44      	itt	mi
 8007bd0:	232b      	movmi	r3, #43	@ 0x2b
 8007bd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007bd6:	f89a 3000 	ldrb.w	r3, [sl]
 8007bda:	2b2a      	cmp	r3, #42	@ 0x2a
 8007bdc:	d015      	beq.n	8007c0a <_svfiprintf_r+0xfa>
 8007bde:	9a07      	ldr	r2, [sp, #28]
 8007be0:	4654      	mov	r4, sl
 8007be2:	2000      	movs	r0, #0
 8007be4:	f04f 0c0a 	mov.w	ip, #10
 8007be8:	4621      	mov	r1, r4
 8007bea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bee:	3b30      	subs	r3, #48	@ 0x30
 8007bf0:	2b09      	cmp	r3, #9
 8007bf2:	d94b      	bls.n	8007c8c <_svfiprintf_r+0x17c>
 8007bf4:	b1b0      	cbz	r0, 8007c24 <_svfiprintf_r+0x114>
 8007bf6:	9207      	str	r2, [sp, #28]
 8007bf8:	e014      	b.n	8007c24 <_svfiprintf_r+0x114>
 8007bfa:	eba0 0308 	sub.w	r3, r0, r8
 8007bfe:	fa09 f303 	lsl.w	r3, r9, r3
 8007c02:	4313      	orrs	r3, r2
 8007c04:	9304      	str	r3, [sp, #16]
 8007c06:	46a2      	mov	sl, r4
 8007c08:	e7d2      	b.n	8007bb0 <_svfiprintf_r+0xa0>
 8007c0a:	9b03      	ldr	r3, [sp, #12]
 8007c0c:	1d19      	adds	r1, r3, #4
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	9103      	str	r1, [sp, #12]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	bfbb      	ittet	lt
 8007c16:	425b      	neglt	r3, r3
 8007c18:	f042 0202 	orrlt.w	r2, r2, #2
 8007c1c:	9307      	strge	r3, [sp, #28]
 8007c1e:	9307      	strlt	r3, [sp, #28]
 8007c20:	bfb8      	it	lt
 8007c22:	9204      	strlt	r2, [sp, #16]
 8007c24:	7823      	ldrb	r3, [r4, #0]
 8007c26:	2b2e      	cmp	r3, #46	@ 0x2e
 8007c28:	d10a      	bne.n	8007c40 <_svfiprintf_r+0x130>
 8007c2a:	7863      	ldrb	r3, [r4, #1]
 8007c2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c2e:	d132      	bne.n	8007c96 <_svfiprintf_r+0x186>
 8007c30:	9b03      	ldr	r3, [sp, #12]
 8007c32:	1d1a      	adds	r2, r3, #4
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	9203      	str	r2, [sp, #12]
 8007c38:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007c3c:	3402      	adds	r4, #2
 8007c3e:	9305      	str	r3, [sp, #20]
 8007c40:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007d04 <_svfiprintf_r+0x1f4>
 8007c44:	7821      	ldrb	r1, [r4, #0]
 8007c46:	2203      	movs	r2, #3
 8007c48:	4650      	mov	r0, sl
 8007c4a:	f7f8 fac1 	bl	80001d0 <memchr>
 8007c4e:	b138      	cbz	r0, 8007c60 <_svfiprintf_r+0x150>
 8007c50:	9b04      	ldr	r3, [sp, #16]
 8007c52:	eba0 000a 	sub.w	r0, r0, sl
 8007c56:	2240      	movs	r2, #64	@ 0x40
 8007c58:	4082      	lsls	r2, r0
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	3401      	adds	r4, #1
 8007c5e:	9304      	str	r3, [sp, #16]
 8007c60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c64:	4824      	ldr	r0, [pc, #144]	@ (8007cf8 <_svfiprintf_r+0x1e8>)
 8007c66:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007c6a:	2206      	movs	r2, #6
 8007c6c:	f7f8 fab0 	bl	80001d0 <memchr>
 8007c70:	2800      	cmp	r0, #0
 8007c72:	d036      	beq.n	8007ce2 <_svfiprintf_r+0x1d2>
 8007c74:	4b21      	ldr	r3, [pc, #132]	@ (8007cfc <_svfiprintf_r+0x1ec>)
 8007c76:	bb1b      	cbnz	r3, 8007cc0 <_svfiprintf_r+0x1b0>
 8007c78:	9b03      	ldr	r3, [sp, #12]
 8007c7a:	3307      	adds	r3, #7
 8007c7c:	f023 0307 	bic.w	r3, r3, #7
 8007c80:	3308      	adds	r3, #8
 8007c82:	9303      	str	r3, [sp, #12]
 8007c84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c86:	4433      	add	r3, r6
 8007c88:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c8a:	e76a      	b.n	8007b62 <_svfiprintf_r+0x52>
 8007c8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c90:	460c      	mov	r4, r1
 8007c92:	2001      	movs	r0, #1
 8007c94:	e7a8      	b.n	8007be8 <_svfiprintf_r+0xd8>
 8007c96:	2300      	movs	r3, #0
 8007c98:	3401      	adds	r4, #1
 8007c9a:	9305      	str	r3, [sp, #20]
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	f04f 0c0a 	mov.w	ip, #10
 8007ca2:	4620      	mov	r0, r4
 8007ca4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ca8:	3a30      	subs	r2, #48	@ 0x30
 8007caa:	2a09      	cmp	r2, #9
 8007cac:	d903      	bls.n	8007cb6 <_svfiprintf_r+0x1a6>
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d0c6      	beq.n	8007c40 <_svfiprintf_r+0x130>
 8007cb2:	9105      	str	r1, [sp, #20]
 8007cb4:	e7c4      	b.n	8007c40 <_svfiprintf_r+0x130>
 8007cb6:	fb0c 2101 	mla	r1, ip, r1, r2
 8007cba:	4604      	mov	r4, r0
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	e7f0      	b.n	8007ca2 <_svfiprintf_r+0x192>
 8007cc0:	ab03      	add	r3, sp, #12
 8007cc2:	9300      	str	r3, [sp, #0]
 8007cc4:	462a      	mov	r2, r5
 8007cc6:	4b0e      	ldr	r3, [pc, #56]	@ (8007d00 <_svfiprintf_r+0x1f0>)
 8007cc8:	a904      	add	r1, sp, #16
 8007cca:	4638      	mov	r0, r7
 8007ccc:	f7fe fb98 	bl	8006400 <_printf_float>
 8007cd0:	1c42      	adds	r2, r0, #1
 8007cd2:	4606      	mov	r6, r0
 8007cd4:	d1d6      	bne.n	8007c84 <_svfiprintf_r+0x174>
 8007cd6:	89ab      	ldrh	r3, [r5, #12]
 8007cd8:	065b      	lsls	r3, r3, #25
 8007cda:	f53f af2d 	bmi.w	8007b38 <_svfiprintf_r+0x28>
 8007cde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007ce0:	e72c      	b.n	8007b3c <_svfiprintf_r+0x2c>
 8007ce2:	ab03      	add	r3, sp, #12
 8007ce4:	9300      	str	r3, [sp, #0]
 8007ce6:	462a      	mov	r2, r5
 8007ce8:	4b05      	ldr	r3, [pc, #20]	@ (8007d00 <_svfiprintf_r+0x1f0>)
 8007cea:	a904      	add	r1, sp, #16
 8007cec:	4638      	mov	r0, r7
 8007cee:	f7fe fe1f 	bl	8006930 <_printf_i>
 8007cf2:	e7ed      	b.n	8007cd0 <_svfiprintf_r+0x1c0>
 8007cf4:	080090e1 	.word	0x080090e1
 8007cf8:	080090eb 	.word	0x080090eb
 8007cfc:	08006401 	.word	0x08006401
 8007d00:	08007a59 	.word	0x08007a59
 8007d04:	080090e7 	.word	0x080090e7

08007d08 <malloc>:
 8007d08:	4b02      	ldr	r3, [pc, #8]	@ (8007d14 <malloc+0xc>)
 8007d0a:	4601      	mov	r1, r0
 8007d0c:	6818      	ldr	r0, [r3, #0]
 8007d0e:	f000 b825 	b.w	8007d5c <_malloc_r>
 8007d12:	bf00      	nop
 8007d14:	2000001c 	.word	0x2000001c

08007d18 <sbrk_aligned>:
 8007d18:	b570      	push	{r4, r5, r6, lr}
 8007d1a:	4e0f      	ldr	r6, [pc, #60]	@ (8007d58 <sbrk_aligned+0x40>)
 8007d1c:	460c      	mov	r4, r1
 8007d1e:	6831      	ldr	r1, [r6, #0]
 8007d20:	4605      	mov	r5, r0
 8007d22:	b911      	cbnz	r1, 8007d2a <sbrk_aligned+0x12>
 8007d24:	f000 fd7c 	bl	8008820 <_sbrk_r>
 8007d28:	6030      	str	r0, [r6, #0]
 8007d2a:	4621      	mov	r1, r4
 8007d2c:	4628      	mov	r0, r5
 8007d2e:	f000 fd77 	bl	8008820 <_sbrk_r>
 8007d32:	1c43      	adds	r3, r0, #1
 8007d34:	d103      	bne.n	8007d3e <sbrk_aligned+0x26>
 8007d36:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007d3a:	4620      	mov	r0, r4
 8007d3c:	bd70      	pop	{r4, r5, r6, pc}
 8007d3e:	1cc4      	adds	r4, r0, #3
 8007d40:	f024 0403 	bic.w	r4, r4, #3
 8007d44:	42a0      	cmp	r0, r4
 8007d46:	d0f8      	beq.n	8007d3a <sbrk_aligned+0x22>
 8007d48:	1a21      	subs	r1, r4, r0
 8007d4a:	4628      	mov	r0, r5
 8007d4c:	f000 fd68 	bl	8008820 <_sbrk_r>
 8007d50:	3001      	adds	r0, #1
 8007d52:	d1f2      	bne.n	8007d3a <sbrk_aligned+0x22>
 8007d54:	e7ef      	b.n	8007d36 <sbrk_aligned+0x1e>
 8007d56:	bf00      	nop
 8007d58:	200004d0 	.word	0x200004d0

08007d5c <_malloc_r>:
 8007d5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d60:	1ccd      	adds	r5, r1, #3
 8007d62:	f025 0503 	bic.w	r5, r5, #3
 8007d66:	3508      	adds	r5, #8
 8007d68:	2d0c      	cmp	r5, #12
 8007d6a:	bf38      	it	cc
 8007d6c:	250c      	movcc	r5, #12
 8007d6e:	2d00      	cmp	r5, #0
 8007d70:	4606      	mov	r6, r0
 8007d72:	db01      	blt.n	8007d78 <_malloc_r+0x1c>
 8007d74:	42a9      	cmp	r1, r5
 8007d76:	d904      	bls.n	8007d82 <_malloc_r+0x26>
 8007d78:	230c      	movs	r3, #12
 8007d7a:	6033      	str	r3, [r6, #0]
 8007d7c:	2000      	movs	r0, #0
 8007d7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d82:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007e58 <_malloc_r+0xfc>
 8007d86:	f000 f915 	bl	8007fb4 <__malloc_lock>
 8007d8a:	f8d8 3000 	ldr.w	r3, [r8]
 8007d8e:	461c      	mov	r4, r3
 8007d90:	bb44      	cbnz	r4, 8007de4 <_malloc_r+0x88>
 8007d92:	4629      	mov	r1, r5
 8007d94:	4630      	mov	r0, r6
 8007d96:	f7ff ffbf 	bl	8007d18 <sbrk_aligned>
 8007d9a:	1c43      	adds	r3, r0, #1
 8007d9c:	4604      	mov	r4, r0
 8007d9e:	d158      	bne.n	8007e52 <_malloc_r+0xf6>
 8007da0:	f8d8 4000 	ldr.w	r4, [r8]
 8007da4:	4627      	mov	r7, r4
 8007da6:	2f00      	cmp	r7, #0
 8007da8:	d143      	bne.n	8007e32 <_malloc_r+0xd6>
 8007daa:	2c00      	cmp	r4, #0
 8007dac:	d04b      	beq.n	8007e46 <_malloc_r+0xea>
 8007dae:	6823      	ldr	r3, [r4, #0]
 8007db0:	4639      	mov	r1, r7
 8007db2:	4630      	mov	r0, r6
 8007db4:	eb04 0903 	add.w	r9, r4, r3
 8007db8:	f000 fd32 	bl	8008820 <_sbrk_r>
 8007dbc:	4581      	cmp	r9, r0
 8007dbe:	d142      	bne.n	8007e46 <_malloc_r+0xea>
 8007dc0:	6821      	ldr	r1, [r4, #0]
 8007dc2:	1a6d      	subs	r5, r5, r1
 8007dc4:	4629      	mov	r1, r5
 8007dc6:	4630      	mov	r0, r6
 8007dc8:	f7ff ffa6 	bl	8007d18 <sbrk_aligned>
 8007dcc:	3001      	adds	r0, #1
 8007dce:	d03a      	beq.n	8007e46 <_malloc_r+0xea>
 8007dd0:	6823      	ldr	r3, [r4, #0]
 8007dd2:	442b      	add	r3, r5
 8007dd4:	6023      	str	r3, [r4, #0]
 8007dd6:	f8d8 3000 	ldr.w	r3, [r8]
 8007dda:	685a      	ldr	r2, [r3, #4]
 8007ddc:	bb62      	cbnz	r2, 8007e38 <_malloc_r+0xdc>
 8007dde:	f8c8 7000 	str.w	r7, [r8]
 8007de2:	e00f      	b.n	8007e04 <_malloc_r+0xa8>
 8007de4:	6822      	ldr	r2, [r4, #0]
 8007de6:	1b52      	subs	r2, r2, r5
 8007de8:	d420      	bmi.n	8007e2c <_malloc_r+0xd0>
 8007dea:	2a0b      	cmp	r2, #11
 8007dec:	d917      	bls.n	8007e1e <_malloc_r+0xc2>
 8007dee:	1961      	adds	r1, r4, r5
 8007df0:	42a3      	cmp	r3, r4
 8007df2:	6025      	str	r5, [r4, #0]
 8007df4:	bf18      	it	ne
 8007df6:	6059      	strne	r1, [r3, #4]
 8007df8:	6863      	ldr	r3, [r4, #4]
 8007dfa:	bf08      	it	eq
 8007dfc:	f8c8 1000 	streq.w	r1, [r8]
 8007e00:	5162      	str	r2, [r4, r5]
 8007e02:	604b      	str	r3, [r1, #4]
 8007e04:	4630      	mov	r0, r6
 8007e06:	f000 f8db 	bl	8007fc0 <__malloc_unlock>
 8007e0a:	f104 000b 	add.w	r0, r4, #11
 8007e0e:	1d23      	adds	r3, r4, #4
 8007e10:	f020 0007 	bic.w	r0, r0, #7
 8007e14:	1ac2      	subs	r2, r0, r3
 8007e16:	bf1c      	itt	ne
 8007e18:	1a1b      	subne	r3, r3, r0
 8007e1a:	50a3      	strne	r3, [r4, r2]
 8007e1c:	e7af      	b.n	8007d7e <_malloc_r+0x22>
 8007e1e:	6862      	ldr	r2, [r4, #4]
 8007e20:	42a3      	cmp	r3, r4
 8007e22:	bf0c      	ite	eq
 8007e24:	f8c8 2000 	streq.w	r2, [r8]
 8007e28:	605a      	strne	r2, [r3, #4]
 8007e2a:	e7eb      	b.n	8007e04 <_malloc_r+0xa8>
 8007e2c:	4623      	mov	r3, r4
 8007e2e:	6864      	ldr	r4, [r4, #4]
 8007e30:	e7ae      	b.n	8007d90 <_malloc_r+0x34>
 8007e32:	463c      	mov	r4, r7
 8007e34:	687f      	ldr	r7, [r7, #4]
 8007e36:	e7b6      	b.n	8007da6 <_malloc_r+0x4a>
 8007e38:	461a      	mov	r2, r3
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	42a3      	cmp	r3, r4
 8007e3e:	d1fb      	bne.n	8007e38 <_malloc_r+0xdc>
 8007e40:	2300      	movs	r3, #0
 8007e42:	6053      	str	r3, [r2, #4]
 8007e44:	e7de      	b.n	8007e04 <_malloc_r+0xa8>
 8007e46:	230c      	movs	r3, #12
 8007e48:	6033      	str	r3, [r6, #0]
 8007e4a:	4630      	mov	r0, r6
 8007e4c:	f000 f8b8 	bl	8007fc0 <__malloc_unlock>
 8007e50:	e794      	b.n	8007d7c <_malloc_r+0x20>
 8007e52:	6005      	str	r5, [r0, #0]
 8007e54:	e7d6      	b.n	8007e04 <_malloc_r+0xa8>
 8007e56:	bf00      	nop
 8007e58:	200004d4 	.word	0x200004d4

08007e5c <__sflush_r>:
 8007e5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e64:	0716      	lsls	r6, r2, #28
 8007e66:	4605      	mov	r5, r0
 8007e68:	460c      	mov	r4, r1
 8007e6a:	d454      	bmi.n	8007f16 <__sflush_r+0xba>
 8007e6c:	684b      	ldr	r3, [r1, #4]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	dc02      	bgt.n	8007e78 <__sflush_r+0x1c>
 8007e72:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	dd48      	ble.n	8007f0a <__sflush_r+0xae>
 8007e78:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007e7a:	2e00      	cmp	r6, #0
 8007e7c:	d045      	beq.n	8007f0a <__sflush_r+0xae>
 8007e7e:	2300      	movs	r3, #0
 8007e80:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007e84:	682f      	ldr	r7, [r5, #0]
 8007e86:	6a21      	ldr	r1, [r4, #32]
 8007e88:	602b      	str	r3, [r5, #0]
 8007e8a:	d030      	beq.n	8007eee <__sflush_r+0x92>
 8007e8c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007e8e:	89a3      	ldrh	r3, [r4, #12]
 8007e90:	0759      	lsls	r1, r3, #29
 8007e92:	d505      	bpl.n	8007ea0 <__sflush_r+0x44>
 8007e94:	6863      	ldr	r3, [r4, #4]
 8007e96:	1ad2      	subs	r2, r2, r3
 8007e98:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007e9a:	b10b      	cbz	r3, 8007ea0 <__sflush_r+0x44>
 8007e9c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007e9e:	1ad2      	subs	r2, r2, r3
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007ea4:	6a21      	ldr	r1, [r4, #32]
 8007ea6:	4628      	mov	r0, r5
 8007ea8:	47b0      	blx	r6
 8007eaa:	1c43      	adds	r3, r0, #1
 8007eac:	89a3      	ldrh	r3, [r4, #12]
 8007eae:	d106      	bne.n	8007ebe <__sflush_r+0x62>
 8007eb0:	6829      	ldr	r1, [r5, #0]
 8007eb2:	291d      	cmp	r1, #29
 8007eb4:	d82b      	bhi.n	8007f0e <__sflush_r+0xb2>
 8007eb6:	4a2a      	ldr	r2, [pc, #168]	@ (8007f60 <__sflush_r+0x104>)
 8007eb8:	40ca      	lsrs	r2, r1
 8007eba:	07d6      	lsls	r6, r2, #31
 8007ebc:	d527      	bpl.n	8007f0e <__sflush_r+0xb2>
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	6062      	str	r2, [r4, #4]
 8007ec2:	04d9      	lsls	r1, r3, #19
 8007ec4:	6922      	ldr	r2, [r4, #16]
 8007ec6:	6022      	str	r2, [r4, #0]
 8007ec8:	d504      	bpl.n	8007ed4 <__sflush_r+0x78>
 8007eca:	1c42      	adds	r2, r0, #1
 8007ecc:	d101      	bne.n	8007ed2 <__sflush_r+0x76>
 8007ece:	682b      	ldr	r3, [r5, #0]
 8007ed0:	b903      	cbnz	r3, 8007ed4 <__sflush_r+0x78>
 8007ed2:	6560      	str	r0, [r4, #84]	@ 0x54
 8007ed4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ed6:	602f      	str	r7, [r5, #0]
 8007ed8:	b1b9      	cbz	r1, 8007f0a <__sflush_r+0xae>
 8007eda:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007ede:	4299      	cmp	r1, r3
 8007ee0:	d002      	beq.n	8007ee8 <__sflush_r+0x8c>
 8007ee2:	4628      	mov	r0, r5
 8007ee4:	f000 fd0e 	bl	8008904 <_free_r>
 8007ee8:	2300      	movs	r3, #0
 8007eea:	6363      	str	r3, [r4, #52]	@ 0x34
 8007eec:	e00d      	b.n	8007f0a <__sflush_r+0xae>
 8007eee:	2301      	movs	r3, #1
 8007ef0:	4628      	mov	r0, r5
 8007ef2:	47b0      	blx	r6
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	1c50      	adds	r0, r2, #1
 8007ef8:	d1c9      	bne.n	8007e8e <__sflush_r+0x32>
 8007efa:	682b      	ldr	r3, [r5, #0]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d0c6      	beq.n	8007e8e <__sflush_r+0x32>
 8007f00:	2b1d      	cmp	r3, #29
 8007f02:	d001      	beq.n	8007f08 <__sflush_r+0xac>
 8007f04:	2b16      	cmp	r3, #22
 8007f06:	d11e      	bne.n	8007f46 <__sflush_r+0xea>
 8007f08:	602f      	str	r7, [r5, #0]
 8007f0a:	2000      	movs	r0, #0
 8007f0c:	e022      	b.n	8007f54 <__sflush_r+0xf8>
 8007f0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f12:	b21b      	sxth	r3, r3
 8007f14:	e01b      	b.n	8007f4e <__sflush_r+0xf2>
 8007f16:	690f      	ldr	r7, [r1, #16]
 8007f18:	2f00      	cmp	r7, #0
 8007f1a:	d0f6      	beq.n	8007f0a <__sflush_r+0xae>
 8007f1c:	0793      	lsls	r3, r2, #30
 8007f1e:	680e      	ldr	r6, [r1, #0]
 8007f20:	bf08      	it	eq
 8007f22:	694b      	ldreq	r3, [r1, #20]
 8007f24:	600f      	str	r7, [r1, #0]
 8007f26:	bf18      	it	ne
 8007f28:	2300      	movne	r3, #0
 8007f2a:	eba6 0807 	sub.w	r8, r6, r7
 8007f2e:	608b      	str	r3, [r1, #8]
 8007f30:	f1b8 0f00 	cmp.w	r8, #0
 8007f34:	dde9      	ble.n	8007f0a <__sflush_r+0xae>
 8007f36:	6a21      	ldr	r1, [r4, #32]
 8007f38:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007f3a:	4643      	mov	r3, r8
 8007f3c:	463a      	mov	r2, r7
 8007f3e:	4628      	mov	r0, r5
 8007f40:	47b0      	blx	r6
 8007f42:	2800      	cmp	r0, #0
 8007f44:	dc08      	bgt.n	8007f58 <__sflush_r+0xfc>
 8007f46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f4e:	81a3      	strh	r3, [r4, #12]
 8007f50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f58:	4407      	add	r7, r0
 8007f5a:	eba8 0800 	sub.w	r8, r8, r0
 8007f5e:	e7e7      	b.n	8007f30 <__sflush_r+0xd4>
 8007f60:	20400001 	.word	0x20400001

08007f64 <_fflush_r>:
 8007f64:	b538      	push	{r3, r4, r5, lr}
 8007f66:	690b      	ldr	r3, [r1, #16]
 8007f68:	4605      	mov	r5, r0
 8007f6a:	460c      	mov	r4, r1
 8007f6c:	b913      	cbnz	r3, 8007f74 <_fflush_r+0x10>
 8007f6e:	2500      	movs	r5, #0
 8007f70:	4628      	mov	r0, r5
 8007f72:	bd38      	pop	{r3, r4, r5, pc}
 8007f74:	b118      	cbz	r0, 8007f7e <_fflush_r+0x1a>
 8007f76:	6a03      	ldr	r3, [r0, #32]
 8007f78:	b90b      	cbnz	r3, 8007f7e <_fflush_r+0x1a>
 8007f7a:	f7fe fea5 	bl	8006cc8 <__sinit>
 8007f7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d0f3      	beq.n	8007f6e <_fflush_r+0xa>
 8007f86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007f88:	07d0      	lsls	r0, r2, #31
 8007f8a:	d404      	bmi.n	8007f96 <_fflush_r+0x32>
 8007f8c:	0599      	lsls	r1, r3, #22
 8007f8e:	d402      	bmi.n	8007f96 <_fflush_r+0x32>
 8007f90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f92:	f7fe ff02 	bl	8006d9a <__retarget_lock_acquire_recursive>
 8007f96:	4628      	mov	r0, r5
 8007f98:	4621      	mov	r1, r4
 8007f9a:	f7ff ff5f 	bl	8007e5c <__sflush_r>
 8007f9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007fa0:	07da      	lsls	r2, r3, #31
 8007fa2:	4605      	mov	r5, r0
 8007fa4:	d4e4      	bmi.n	8007f70 <_fflush_r+0xc>
 8007fa6:	89a3      	ldrh	r3, [r4, #12]
 8007fa8:	059b      	lsls	r3, r3, #22
 8007faa:	d4e1      	bmi.n	8007f70 <_fflush_r+0xc>
 8007fac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007fae:	f7fe fef5 	bl	8006d9c <__retarget_lock_release_recursive>
 8007fb2:	e7dd      	b.n	8007f70 <_fflush_r+0xc>

08007fb4 <__malloc_lock>:
 8007fb4:	4801      	ldr	r0, [pc, #4]	@ (8007fbc <__malloc_lock+0x8>)
 8007fb6:	f7fe bef0 	b.w	8006d9a <__retarget_lock_acquire_recursive>
 8007fba:	bf00      	nop
 8007fbc:	200004cc 	.word	0x200004cc

08007fc0 <__malloc_unlock>:
 8007fc0:	4801      	ldr	r0, [pc, #4]	@ (8007fc8 <__malloc_unlock+0x8>)
 8007fc2:	f7fe beeb 	b.w	8006d9c <__retarget_lock_release_recursive>
 8007fc6:	bf00      	nop
 8007fc8:	200004cc 	.word	0x200004cc

08007fcc <_Balloc>:
 8007fcc:	b570      	push	{r4, r5, r6, lr}
 8007fce:	69c6      	ldr	r6, [r0, #28]
 8007fd0:	4604      	mov	r4, r0
 8007fd2:	460d      	mov	r5, r1
 8007fd4:	b976      	cbnz	r6, 8007ff4 <_Balloc+0x28>
 8007fd6:	2010      	movs	r0, #16
 8007fd8:	f7ff fe96 	bl	8007d08 <malloc>
 8007fdc:	4602      	mov	r2, r0
 8007fde:	61e0      	str	r0, [r4, #28]
 8007fe0:	b920      	cbnz	r0, 8007fec <_Balloc+0x20>
 8007fe2:	4b18      	ldr	r3, [pc, #96]	@ (8008044 <_Balloc+0x78>)
 8007fe4:	4818      	ldr	r0, [pc, #96]	@ (8008048 <_Balloc+0x7c>)
 8007fe6:	216b      	movs	r1, #107	@ 0x6b
 8007fe8:	f000 fc5a 	bl	80088a0 <__assert_func>
 8007fec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ff0:	6006      	str	r6, [r0, #0]
 8007ff2:	60c6      	str	r6, [r0, #12]
 8007ff4:	69e6      	ldr	r6, [r4, #28]
 8007ff6:	68f3      	ldr	r3, [r6, #12]
 8007ff8:	b183      	cbz	r3, 800801c <_Balloc+0x50>
 8007ffa:	69e3      	ldr	r3, [r4, #28]
 8007ffc:	68db      	ldr	r3, [r3, #12]
 8007ffe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008002:	b9b8      	cbnz	r0, 8008034 <_Balloc+0x68>
 8008004:	2101      	movs	r1, #1
 8008006:	fa01 f605 	lsl.w	r6, r1, r5
 800800a:	1d72      	adds	r2, r6, #5
 800800c:	0092      	lsls	r2, r2, #2
 800800e:	4620      	mov	r0, r4
 8008010:	f000 fc64 	bl	80088dc <_calloc_r>
 8008014:	b160      	cbz	r0, 8008030 <_Balloc+0x64>
 8008016:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800801a:	e00e      	b.n	800803a <_Balloc+0x6e>
 800801c:	2221      	movs	r2, #33	@ 0x21
 800801e:	2104      	movs	r1, #4
 8008020:	4620      	mov	r0, r4
 8008022:	f000 fc5b 	bl	80088dc <_calloc_r>
 8008026:	69e3      	ldr	r3, [r4, #28]
 8008028:	60f0      	str	r0, [r6, #12]
 800802a:	68db      	ldr	r3, [r3, #12]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d1e4      	bne.n	8007ffa <_Balloc+0x2e>
 8008030:	2000      	movs	r0, #0
 8008032:	bd70      	pop	{r4, r5, r6, pc}
 8008034:	6802      	ldr	r2, [r0, #0]
 8008036:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800803a:	2300      	movs	r3, #0
 800803c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008040:	e7f7      	b.n	8008032 <_Balloc+0x66>
 8008042:	bf00      	nop
 8008044:	08009061 	.word	0x08009061
 8008048:	080090f2 	.word	0x080090f2

0800804c <_Bfree>:
 800804c:	b570      	push	{r4, r5, r6, lr}
 800804e:	69c6      	ldr	r6, [r0, #28]
 8008050:	4605      	mov	r5, r0
 8008052:	460c      	mov	r4, r1
 8008054:	b976      	cbnz	r6, 8008074 <_Bfree+0x28>
 8008056:	2010      	movs	r0, #16
 8008058:	f7ff fe56 	bl	8007d08 <malloc>
 800805c:	4602      	mov	r2, r0
 800805e:	61e8      	str	r0, [r5, #28]
 8008060:	b920      	cbnz	r0, 800806c <_Bfree+0x20>
 8008062:	4b09      	ldr	r3, [pc, #36]	@ (8008088 <_Bfree+0x3c>)
 8008064:	4809      	ldr	r0, [pc, #36]	@ (800808c <_Bfree+0x40>)
 8008066:	218f      	movs	r1, #143	@ 0x8f
 8008068:	f000 fc1a 	bl	80088a0 <__assert_func>
 800806c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008070:	6006      	str	r6, [r0, #0]
 8008072:	60c6      	str	r6, [r0, #12]
 8008074:	b13c      	cbz	r4, 8008086 <_Bfree+0x3a>
 8008076:	69eb      	ldr	r3, [r5, #28]
 8008078:	6862      	ldr	r2, [r4, #4]
 800807a:	68db      	ldr	r3, [r3, #12]
 800807c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008080:	6021      	str	r1, [r4, #0]
 8008082:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008086:	bd70      	pop	{r4, r5, r6, pc}
 8008088:	08009061 	.word	0x08009061
 800808c:	080090f2 	.word	0x080090f2

08008090 <__multadd>:
 8008090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008094:	690d      	ldr	r5, [r1, #16]
 8008096:	4607      	mov	r7, r0
 8008098:	460c      	mov	r4, r1
 800809a:	461e      	mov	r6, r3
 800809c:	f101 0c14 	add.w	ip, r1, #20
 80080a0:	2000      	movs	r0, #0
 80080a2:	f8dc 3000 	ldr.w	r3, [ip]
 80080a6:	b299      	uxth	r1, r3
 80080a8:	fb02 6101 	mla	r1, r2, r1, r6
 80080ac:	0c1e      	lsrs	r6, r3, #16
 80080ae:	0c0b      	lsrs	r3, r1, #16
 80080b0:	fb02 3306 	mla	r3, r2, r6, r3
 80080b4:	b289      	uxth	r1, r1
 80080b6:	3001      	adds	r0, #1
 80080b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80080bc:	4285      	cmp	r5, r0
 80080be:	f84c 1b04 	str.w	r1, [ip], #4
 80080c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80080c6:	dcec      	bgt.n	80080a2 <__multadd+0x12>
 80080c8:	b30e      	cbz	r6, 800810e <__multadd+0x7e>
 80080ca:	68a3      	ldr	r3, [r4, #8]
 80080cc:	42ab      	cmp	r3, r5
 80080ce:	dc19      	bgt.n	8008104 <__multadd+0x74>
 80080d0:	6861      	ldr	r1, [r4, #4]
 80080d2:	4638      	mov	r0, r7
 80080d4:	3101      	adds	r1, #1
 80080d6:	f7ff ff79 	bl	8007fcc <_Balloc>
 80080da:	4680      	mov	r8, r0
 80080dc:	b928      	cbnz	r0, 80080ea <__multadd+0x5a>
 80080de:	4602      	mov	r2, r0
 80080e0:	4b0c      	ldr	r3, [pc, #48]	@ (8008114 <__multadd+0x84>)
 80080e2:	480d      	ldr	r0, [pc, #52]	@ (8008118 <__multadd+0x88>)
 80080e4:	21ba      	movs	r1, #186	@ 0xba
 80080e6:	f000 fbdb 	bl	80088a0 <__assert_func>
 80080ea:	6922      	ldr	r2, [r4, #16]
 80080ec:	3202      	adds	r2, #2
 80080ee:	f104 010c 	add.w	r1, r4, #12
 80080f2:	0092      	lsls	r2, r2, #2
 80080f4:	300c      	adds	r0, #12
 80080f6:	f000 fbc5 	bl	8008884 <memcpy>
 80080fa:	4621      	mov	r1, r4
 80080fc:	4638      	mov	r0, r7
 80080fe:	f7ff ffa5 	bl	800804c <_Bfree>
 8008102:	4644      	mov	r4, r8
 8008104:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008108:	3501      	adds	r5, #1
 800810a:	615e      	str	r6, [r3, #20]
 800810c:	6125      	str	r5, [r4, #16]
 800810e:	4620      	mov	r0, r4
 8008110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008114:	080090d0 	.word	0x080090d0
 8008118:	080090f2 	.word	0x080090f2

0800811c <__hi0bits>:
 800811c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008120:	4603      	mov	r3, r0
 8008122:	bf36      	itet	cc
 8008124:	0403      	lslcc	r3, r0, #16
 8008126:	2000      	movcs	r0, #0
 8008128:	2010      	movcc	r0, #16
 800812a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800812e:	bf3c      	itt	cc
 8008130:	021b      	lslcc	r3, r3, #8
 8008132:	3008      	addcc	r0, #8
 8008134:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008138:	bf3c      	itt	cc
 800813a:	011b      	lslcc	r3, r3, #4
 800813c:	3004      	addcc	r0, #4
 800813e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008142:	bf3c      	itt	cc
 8008144:	009b      	lslcc	r3, r3, #2
 8008146:	3002      	addcc	r0, #2
 8008148:	2b00      	cmp	r3, #0
 800814a:	db05      	blt.n	8008158 <__hi0bits+0x3c>
 800814c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008150:	f100 0001 	add.w	r0, r0, #1
 8008154:	bf08      	it	eq
 8008156:	2020      	moveq	r0, #32
 8008158:	4770      	bx	lr

0800815a <__lo0bits>:
 800815a:	6803      	ldr	r3, [r0, #0]
 800815c:	4602      	mov	r2, r0
 800815e:	f013 0007 	ands.w	r0, r3, #7
 8008162:	d00b      	beq.n	800817c <__lo0bits+0x22>
 8008164:	07d9      	lsls	r1, r3, #31
 8008166:	d421      	bmi.n	80081ac <__lo0bits+0x52>
 8008168:	0798      	lsls	r0, r3, #30
 800816a:	bf49      	itett	mi
 800816c:	085b      	lsrmi	r3, r3, #1
 800816e:	089b      	lsrpl	r3, r3, #2
 8008170:	2001      	movmi	r0, #1
 8008172:	6013      	strmi	r3, [r2, #0]
 8008174:	bf5c      	itt	pl
 8008176:	6013      	strpl	r3, [r2, #0]
 8008178:	2002      	movpl	r0, #2
 800817a:	4770      	bx	lr
 800817c:	b299      	uxth	r1, r3
 800817e:	b909      	cbnz	r1, 8008184 <__lo0bits+0x2a>
 8008180:	0c1b      	lsrs	r3, r3, #16
 8008182:	2010      	movs	r0, #16
 8008184:	b2d9      	uxtb	r1, r3
 8008186:	b909      	cbnz	r1, 800818c <__lo0bits+0x32>
 8008188:	3008      	adds	r0, #8
 800818a:	0a1b      	lsrs	r3, r3, #8
 800818c:	0719      	lsls	r1, r3, #28
 800818e:	bf04      	itt	eq
 8008190:	091b      	lsreq	r3, r3, #4
 8008192:	3004      	addeq	r0, #4
 8008194:	0799      	lsls	r1, r3, #30
 8008196:	bf04      	itt	eq
 8008198:	089b      	lsreq	r3, r3, #2
 800819a:	3002      	addeq	r0, #2
 800819c:	07d9      	lsls	r1, r3, #31
 800819e:	d403      	bmi.n	80081a8 <__lo0bits+0x4e>
 80081a0:	085b      	lsrs	r3, r3, #1
 80081a2:	f100 0001 	add.w	r0, r0, #1
 80081a6:	d003      	beq.n	80081b0 <__lo0bits+0x56>
 80081a8:	6013      	str	r3, [r2, #0]
 80081aa:	4770      	bx	lr
 80081ac:	2000      	movs	r0, #0
 80081ae:	4770      	bx	lr
 80081b0:	2020      	movs	r0, #32
 80081b2:	4770      	bx	lr

080081b4 <__i2b>:
 80081b4:	b510      	push	{r4, lr}
 80081b6:	460c      	mov	r4, r1
 80081b8:	2101      	movs	r1, #1
 80081ba:	f7ff ff07 	bl	8007fcc <_Balloc>
 80081be:	4602      	mov	r2, r0
 80081c0:	b928      	cbnz	r0, 80081ce <__i2b+0x1a>
 80081c2:	4b05      	ldr	r3, [pc, #20]	@ (80081d8 <__i2b+0x24>)
 80081c4:	4805      	ldr	r0, [pc, #20]	@ (80081dc <__i2b+0x28>)
 80081c6:	f240 1145 	movw	r1, #325	@ 0x145
 80081ca:	f000 fb69 	bl	80088a0 <__assert_func>
 80081ce:	2301      	movs	r3, #1
 80081d0:	6144      	str	r4, [r0, #20]
 80081d2:	6103      	str	r3, [r0, #16]
 80081d4:	bd10      	pop	{r4, pc}
 80081d6:	bf00      	nop
 80081d8:	080090d0 	.word	0x080090d0
 80081dc:	080090f2 	.word	0x080090f2

080081e0 <__multiply>:
 80081e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081e4:	4617      	mov	r7, r2
 80081e6:	690a      	ldr	r2, [r1, #16]
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	429a      	cmp	r2, r3
 80081ec:	bfa8      	it	ge
 80081ee:	463b      	movge	r3, r7
 80081f0:	4689      	mov	r9, r1
 80081f2:	bfa4      	itt	ge
 80081f4:	460f      	movge	r7, r1
 80081f6:	4699      	movge	r9, r3
 80081f8:	693d      	ldr	r5, [r7, #16]
 80081fa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	6879      	ldr	r1, [r7, #4]
 8008202:	eb05 060a 	add.w	r6, r5, sl
 8008206:	42b3      	cmp	r3, r6
 8008208:	b085      	sub	sp, #20
 800820a:	bfb8      	it	lt
 800820c:	3101      	addlt	r1, #1
 800820e:	f7ff fedd 	bl	8007fcc <_Balloc>
 8008212:	b930      	cbnz	r0, 8008222 <__multiply+0x42>
 8008214:	4602      	mov	r2, r0
 8008216:	4b41      	ldr	r3, [pc, #260]	@ (800831c <__multiply+0x13c>)
 8008218:	4841      	ldr	r0, [pc, #260]	@ (8008320 <__multiply+0x140>)
 800821a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800821e:	f000 fb3f 	bl	80088a0 <__assert_func>
 8008222:	f100 0414 	add.w	r4, r0, #20
 8008226:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800822a:	4623      	mov	r3, r4
 800822c:	2200      	movs	r2, #0
 800822e:	4573      	cmp	r3, lr
 8008230:	d320      	bcc.n	8008274 <__multiply+0x94>
 8008232:	f107 0814 	add.w	r8, r7, #20
 8008236:	f109 0114 	add.w	r1, r9, #20
 800823a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800823e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008242:	9302      	str	r3, [sp, #8]
 8008244:	1beb      	subs	r3, r5, r7
 8008246:	3b15      	subs	r3, #21
 8008248:	f023 0303 	bic.w	r3, r3, #3
 800824c:	3304      	adds	r3, #4
 800824e:	3715      	adds	r7, #21
 8008250:	42bd      	cmp	r5, r7
 8008252:	bf38      	it	cc
 8008254:	2304      	movcc	r3, #4
 8008256:	9301      	str	r3, [sp, #4]
 8008258:	9b02      	ldr	r3, [sp, #8]
 800825a:	9103      	str	r1, [sp, #12]
 800825c:	428b      	cmp	r3, r1
 800825e:	d80c      	bhi.n	800827a <__multiply+0x9a>
 8008260:	2e00      	cmp	r6, #0
 8008262:	dd03      	ble.n	800826c <__multiply+0x8c>
 8008264:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008268:	2b00      	cmp	r3, #0
 800826a:	d055      	beq.n	8008318 <__multiply+0x138>
 800826c:	6106      	str	r6, [r0, #16]
 800826e:	b005      	add	sp, #20
 8008270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008274:	f843 2b04 	str.w	r2, [r3], #4
 8008278:	e7d9      	b.n	800822e <__multiply+0x4e>
 800827a:	f8b1 a000 	ldrh.w	sl, [r1]
 800827e:	f1ba 0f00 	cmp.w	sl, #0
 8008282:	d01f      	beq.n	80082c4 <__multiply+0xe4>
 8008284:	46c4      	mov	ip, r8
 8008286:	46a1      	mov	r9, r4
 8008288:	2700      	movs	r7, #0
 800828a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800828e:	f8d9 3000 	ldr.w	r3, [r9]
 8008292:	fa1f fb82 	uxth.w	fp, r2
 8008296:	b29b      	uxth	r3, r3
 8008298:	fb0a 330b 	mla	r3, sl, fp, r3
 800829c:	443b      	add	r3, r7
 800829e:	f8d9 7000 	ldr.w	r7, [r9]
 80082a2:	0c12      	lsrs	r2, r2, #16
 80082a4:	0c3f      	lsrs	r7, r7, #16
 80082a6:	fb0a 7202 	mla	r2, sl, r2, r7
 80082aa:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082b4:	4565      	cmp	r5, ip
 80082b6:	f849 3b04 	str.w	r3, [r9], #4
 80082ba:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80082be:	d8e4      	bhi.n	800828a <__multiply+0xaa>
 80082c0:	9b01      	ldr	r3, [sp, #4]
 80082c2:	50e7      	str	r7, [r4, r3]
 80082c4:	9b03      	ldr	r3, [sp, #12]
 80082c6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80082ca:	3104      	adds	r1, #4
 80082cc:	f1b9 0f00 	cmp.w	r9, #0
 80082d0:	d020      	beq.n	8008314 <__multiply+0x134>
 80082d2:	6823      	ldr	r3, [r4, #0]
 80082d4:	4647      	mov	r7, r8
 80082d6:	46a4      	mov	ip, r4
 80082d8:	f04f 0a00 	mov.w	sl, #0
 80082dc:	f8b7 b000 	ldrh.w	fp, [r7]
 80082e0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80082e4:	fb09 220b 	mla	r2, r9, fp, r2
 80082e8:	4452      	add	r2, sl
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082f0:	f84c 3b04 	str.w	r3, [ip], #4
 80082f4:	f857 3b04 	ldr.w	r3, [r7], #4
 80082f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80082fc:	f8bc 3000 	ldrh.w	r3, [ip]
 8008300:	fb09 330a 	mla	r3, r9, sl, r3
 8008304:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008308:	42bd      	cmp	r5, r7
 800830a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800830e:	d8e5      	bhi.n	80082dc <__multiply+0xfc>
 8008310:	9a01      	ldr	r2, [sp, #4]
 8008312:	50a3      	str	r3, [r4, r2]
 8008314:	3404      	adds	r4, #4
 8008316:	e79f      	b.n	8008258 <__multiply+0x78>
 8008318:	3e01      	subs	r6, #1
 800831a:	e7a1      	b.n	8008260 <__multiply+0x80>
 800831c:	080090d0 	.word	0x080090d0
 8008320:	080090f2 	.word	0x080090f2

08008324 <__pow5mult>:
 8008324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008328:	4615      	mov	r5, r2
 800832a:	f012 0203 	ands.w	r2, r2, #3
 800832e:	4607      	mov	r7, r0
 8008330:	460e      	mov	r6, r1
 8008332:	d007      	beq.n	8008344 <__pow5mult+0x20>
 8008334:	4c25      	ldr	r4, [pc, #148]	@ (80083cc <__pow5mult+0xa8>)
 8008336:	3a01      	subs	r2, #1
 8008338:	2300      	movs	r3, #0
 800833a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800833e:	f7ff fea7 	bl	8008090 <__multadd>
 8008342:	4606      	mov	r6, r0
 8008344:	10ad      	asrs	r5, r5, #2
 8008346:	d03d      	beq.n	80083c4 <__pow5mult+0xa0>
 8008348:	69fc      	ldr	r4, [r7, #28]
 800834a:	b97c      	cbnz	r4, 800836c <__pow5mult+0x48>
 800834c:	2010      	movs	r0, #16
 800834e:	f7ff fcdb 	bl	8007d08 <malloc>
 8008352:	4602      	mov	r2, r0
 8008354:	61f8      	str	r0, [r7, #28]
 8008356:	b928      	cbnz	r0, 8008364 <__pow5mult+0x40>
 8008358:	4b1d      	ldr	r3, [pc, #116]	@ (80083d0 <__pow5mult+0xac>)
 800835a:	481e      	ldr	r0, [pc, #120]	@ (80083d4 <__pow5mult+0xb0>)
 800835c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008360:	f000 fa9e 	bl	80088a0 <__assert_func>
 8008364:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008368:	6004      	str	r4, [r0, #0]
 800836a:	60c4      	str	r4, [r0, #12]
 800836c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008370:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008374:	b94c      	cbnz	r4, 800838a <__pow5mult+0x66>
 8008376:	f240 2171 	movw	r1, #625	@ 0x271
 800837a:	4638      	mov	r0, r7
 800837c:	f7ff ff1a 	bl	80081b4 <__i2b>
 8008380:	2300      	movs	r3, #0
 8008382:	f8c8 0008 	str.w	r0, [r8, #8]
 8008386:	4604      	mov	r4, r0
 8008388:	6003      	str	r3, [r0, #0]
 800838a:	f04f 0900 	mov.w	r9, #0
 800838e:	07eb      	lsls	r3, r5, #31
 8008390:	d50a      	bpl.n	80083a8 <__pow5mult+0x84>
 8008392:	4631      	mov	r1, r6
 8008394:	4622      	mov	r2, r4
 8008396:	4638      	mov	r0, r7
 8008398:	f7ff ff22 	bl	80081e0 <__multiply>
 800839c:	4631      	mov	r1, r6
 800839e:	4680      	mov	r8, r0
 80083a0:	4638      	mov	r0, r7
 80083a2:	f7ff fe53 	bl	800804c <_Bfree>
 80083a6:	4646      	mov	r6, r8
 80083a8:	106d      	asrs	r5, r5, #1
 80083aa:	d00b      	beq.n	80083c4 <__pow5mult+0xa0>
 80083ac:	6820      	ldr	r0, [r4, #0]
 80083ae:	b938      	cbnz	r0, 80083c0 <__pow5mult+0x9c>
 80083b0:	4622      	mov	r2, r4
 80083b2:	4621      	mov	r1, r4
 80083b4:	4638      	mov	r0, r7
 80083b6:	f7ff ff13 	bl	80081e0 <__multiply>
 80083ba:	6020      	str	r0, [r4, #0]
 80083bc:	f8c0 9000 	str.w	r9, [r0]
 80083c0:	4604      	mov	r4, r0
 80083c2:	e7e4      	b.n	800838e <__pow5mult+0x6a>
 80083c4:	4630      	mov	r0, r6
 80083c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083ca:	bf00      	nop
 80083cc:	08009194 	.word	0x08009194
 80083d0:	08009061 	.word	0x08009061
 80083d4:	080090f2 	.word	0x080090f2

080083d8 <__lshift>:
 80083d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083dc:	460c      	mov	r4, r1
 80083de:	6849      	ldr	r1, [r1, #4]
 80083e0:	6923      	ldr	r3, [r4, #16]
 80083e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80083e6:	68a3      	ldr	r3, [r4, #8]
 80083e8:	4607      	mov	r7, r0
 80083ea:	4691      	mov	r9, r2
 80083ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80083f0:	f108 0601 	add.w	r6, r8, #1
 80083f4:	42b3      	cmp	r3, r6
 80083f6:	db0b      	blt.n	8008410 <__lshift+0x38>
 80083f8:	4638      	mov	r0, r7
 80083fa:	f7ff fde7 	bl	8007fcc <_Balloc>
 80083fe:	4605      	mov	r5, r0
 8008400:	b948      	cbnz	r0, 8008416 <__lshift+0x3e>
 8008402:	4602      	mov	r2, r0
 8008404:	4b28      	ldr	r3, [pc, #160]	@ (80084a8 <__lshift+0xd0>)
 8008406:	4829      	ldr	r0, [pc, #164]	@ (80084ac <__lshift+0xd4>)
 8008408:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800840c:	f000 fa48 	bl	80088a0 <__assert_func>
 8008410:	3101      	adds	r1, #1
 8008412:	005b      	lsls	r3, r3, #1
 8008414:	e7ee      	b.n	80083f4 <__lshift+0x1c>
 8008416:	2300      	movs	r3, #0
 8008418:	f100 0114 	add.w	r1, r0, #20
 800841c:	f100 0210 	add.w	r2, r0, #16
 8008420:	4618      	mov	r0, r3
 8008422:	4553      	cmp	r3, sl
 8008424:	db33      	blt.n	800848e <__lshift+0xb6>
 8008426:	6920      	ldr	r0, [r4, #16]
 8008428:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800842c:	f104 0314 	add.w	r3, r4, #20
 8008430:	f019 091f 	ands.w	r9, r9, #31
 8008434:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008438:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800843c:	d02b      	beq.n	8008496 <__lshift+0xbe>
 800843e:	f1c9 0e20 	rsb	lr, r9, #32
 8008442:	468a      	mov	sl, r1
 8008444:	2200      	movs	r2, #0
 8008446:	6818      	ldr	r0, [r3, #0]
 8008448:	fa00 f009 	lsl.w	r0, r0, r9
 800844c:	4310      	orrs	r0, r2
 800844e:	f84a 0b04 	str.w	r0, [sl], #4
 8008452:	f853 2b04 	ldr.w	r2, [r3], #4
 8008456:	459c      	cmp	ip, r3
 8008458:	fa22 f20e 	lsr.w	r2, r2, lr
 800845c:	d8f3      	bhi.n	8008446 <__lshift+0x6e>
 800845e:	ebac 0304 	sub.w	r3, ip, r4
 8008462:	3b15      	subs	r3, #21
 8008464:	f023 0303 	bic.w	r3, r3, #3
 8008468:	3304      	adds	r3, #4
 800846a:	f104 0015 	add.w	r0, r4, #21
 800846e:	4560      	cmp	r0, ip
 8008470:	bf88      	it	hi
 8008472:	2304      	movhi	r3, #4
 8008474:	50ca      	str	r2, [r1, r3]
 8008476:	b10a      	cbz	r2, 800847c <__lshift+0xa4>
 8008478:	f108 0602 	add.w	r6, r8, #2
 800847c:	3e01      	subs	r6, #1
 800847e:	4638      	mov	r0, r7
 8008480:	612e      	str	r6, [r5, #16]
 8008482:	4621      	mov	r1, r4
 8008484:	f7ff fde2 	bl	800804c <_Bfree>
 8008488:	4628      	mov	r0, r5
 800848a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800848e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008492:	3301      	adds	r3, #1
 8008494:	e7c5      	b.n	8008422 <__lshift+0x4a>
 8008496:	3904      	subs	r1, #4
 8008498:	f853 2b04 	ldr.w	r2, [r3], #4
 800849c:	f841 2f04 	str.w	r2, [r1, #4]!
 80084a0:	459c      	cmp	ip, r3
 80084a2:	d8f9      	bhi.n	8008498 <__lshift+0xc0>
 80084a4:	e7ea      	b.n	800847c <__lshift+0xa4>
 80084a6:	bf00      	nop
 80084a8:	080090d0 	.word	0x080090d0
 80084ac:	080090f2 	.word	0x080090f2

080084b0 <__mcmp>:
 80084b0:	690a      	ldr	r2, [r1, #16]
 80084b2:	4603      	mov	r3, r0
 80084b4:	6900      	ldr	r0, [r0, #16]
 80084b6:	1a80      	subs	r0, r0, r2
 80084b8:	b530      	push	{r4, r5, lr}
 80084ba:	d10e      	bne.n	80084da <__mcmp+0x2a>
 80084bc:	3314      	adds	r3, #20
 80084be:	3114      	adds	r1, #20
 80084c0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80084c4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80084c8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80084cc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80084d0:	4295      	cmp	r5, r2
 80084d2:	d003      	beq.n	80084dc <__mcmp+0x2c>
 80084d4:	d205      	bcs.n	80084e2 <__mcmp+0x32>
 80084d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80084da:	bd30      	pop	{r4, r5, pc}
 80084dc:	42a3      	cmp	r3, r4
 80084de:	d3f3      	bcc.n	80084c8 <__mcmp+0x18>
 80084e0:	e7fb      	b.n	80084da <__mcmp+0x2a>
 80084e2:	2001      	movs	r0, #1
 80084e4:	e7f9      	b.n	80084da <__mcmp+0x2a>
	...

080084e8 <__mdiff>:
 80084e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ec:	4689      	mov	r9, r1
 80084ee:	4606      	mov	r6, r0
 80084f0:	4611      	mov	r1, r2
 80084f2:	4648      	mov	r0, r9
 80084f4:	4614      	mov	r4, r2
 80084f6:	f7ff ffdb 	bl	80084b0 <__mcmp>
 80084fa:	1e05      	subs	r5, r0, #0
 80084fc:	d112      	bne.n	8008524 <__mdiff+0x3c>
 80084fe:	4629      	mov	r1, r5
 8008500:	4630      	mov	r0, r6
 8008502:	f7ff fd63 	bl	8007fcc <_Balloc>
 8008506:	4602      	mov	r2, r0
 8008508:	b928      	cbnz	r0, 8008516 <__mdiff+0x2e>
 800850a:	4b3f      	ldr	r3, [pc, #252]	@ (8008608 <__mdiff+0x120>)
 800850c:	f240 2137 	movw	r1, #567	@ 0x237
 8008510:	483e      	ldr	r0, [pc, #248]	@ (800860c <__mdiff+0x124>)
 8008512:	f000 f9c5 	bl	80088a0 <__assert_func>
 8008516:	2301      	movs	r3, #1
 8008518:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800851c:	4610      	mov	r0, r2
 800851e:	b003      	add	sp, #12
 8008520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008524:	bfbc      	itt	lt
 8008526:	464b      	movlt	r3, r9
 8008528:	46a1      	movlt	r9, r4
 800852a:	4630      	mov	r0, r6
 800852c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008530:	bfba      	itte	lt
 8008532:	461c      	movlt	r4, r3
 8008534:	2501      	movlt	r5, #1
 8008536:	2500      	movge	r5, #0
 8008538:	f7ff fd48 	bl	8007fcc <_Balloc>
 800853c:	4602      	mov	r2, r0
 800853e:	b918      	cbnz	r0, 8008548 <__mdiff+0x60>
 8008540:	4b31      	ldr	r3, [pc, #196]	@ (8008608 <__mdiff+0x120>)
 8008542:	f240 2145 	movw	r1, #581	@ 0x245
 8008546:	e7e3      	b.n	8008510 <__mdiff+0x28>
 8008548:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800854c:	6926      	ldr	r6, [r4, #16]
 800854e:	60c5      	str	r5, [r0, #12]
 8008550:	f109 0310 	add.w	r3, r9, #16
 8008554:	f109 0514 	add.w	r5, r9, #20
 8008558:	f104 0e14 	add.w	lr, r4, #20
 800855c:	f100 0b14 	add.w	fp, r0, #20
 8008560:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008564:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008568:	9301      	str	r3, [sp, #4]
 800856a:	46d9      	mov	r9, fp
 800856c:	f04f 0c00 	mov.w	ip, #0
 8008570:	9b01      	ldr	r3, [sp, #4]
 8008572:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008576:	f853 af04 	ldr.w	sl, [r3, #4]!
 800857a:	9301      	str	r3, [sp, #4]
 800857c:	fa1f f38a 	uxth.w	r3, sl
 8008580:	4619      	mov	r1, r3
 8008582:	b283      	uxth	r3, r0
 8008584:	1acb      	subs	r3, r1, r3
 8008586:	0c00      	lsrs	r0, r0, #16
 8008588:	4463      	add	r3, ip
 800858a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800858e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008592:	b29b      	uxth	r3, r3
 8008594:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008598:	4576      	cmp	r6, lr
 800859a:	f849 3b04 	str.w	r3, [r9], #4
 800859e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80085a2:	d8e5      	bhi.n	8008570 <__mdiff+0x88>
 80085a4:	1b33      	subs	r3, r6, r4
 80085a6:	3b15      	subs	r3, #21
 80085a8:	f023 0303 	bic.w	r3, r3, #3
 80085ac:	3415      	adds	r4, #21
 80085ae:	3304      	adds	r3, #4
 80085b0:	42a6      	cmp	r6, r4
 80085b2:	bf38      	it	cc
 80085b4:	2304      	movcc	r3, #4
 80085b6:	441d      	add	r5, r3
 80085b8:	445b      	add	r3, fp
 80085ba:	461e      	mov	r6, r3
 80085bc:	462c      	mov	r4, r5
 80085be:	4544      	cmp	r4, r8
 80085c0:	d30e      	bcc.n	80085e0 <__mdiff+0xf8>
 80085c2:	f108 0103 	add.w	r1, r8, #3
 80085c6:	1b49      	subs	r1, r1, r5
 80085c8:	f021 0103 	bic.w	r1, r1, #3
 80085cc:	3d03      	subs	r5, #3
 80085ce:	45a8      	cmp	r8, r5
 80085d0:	bf38      	it	cc
 80085d2:	2100      	movcc	r1, #0
 80085d4:	440b      	add	r3, r1
 80085d6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80085da:	b191      	cbz	r1, 8008602 <__mdiff+0x11a>
 80085dc:	6117      	str	r7, [r2, #16]
 80085de:	e79d      	b.n	800851c <__mdiff+0x34>
 80085e0:	f854 1b04 	ldr.w	r1, [r4], #4
 80085e4:	46e6      	mov	lr, ip
 80085e6:	0c08      	lsrs	r0, r1, #16
 80085e8:	fa1c fc81 	uxtah	ip, ip, r1
 80085ec:	4471      	add	r1, lr
 80085ee:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80085f2:	b289      	uxth	r1, r1
 80085f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80085f8:	f846 1b04 	str.w	r1, [r6], #4
 80085fc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008600:	e7dd      	b.n	80085be <__mdiff+0xd6>
 8008602:	3f01      	subs	r7, #1
 8008604:	e7e7      	b.n	80085d6 <__mdiff+0xee>
 8008606:	bf00      	nop
 8008608:	080090d0 	.word	0x080090d0
 800860c:	080090f2 	.word	0x080090f2

08008610 <__d2b>:
 8008610:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008614:	460f      	mov	r7, r1
 8008616:	2101      	movs	r1, #1
 8008618:	ec59 8b10 	vmov	r8, r9, d0
 800861c:	4616      	mov	r6, r2
 800861e:	f7ff fcd5 	bl	8007fcc <_Balloc>
 8008622:	4604      	mov	r4, r0
 8008624:	b930      	cbnz	r0, 8008634 <__d2b+0x24>
 8008626:	4602      	mov	r2, r0
 8008628:	4b23      	ldr	r3, [pc, #140]	@ (80086b8 <__d2b+0xa8>)
 800862a:	4824      	ldr	r0, [pc, #144]	@ (80086bc <__d2b+0xac>)
 800862c:	f240 310f 	movw	r1, #783	@ 0x30f
 8008630:	f000 f936 	bl	80088a0 <__assert_func>
 8008634:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008638:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800863c:	b10d      	cbz	r5, 8008642 <__d2b+0x32>
 800863e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008642:	9301      	str	r3, [sp, #4]
 8008644:	f1b8 0300 	subs.w	r3, r8, #0
 8008648:	d023      	beq.n	8008692 <__d2b+0x82>
 800864a:	4668      	mov	r0, sp
 800864c:	9300      	str	r3, [sp, #0]
 800864e:	f7ff fd84 	bl	800815a <__lo0bits>
 8008652:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008656:	b1d0      	cbz	r0, 800868e <__d2b+0x7e>
 8008658:	f1c0 0320 	rsb	r3, r0, #32
 800865c:	fa02 f303 	lsl.w	r3, r2, r3
 8008660:	430b      	orrs	r3, r1
 8008662:	40c2      	lsrs	r2, r0
 8008664:	6163      	str	r3, [r4, #20]
 8008666:	9201      	str	r2, [sp, #4]
 8008668:	9b01      	ldr	r3, [sp, #4]
 800866a:	61a3      	str	r3, [r4, #24]
 800866c:	2b00      	cmp	r3, #0
 800866e:	bf0c      	ite	eq
 8008670:	2201      	moveq	r2, #1
 8008672:	2202      	movne	r2, #2
 8008674:	6122      	str	r2, [r4, #16]
 8008676:	b1a5      	cbz	r5, 80086a2 <__d2b+0x92>
 8008678:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800867c:	4405      	add	r5, r0
 800867e:	603d      	str	r5, [r7, #0]
 8008680:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008684:	6030      	str	r0, [r6, #0]
 8008686:	4620      	mov	r0, r4
 8008688:	b003      	add	sp, #12
 800868a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800868e:	6161      	str	r1, [r4, #20]
 8008690:	e7ea      	b.n	8008668 <__d2b+0x58>
 8008692:	a801      	add	r0, sp, #4
 8008694:	f7ff fd61 	bl	800815a <__lo0bits>
 8008698:	9b01      	ldr	r3, [sp, #4]
 800869a:	6163      	str	r3, [r4, #20]
 800869c:	3020      	adds	r0, #32
 800869e:	2201      	movs	r2, #1
 80086a0:	e7e8      	b.n	8008674 <__d2b+0x64>
 80086a2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80086a6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80086aa:	6038      	str	r0, [r7, #0]
 80086ac:	6918      	ldr	r0, [r3, #16]
 80086ae:	f7ff fd35 	bl	800811c <__hi0bits>
 80086b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80086b6:	e7e5      	b.n	8008684 <__d2b+0x74>
 80086b8:	080090d0 	.word	0x080090d0
 80086bc:	080090f2 	.word	0x080090f2

080086c0 <__sread>:
 80086c0:	b510      	push	{r4, lr}
 80086c2:	460c      	mov	r4, r1
 80086c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086c8:	f000 f898 	bl	80087fc <_read_r>
 80086cc:	2800      	cmp	r0, #0
 80086ce:	bfab      	itete	ge
 80086d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80086d2:	89a3      	ldrhlt	r3, [r4, #12]
 80086d4:	181b      	addge	r3, r3, r0
 80086d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80086da:	bfac      	ite	ge
 80086dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80086de:	81a3      	strhlt	r3, [r4, #12]
 80086e0:	bd10      	pop	{r4, pc}

080086e2 <__swrite>:
 80086e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086e6:	461f      	mov	r7, r3
 80086e8:	898b      	ldrh	r3, [r1, #12]
 80086ea:	05db      	lsls	r3, r3, #23
 80086ec:	4605      	mov	r5, r0
 80086ee:	460c      	mov	r4, r1
 80086f0:	4616      	mov	r6, r2
 80086f2:	d505      	bpl.n	8008700 <__swrite+0x1e>
 80086f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086f8:	2302      	movs	r3, #2
 80086fa:	2200      	movs	r2, #0
 80086fc:	f000 f86c 	bl	80087d8 <_lseek_r>
 8008700:	89a3      	ldrh	r3, [r4, #12]
 8008702:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008706:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800870a:	81a3      	strh	r3, [r4, #12]
 800870c:	4632      	mov	r2, r6
 800870e:	463b      	mov	r3, r7
 8008710:	4628      	mov	r0, r5
 8008712:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008716:	f000 b893 	b.w	8008840 <_write_r>

0800871a <__sseek>:
 800871a:	b510      	push	{r4, lr}
 800871c:	460c      	mov	r4, r1
 800871e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008722:	f000 f859 	bl	80087d8 <_lseek_r>
 8008726:	1c43      	adds	r3, r0, #1
 8008728:	89a3      	ldrh	r3, [r4, #12]
 800872a:	bf15      	itete	ne
 800872c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800872e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008732:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008736:	81a3      	strheq	r3, [r4, #12]
 8008738:	bf18      	it	ne
 800873a:	81a3      	strhne	r3, [r4, #12]
 800873c:	bd10      	pop	{r4, pc}

0800873e <__sclose>:
 800873e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008742:	f000 b88f 	b.w	8008864 <_close_r>

08008746 <_realloc_r>:
 8008746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800874a:	4607      	mov	r7, r0
 800874c:	4614      	mov	r4, r2
 800874e:	460d      	mov	r5, r1
 8008750:	b921      	cbnz	r1, 800875c <_realloc_r+0x16>
 8008752:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008756:	4611      	mov	r1, r2
 8008758:	f7ff bb00 	b.w	8007d5c <_malloc_r>
 800875c:	b92a      	cbnz	r2, 800876a <_realloc_r+0x24>
 800875e:	f000 f8d1 	bl	8008904 <_free_r>
 8008762:	4625      	mov	r5, r4
 8008764:	4628      	mov	r0, r5
 8008766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800876a:	f000 f927 	bl	80089bc <_malloc_usable_size_r>
 800876e:	4284      	cmp	r4, r0
 8008770:	4606      	mov	r6, r0
 8008772:	d802      	bhi.n	800877a <_realloc_r+0x34>
 8008774:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008778:	d8f4      	bhi.n	8008764 <_realloc_r+0x1e>
 800877a:	4621      	mov	r1, r4
 800877c:	4638      	mov	r0, r7
 800877e:	f7ff faed 	bl	8007d5c <_malloc_r>
 8008782:	4680      	mov	r8, r0
 8008784:	b908      	cbnz	r0, 800878a <_realloc_r+0x44>
 8008786:	4645      	mov	r5, r8
 8008788:	e7ec      	b.n	8008764 <_realloc_r+0x1e>
 800878a:	42b4      	cmp	r4, r6
 800878c:	4622      	mov	r2, r4
 800878e:	4629      	mov	r1, r5
 8008790:	bf28      	it	cs
 8008792:	4632      	movcs	r2, r6
 8008794:	f000 f876 	bl	8008884 <memcpy>
 8008798:	4629      	mov	r1, r5
 800879a:	4638      	mov	r0, r7
 800879c:	f000 f8b2 	bl	8008904 <_free_r>
 80087a0:	e7f1      	b.n	8008786 <_realloc_r+0x40>

080087a2 <memmove>:
 80087a2:	4288      	cmp	r0, r1
 80087a4:	b510      	push	{r4, lr}
 80087a6:	eb01 0402 	add.w	r4, r1, r2
 80087aa:	d902      	bls.n	80087b2 <memmove+0x10>
 80087ac:	4284      	cmp	r4, r0
 80087ae:	4623      	mov	r3, r4
 80087b0:	d807      	bhi.n	80087c2 <memmove+0x20>
 80087b2:	1e43      	subs	r3, r0, #1
 80087b4:	42a1      	cmp	r1, r4
 80087b6:	d008      	beq.n	80087ca <memmove+0x28>
 80087b8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80087bc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80087c0:	e7f8      	b.n	80087b4 <memmove+0x12>
 80087c2:	4402      	add	r2, r0
 80087c4:	4601      	mov	r1, r0
 80087c6:	428a      	cmp	r2, r1
 80087c8:	d100      	bne.n	80087cc <memmove+0x2a>
 80087ca:	bd10      	pop	{r4, pc}
 80087cc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80087d0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80087d4:	e7f7      	b.n	80087c6 <memmove+0x24>
	...

080087d8 <_lseek_r>:
 80087d8:	b538      	push	{r3, r4, r5, lr}
 80087da:	4d07      	ldr	r5, [pc, #28]	@ (80087f8 <_lseek_r+0x20>)
 80087dc:	4604      	mov	r4, r0
 80087de:	4608      	mov	r0, r1
 80087e0:	4611      	mov	r1, r2
 80087e2:	2200      	movs	r2, #0
 80087e4:	602a      	str	r2, [r5, #0]
 80087e6:	461a      	mov	r2, r3
 80087e8:	f7f9 f906 	bl	80019f8 <_lseek>
 80087ec:	1c43      	adds	r3, r0, #1
 80087ee:	d102      	bne.n	80087f6 <_lseek_r+0x1e>
 80087f0:	682b      	ldr	r3, [r5, #0]
 80087f2:	b103      	cbz	r3, 80087f6 <_lseek_r+0x1e>
 80087f4:	6023      	str	r3, [r4, #0]
 80087f6:	bd38      	pop	{r3, r4, r5, pc}
 80087f8:	200004d8 	.word	0x200004d8

080087fc <_read_r>:
 80087fc:	b538      	push	{r3, r4, r5, lr}
 80087fe:	4d07      	ldr	r5, [pc, #28]	@ (800881c <_read_r+0x20>)
 8008800:	4604      	mov	r4, r0
 8008802:	4608      	mov	r0, r1
 8008804:	4611      	mov	r1, r2
 8008806:	2200      	movs	r2, #0
 8008808:	602a      	str	r2, [r5, #0]
 800880a:	461a      	mov	r2, r3
 800880c:	f7f9 f894 	bl	8001938 <_read>
 8008810:	1c43      	adds	r3, r0, #1
 8008812:	d102      	bne.n	800881a <_read_r+0x1e>
 8008814:	682b      	ldr	r3, [r5, #0]
 8008816:	b103      	cbz	r3, 800881a <_read_r+0x1e>
 8008818:	6023      	str	r3, [r4, #0]
 800881a:	bd38      	pop	{r3, r4, r5, pc}
 800881c:	200004d8 	.word	0x200004d8

08008820 <_sbrk_r>:
 8008820:	b538      	push	{r3, r4, r5, lr}
 8008822:	4d06      	ldr	r5, [pc, #24]	@ (800883c <_sbrk_r+0x1c>)
 8008824:	2300      	movs	r3, #0
 8008826:	4604      	mov	r4, r0
 8008828:	4608      	mov	r0, r1
 800882a:	602b      	str	r3, [r5, #0]
 800882c:	f7f9 f8f2 	bl	8001a14 <_sbrk>
 8008830:	1c43      	adds	r3, r0, #1
 8008832:	d102      	bne.n	800883a <_sbrk_r+0x1a>
 8008834:	682b      	ldr	r3, [r5, #0]
 8008836:	b103      	cbz	r3, 800883a <_sbrk_r+0x1a>
 8008838:	6023      	str	r3, [r4, #0]
 800883a:	bd38      	pop	{r3, r4, r5, pc}
 800883c:	200004d8 	.word	0x200004d8

08008840 <_write_r>:
 8008840:	b538      	push	{r3, r4, r5, lr}
 8008842:	4d07      	ldr	r5, [pc, #28]	@ (8008860 <_write_r+0x20>)
 8008844:	4604      	mov	r4, r0
 8008846:	4608      	mov	r0, r1
 8008848:	4611      	mov	r1, r2
 800884a:	2200      	movs	r2, #0
 800884c:	602a      	str	r2, [r5, #0]
 800884e:	461a      	mov	r2, r3
 8008850:	f7f9 f88f 	bl	8001972 <_write>
 8008854:	1c43      	adds	r3, r0, #1
 8008856:	d102      	bne.n	800885e <_write_r+0x1e>
 8008858:	682b      	ldr	r3, [r5, #0]
 800885a:	b103      	cbz	r3, 800885e <_write_r+0x1e>
 800885c:	6023      	str	r3, [r4, #0]
 800885e:	bd38      	pop	{r3, r4, r5, pc}
 8008860:	200004d8 	.word	0x200004d8

08008864 <_close_r>:
 8008864:	b538      	push	{r3, r4, r5, lr}
 8008866:	4d06      	ldr	r5, [pc, #24]	@ (8008880 <_close_r+0x1c>)
 8008868:	2300      	movs	r3, #0
 800886a:	4604      	mov	r4, r0
 800886c:	4608      	mov	r0, r1
 800886e:	602b      	str	r3, [r5, #0]
 8008870:	f7f9 f89b 	bl	80019aa <_close>
 8008874:	1c43      	adds	r3, r0, #1
 8008876:	d102      	bne.n	800887e <_close_r+0x1a>
 8008878:	682b      	ldr	r3, [r5, #0]
 800887a:	b103      	cbz	r3, 800887e <_close_r+0x1a>
 800887c:	6023      	str	r3, [r4, #0]
 800887e:	bd38      	pop	{r3, r4, r5, pc}
 8008880:	200004d8 	.word	0x200004d8

08008884 <memcpy>:
 8008884:	440a      	add	r2, r1
 8008886:	4291      	cmp	r1, r2
 8008888:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800888c:	d100      	bne.n	8008890 <memcpy+0xc>
 800888e:	4770      	bx	lr
 8008890:	b510      	push	{r4, lr}
 8008892:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008896:	f803 4f01 	strb.w	r4, [r3, #1]!
 800889a:	4291      	cmp	r1, r2
 800889c:	d1f9      	bne.n	8008892 <memcpy+0xe>
 800889e:	bd10      	pop	{r4, pc}

080088a0 <__assert_func>:
 80088a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80088a2:	4614      	mov	r4, r2
 80088a4:	461a      	mov	r2, r3
 80088a6:	4b09      	ldr	r3, [pc, #36]	@ (80088cc <__assert_func+0x2c>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4605      	mov	r5, r0
 80088ac:	68d8      	ldr	r0, [r3, #12]
 80088ae:	b14c      	cbz	r4, 80088c4 <__assert_func+0x24>
 80088b0:	4b07      	ldr	r3, [pc, #28]	@ (80088d0 <__assert_func+0x30>)
 80088b2:	9100      	str	r1, [sp, #0]
 80088b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80088b8:	4906      	ldr	r1, [pc, #24]	@ (80088d4 <__assert_func+0x34>)
 80088ba:	462b      	mov	r3, r5
 80088bc:	f000 f886 	bl	80089cc <fiprintf>
 80088c0:	f000 f8a3 	bl	8008a0a <abort>
 80088c4:	4b04      	ldr	r3, [pc, #16]	@ (80088d8 <__assert_func+0x38>)
 80088c6:	461c      	mov	r4, r3
 80088c8:	e7f3      	b.n	80088b2 <__assert_func+0x12>
 80088ca:	bf00      	nop
 80088cc:	2000001c 	.word	0x2000001c
 80088d0:	08009155 	.word	0x08009155
 80088d4:	08009162 	.word	0x08009162
 80088d8:	08009190 	.word	0x08009190

080088dc <_calloc_r>:
 80088dc:	b570      	push	{r4, r5, r6, lr}
 80088de:	fba1 5402 	umull	r5, r4, r1, r2
 80088e2:	b934      	cbnz	r4, 80088f2 <_calloc_r+0x16>
 80088e4:	4629      	mov	r1, r5
 80088e6:	f7ff fa39 	bl	8007d5c <_malloc_r>
 80088ea:	4606      	mov	r6, r0
 80088ec:	b928      	cbnz	r0, 80088fa <_calloc_r+0x1e>
 80088ee:	4630      	mov	r0, r6
 80088f0:	bd70      	pop	{r4, r5, r6, pc}
 80088f2:	220c      	movs	r2, #12
 80088f4:	6002      	str	r2, [r0, #0]
 80088f6:	2600      	movs	r6, #0
 80088f8:	e7f9      	b.n	80088ee <_calloc_r+0x12>
 80088fa:	462a      	mov	r2, r5
 80088fc:	4621      	mov	r1, r4
 80088fe:	f7fe fa19 	bl	8006d34 <memset>
 8008902:	e7f4      	b.n	80088ee <_calloc_r+0x12>

08008904 <_free_r>:
 8008904:	b538      	push	{r3, r4, r5, lr}
 8008906:	4605      	mov	r5, r0
 8008908:	2900      	cmp	r1, #0
 800890a:	d041      	beq.n	8008990 <_free_r+0x8c>
 800890c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008910:	1f0c      	subs	r4, r1, #4
 8008912:	2b00      	cmp	r3, #0
 8008914:	bfb8      	it	lt
 8008916:	18e4      	addlt	r4, r4, r3
 8008918:	f7ff fb4c 	bl	8007fb4 <__malloc_lock>
 800891c:	4a1d      	ldr	r2, [pc, #116]	@ (8008994 <_free_r+0x90>)
 800891e:	6813      	ldr	r3, [r2, #0]
 8008920:	b933      	cbnz	r3, 8008930 <_free_r+0x2c>
 8008922:	6063      	str	r3, [r4, #4]
 8008924:	6014      	str	r4, [r2, #0]
 8008926:	4628      	mov	r0, r5
 8008928:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800892c:	f7ff bb48 	b.w	8007fc0 <__malloc_unlock>
 8008930:	42a3      	cmp	r3, r4
 8008932:	d908      	bls.n	8008946 <_free_r+0x42>
 8008934:	6820      	ldr	r0, [r4, #0]
 8008936:	1821      	adds	r1, r4, r0
 8008938:	428b      	cmp	r3, r1
 800893a:	bf01      	itttt	eq
 800893c:	6819      	ldreq	r1, [r3, #0]
 800893e:	685b      	ldreq	r3, [r3, #4]
 8008940:	1809      	addeq	r1, r1, r0
 8008942:	6021      	streq	r1, [r4, #0]
 8008944:	e7ed      	b.n	8008922 <_free_r+0x1e>
 8008946:	461a      	mov	r2, r3
 8008948:	685b      	ldr	r3, [r3, #4]
 800894a:	b10b      	cbz	r3, 8008950 <_free_r+0x4c>
 800894c:	42a3      	cmp	r3, r4
 800894e:	d9fa      	bls.n	8008946 <_free_r+0x42>
 8008950:	6811      	ldr	r1, [r2, #0]
 8008952:	1850      	adds	r0, r2, r1
 8008954:	42a0      	cmp	r0, r4
 8008956:	d10b      	bne.n	8008970 <_free_r+0x6c>
 8008958:	6820      	ldr	r0, [r4, #0]
 800895a:	4401      	add	r1, r0
 800895c:	1850      	adds	r0, r2, r1
 800895e:	4283      	cmp	r3, r0
 8008960:	6011      	str	r1, [r2, #0]
 8008962:	d1e0      	bne.n	8008926 <_free_r+0x22>
 8008964:	6818      	ldr	r0, [r3, #0]
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	6053      	str	r3, [r2, #4]
 800896a:	4408      	add	r0, r1
 800896c:	6010      	str	r0, [r2, #0]
 800896e:	e7da      	b.n	8008926 <_free_r+0x22>
 8008970:	d902      	bls.n	8008978 <_free_r+0x74>
 8008972:	230c      	movs	r3, #12
 8008974:	602b      	str	r3, [r5, #0]
 8008976:	e7d6      	b.n	8008926 <_free_r+0x22>
 8008978:	6820      	ldr	r0, [r4, #0]
 800897a:	1821      	adds	r1, r4, r0
 800897c:	428b      	cmp	r3, r1
 800897e:	bf04      	itt	eq
 8008980:	6819      	ldreq	r1, [r3, #0]
 8008982:	685b      	ldreq	r3, [r3, #4]
 8008984:	6063      	str	r3, [r4, #4]
 8008986:	bf04      	itt	eq
 8008988:	1809      	addeq	r1, r1, r0
 800898a:	6021      	streq	r1, [r4, #0]
 800898c:	6054      	str	r4, [r2, #4]
 800898e:	e7ca      	b.n	8008926 <_free_r+0x22>
 8008990:	bd38      	pop	{r3, r4, r5, pc}
 8008992:	bf00      	nop
 8008994:	200004d4 	.word	0x200004d4

08008998 <__ascii_mbtowc>:
 8008998:	b082      	sub	sp, #8
 800899a:	b901      	cbnz	r1, 800899e <__ascii_mbtowc+0x6>
 800899c:	a901      	add	r1, sp, #4
 800899e:	b142      	cbz	r2, 80089b2 <__ascii_mbtowc+0x1a>
 80089a0:	b14b      	cbz	r3, 80089b6 <__ascii_mbtowc+0x1e>
 80089a2:	7813      	ldrb	r3, [r2, #0]
 80089a4:	600b      	str	r3, [r1, #0]
 80089a6:	7812      	ldrb	r2, [r2, #0]
 80089a8:	1e10      	subs	r0, r2, #0
 80089aa:	bf18      	it	ne
 80089ac:	2001      	movne	r0, #1
 80089ae:	b002      	add	sp, #8
 80089b0:	4770      	bx	lr
 80089b2:	4610      	mov	r0, r2
 80089b4:	e7fb      	b.n	80089ae <__ascii_mbtowc+0x16>
 80089b6:	f06f 0001 	mvn.w	r0, #1
 80089ba:	e7f8      	b.n	80089ae <__ascii_mbtowc+0x16>

080089bc <_malloc_usable_size_r>:
 80089bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089c0:	1f18      	subs	r0, r3, #4
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	bfbc      	itt	lt
 80089c6:	580b      	ldrlt	r3, [r1, r0]
 80089c8:	18c0      	addlt	r0, r0, r3
 80089ca:	4770      	bx	lr

080089cc <fiprintf>:
 80089cc:	b40e      	push	{r1, r2, r3}
 80089ce:	b503      	push	{r0, r1, lr}
 80089d0:	4601      	mov	r1, r0
 80089d2:	ab03      	add	r3, sp, #12
 80089d4:	4805      	ldr	r0, [pc, #20]	@ (80089ec <fiprintf+0x20>)
 80089d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80089da:	6800      	ldr	r0, [r0, #0]
 80089dc:	9301      	str	r3, [sp, #4]
 80089de:	f000 f845 	bl	8008a6c <_vfiprintf_r>
 80089e2:	b002      	add	sp, #8
 80089e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80089e8:	b003      	add	sp, #12
 80089ea:	4770      	bx	lr
 80089ec:	2000001c 	.word	0x2000001c

080089f0 <__ascii_wctomb>:
 80089f0:	4603      	mov	r3, r0
 80089f2:	4608      	mov	r0, r1
 80089f4:	b141      	cbz	r1, 8008a08 <__ascii_wctomb+0x18>
 80089f6:	2aff      	cmp	r2, #255	@ 0xff
 80089f8:	d904      	bls.n	8008a04 <__ascii_wctomb+0x14>
 80089fa:	228a      	movs	r2, #138	@ 0x8a
 80089fc:	601a      	str	r2, [r3, #0]
 80089fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008a02:	4770      	bx	lr
 8008a04:	700a      	strb	r2, [r1, #0]
 8008a06:	2001      	movs	r0, #1
 8008a08:	4770      	bx	lr

08008a0a <abort>:
 8008a0a:	b508      	push	{r3, lr}
 8008a0c:	2006      	movs	r0, #6
 8008a0e:	f000 fa63 	bl	8008ed8 <raise>
 8008a12:	2001      	movs	r0, #1
 8008a14:	f7f8 ff85 	bl	8001922 <_exit>

08008a18 <__sfputc_r>:
 8008a18:	6893      	ldr	r3, [r2, #8]
 8008a1a:	3b01      	subs	r3, #1
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	b410      	push	{r4}
 8008a20:	6093      	str	r3, [r2, #8]
 8008a22:	da08      	bge.n	8008a36 <__sfputc_r+0x1e>
 8008a24:	6994      	ldr	r4, [r2, #24]
 8008a26:	42a3      	cmp	r3, r4
 8008a28:	db01      	blt.n	8008a2e <__sfputc_r+0x16>
 8008a2a:	290a      	cmp	r1, #10
 8008a2c:	d103      	bne.n	8008a36 <__sfputc_r+0x1e>
 8008a2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a32:	f000 b933 	b.w	8008c9c <__swbuf_r>
 8008a36:	6813      	ldr	r3, [r2, #0]
 8008a38:	1c58      	adds	r0, r3, #1
 8008a3a:	6010      	str	r0, [r2, #0]
 8008a3c:	7019      	strb	r1, [r3, #0]
 8008a3e:	4608      	mov	r0, r1
 8008a40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a44:	4770      	bx	lr

08008a46 <__sfputs_r>:
 8008a46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a48:	4606      	mov	r6, r0
 8008a4a:	460f      	mov	r7, r1
 8008a4c:	4614      	mov	r4, r2
 8008a4e:	18d5      	adds	r5, r2, r3
 8008a50:	42ac      	cmp	r4, r5
 8008a52:	d101      	bne.n	8008a58 <__sfputs_r+0x12>
 8008a54:	2000      	movs	r0, #0
 8008a56:	e007      	b.n	8008a68 <__sfputs_r+0x22>
 8008a58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a5c:	463a      	mov	r2, r7
 8008a5e:	4630      	mov	r0, r6
 8008a60:	f7ff ffda 	bl	8008a18 <__sfputc_r>
 8008a64:	1c43      	adds	r3, r0, #1
 8008a66:	d1f3      	bne.n	8008a50 <__sfputs_r+0xa>
 8008a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008a6c <_vfiprintf_r>:
 8008a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a70:	460d      	mov	r5, r1
 8008a72:	b09d      	sub	sp, #116	@ 0x74
 8008a74:	4614      	mov	r4, r2
 8008a76:	4698      	mov	r8, r3
 8008a78:	4606      	mov	r6, r0
 8008a7a:	b118      	cbz	r0, 8008a84 <_vfiprintf_r+0x18>
 8008a7c:	6a03      	ldr	r3, [r0, #32]
 8008a7e:	b90b      	cbnz	r3, 8008a84 <_vfiprintf_r+0x18>
 8008a80:	f7fe f922 	bl	8006cc8 <__sinit>
 8008a84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a86:	07d9      	lsls	r1, r3, #31
 8008a88:	d405      	bmi.n	8008a96 <_vfiprintf_r+0x2a>
 8008a8a:	89ab      	ldrh	r3, [r5, #12]
 8008a8c:	059a      	lsls	r2, r3, #22
 8008a8e:	d402      	bmi.n	8008a96 <_vfiprintf_r+0x2a>
 8008a90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a92:	f7fe f982 	bl	8006d9a <__retarget_lock_acquire_recursive>
 8008a96:	89ab      	ldrh	r3, [r5, #12]
 8008a98:	071b      	lsls	r3, r3, #28
 8008a9a:	d501      	bpl.n	8008aa0 <_vfiprintf_r+0x34>
 8008a9c:	692b      	ldr	r3, [r5, #16]
 8008a9e:	b99b      	cbnz	r3, 8008ac8 <_vfiprintf_r+0x5c>
 8008aa0:	4629      	mov	r1, r5
 8008aa2:	4630      	mov	r0, r6
 8008aa4:	f000 f938 	bl	8008d18 <__swsetup_r>
 8008aa8:	b170      	cbz	r0, 8008ac8 <_vfiprintf_r+0x5c>
 8008aaa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008aac:	07dc      	lsls	r4, r3, #31
 8008aae:	d504      	bpl.n	8008aba <_vfiprintf_r+0x4e>
 8008ab0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008ab4:	b01d      	add	sp, #116	@ 0x74
 8008ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aba:	89ab      	ldrh	r3, [r5, #12]
 8008abc:	0598      	lsls	r0, r3, #22
 8008abe:	d4f7      	bmi.n	8008ab0 <_vfiprintf_r+0x44>
 8008ac0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ac2:	f7fe f96b 	bl	8006d9c <__retarget_lock_release_recursive>
 8008ac6:	e7f3      	b.n	8008ab0 <_vfiprintf_r+0x44>
 8008ac8:	2300      	movs	r3, #0
 8008aca:	9309      	str	r3, [sp, #36]	@ 0x24
 8008acc:	2320      	movs	r3, #32
 8008ace:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008ad2:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ad6:	2330      	movs	r3, #48	@ 0x30
 8008ad8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008c88 <_vfiprintf_r+0x21c>
 8008adc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008ae0:	f04f 0901 	mov.w	r9, #1
 8008ae4:	4623      	mov	r3, r4
 8008ae6:	469a      	mov	sl, r3
 8008ae8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008aec:	b10a      	cbz	r2, 8008af2 <_vfiprintf_r+0x86>
 8008aee:	2a25      	cmp	r2, #37	@ 0x25
 8008af0:	d1f9      	bne.n	8008ae6 <_vfiprintf_r+0x7a>
 8008af2:	ebba 0b04 	subs.w	fp, sl, r4
 8008af6:	d00b      	beq.n	8008b10 <_vfiprintf_r+0xa4>
 8008af8:	465b      	mov	r3, fp
 8008afa:	4622      	mov	r2, r4
 8008afc:	4629      	mov	r1, r5
 8008afe:	4630      	mov	r0, r6
 8008b00:	f7ff ffa1 	bl	8008a46 <__sfputs_r>
 8008b04:	3001      	adds	r0, #1
 8008b06:	f000 80a7 	beq.w	8008c58 <_vfiprintf_r+0x1ec>
 8008b0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b0c:	445a      	add	r2, fp
 8008b0e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008b10:	f89a 3000 	ldrb.w	r3, [sl]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	f000 809f 	beq.w	8008c58 <_vfiprintf_r+0x1ec>
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008b20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b24:	f10a 0a01 	add.w	sl, sl, #1
 8008b28:	9304      	str	r3, [sp, #16]
 8008b2a:	9307      	str	r3, [sp, #28]
 8008b2c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008b30:	931a      	str	r3, [sp, #104]	@ 0x68
 8008b32:	4654      	mov	r4, sl
 8008b34:	2205      	movs	r2, #5
 8008b36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b3a:	4853      	ldr	r0, [pc, #332]	@ (8008c88 <_vfiprintf_r+0x21c>)
 8008b3c:	f7f7 fb48 	bl	80001d0 <memchr>
 8008b40:	9a04      	ldr	r2, [sp, #16]
 8008b42:	b9d8      	cbnz	r0, 8008b7c <_vfiprintf_r+0x110>
 8008b44:	06d1      	lsls	r1, r2, #27
 8008b46:	bf44      	itt	mi
 8008b48:	2320      	movmi	r3, #32
 8008b4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b4e:	0713      	lsls	r3, r2, #28
 8008b50:	bf44      	itt	mi
 8008b52:	232b      	movmi	r3, #43	@ 0x2b
 8008b54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b58:	f89a 3000 	ldrb.w	r3, [sl]
 8008b5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b5e:	d015      	beq.n	8008b8c <_vfiprintf_r+0x120>
 8008b60:	9a07      	ldr	r2, [sp, #28]
 8008b62:	4654      	mov	r4, sl
 8008b64:	2000      	movs	r0, #0
 8008b66:	f04f 0c0a 	mov.w	ip, #10
 8008b6a:	4621      	mov	r1, r4
 8008b6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b70:	3b30      	subs	r3, #48	@ 0x30
 8008b72:	2b09      	cmp	r3, #9
 8008b74:	d94b      	bls.n	8008c0e <_vfiprintf_r+0x1a2>
 8008b76:	b1b0      	cbz	r0, 8008ba6 <_vfiprintf_r+0x13a>
 8008b78:	9207      	str	r2, [sp, #28]
 8008b7a:	e014      	b.n	8008ba6 <_vfiprintf_r+0x13a>
 8008b7c:	eba0 0308 	sub.w	r3, r0, r8
 8008b80:	fa09 f303 	lsl.w	r3, r9, r3
 8008b84:	4313      	orrs	r3, r2
 8008b86:	9304      	str	r3, [sp, #16]
 8008b88:	46a2      	mov	sl, r4
 8008b8a:	e7d2      	b.n	8008b32 <_vfiprintf_r+0xc6>
 8008b8c:	9b03      	ldr	r3, [sp, #12]
 8008b8e:	1d19      	adds	r1, r3, #4
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	9103      	str	r1, [sp, #12]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	bfbb      	ittet	lt
 8008b98:	425b      	neglt	r3, r3
 8008b9a:	f042 0202 	orrlt.w	r2, r2, #2
 8008b9e:	9307      	strge	r3, [sp, #28]
 8008ba0:	9307      	strlt	r3, [sp, #28]
 8008ba2:	bfb8      	it	lt
 8008ba4:	9204      	strlt	r2, [sp, #16]
 8008ba6:	7823      	ldrb	r3, [r4, #0]
 8008ba8:	2b2e      	cmp	r3, #46	@ 0x2e
 8008baa:	d10a      	bne.n	8008bc2 <_vfiprintf_r+0x156>
 8008bac:	7863      	ldrb	r3, [r4, #1]
 8008bae:	2b2a      	cmp	r3, #42	@ 0x2a
 8008bb0:	d132      	bne.n	8008c18 <_vfiprintf_r+0x1ac>
 8008bb2:	9b03      	ldr	r3, [sp, #12]
 8008bb4:	1d1a      	adds	r2, r3, #4
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	9203      	str	r2, [sp, #12]
 8008bba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008bbe:	3402      	adds	r4, #2
 8008bc0:	9305      	str	r3, [sp, #20]
 8008bc2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008c98 <_vfiprintf_r+0x22c>
 8008bc6:	7821      	ldrb	r1, [r4, #0]
 8008bc8:	2203      	movs	r2, #3
 8008bca:	4650      	mov	r0, sl
 8008bcc:	f7f7 fb00 	bl	80001d0 <memchr>
 8008bd0:	b138      	cbz	r0, 8008be2 <_vfiprintf_r+0x176>
 8008bd2:	9b04      	ldr	r3, [sp, #16]
 8008bd4:	eba0 000a 	sub.w	r0, r0, sl
 8008bd8:	2240      	movs	r2, #64	@ 0x40
 8008bda:	4082      	lsls	r2, r0
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	3401      	adds	r4, #1
 8008be0:	9304      	str	r3, [sp, #16]
 8008be2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008be6:	4829      	ldr	r0, [pc, #164]	@ (8008c8c <_vfiprintf_r+0x220>)
 8008be8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008bec:	2206      	movs	r2, #6
 8008bee:	f7f7 faef 	bl	80001d0 <memchr>
 8008bf2:	2800      	cmp	r0, #0
 8008bf4:	d03f      	beq.n	8008c76 <_vfiprintf_r+0x20a>
 8008bf6:	4b26      	ldr	r3, [pc, #152]	@ (8008c90 <_vfiprintf_r+0x224>)
 8008bf8:	bb1b      	cbnz	r3, 8008c42 <_vfiprintf_r+0x1d6>
 8008bfa:	9b03      	ldr	r3, [sp, #12]
 8008bfc:	3307      	adds	r3, #7
 8008bfe:	f023 0307 	bic.w	r3, r3, #7
 8008c02:	3308      	adds	r3, #8
 8008c04:	9303      	str	r3, [sp, #12]
 8008c06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c08:	443b      	add	r3, r7
 8008c0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c0c:	e76a      	b.n	8008ae4 <_vfiprintf_r+0x78>
 8008c0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c12:	460c      	mov	r4, r1
 8008c14:	2001      	movs	r0, #1
 8008c16:	e7a8      	b.n	8008b6a <_vfiprintf_r+0xfe>
 8008c18:	2300      	movs	r3, #0
 8008c1a:	3401      	adds	r4, #1
 8008c1c:	9305      	str	r3, [sp, #20]
 8008c1e:	4619      	mov	r1, r3
 8008c20:	f04f 0c0a 	mov.w	ip, #10
 8008c24:	4620      	mov	r0, r4
 8008c26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c2a:	3a30      	subs	r2, #48	@ 0x30
 8008c2c:	2a09      	cmp	r2, #9
 8008c2e:	d903      	bls.n	8008c38 <_vfiprintf_r+0x1cc>
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d0c6      	beq.n	8008bc2 <_vfiprintf_r+0x156>
 8008c34:	9105      	str	r1, [sp, #20]
 8008c36:	e7c4      	b.n	8008bc2 <_vfiprintf_r+0x156>
 8008c38:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c3c:	4604      	mov	r4, r0
 8008c3e:	2301      	movs	r3, #1
 8008c40:	e7f0      	b.n	8008c24 <_vfiprintf_r+0x1b8>
 8008c42:	ab03      	add	r3, sp, #12
 8008c44:	9300      	str	r3, [sp, #0]
 8008c46:	462a      	mov	r2, r5
 8008c48:	4b12      	ldr	r3, [pc, #72]	@ (8008c94 <_vfiprintf_r+0x228>)
 8008c4a:	a904      	add	r1, sp, #16
 8008c4c:	4630      	mov	r0, r6
 8008c4e:	f7fd fbd7 	bl	8006400 <_printf_float>
 8008c52:	4607      	mov	r7, r0
 8008c54:	1c78      	adds	r0, r7, #1
 8008c56:	d1d6      	bne.n	8008c06 <_vfiprintf_r+0x19a>
 8008c58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c5a:	07d9      	lsls	r1, r3, #31
 8008c5c:	d405      	bmi.n	8008c6a <_vfiprintf_r+0x1fe>
 8008c5e:	89ab      	ldrh	r3, [r5, #12]
 8008c60:	059a      	lsls	r2, r3, #22
 8008c62:	d402      	bmi.n	8008c6a <_vfiprintf_r+0x1fe>
 8008c64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c66:	f7fe f899 	bl	8006d9c <__retarget_lock_release_recursive>
 8008c6a:	89ab      	ldrh	r3, [r5, #12]
 8008c6c:	065b      	lsls	r3, r3, #25
 8008c6e:	f53f af1f 	bmi.w	8008ab0 <_vfiprintf_r+0x44>
 8008c72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c74:	e71e      	b.n	8008ab4 <_vfiprintf_r+0x48>
 8008c76:	ab03      	add	r3, sp, #12
 8008c78:	9300      	str	r3, [sp, #0]
 8008c7a:	462a      	mov	r2, r5
 8008c7c:	4b05      	ldr	r3, [pc, #20]	@ (8008c94 <_vfiprintf_r+0x228>)
 8008c7e:	a904      	add	r1, sp, #16
 8008c80:	4630      	mov	r0, r6
 8008c82:	f7fd fe55 	bl	8006930 <_printf_i>
 8008c86:	e7e4      	b.n	8008c52 <_vfiprintf_r+0x1e6>
 8008c88:	080090e1 	.word	0x080090e1
 8008c8c:	080090eb 	.word	0x080090eb
 8008c90:	08006401 	.word	0x08006401
 8008c94:	08008a47 	.word	0x08008a47
 8008c98:	080090e7 	.word	0x080090e7

08008c9c <__swbuf_r>:
 8008c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c9e:	460e      	mov	r6, r1
 8008ca0:	4614      	mov	r4, r2
 8008ca2:	4605      	mov	r5, r0
 8008ca4:	b118      	cbz	r0, 8008cae <__swbuf_r+0x12>
 8008ca6:	6a03      	ldr	r3, [r0, #32]
 8008ca8:	b90b      	cbnz	r3, 8008cae <__swbuf_r+0x12>
 8008caa:	f7fe f80d 	bl	8006cc8 <__sinit>
 8008cae:	69a3      	ldr	r3, [r4, #24]
 8008cb0:	60a3      	str	r3, [r4, #8]
 8008cb2:	89a3      	ldrh	r3, [r4, #12]
 8008cb4:	071a      	lsls	r2, r3, #28
 8008cb6:	d501      	bpl.n	8008cbc <__swbuf_r+0x20>
 8008cb8:	6923      	ldr	r3, [r4, #16]
 8008cba:	b943      	cbnz	r3, 8008cce <__swbuf_r+0x32>
 8008cbc:	4621      	mov	r1, r4
 8008cbe:	4628      	mov	r0, r5
 8008cc0:	f000 f82a 	bl	8008d18 <__swsetup_r>
 8008cc4:	b118      	cbz	r0, 8008cce <__swbuf_r+0x32>
 8008cc6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008cca:	4638      	mov	r0, r7
 8008ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cce:	6823      	ldr	r3, [r4, #0]
 8008cd0:	6922      	ldr	r2, [r4, #16]
 8008cd2:	1a98      	subs	r0, r3, r2
 8008cd4:	6963      	ldr	r3, [r4, #20]
 8008cd6:	b2f6      	uxtb	r6, r6
 8008cd8:	4283      	cmp	r3, r0
 8008cda:	4637      	mov	r7, r6
 8008cdc:	dc05      	bgt.n	8008cea <__swbuf_r+0x4e>
 8008cde:	4621      	mov	r1, r4
 8008ce0:	4628      	mov	r0, r5
 8008ce2:	f7ff f93f 	bl	8007f64 <_fflush_r>
 8008ce6:	2800      	cmp	r0, #0
 8008ce8:	d1ed      	bne.n	8008cc6 <__swbuf_r+0x2a>
 8008cea:	68a3      	ldr	r3, [r4, #8]
 8008cec:	3b01      	subs	r3, #1
 8008cee:	60a3      	str	r3, [r4, #8]
 8008cf0:	6823      	ldr	r3, [r4, #0]
 8008cf2:	1c5a      	adds	r2, r3, #1
 8008cf4:	6022      	str	r2, [r4, #0]
 8008cf6:	701e      	strb	r6, [r3, #0]
 8008cf8:	6962      	ldr	r2, [r4, #20]
 8008cfa:	1c43      	adds	r3, r0, #1
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d004      	beq.n	8008d0a <__swbuf_r+0x6e>
 8008d00:	89a3      	ldrh	r3, [r4, #12]
 8008d02:	07db      	lsls	r3, r3, #31
 8008d04:	d5e1      	bpl.n	8008cca <__swbuf_r+0x2e>
 8008d06:	2e0a      	cmp	r6, #10
 8008d08:	d1df      	bne.n	8008cca <__swbuf_r+0x2e>
 8008d0a:	4621      	mov	r1, r4
 8008d0c:	4628      	mov	r0, r5
 8008d0e:	f7ff f929 	bl	8007f64 <_fflush_r>
 8008d12:	2800      	cmp	r0, #0
 8008d14:	d0d9      	beq.n	8008cca <__swbuf_r+0x2e>
 8008d16:	e7d6      	b.n	8008cc6 <__swbuf_r+0x2a>

08008d18 <__swsetup_r>:
 8008d18:	b538      	push	{r3, r4, r5, lr}
 8008d1a:	4b29      	ldr	r3, [pc, #164]	@ (8008dc0 <__swsetup_r+0xa8>)
 8008d1c:	4605      	mov	r5, r0
 8008d1e:	6818      	ldr	r0, [r3, #0]
 8008d20:	460c      	mov	r4, r1
 8008d22:	b118      	cbz	r0, 8008d2c <__swsetup_r+0x14>
 8008d24:	6a03      	ldr	r3, [r0, #32]
 8008d26:	b90b      	cbnz	r3, 8008d2c <__swsetup_r+0x14>
 8008d28:	f7fd ffce 	bl	8006cc8 <__sinit>
 8008d2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d30:	0719      	lsls	r1, r3, #28
 8008d32:	d422      	bmi.n	8008d7a <__swsetup_r+0x62>
 8008d34:	06da      	lsls	r2, r3, #27
 8008d36:	d407      	bmi.n	8008d48 <__swsetup_r+0x30>
 8008d38:	2209      	movs	r2, #9
 8008d3a:	602a      	str	r2, [r5, #0]
 8008d3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d40:	81a3      	strh	r3, [r4, #12]
 8008d42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008d46:	e033      	b.n	8008db0 <__swsetup_r+0x98>
 8008d48:	0758      	lsls	r0, r3, #29
 8008d4a:	d512      	bpl.n	8008d72 <__swsetup_r+0x5a>
 8008d4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008d4e:	b141      	cbz	r1, 8008d62 <__swsetup_r+0x4a>
 8008d50:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008d54:	4299      	cmp	r1, r3
 8008d56:	d002      	beq.n	8008d5e <__swsetup_r+0x46>
 8008d58:	4628      	mov	r0, r5
 8008d5a:	f7ff fdd3 	bl	8008904 <_free_r>
 8008d5e:	2300      	movs	r3, #0
 8008d60:	6363      	str	r3, [r4, #52]	@ 0x34
 8008d62:	89a3      	ldrh	r3, [r4, #12]
 8008d64:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008d68:	81a3      	strh	r3, [r4, #12]
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	6063      	str	r3, [r4, #4]
 8008d6e:	6923      	ldr	r3, [r4, #16]
 8008d70:	6023      	str	r3, [r4, #0]
 8008d72:	89a3      	ldrh	r3, [r4, #12]
 8008d74:	f043 0308 	orr.w	r3, r3, #8
 8008d78:	81a3      	strh	r3, [r4, #12]
 8008d7a:	6923      	ldr	r3, [r4, #16]
 8008d7c:	b94b      	cbnz	r3, 8008d92 <__swsetup_r+0x7a>
 8008d7e:	89a3      	ldrh	r3, [r4, #12]
 8008d80:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008d84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d88:	d003      	beq.n	8008d92 <__swsetup_r+0x7a>
 8008d8a:	4621      	mov	r1, r4
 8008d8c:	4628      	mov	r0, r5
 8008d8e:	f000 f83f 	bl	8008e10 <__smakebuf_r>
 8008d92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d96:	f013 0201 	ands.w	r2, r3, #1
 8008d9a:	d00a      	beq.n	8008db2 <__swsetup_r+0x9a>
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	60a2      	str	r2, [r4, #8]
 8008da0:	6962      	ldr	r2, [r4, #20]
 8008da2:	4252      	negs	r2, r2
 8008da4:	61a2      	str	r2, [r4, #24]
 8008da6:	6922      	ldr	r2, [r4, #16]
 8008da8:	b942      	cbnz	r2, 8008dbc <__swsetup_r+0xa4>
 8008daa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008dae:	d1c5      	bne.n	8008d3c <__swsetup_r+0x24>
 8008db0:	bd38      	pop	{r3, r4, r5, pc}
 8008db2:	0799      	lsls	r1, r3, #30
 8008db4:	bf58      	it	pl
 8008db6:	6962      	ldrpl	r2, [r4, #20]
 8008db8:	60a2      	str	r2, [r4, #8]
 8008dba:	e7f4      	b.n	8008da6 <__swsetup_r+0x8e>
 8008dbc:	2000      	movs	r0, #0
 8008dbe:	e7f7      	b.n	8008db0 <__swsetup_r+0x98>
 8008dc0:	2000001c 	.word	0x2000001c

08008dc4 <__swhatbuf_r>:
 8008dc4:	b570      	push	{r4, r5, r6, lr}
 8008dc6:	460c      	mov	r4, r1
 8008dc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dcc:	2900      	cmp	r1, #0
 8008dce:	b096      	sub	sp, #88	@ 0x58
 8008dd0:	4615      	mov	r5, r2
 8008dd2:	461e      	mov	r6, r3
 8008dd4:	da0d      	bge.n	8008df2 <__swhatbuf_r+0x2e>
 8008dd6:	89a3      	ldrh	r3, [r4, #12]
 8008dd8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008ddc:	f04f 0100 	mov.w	r1, #0
 8008de0:	bf14      	ite	ne
 8008de2:	2340      	movne	r3, #64	@ 0x40
 8008de4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008de8:	2000      	movs	r0, #0
 8008dea:	6031      	str	r1, [r6, #0]
 8008dec:	602b      	str	r3, [r5, #0]
 8008dee:	b016      	add	sp, #88	@ 0x58
 8008df0:	bd70      	pop	{r4, r5, r6, pc}
 8008df2:	466a      	mov	r2, sp
 8008df4:	f000 f89c 	bl	8008f30 <_fstat_r>
 8008df8:	2800      	cmp	r0, #0
 8008dfa:	dbec      	blt.n	8008dd6 <__swhatbuf_r+0x12>
 8008dfc:	9901      	ldr	r1, [sp, #4]
 8008dfe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008e02:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008e06:	4259      	negs	r1, r3
 8008e08:	4159      	adcs	r1, r3
 8008e0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e0e:	e7eb      	b.n	8008de8 <__swhatbuf_r+0x24>

08008e10 <__smakebuf_r>:
 8008e10:	898b      	ldrh	r3, [r1, #12]
 8008e12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e14:	079d      	lsls	r5, r3, #30
 8008e16:	4606      	mov	r6, r0
 8008e18:	460c      	mov	r4, r1
 8008e1a:	d507      	bpl.n	8008e2c <__smakebuf_r+0x1c>
 8008e1c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008e20:	6023      	str	r3, [r4, #0]
 8008e22:	6123      	str	r3, [r4, #16]
 8008e24:	2301      	movs	r3, #1
 8008e26:	6163      	str	r3, [r4, #20]
 8008e28:	b003      	add	sp, #12
 8008e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e2c:	ab01      	add	r3, sp, #4
 8008e2e:	466a      	mov	r2, sp
 8008e30:	f7ff ffc8 	bl	8008dc4 <__swhatbuf_r>
 8008e34:	9f00      	ldr	r7, [sp, #0]
 8008e36:	4605      	mov	r5, r0
 8008e38:	4639      	mov	r1, r7
 8008e3a:	4630      	mov	r0, r6
 8008e3c:	f7fe ff8e 	bl	8007d5c <_malloc_r>
 8008e40:	b948      	cbnz	r0, 8008e56 <__smakebuf_r+0x46>
 8008e42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e46:	059a      	lsls	r2, r3, #22
 8008e48:	d4ee      	bmi.n	8008e28 <__smakebuf_r+0x18>
 8008e4a:	f023 0303 	bic.w	r3, r3, #3
 8008e4e:	f043 0302 	orr.w	r3, r3, #2
 8008e52:	81a3      	strh	r3, [r4, #12]
 8008e54:	e7e2      	b.n	8008e1c <__smakebuf_r+0xc>
 8008e56:	89a3      	ldrh	r3, [r4, #12]
 8008e58:	6020      	str	r0, [r4, #0]
 8008e5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e5e:	81a3      	strh	r3, [r4, #12]
 8008e60:	9b01      	ldr	r3, [sp, #4]
 8008e62:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008e66:	b15b      	cbz	r3, 8008e80 <__smakebuf_r+0x70>
 8008e68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e6c:	4630      	mov	r0, r6
 8008e6e:	f000 f83b 	bl	8008ee8 <_isatty_r>
 8008e72:	b128      	cbz	r0, 8008e80 <__smakebuf_r+0x70>
 8008e74:	89a3      	ldrh	r3, [r4, #12]
 8008e76:	f023 0303 	bic.w	r3, r3, #3
 8008e7a:	f043 0301 	orr.w	r3, r3, #1
 8008e7e:	81a3      	strh	r3, [r4, #12]
 8008e80:	89a3      	ldrh	r3, [r4, #12]
 8008e82:	431d      	orrs	r5, r3
 8008e84:	81a5      	strh	r5, [r4, #12]
 8008e86:	e7cf      	b.n	8008e28 <__smakebuf_r+0x18>

08008e88 <_raise_r>:
 8008e88:	291f      	cmp	r1, #31
 8008e8a:	b538      	push	{r3, r4, r5, lr}
 8008e8c:	4605      	mov	r5, r0
 8008e8e:	460c      	mov	r4, r1
 8008e90:	d904      	bls.n	8008e9c <_raise_r+0x14>
 8008e92:	2316      	movs	r3, #22
 8008e94:	6003      	str	r3, [r0, #0]
 8008e96:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008e9a:	bd38      	pop	{r3, r4, r5, pc}
 8008e9c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008e9e:	b112      	cbz	r2, 8008ea6 <_raise_r+0x1e>
 8008ea0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ea4:	b94b      	cbnz	r3, 8008eba <_raise_r+0x32>
 8008ea6:	4628      	mov	r0, r5
 8008ea8:	f000 f840 	bl	8008f2c <_getpid_r>
 8008eac:	4622      	mov	r2, r4
 8008eae:	4601      	mov	r1, r0
 8008eb0:	4628      	mov	r0, r5
 8008eb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008eb6:	f000 b827 	b.w	8008f08 <_kill_r>
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d00a      	beq.n	8008ed4 <_raise_r+0x4c>
 8008ebe:	1c59      	adds	r1, r3, #1
 8008ec0:	d103      	bne.n	8008eca <_raise_r+0x42>
 8008ec2:	2316      	movs	r3, #22
 8008ec4:	6003      	str	r3, [r0, #0]
 8008ec6:	2001      	movs	r0, #1
 8008ec8:	e7e7      	b.n	8008e9a <_raise_r+0x12>
 8008eca:	2100      	movs	r1, #0
 8008ecc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008ed0:	4620      	mov	r0, r4
 8008ed2:	4798      	blx	r3
 8008ed4:	2000      	movs	r0, #0
 8008ed6:	e7e0      	b.n	8008e9a <_raise_r+0x12>

08008ed8 <raise>:
 8008ed8:	4b02      	ldr	r3, [pc, #8]	@ (8008ee4 <raise+0xc>)
 8008eda:	4601      	mov	r1, r0
 8008edc:	6818      	ldr	r0, [r3, #0]
 8008ede:	f7ff bfd3 	b.w	8008e88 <_raise_r>
 8008ee2:	bf00      	nop
 8008ee4:	2000001c 	.word	0x2000001c

08008ee8 <_isatty_r>:
 8008ee8:	b538      	push	{r3, r4, r5, lr}
 8008eea:	4d06      	ldr	r5, [pc, #24]	@ (8008f04 <_isatty_r+0x1c>)
 8008eec:	2300      	movs	r3, #0
 8008eee:	4604      	mov	r4, r0
 8008ef0:	4608      	mov	r0, r1
 8008ef2:	602b      	str	r3, [r5, #0]
 8008ef4:	f7f8 fd75 	bl	80019e2 <_isatty>
 8008ef8:	1c43      	adds	r3, r0, #1
 8008efa:	d102      	bne.n	8008f02 <_isatty_r+0x1a>
 8008efc:	682b      	ldr	r3, [r5, #0]
 8008efe:	b103      	cbz	r3, 8008f02 <_isatty_r+0x1a>
 8008f00:	6023      	str	r3, [r4, #0]
 8008f02:	bd38      	pop	{r3, r4, r5, pc}
 8008f04:	200004d8 	.word	0x200004d8

08008f08 <_kill_r>:
 8008f08:	b538      	push	{r3, r4, r5, lr}
 8008f0a:	4d07      	ldr	r5, [pc, #28]	@ (8008f28 <_kill_r+0x20>)
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	4604      	mov	r4, r0
 8008f10:	4608      	mov	r0, r1
 8008f12:	4611      	mov	r1, r2
 8008f14:	602b      	str	r3, [r5, #0]
 8008f16:	f7f8 fcf4 	bl	8001902 <_kill>
 8008f1a:	1c43      	adds	r3, r0, #1
 8008f1c:	d102      	bne.n	8008f24 <_kill_r+0x1c>
 8008f1e:	682b      	ldr	r3, [r5, #0]
 8008f20:	b103      	cbz	r3, 8008f24 <_kill_r+0x1c>
 8008f22:	6023      	str	r3, [r4, #0]
 8008f24:	bd38      	pop	{r3, r4, r5, pc}
 8008f26:	bf00      	nop
 8008f28:	200004d8 	.word	0x200004d8

08008f2c <_getpid_r>:
 8008f2c:	f7f8 bce1 	b.w	80018f2 <_getpid>

08008f30 <_fstat_r>:
 8008f30:	b538      	push	{r3, r4, r5, lr}
 8008f32:	4d07      	ldr	r5, [pc, #28]	@ (8008f50 <_fstat_r+0x20>)
 8008f34:	2300      	movs	r3, #0
 8008f36:	4604      	mov	r4, r0
 8008f38:	4608      	mov	r0, r1
 8008f3a:	4611      	mov	r1, r2
 8008f3c:	602b      	str	r3, [r5, #0]
 8008f3e:	f7f8 fd40 	bl	80019c2 <_fstat>
 8008f42:	1c43      	adds	r3, r0, #1
 8008f44:	d102      	bne.n	8008f4c <_fstat_r+0x1c>
 8008f46:	682b      	ldr	r3, [r5, #0]
 8008f48:	b103      	cbz	r3, 8008f4c <_fstat_r+0x1c>
 8008f4a:	6023      	str	r3, [r4, #0]
 8008f4c:	bd38      	pop	{r3, r4, r5, pc}
 8008f4e:	bf00      	nop
 8008f50:	200004d8 	.word	0x200004d8

08008f54 <_init>:
 8008f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f56:	bf00      	nop
 8008f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f5a:	bc08      	pop	{r3}
 8008f5c:	469e      	mov	lr, r3
 8008f5e:	4770      	bx	lr

08008f60 <_fini>:
 8008f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f62:	bf00      	nop
 8008f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f66:	bc08      	pop	{r3}
 8008f68:	469e      	mov	lr, r3
 8008f6a:	4770      	bx	lr
