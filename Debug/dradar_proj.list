
dradar_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d6c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  08008f00  08008f00  00009f00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009304  08009304  0000b1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009304  08009304  0000a304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800930c  0800930c  0000b1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800930c  0800930c  0000a30c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009310  08009310  0000a310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08009314  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f0  200001d8  080094ec  0000b1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c8  080094ec  0000b4c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000101b4  00000000  00000000  0000b208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026bb  00000000  00000000  0001b3bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001098  00000000  00000000  0001da78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cb8  00000000  00000000  0001eb10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028d6c  00000000  00000000  0001f7c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001280d  00000000  00000000  00048534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fcc83  00000000  00000000  0005ad41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001579c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056f4  00000000  00000000  00157a08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  0015d0fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008ee4 	.word	0x08008ee4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08008ee4 	.word	0x08008ee4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <CC2500_WriteRegister>:
int8_t CC2500_DetectionThreshold = -80;

extern SPI_HandleTypeDef hspi1;

//write registers to config
void CC2500_WriteRegister(uint8_t addr, uint8_t value) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	460a      	mov	r2, r1
 8000c52:	71fb      	strb	r3, [r7, #7]
 8000c54:	4613      	mov	r3, r2
 8000c56:	71bb      	strb	r3, [r7, #6]
    CC2500_CS_LOW();
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2110      	movs	r1, #16
 8000c5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c60:	f002 fc62 	bl	8003528 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &addr, 1, HAL_MAX_DELAY);
 8000c64:	1df9      	adds	r1, r7, #7
 8000c66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	4809      	ldr	r0, [pc, #36]	@ (8000c94 <CC2500_WriteRegister+0x4c>)
 8000c6e:	f004 fc64 	bl	800553a <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, &value, 1, HAL_MAX_DELAY);
 8000c72:	1db9      	adds	r1, r7, #6
 8000c74:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c78:	2201      	movs	r2, #1
 8000c7a:	4806      	ldr	r0, [pc, #24]	@ (8000c94 <CC2500_WriteRegister+0x4c>)
 8000c7c:	f004 fc5d 	bl	800553a <HAL_SPI_Transmit>
    CC2500_CS_HIGH();
 8000c80:	2201      	movs	r2, #1
 8000c82:	2110      	movs	r1, #16
 8000c84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c88:	f002 fc4e 	bl	8003528 <HAL_GPIO_WritePin>
}
 8000c8c:	bf00      	nop
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	200002ac 	.word	0x200002ac

08000c98 <CC2500_ReadRegister>:

//read current config to write back unmodified values
uint8_t CC2500_ReadRegister(uint8_t addr) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    addr |= 0x80;
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	71fb      	strb	r3, [r7, #7]
    CC2500_CS_LOW();
 8000cac:	2200      	movs	r2, #0
 8000cae:	2110      	movs	r1, #16
 8000cb0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cb4:	f002 fc38 	bl	8003528 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &addr, 1, HAL_MAX_DELAY);
 8000cb8:	1df9      	adds	r1, r7, #7
 8000cba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	480a      	ldr	r0, [pc, #40]	@ (8000cec <CC2500_ReadRegister+0x54>)
 8000cc2:	f004 fc3a 	bl	800553a <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, &value, 1, HAL_MAX_DELAY);
 8000cc6:	f107 010f 	add.w	r1, r7, #15
 8000cca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000cce:	2201      	movs	r2, #1
 8000cd0:	4806      	ldr	r0, [pc, #24]	@ (8000cec <CC2500_ReadRegister+0x54>)
 8000cd2:	f004 fda8 	bl	8005826 <HAL_SPI_Receive>
    CC2500_CS_HIGH();
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	2110      	movs	r1, #16
 8000cda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cde:	f002 fc23 	bl	8003528 <HAL_GPIO_WritePin>
    return value;
 8000ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3710      	adds	r7, #16
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	200002ac 	.word	0x200002ac

08000cf0 <CC2500_Strobe>:

//??? TODO
void CC2500_Strobe(uint8_t cmd) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	71fb      	strb	r3, [r7, #7]
    CC2500_CS_LOW();
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2110      	movs	r1, #16
 8000cfe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d02:	f002 fc11 	bl	8003528 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8000d06:	1df9      	adds	r1, r7, #7
 8000d08:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	4806      	ldr	r0, [pc, #24]	@ (8000d28 <CC2500_Strobe+0x38>)
 8000d10:	f004 fc13 	bl	800553a <HAL_SPI_Transmit>
    CC2500_CS_HIGH();
 8000d14:	2201      	movs	r2, #1
 8000d16:	2110      	movs	r1, #16
 8000d18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d1c:	f002 fc04 	bl	8003528 <HAL_GPIO_WritePin>
}
 8000d20:	bf00      	nop
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	200002ac 	.word	0x200002ac

08000d2c <CC2500_SetChannel>:

//set channel ?? TODO
void CC2500_SetChannel(uint8_t channel) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	71fb      	strb	r3, [r7, #7]
    CC2500_WriteRegister(0x0A, channel);
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	200a      	movs	r0, #10
 8000d3c:	f7ff ff84 	bl	8000c48 <CC2500_WriteRegister>
    CC2500_Strobe(CC2500_SRX);
 8000d40:	2034      	movs	r0, #52	@ 0x34
 8000d42:	f7ff ffd5 	bl	8000cf0 <CC2500_Strobe>
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <CC2500_ReadRSSI>:

//Chech if packets are being recieved ?? TODO
uint8_t CC2500_ReadRSSI(void) {
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b082      	sub	sp, #8
 8000d52:	af00      	add	r7, sp, #0
    uint8_t raw = CC2500_ReadRegister(0x34);
 8000d54:	2034      	movs	r0, #52	@ 0x34
 8000d56:	f7ff ff9f 	bl	8000c98 <CC2500_ReadRegister>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	71fb      	strb	r3, [r7, #7]
    uint8_t calcValue = (raw >= 128) ? ((int8_t)(raw - 256) / 2 - 74) : (raw / 2 - 74);
 8000d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	da09      	bge.n	8000d7a <CC2500_ReadRSSI+0x2c>
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	0fda      	lsrs	r2, r3, #31
 8000d6c:	4413      	add	r3, r2
 8000d6e:	105b      	asrs	r3, r3, #1
 8000d70:	b25b      	sxtb	r3, r3
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	3b4a      	subs	r3, #74	@ 0x4a
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	e004      	b.n	8000d84 <CC2500_ReadRSSI+0x36>
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	085b      	lsrs	r3, r3, #1
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	3b4a      	subs	r3, #74	@ 0x4a
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	71bb      	strb	r3, [r7, #6]
    return calcValue;
 8000d86:	79bb      	ldrb	r3, [r7, #6]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <CC2500_ApplyConfig>:
| `0x25`        | FSCAL0        | `0x1F`      |                               |
| `0x07`        | PKTCTRL1      | `0x04`      | No address check              |
| `0x08`        | PKTCTRL0      | `0x05`      | Infinite packet length, CRC   |
| `0x3E`        | PATABLE       | `0xC0`      | Max output power              |
 * */
void CC2500_ApplyConfig(void) {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
    CC2500_WriteRegister(0x00, 0x29);
 8000d94:	2129      	movs	r1, #41	@ 0x29
 8000d96:	2000      	movs	r0, #0
 8000d98:	f7ff ff56 	bl	8000c48 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x02, 0x06);
 8000d9c:	2106      	movs	r1, #6
 8000d9e:	2002      	movs	r0, #2
 8000da0:	f7ff ff52 	bl	8000c48 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x03, 0x07);
 8000da4:	2107      	movs	r1, #7
 8000da6:	2003      	movs	r0, #3
 8000da8:	f7ff ff4e 	bl	8000c48 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x06, 0x00);
 8000dac:	2100      	movs	r1, #0
 8000dae:	2006      	movs	r0, #6
 8000db0:	f7ff ff4a 	bl	8000c48 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x07, 0x04);
 8000db4:	2104      	movs	r1, #4
 8000db6:	2007      	movs	r0, #7
 8000db8:	f7ff ff46 	bl	8000c48 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x08, 0x05);
 8000dbc:	2105      	movs	r1, #5
 8000dbe:	2008      	movs	r0, #8
 8000dc0:	f7ff ff42 	bl	8000c48 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x0A, 0x00);
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	200a      	movs	r0, #10
 8000dc8:	f7ff ff3e 	bl	8000c48 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x0B, 0x06);
 8000dcc:	2106      	movs	r1, #6
 8000dce:	200b      	movs	r0, #11
 8000dd0:	f7ff ff3a 	bl	8000c48 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x0C, 0x00);
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	200c      	movs	r0, #12
 8000dd8:	f7ff ff36 	bl	8000c48 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x0D, 0x5D);
 8000ddc:	215d      	movs	r1, #93	@ 0x5d
 8000dde:	200d      	movs	r0, #13
 8000de0:	f7ff ff32 	bl	8000c48 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x0E, 0x93);
 8000de4:	2193      	movs	r1, #147	@ 0x93
 8000de6:	200e      	movs	r0, #14
 8000de8:	f7ff ff2e 	bl	8000c48 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x0F, 0xB1);
 8000dec:	21b1      	movs	r1, #177	@ 0xb1
 8000dee:	200f      	movs	r0, #15
 8000df0:	f7ff ff2a 	bl	8000c48 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x10, 0x2D);
 8000df4:	212d      	movs	r1, #45	@ 0x2d
 8000df6:	2010      	movs	r0, #16
 8000df8:	f7ff ff26 	bl	8000c48 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x11, 0x3B);
 8000dfc:	213b      	movs	r1, #59	@ 0x3b
 8000dfe:	2011      	movs	r0, #17
 8000e00:	f7ff ff22 	bl	8000c48 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x12, 0x73);
 8000e04:	2173      	movs	r1, #115	@ 0x73
 8000e06:	2012      	movs	r0, #18
 8000e08:	f7ff ff1e 	bl	8000c48 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x15, 0x01);
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	2015      	movs	r0, #21
 8000e10:	f7ff ff1a 	bl	8000c48 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x18, 0x18);
 8000e14:	2118      	movs	r1, #24
 8000e16:	2018      	movs	r0, #24
 8000e18:	f7ff ff16 	bl	8000c48 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x19, 0x1D);
 8000e1c:	211d      	movs	r1, #29
 8000e1e:	2019      	movs	r0, #25
 8000e20:	f7ff ff12 	bl	8000c48 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x1A, 0x1C);
 8000e24:	211c      	movs	r1, #28
 8000e26:	201a      	movs	r0, #26
 8000e28:	f7ff ff0e 	bl	8000c48 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x21, 0x11);
 8000e2c:	2111      	movs	r1, #17
 8000e2e:	2021      	movs	r0, #33	@ 0x21
 8000e30:	f7ff ff0a 	bl	8000c48 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x22, 0xE9);
 8000e34:	21e9      	movs	r1, #233	@ 0xe9
 8000e36:	2022      	movs	r0, #34	@ 0x22
 8000e38:	f7ff ff06 	bl	8000c48 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x23, 0x2A);
 8000e3c:	212a      	movs	r1, #42	@ 0x2a
 8000e3e:	2023      	movs	r0, #35	@ 0x23
 8000e40:	f7ff ff02 	bl	8000c48 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x24, 0x00);
 8000e44:	2100      	movs	r1, #0
 8000e46:	2024      	movs	r0, #36	@ 0x24
 8000e48:	f7ff fefe 	bl	8000c48 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x25, 0x1F);
 8000e4c:	211f      	movs	r1, #31
 8000e4e:	2025      	movs	r0, #37	@ 0x25
 8000e50:	f7ff fefa 	bl	8000c48 <CC2500_WriteRegister>
    CC2500_WriteRegister(0x3E, 0xC0);
 8000e54:	21c0      	movs	r1, #192	@ 0xc0
 8000e56:	203e      	movs	r0, #62	@ 0x3e
 8000e58:	f7ff fef6 	bl	8000c48 <CC2500_WriteRegister>
}
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <CC2500_Init>:

//apply configurations and establish first noise floor
void CC2500_Init(void) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
    HAL_Delay(100);
 8000e64:	2064      	movs	r0, #100	@ 0x64
 8000e66:	f000 fe89 	bl	8001b7c <HAL_Delay>
    CC2500_CS_HIGH(); HAL_Delay(1);
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	2110      	movs	r1, #16
 8000e6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e72:	f002 fb59 	bl	8003528 <HAL_GPIO_WritePin>
 8000e76:	2001      	movs	r0, #1
 8000e78:	f000 fe80 	bl	8001b7c <HAL_Delay>
    CC2500_CS_LOW();  HAL_Delay(1);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2110      	movs	r1, #16
 8000e80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e84:	f002 fb50 	bl	8003528 <HAL_GPIO_WritePin>
 8000e88:	2001      	movs	r0, #1
 8000e8a:	f000 fe77 	bl	8001b7c <HAL_Delay>
    CC2500_CS_HIGH(); HAL_Delay(1);
 8000e8e:	2201      	movs	r2, #1
 8000e90:	2110      	movs	r1, #16
 8000e92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e96:	f002 fb47 	bl	8003528 <HAL_GPIO_WritePin>
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	f000 fe6e 	bl	8001b7c <HAL_Delay>

    CC2500_Strobe(CC2500_SRES);
 8000ea0:	2030      	movs	r0, #48	@ 0x30
 8000ea2:	f7ff ff25 	bl	8000cf0 <CC2500_Strobe>
    HAL_Delay(1);
 8000ea6:	2001      	movs	r0, #1
 8000ea8:	f000 fe68 	bl	8001b7c <HAL_Delay>

    CC2500_ApplyConfig();
 8000eac:	f7ff ff70 	bl	8000d90 <CC2500_ApplyConfig>
    CC2500_Strobe(CC2500_SRX);
 8000eb0:	2034      	movs	r0, #52	@ 0x34
 8000eb2:	f7ff ff1d 	bl	8000cf0 <CC2500_Strobe>

    // Initial noise floor calibration
    CC2500_RecalibrateNoiseFloor();
 8000eb6:	f000 f803 	bl	8000ec0 <CC2500_RecalibrateNoiseFloor>
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <CC2500_RecalibrateNoiseFloor>:

//re calibrate average noise floor.
void CC2500_RecalibrateNoiseFloor(void) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
	CharLCD_Set_Cursor(0,7); // Set cursor to row 1, column 0
 8000ec6:	2107      	movs	r1, #7
 8000ec8:	2000      	movs	r0, #0
 8000eca:	f000 fb52 	bl	8001572 <CharLCD_Set_Cursor>
	CharLCD_Write_String("CALBRATNG");
 8000ece:	481e      	ldr	r0, [pc, #120]	@ (8000f48 <CC2500_RecalibrateNoiseFloor+0x88>)
 8000ed0:	f000 fb3a 	bl	8001548 <CharLCD_Write_String>

	int32_t sum = 0;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60fb      	str	r3, [r7, #12]
    const uint8_t ch_min = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	72bb      	strb	r3, [r7, #10]
    const uint8_t ch_max = 100;
 8000edc:	2364      	movs	r3, #100	@ 0x64
 8000ede:	727b      	strb	r3, [r7, #9]
    const int sweep_count = ch_max - ch_min + 1;
 8000ee0:	7a7a      	ldrb	r2, [r7, #9]
 8000ee2:	7abb      	ldrb	r3, [r7, #10]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	607b      	str	r3, [r7, #4]

    for (uint8_t ch = ch_min; ch <= ch_max; ch++) {
 8000eea:	7abb      	ldrb	r3, [r7, #10]
 8000eec:	72fb      	strb	r3, [r7, #11]
 8000eee:	e012      	b.n	8000f16 <CC2500_RecalibrateNoiseFloor+0x56>
        CC2500_SetChannel(ch);
 8000ef0:	7afb      	ldrb	r3, [r7, #11]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff ff1a 	bl	8000d2c <CC2500_SetChannel>
        HAL_Delay(3);
 8000ef8:	2003      	movs	r0, #3
 8000efa:	f000 fe3f 	bl	8001b7c <HAL_Delay>
        int8_t rssi = CC2500_ReadRSSI();
 8000efe:	f7ff ff26 	bl	8000d4e <CC2500_ReadRSSI>
 8000f02:	4603      	mov	r3, r0
 8000f04:	70fb      	strb	r3, [r7, #3]
        sum += rssi;
 8000f06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f0a:	68fa      	ldr	r2, [r7, #12]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	60fb      	str	r3, [r7, #12]
    for (uint8_t ch = ch_min; ch <= ch_max; ch++) {
 8000f10:	7afb      	ldrb	r3, [r7, #11]
 8000f12:	3301      	adds	r3, #1
 8000f14:	72fb      	strb	r3, [r7, #11]
 8000f16:	7afa      	ldrb	r2, [r7, #11]
 8000f18:	7a7b      	ldrb	r3, [r7, #9]
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	d9e8      	bls.n	8000ef0 <CC2500_RecalibrateNoiseFloor+0x30>
    }

    CC2500_NoiseFloor = sum / sweep_count;
 8000f1e:	68fa      	ldr	r2, [r7, #12]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f26:	b25a      	sxtb	r2, r3
 8000f28:	4b08      	ldr	r3, [pc, #32]	@ (8000f4c <CC2500_RecalibrateNoiseFloor+0x8c>)
 8000f2a:	701a      	strb	r2, [r3, #0]
    //starting threshold value:10 increase or deacrease to desired sensitivity. TODO Possibly itegrate button to change this value.
    CC2500_DetectionThreshold = CC2500_NoiseFloor + 10;
 8000f2c:	4b07      	ldr	r3, [pc, #28]	@ (8000f4c <CC2500_RecalibrateNoiseFloor+0x8c>)
 8000f2e:	f993 3000 	ldrsb.w	r3, [r3]
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	330a      	adds	r3, #10
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	b25a      	sxtb	r2, r3
 8000f3a:	4b05      	ldr	r3, [pc, #20]	@ (8000f50 <CC2500_RecalibrateNoiseFloor+0x90>)
 8000f3c:	701a      	strb	r2, [r3, #0]

}
 8000f3e:	bf00      	nop
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	08008f00 	.word	0x08008f00
 8000f4c:	20000000 	.word	0x20000000
 8000f50:	20000001 	.word	0x20000001

08000f54 <CC2500_SweepAndDetect>:

// Use sweep mode and read rssi to see if packets are being recieved on any channels, read strength, alert on noise floor threshold
void CC2500_SweepAndDetect(void) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
    for (uint8_t ch = 0; ch <= 100; ch++) {
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	71fb      	strb	r3, [r7, #7]
 8000f5e:	e023      	b.n	8000fa8 <CC2500_SweepAndDetect+0x54>
        CC2500_SetChannel(ch);
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff fee2 	bl	8000d2c <CC2500_SetChannel>
        HAL_Delay(3);
 8000f68:	2003      	movs	r0, #3
 8000f6a:	f000 fe07 	bl	8001b7c <HAL_Delay>
        int8_t rssi = CC2500_ReadRSSI();
 8000f6e:	f7ff feee 	bl	8000d4e <CC2500_ReadRSSI>
 8000f72:	4603      	mov	r3, r0
 8000f74:	71bb      	strb	r3, [r7, #6]

        //OUTPUT ON DETECTION
        if (rssi > CC2500_DetectionThreshold) {
 8000f76:	4b10      	ldr	r3, [pc, #64]	@ (8000fb8 <CC2500_SweepAndDetect+0x64>)
 8000f78:	f993 3000 	ldrsb.w	r3, [r3]
 8000f7c:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	dd07      	ble.n	8000f94 <CC2500_SweepAndDetect+0x40>
        	CharLCD_Set_Cursor(1,7); // Set cursor to row 1, column 0
 8000f84:	2107      	movs	r1, #7
 8000f86:	2001      	movs	r0, #1
 8000f88:	f000 faf3 	bl	8001572 <CharLCD_Set_Cursor>
        	CharLCD_Write_String("DETECTED");
 8000f8c:	480b      	ldr	r0, [pc, #44]	@ (8000fbc <CC2500_SweepAndDetect+0x68>)
 8000f8e:	f000 fadb 	bl	8001548 <CharLCD_Write_String>
 8000f92:	e006      	b.n	8000fa2 <CC2500_SweepAndDetect+0x4e>

        	//TODO ADD Trigger alarm
        }
        else {
        	CharLCD_Set_Cursor(1,7); // Set cursor to row 1, column 0
 8000f94:	2107      	movs	r1, #7
 8000f96:	2001      	movs	r0, #1
 8000f98:	f000 faeb 	bl	8001572 <CharLCD_Set_Cursor>
        	CharLCD_Write_String("________");
 8000f9c:	4808      	ldr	r0, [pc, #32]	@ (8000fc0 <CC2500_SweepAndDetect+0x6c>)
 8000f9e:	f000 fad3 	bl	8001548 <CharLCD_Write_String>
    for (uint8_t ch = 0; ch <= 100; ch++) {
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	71fb      	strb	r3, [r7, #7]
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	2b64      	cmp	r3, #100	@ 0x64
 8000fac:	d9d8      	bls.n	8000f60 <CC2500_SweepAndDetect+0xc>

        	//TODO ADD turn off alarm
        }
    }
}
 8000fae:	bf00      	nop
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000001 	.word	0x20000001
 8000fbc:	08008f0c 	.word	0x08008f0c
 8000fc0:	08008f18 	.word	0x08008f18
 8000fc4:	00000000 	.word	0x00000000

08000fc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fce:	f000 fd59 	bl	8001a84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd2:	f000 f875 	bl	80010c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd6:	f000 f9b9 	bl	800134c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000fda:	f000 f8c3 	bl	8001164 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000fde:	f000 f937 	bl	8001250 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000fe2:	f000 f975 	bl	80012d0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */



  CharLCD_Init(); // Initialize the LCD
 8000fe6:	f000 fa80 	bl	80014ea <CharLCD_Init>
  CharLCD_Set_Cursor(0,0); // Set cursor to row 0, column 0
 8000fea:	2100      	movs	r1, #0
 8000fec:	2000      	movs	r0, #0
 8000fee:	f000 fac0 	bl	8001572 <CharLCD_Set_Cursor>
  CharLCD_Write_String("INITIALIZING...");
 8000ff2:	482d      	ldr	r0, [pc, #180]	@ (80010a8 <main+0xe0>)
 8000ff4:	f000 faa8 	bl	8001548 <CharLCD_Write_String>
  CharLCD_Set_Cursor(1,0); // Set cursor to row 1, column 0
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	2001      	movs	r0, #1
 8000ffc:	f000 fab9 	bl	8001572 <CharLCD_Set_Cursor>
  CharLCD_Write_String("CALIBRATING...");
 8001000:	482a      	ldr	r0, [pc, #168]	@ (80010ac <main+0xe4>)
 8001002:	f000 faa1 	bl	8001548 <CharLCD_Write_String>

  //initialize the cc2500 chip
  CC2500_Init();
 8001006:	f7ff ff2b 	bl	8000e60 <CC2500_Init>

  //set timing for initial calibration
  uint32_t lastCalibration = HAL_GetTick(); // ms
 800100a:	f000 fdab 	bl	8001b64 <HAL_GetTick>
 800100e:	60f8      	str	r0, [r7, #12]
  //set calibration interval
  const uint32_t calibrationInterval = 3 * 60 * 1000; // 3 minutes
 8001010:	4b27      	ldr	r3, [pc, #156]	@ (80010b0 <main+0xe8>)
 8001012:	60bb      	str	r3, [r7, #8]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Detect with log detector
	  // Start the ADC
	  HAL_ADC_Start(&hadc1);
 8001014:	4827      	ldr	r0, [pc, #156]	@ (80010b4 <main+0xec>)
 8001016:	f001 f909 	bl	800222c <HAL_ADC_Start>
	  // Wait for the analog-to-digital conversion to complete
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800101a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800101e:	4825      	ldr	r0, [pc, #148]	@ (80010b4 <main+0xec>)
 8001020:	f001 f9be 	bl	80023a0 <HAL_ADC_PollForConversion>

	  // Read ADC value
	  uint16_t logInputValue = HAL_ADC_GetValue(&hadc1);
 8001024:	4823      	ldr	r0, [pc, #140]	@ (80010b4 <main+0xec>)
 8001026:	f001 fa93 	bl	8002550 <HAL_ADC_GetValue>
 800102a:	4603      	mov	r3, r0
 800102c:	80fb      	strh	r3, [r7, #6]
	  float voltage = (logInputValue / 4095.0) * 3.3f;  // convert to volts
 800102e:	88fb      	ldrh	r3, [r7, #6]
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff fa77 	bl	8000524 <__aeabi_i2d>
 8001036:	a318      	add	r3, pc, #96	@ (adr r3, 8001098 <main+0xd0>)
 8001038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800103c:	f7ff fc06 	bl	800084c <__aeabi_ddiv>
 8001040:	4602      	mov	r2, r0
 8001042:	460b      	mov	r3, r1
 8001044:	4610      	mov	r0, r2
 8001046:	4619      	mov	r1, r3
 8001048:	a315      	add	r3, pc, #84	@ (adr r3, 80010a0 <main+0xd8>)
 800104a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800104e:	f7ff fad3 	bl	80005f8 <__aeabi_dmul>
 8001052:	4602      	mov	r2, r0
 8001054:	460b      	mov	r3, r1
 8001056:	4610      	mov	r0, r2
 8001058:	4619      	mov	r1, r3
 800105a:	f7ff fda5 	bl	8000ba8 <__aeabi_d2f>
 800105e:	4603      	mov	r3, r0
 8001060:	603b      	str	r3, [r7, #0]
	  //checl input val
	  // TODO change to use noise floor. take code from cc2500 driver
	  if (logInputValue >= 0.3){
 8001062:	88fb      	ldrh	r3, [r7, #6]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d00f      	beq.n	8001088 <main+0xc0>
		  //create display message
		  sprintf(logMessage, "V%.2f", voltage);
 8001068:	6838      	ldr	r0, [r7, #0]
 800106a:	f7ff fa6d 	bl	8000548 <__aeabi_f2d>
 800106e:	4602      	mov	r2, r0
 8001070:	460b      	mov	r3, r1
 8001072:	4911      	ldr	r1, [pc, #68]	@ (80010b8 <main+0xf0>)
 8001074:	4811      	ldr	r0, [pc, #68]	@ (80010bc <main+0xf4>)
 8001076:	f005 fd3f 	bl	8006af8 <siprintf>
		  CharLCD_Set_Cursor(1,0); // Set cursor to row 1, column 0
 800107a:	2100      	movs	r1, #0
 800107c:	2001      	movs	r0, #1
 800107e:	f000 fa78 	bl	8001572 <CharLCD_Set_Cursor>
		  CharLCD_Write_String(logMessage);
 8001082:	480e      	ldr	r0, [pc, #56]	@ (80010bc <main+0xf4>)
 8001084:	f000 fa60 	bl	8001548 <CharLCD_Write_String>

		  //ADD trigger alarm
	  }

	  //Sweep and detect with cc2500 chip
	  CC2500_SweepAndDetect();
 8001088:	f7ff ff64 	bl	8000f54 <CC2500_SweepAndDetect>
	  HAL_Delay(500); //TODO rough estimate for sweeping both in about 1 second
 800108c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001090:	f000 fd74 	bl	8001b7c <HAL_Delay>
  {
 8001094:	e7be      	b.n	8001014 <main+0x4c>
 8001096:	bf00      	nop
 8001098:	00000000 	.word	0x00000000
 800109c:	40affe00 	.word	0x40affe00
 80010a0:	60000000 	.word	0x60000000
 80010a4:	400a6666 	.word	0x400a6666
 80010a8:	08008f24 	.word	0x08008f24
 80010ac:	08008f34 	.word	0x08008f34
 80010b0:	0002bf20 	.word	0x0002bf20
 80010b4:	200001f4 	.word	0x200001f4
 80010b8:	08008f44 	.word	0x08008f44
 80010bc:	20000310 	.word	0x20000310

080010c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b096      	sub	sp, #88	@ 0x58
 80010c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010c6:	f107 0314 	add.w	r3, r7, #20
 80010ca:	2244      	movs	r2, #68	@ 0x44
 80010cc:	2100      	movs	r1, #0
 80010ce:	4618      	mov	r0, r3
 80010d0:	f005 fdf6 	bl	8006cc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d4:	463b      	mov	r3, r7
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]
 80010e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010e2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80010e6:	f002 feab 	bl	8003e40 <HAL_PWREx_ControlVoltageScaling>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010f0:	f000 fa64 	bl	80015bc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010f4:	2302      	movs	r3, #2
 80010f6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010fc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010fe:	2310      	movs	r3, #16
 8001100:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001102:	2302      	movs	r3, #2
 8001104:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001106:	2302      	movs	r3, #2
 8001108:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800110a:	2301      	movs	r3, #1
 800110c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800110e:	230a      	movs	r3, #10
 8001110:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001112:	2307      	movs	r3, #7
 8001114:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001116:	2302      	movs	r3, #2
 8001118:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800111a:	2302      	movs	r3, #2
 800111c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800111e:	f107 0314 	add.w	r3, r7, #20
 8001122:	4618      	mov	r0, r3
 8001124:	f002 fee2 	bl	8003eec <HAL_RCC_OscConfig>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800112e:	f000 fa45 	bl	80015bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001132:	230f      	movs	r3, #15
 8001134:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001136:	2303      	movs	r3, #3
 8001138:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800113a:	2300      	movs	r3, #0
 800113c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001142:	2300      	movs	r3, #0
 8001144:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001146:	463b      	mov	r3, r7
 8001148:	2104      	movs	r1, #4
 800114a:	4618      	mov	r0, r3
 800114c:	f003 faaa 	bl	80046a4 <HAL_RCC_ClockConfig>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001156:	f000 fa31 	bl	80015bc <Error_Handler>
  }
}
 800115a:	bf00      	nop
 800115c:	3758      	adds	r7, #88	@ 0x58
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
	...

08001164 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08a      	sub	sp, #40	@ 0x28
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800116a:	f107 031c 	add.w	r3, r7, #28
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001176:	1d3b      	adds	r3, r7, #4
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
 8001184:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001186:	4b2f      	ldr	r3, [pc, #188]	@ (8001244 <MX_ADC1_Init+0xe0>)
 8001188:	4a2f      	ldr	r2, [pc, #188]	@ (8001248 <MX_ADC1_Init+0xe4>)
 800118a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800118c:	4b2d      	ldr	r3, [pc, #180]	@ (8001244 <MX_ADC1_Init+0xe0>)
 800118e:	2200      	movs	r2, #0
 8001190:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001192:	4b2c      	ldr	r3, [pc, #176]	@ (8001244 <MX_ADC1_Init+0xe0>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001198:	4b2a      	ldr	r3, [pc, #168]	@ (8001244 <MX_ADC1_Init+0xe0>)
 800119a:	2200      	movs	r2, #0
 800119c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800119e:	4b29      	ldr	r3, [pc, #164]	@ (8001244 <MX_ADC1_Init+0xe0>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011a4:	4b27      	ldr	r3, [pc, #156]	@ (8001244 <MX_ADC1_Init+0xe0>)
 80011a6:	2204      	movs	r2, #4
 80011a8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011aa:	4b26      	ldr	r3, [pc, #152]	@ (8001244 <MX_ADC1_Init+0xe0>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011b0:	4b24      	ldr	r3, [pc, #144]	@ (8001244 <MX_ADC1_Init+0xe0>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80011b6:	4b23      	ldr	r3, [pc, #140]	@ (8001244 <MX_ADC1_Init+0xe0>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011bc:	4b21      	ldr	r3, [pc, #132]	@ (8001244 <MX_ADC1_Init+0xe0>)
 80011be:	2200      	movs	r2, #0
 80011c0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001244 <MX_ADC1_Init+0xe0>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001244 <MX_ADC1_Init+0xe0>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011d0:	4b1c      	ldr	r3, [pc, #112]	@ (8001244 <MX_ADC1_Init+0xe0>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001244 <MX_ADC1_Init+0xe0>)
 80011da:	2200      	movs	r2, #0
 80011dc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80011de:	4b19      	ldr	r3, [pc, #100]	@ (8001244 <MX_ADC1_Init+0xe0>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011e6:	4817      	ldr	r0, [pc, #92]	@ (8001244 <MX_ADC1_Init+0xe0>)
 80011e8:	f000 fed0 	bl	8001f8c <HAL_ADC_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80011f2:	f000 f9e3 	bl	80015bc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011fa:	f107 031c 	add.w	r3, r7, #28
 80011fe:	4619      	mov	r1, r3
 8001200:	4810      	ldr	r0, [pc, #64]	@ (8001244 <MX_ADC1_Init+0xe0>)
 8001202:	f001 fe51 	bl	8002ea8 <HAL_ADCEx_MultiModeConfigChannel>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800120c:	f000 f9d6 	bl	80015bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001210:	4b0e      	ldr	r3, [pc, #56]	@ (800124c <MX_ADC1_Init+0xe8>)
 8001212:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001214:	2306      	movs	r3, #6
 8001216:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001218:	2300      	movs	r3, #0
 800121a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800121c:	237f      	movs	r3, #127	@ 0x7f
 800121e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001220:	2304      	movs	r3, #4
 8001222:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	4619      	mov	r1, r3
 800122c:	4805      	ldr	r0, [pc, #20]	@ (8001244 <MX_ADC1_Init+0xe0>)
 800122e:	f001 f99d 	bl	800256c <HAL_ADC_ConfigChannel>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001238:	f000 f9c0 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800123c:	bf00      	nop
 800123e:	3728      	adds	r7, #40	@ 0x28
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	200001f4 	.word	0x200001f4
 8001248:	50040000 	.word	0x50040000
 800124c:	14f00020 	.word	0x14f00020

08001250 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001254:	4b1b      	ldr	r3, [pc, #108]	@ (80012c4 <MX_I2C1_Init+0x74>)
 8001256:	4a1c      	ldr	r2, [pc, #112]	@ (80012c8 <MX_I2C1_Init+0x78>)
 8001258:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 800125a:	4b1a      	ldr	r3, [pc, #104]	@ (80012c4 <MX_I2C1_Init+0x74>)
 800125c:	4a1b      	ldr	r2, [pc, #108]	@ (80012cc <MX_I2C1_Init+0x7c>)
 800125e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001260:	4b18      	ldr	r3, [pc, #96]	@ (80012c4 <MX_I2C1_Init+0x74>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001266:	4b17      	ldr	r3, [pc, #92]	@ (80012c4 <MX_I2C1_Init+0x74>)
 8001268:	2201      	movs	r2, #1
 800126a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800126c:	4b15      	ldr	r3, [pc, #84]	@ (80012c4 <MX_I2C1_Init+0x74>)
 800126e:	2200      	movs	r2, #0
 8001270:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001272:	4b14      	ldr	r3, [pc, #80]	@ (80012c4 <MX_I2C1_Init+0x74>)
 8001274:	2200      	movs	r2, #0
 8001276:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001278:	4b12      	ldr	r3, [pc, #72]	@ (80012c4 <MX_I2C1_Init+0x74>)
 800127a:	2200      	movs	r2, #0
 800127c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800127e:	4b11      	ldr	r3, [pc, #68]	@ (80012c4 <MX_I2C1_Init+0x74>)
 8001280:	2200      	movs	r2, #0
 8001282:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001284:	4b0f      	ldr	r3, [pc, #60]	@ (80012c4 <MX_I2C1_Init+0x74>)
 8001286:	2200      	movs	r2, #0
 8001288:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800128a:	480e      	ldr	r0, [pc, #56]	@ (80012c4 <MX_I2C1_Init+0x74>)
 800128c:	f002 f964 	bl	8003558 <HAL_I2C_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001296:	f000 f991 	bl	80015bc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800129a:	2100      	movs	r1, #0
 800129c:	4809      	ldr	r0, [pc, #36]	@ (80012c4 <MX_I2C1_Init+0x74>)
 800129e:	f002 fd29 	bl	8003cf4 <HAL_I2CEx_ConfigAnalogFilter>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80012a8:	f000 f988 	bl	80015bc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012ac:	2100      	movs	r1, #0
 80012ae:	4805      	ldr	r0, [pc, #20]	@ (80012c4 <MX_I2C1_Init+0x74>)
 80012b0:	f002 fd6b 	bl	8003d8a <HAL_I2CEx_ConfigDigitalFilter>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012ba:	f000 f97f 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20000258 	.word	0x20000258
 80012c8:	40005400 	.word	0x40005400
 80012cc:	10d19ce4 	.word	0x10d19ce4

080012d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001344 <MX_SPI1_Init+0x74>)
 80012d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001348 <MX_SPI1_Init+0x78>)
 80012d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012da:	4b1a      	ldr	r3, [pc, #104]	@ (8001344 <MX_SPI1_Init+0x74>)
 80012dc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80012e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012e2:	4b18      	ldr	r3, [pc, #96]	@ (8001344 <MX_SPI1_Init+0x74>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012e8:	4b16      	ldr	r3, [pc, #88]	@ (8001344 <MX_SPI1_Init+0x74>)
 80012ea:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80012ee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012f0:	4b14      	ldr	r3, [pc, #80]	@ (8001344 <MX_SPI1_Init+0x74>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012f6:	4b13      	ldr	r3, [pc, #76]	@ (8001344 <MX_SPI1_Init+0x74>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012fc:	4b11      	ldr	r3, [pc, #68]	@ (8001344 <MX_SPI1_Init+0x74>)
 80012fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001302:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001304:	4b0f      	ldr	r3, [pc, #60]	@ (8001344 <MX_SPI1_Init+0x74>)
 8001306:	2220      	movs	r2, #32
 8001308:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800130a:	4b0e      	ldr	r3, [pc, #56]	@ (8001344 <MX_SPI1_Init+0x74>)
 800130c:	2200      	movs	r2, #0
 800130e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001310:	4b0c      	ldr	r3, [pc, #48]	@ (8001344 <MX_SPI1_Init+0x74>)
 8001312:	2200      	movs	r2, #0
 8001314:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001316:	4b0b      	ldr	r3, [pc, #44]	@ (8001344 <MX_SPI1_Init+0x74>)
 8001318:	2200      	movs	r2, #0
 800131a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800131c:	4b09      	ldr	r3, [pc, #36]	@ (8001344 <MX_SPI1_Init+0x74>)
 800131e:	2207      	movs	r2, #7
 8001320:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001322:	4b08      	ldr	r3, [pc, #32]	@ (8001344 <MX_SPI1_Init+0x74>)
 8001324:	2200      	movs	r2, #0
 8001326:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001328:	4b06      	ldr	r3, [pc, #24]	@ (8001344 <MX_SPI1_Init+0x74>)
 800132a:	2208      	movs	r2, #8
 800132c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800132e:	4805      	ldr	r0, [pc, #20]	@ (8001344 <MX_SPI1_Init+0x74>)
 8001330:	f004 f860 	bl	80053f4 <HAL_SPI_Init>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800133a:	f000 f93f 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	200002ac 	.word	0x200002ac
 8001348:	40013000 	.word	0x40013000

0800134c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	@ 0x28
 8001350:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001352:	f107 0314 	add.w	r3, r7, #20
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]
 8001360:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001362:	4b24      	ldr	r3, [pc, #144]	@ (80013f4 <MX_GPIO_Init+0xa8>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001366:	4a23      	ldr	r2, [pc, #140]	@ (80013f4 <MX_GPIO_Init+0xa8>)
 8001368:	f043 0304 	orr.w	r3, r3, #4
 800136c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800136e:	4b21      	ldr	r3, [pc, #132]	@ (80013f4 <MX_GPIO_Init+0xa8>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001372:	f003 0304 	and.w	r3, r3, #4
 8001376:	613b      	str	r3, [r7, #16]
 8001378:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800137a:	4b1e      	ldr	r3, [pc, #120]	@ (80013f4 <MX_GPIO_Init+0xa8>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137e:	4a1d      	ldr	r2, [pc, #116]	@ (80013f4 <MX_GPIO_Init+0xa8>)
 8001380:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001384:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001386:	4b1b      	ldr	r3, [pc, #108]	@ (80013f4 <MX_GPIO_Init+0xa8>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001392:	4b18      	ldr	r3, [pc, #96]	@ (80013f4 <MX_GPIO_Init+0xa8>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001396:	4a17      	ldr	r2, [pc, #92]	@ (80013f4 <MX_GPIO_Init+0xa8>)
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800139e:	4b15      	ldr	r3, [pc, #84]	@ (80013f4 <MX_GPIO_Init+0xa8>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013aa:	4b12      	ldr	r3, [pc, #72]	@ (80013f4 <MX_GPIO_Init+0xa8>)
 80013ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ae:	4a11      	ldr	r2, [pc, #68]	@ (80013f4 <MX_GPIO_Init+0xa8>)
 80013b0:	f043 0302 	orr.w	r3, r3, #2
 80013b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013b6:	4b0f      	ldr	r3, [pc, #60]	@ (80013f4 <MX_GPIO_Init+0xa8>)
 80013b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2110      	movs	r1, #16
 80013c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013ca:	f002 f8ad 	bl	8003528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013ce:	2310      	movs	r3, #16
 80013d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d2:	2301      	movs	r3, #1
 80013d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013da:	2302      	movs	r3, #2
 80013dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013de:	f107 0314 	add.w	r3, r7, #20
 80013e2:	4619      	mov	r1, r3
 80013e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013e8:	f001 fef4 	bl	80031d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80013ec:	bf00      	nop
 80013ee:	3728      	adds	r7, #40	@ 0x28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40021000 	.word	0x40021000

080013f8 <CharLCD_Write_Nibble>:
 * @brief Write a 4-bit nibble to the LCD via I2C
 * @param nibble: 4-bit data to send (lower 4 bits)
 * @param dc: data/command (1 = data, 0 = command)
 * @retval None
 */
void CharLCD_Write_Nibble(uint8_t nibble, uint8_t dc) {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af02      	add	r7, sp, #8
 80013fe:	4603      	mov	r3, r0
 8001400:	460a      	mov	r2, r1
 8001402:	71fb      	strb	r3, [r7, #7]
 8001404:	4613      	mov	r3, r2
 8001406:	71bb      	strb	r3, [r7, #6]
 uint8_t data = nibble << D4_BIT; // Shift nibble to D4-D7 position
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	011b      	lsls	r3, r3, #4
 800140c:	b2db      	uxtb	r3, r3
 800140e:	73fb      	strb	r3, [r7, #15]
 data |= dc << DC_BIT; // Set DC bit for data/command selection
 8001410:	7bfa      	ldrb	r2, [r7, #15]
 8001412:	79bb      	ldrb	r3, [r7, #6]
 8001414:	4313      	orrs	r3, r2
 8001416:	b2db      	uxtb	r3, r3
 8001418:	73fb      	strb	r3, [r7, #15]
 data |= 1 << BL_BIT; // Include backlight state in data
 800141a:	7bfb      	ldrb	r3, [r7, #15]
 800141c:	f043 0308 	orr.w	r3, r3, #8
 8001420:	b2db      	uxtb	r3, r3
 8001422:	73fb      	strb	r3, [r7, #15]
 data |= 1 << EN_BIT; // Set enable bit high
 8001424:	7bfb      	ldrb	r3, [r7, #15]
 8001426:	f043 0304 	orr.w	r3, r3, #4
 800142a:	b2db      	uxtb	r3, r3
 800142c:	73fb      	strb	r3, [r7, #15]
 HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100); // Send data with EN high
 800142e:	f107 020f 	add.w	r2, r7, #15
 8001432:	2364      	movs	r3, #100	@ 0x64
 8001434:	9300      	str	r3, [sp, #0]
 8001436:	2301      	movs	r3, #1
 8001438:	214e      	movs	r1, #78	@ 0x4e
 800143a:	480c      	ldr	r0, [pc, #48]	@ (800146c <CharLCD_Write_Nibble+0x74>)
 800143c:	f002 f928 	bl	8003690 <HAL_I2C_Master_Transmit>
 HAL_Delay(1); // Wait for data setup
 8001440:	2001      	movs	r0, #1
 8001442:	f000 fb9b 	bl	8001b7c <HAL_Delay>
 data &= ~(1 << EN_BIT); // Clear enable bit (falling edge triggers LCD)
 8001446:	7bfb      	ldrb	r3, [r7, #15]
 8001448:	f023 0304 	bic.w	r3, r3, #4
 800144c:	b2db      	uxtb	r3, r3
 800144e:	73fb      	strb	r3, [r7, #15]
 HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100); // Send data with EN low
 8001450:	f107 020f 	add.w	r2, r7, #15
 8001454:	2364      	movs	r3, #100	@ 0x64
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	2301      	movs	r3, #1
 800145a:	214e      	movs	r1, #78	@ 0x4e
 800145c:	4803      	ldr	r0, [pc, #12]	@ (800146c <CharLCD_Write_Nibble+0x74>)
 800145e:	f002 f917 	bl	8003690 <HAL_I2C_Master_Transmit>
}
 8001462:	bf00      	nop
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000258 	.word	0x20000258

08001470 <CharLCD_Send_Cmd>:
/**
 * @brief Send command to LCD
 * @param cmd: 8-bit command to send to LCD controller
 * @retval None
 */
void CharLCD_Send_Cmd(uint8_t cmd) {
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	71fb      	strb	r3, [r7, #7]
 uint8_t upper_nibble = cmd >> 4; // Extract upper 4 bits
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	091b      	lsrs	r3, r3, #4
 800147e:	73fb      	strb	r3, [r7, #15]
 uint8_t lower_nibble = cmd & 0x0F; // Extract lower 4 bits
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	f003 030f 	and.w	r3, r3, #15
 8001486:	73bb      	strb	r3, [r7, #14]
 CharLCD_Write_Nibble(upper_nibble, 0); // Send upper nibble (DC=0 for command)
 8001488:	7bfb      	ldrb	r3, [r7, #15]
 800148a:	2100      	movs	r1, #0
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff ffb3 	bl	80013f8 <CharLCD_Write_Nibble>
 CharLCD_Write_Nibble(lower_nibble, 0); // Send lower nibble (DC=0 for command)
 8001492:	7bbb      	ldrb	r3, [r7, #14]
 8001494:	2100      	movs	r1, #0
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff ffae 	bl	80013f8 <CharLCD_Write_Nibble>
 if (cmd == 0x01 || cmd == 0x02) { // Clear display or return home commands
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d002      	beq.n	80014a8 <CharLCD_Send_Cmd+0x38>
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d102      	bne.n	80014ae <CharLCD_Send_Cmd+0x3e>
 HAL_Delay(2); // These commands need extra time
 80014a8:	2002      	movs	r0, #2
 80014aa:	f000 fb67 	bl	8001b7c <HAL_Delay>
 }
}
 80014ae:	bf00      	nop
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <CharLCD_Send_Data>:
/**
 * @brief Send data (character) to LCD
 * @param data: 8-bit character data to display
 * @retval None
 */
void CharLCD_Send_Data(uint8_t data) {
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b084      	sub	sp, #16
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	4603      	mov	r3, r0
 80014be:	71fb      	strb	r3, [r7, #7]
 uint8_t upper_nibble = data >> 4; // Extract upper 4 bits
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	091b      	lsrs	r3, r3, #4
 80014c4:	73fb      	strb	r3, [r7, #15]
 uint8_t lower_nibble = data & 0x0F; // Extract lower 4 bits
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	f003 030f 	and.w	r3, r3, #15
 80014cc:	73bb      	strb	r3, [r7, #14]
 CharLCD_Write_Nibble(upper_nibble, 1); // Send upper nibble (DC=1 for data)
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
 80014d0:	2101      	movs	r1, #1
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff ff90 	bl	80013f8 <CharLCD_Write_Nibble>
 CharLCD_Write_Nibble(lower_nibble, 1); // Send lower nibble (DC=1 for data)
 80014d8:	7bbb      	ldrb	r3, [r7, #14]
 80014da:	2101      	movs	r1, #1
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff ff8b 	bl	80013f8 <CharLCD_Write_Nibble>
}
 80014e2:	bf00      	nop
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <CharLCD_Init>:
/**
 * @brief Initialize LCD in 4-bit mode via I2C
 * @param None
 * @retval None
 */
void CharLCD_Init() {
 80014ea:	b580      	push	{r7, lr}
 80014ec:	af00      	add	r7, sp, #0
 HAL_Delay(50); // Wait for LCD power-on reset (>40ms)
 80014ee:	2032      	movs	r0, #50	@ 0x32
 80014f0:	f000 fb44 	bl	8001b7c <HAL_Delay>
 CharLCD_Write_Nibble(0x03, 0); // Function set: 8-bit mode (first attempt)
 80014f4:	2100      	movs	r1, #0
 80014f6:	2003      	movs	r0, #3
 80014f8:	f7ff ff7e 	bl	80013f8 <CharLCD_Write_Nibble>
 HAL_Delay(5); // Wait >4.1ms
 80014fc:	2005      	movs	r0, #5
 80014fe:	f000 fb3d 	bl	8001b7c <HAL_Delay>
 CharLCD_Write_Nibble(0x03, 0); // Function set: 8-bit mode (second attempt)
 8001502:	2100      	movs	r1, #0
 8001504:	2003      	movs	r0, #3
 8001506:	f7ff ff77 	bl	80013f8 <CharLCD_Write_Nibble>
 HAL_Delay(1); // Wait >100us
 800150a:	2001      	movs	r0, #1
 800150c:	f000 fb36 	bl	8001b7c <HAL_Delay>
 CharLCD_Write_Nibble(0x03, 0); // Function set: 8-bit mode (third attempt)
 8001510:	2100      	movs	r1, #0
 8001512:	2003      	movs	r0, #3
 8001514:	f7ff ff70 	bl	80013f8 <CharLCD_Write_Nibble>
 HAL_Delay(1); // Wait >100us
 8001518:	2001      	movs	r0, #1
 800151a:	f000 fb2f 	bl	8001b7c <HAL_Delay>
 CharLCD_Write_Nibble(0x02, 0); // Function set: switch to 4-bit mode
 800151e:	2100      	movs	r1, #0
 8001520:	2002      	movs	r0, #2
 8001522:	f7ff ff69 	bl	80013f8 <CharLCD_Write_Nibble>
 CharLCD_Send_Cmd(0x28); // Function set: 4-bit, 2 lines, 5x8 font
 8001526:	2028      	movs	r0, #40	@ 0x28
 8001528:	f7ff ffa2 	bl	8001470 <CharLCD_Send_Cmd>
 CharLCD_Send_Cmd(0x0C); // Display control: display on/cursor off/blink off
 800152c:	200c      	movs	r0, #12
 800152e:	f7ff ff9f 	bl	8001470 <CharLCD_Send_Cmd>
 CharLCD_Send_Cmd(0x06); // Entry mode: increment cursor, no shift
 8001532:	2006      	movs	r0, #6
 8001534:	f7ff ff9c 	bl	8001470 <CharLCD_Send_Cmd>
 CharLCD_Send_Cmd(0x01); // Clear display
 8001538:	2001      	movs	r0, #1
 800153a:	f7ff ff99 	bl	8001470 <CharLCD_Send_Cmd>
 HAL_Delay(2); // Wait for clear display command
 800153e:	2002      	movs	r0, #2
 8001540:	f000 fb1c 	bl	8001b7c <HAL_Delay>
}
 8001544:	bf00      	nop
 8001546:	bd80      	pop	{r7, pc}

08001548 <CharLCD_Write_String>:
/**
 * @brief Write string to LCD at current cursor position
 * @param str: Pointer to null-terminated string
 * @retval None
 */
void CharLCD_Write_String(char *str) {
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 while (*str) { // Loop until null terminator
 8001550:	e006      	b.n	8001560 <CharLCD_Write_String+0x18>
 CharLCD_Send_Data(*str++); // Send each character and increment pointer
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	1c5a      	adds	r2, r3, #1
 8001556:	607a      	str	r2, [r7, #4]
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff ffab 	bl	80014b6 <CharLCD_Send_Data>
 while (*str) { // Loop until null terminator
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d1f4      	bne.n	8001552 <CharLCD_Write_String+0xa>
 }
}
 8001568:	bf00      	nop
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <CharLCD_Set_Cursor>:
 * @brief Set cursor position on LCD
 * @param row: Row number (0 or 1 for 2-line display)
 * @param column: Column number (0 to display width - 1)
 * @retval None
 */
void CharLCD_Set_Cursor(uint8_t row, uint8_t column) {
 8001572:	b580      	push	{r7, lr}
 8001574:	b084      	sub	sp, #16
 8001576:	af00      	add	r7, sp, #0
 8001578:	4603      	mov	r3, r0
 800157a:	460a      	mov	r2, r1
 800157c:	71fb      	strb	r3, [r7, #7]
 800157e:	4613      	mov	r3, r2
 8001580:	71bb      	strb	r3, [r7, #6]
 uint8_t address;
 switch (row) {
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d002      	beq.n	800158e <CharLCD_Set_Cursor+0x1c>
 8001588:	2b01      	cmp	r3, #1
 800158a:	d003      	beq.n	8001594 <CharLCD_Set_Cursor+0x22>
 800158c:	e005      	b.n	800159a <CharLCD_Set_Cursor+0x28>
 case 0:
 address = 0x00; break; // First line starts at address 0x00
 800158e:	2300      	movs	r3, #0
 8001590:	73fb      	strb	r3, [r7, #15]
 8001592:	e004      	b.n	800159e <CharLCD_Set_Cursor+0x2c>
 case 1:
 address = 0x40; break; // Second line starts at address 0x40
 8001594:	2340      	movs	r3, #64	@ 0x40
 8001596:	73fb      	strb	r3, [r7, #15]
 8001598:	e001      	b.n	800159e <CharLCD_Set_Cursor+0x2c>
 default:
 address = 0x00; // Default to first line for invalid row
 800159a:	2300      	movs	r3, #0
 800159c:	73fb      	strb	r3, [r7, #15]
 }
 address += column; // Add column offset
 800159e:	7bfa      	ldrb	r2, [r7, #15]
 80015a0:	79bb      	ldrb	r3, [r7, #6]
 80015a2:	4413      	add	r3, r2
 80015a4:	73fb      	strb	r3, [r7, #15]
 CharLCD_Send_Cmd(0x80 | address); // Set DDRAM address command (0x80 + address)
 80015a6:	7bfb      	ldrb	r3, [r7, #15]
 80015a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff ff5e 	bl	8001470 <CharLCD_Send_Cmd>
}
 80015b4:	bf00      	nop
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015c0:	b672      	cpsid	i
}
 80015c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015c4:	bf00      	nop
 80015c6:	e7fd      	b.n	80015c4 <Error_Handler+0x8>

080015c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ce:	4b0f      	ldr	r3, [pc, #60]	@ (800160c <HAL_MspInit+0x44>)
 80015d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015d2:	4a0e      	ldr	r2, [pc, #56]	@ (800160c <HAL_MspInit+0x44>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80015da:	4b0c      	ldr	r3, [pc, #48]	@ (800160c <HAL_MspInit+0x44>)
 80015dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	607b      	str	r3, [r7, #4]
 80015e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e6:	4b09      	ldr	r3, [pc, #36]	@ (800160c <HAL_MspInit+0x44>)
 80015e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ea:	4a08      	ldr	r2, [pc, #32]	@ (800160c <HAL_MspInit+0x44>)
 80015ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80015f2:	4b06      	ldr	r3, [pc, #24]	@ (800160c <HAL_MspInit+0x44>)
 80015f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015fa:	603b      	str	r3, [r7, #0]
 80015fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	40021000 	.word	0x40021000

08001610 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b0ac      	sub	sp, #176	@ 0xb0
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001628:	f107 0314 	add.w	r3, r7, #20
 800162c:	2288      	movs	r2, #136	@ 0x88
 800162e:	2100      	movs	r1, #0
 8001630:	4618      	mov	r0, r3
 8001632:	f005 fb45 	bl	8006cc0 <memset>
  if(hadc->Instance==ADC1)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a27      	ldr	r2, [pc, #156]	@ (80016d8 <HAL_ADC_MspInit+0xc8>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d147      	bne.n	80016d0 <HAL_ADC_MspInit+0xc0>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001640:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001644:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001646:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800164a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800164e:	2302      	movs	r3, #2
 8001650:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001652:	2301      	movs	r3, #1
 8001654:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001656:	2308      	movs	r3, #8
 8001658:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800165a:	2307      	movs	r3, #7
 800165c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800165e:	2302      	movs	r3, #2
 8001660:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001662:	2302      	movs	r3, #2
 8001664:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001666:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800166a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	4618      	mov	r0, r3
 8001672:	f003 fa03 	bl	8004a7c <HAL_RCCEx_PeriphCLKConfig>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 800167c:	f7ff ff9e 	bl	80015bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001680:	4b16      	ldr	r3, [pc, #88]	@ (80016dc <HAL_ADC_MspInit+0xcc>)
 8001682:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001684:	4a15      	ldr	r2, [pc, #84]	@ (80016dc <HAL_ADC_MspInit+0xcc>)
 8001686:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800168a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800168c:	4b13      	ldr	r3, [pc, #76]	@ (80016dc <HAL_ADC_MspInit+0xcc>)
 800168e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001690:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001694:	613b      	str	r3, [r7, #16]
 8001696:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001698:	4b10      	ldr	r3, [pc, #64]	@ (80016dc <HAL_ADC_MspInit+0xcc>)
 800169a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800169c:	4a0f      	ldr	r2, [pc, #60]	@ (80016dc <HAL_ADC_MspInit+0xcc>)
 800169e:	f043 0301 	orr.w	r3, r3, #1
 80016a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016a4:	4b0d      	ldr	r3, [pc, #52]	@ (80016dc <HAL_ADC_MspInit+0xcc>)
 80016a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = LOG_IN_Pin;
 80016b0:	2301      	movs	r3, #1
 80016b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80016b6:	230b      	movs	r3, #11
 80016b8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(LOG_IN_GPIO_Port, &GPIO_InitStruct);
 80016c2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80016c6:	4619      	mov	r1, r3
 80016c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016cc:	f001 fd82 	bl	80031d4 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80016d0:	bf00      	nop
 80016d2:	37b0      	adds	r7, #176	@ 0xb0
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	50040000 	.word	0x50040000
 80016dc:	40021000 	.word	0x40021000

080016e0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b0ac      	sub	sp, #176	@ 0xb0
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	2288      	movs	r2, #136	@ 0x88
 80016fe:	2100      	movs	r1, #0
 8001700:	4618      	mov	r0, r3
 8001702:	f005 fadd 	bl	8006cc0 <memset>
  if(hi2c->Instance==I2C1)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a21      	ldr	r2, [pc, #132]	@ (8001790 <HAL_I2C_MspInit+0xb0>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d13b      	bne.n	8001788 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001710:	2340      	movs	r3, #64	@ 0x40
 8001712:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001714:	2300      	movs	r3, #0
 8001716:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001718:	f107 0314 	add.w	r3, r7, #20
 800171c:	4618      	mov	r0, r3
 800171e:	f003 f9ad 	bl	8004a7c <HAL_RCCEx_PeriphCLKConfig>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001728:	f7ff ff48 	bl	80015bc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800172c:	4b19      	ldr	r3, [pc, #100]	@ (8001794 <HAL_I2C_MspInit+0xb4>)
 800172e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001730:	4a18      	ldr	r2, [pc, #96]	@ (8001794 <HAL_I2C_MspInit+0xb4>)
 8001732:	f043 0302 	orr.w	r3, r3, #2
 8001736:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001738:	4b16      	ldr	r3, [pc, #88]	@ (8001794 <HAL_I2C_MspInit+0xb4>)
 800173a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	613b      	str	r3, [r7, #16]
 8001742:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_D15_Pin|SDA_D14_Pin;
 8001744:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001748:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800174c:	2312      	movs	r3, #18
 800174e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001752:	2301      	movs	r3, #1
 8001754:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001758:	2303      	movs	r3, #3
 800175a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800175e:	2304      	movs	r3, #4
 8001760:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001764:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001768:	4619      	mov	r1, r3
 800176a:	480b      	ldr	r0, [pc, #44]	@ (8001798 <HAL_I2C_MspInit+0xb8>)
 800176c:	f001 fd32 	bl	80031d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001770:	4b08      	ldr	r3, [pc, #32]	@ (8001794 <HAL_I2C_MspInit+0xb4>)
 8001772:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001774:	4a07      	ldr	r2, [pc, #28]	@ (8001794 <HAL_I2C_MspInit+0xb4>)
 8001776:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800177a:	6593      	str	r3, [r2, #88]	@ 0x58
 800177c:	4b05      	ldr	r3, [pc, #20]	@ (8001794 <HAL_I2C_MspInit+0xb4>)
 800177e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001780:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001788:	bf00      	nop
 800178a:	37b0      	adds	r7, #176	@ 0xb0
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40005400 	.word	0x40005400
 8001794:	40021000 	.word	0x40021000
 8001798:	48000400 	.word	0x48000400

0800179c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08a      	sub	sp, #40	@ 0x28
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a4:	f107 0314 	add.w	r3, r7, #20
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a17      	ldr	r2, [pc, #92]	@ (8001818 <HAL_SPI_MspInit+0x7c>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d128      	bne.n	8001810 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017be:	4b17      	ldr	r3, [pc, #92]	@ (800181c <HAL_SPI_MspInit+0x80>)
 80017c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017c2:	4a16      	ldr	r2, [pc, #88]	@ (800181c <HAL_SPI_MspInit+0x80>)
 80017c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80017c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80017ca:	4b14      	ldr	r3, [pc, #80]	@ (800181c <HAL_SPI_MspInit+0x80>)
 80017cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017d2:	613b      	str	r3, [r7, #16]
 80017d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d6:	4b11      	ldr	r3, [pc, #68]	@ (800181c <HAL_SPI_MspInit+0x80>)
 80017d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017da:	4a10      	ldr	r2, [pc, #64]	@ (800181c <HAL_SPI_MspInit+0x80>)
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017e2:	4b0e      	ldr	r3, [pc, #56]	@ (800181c <HAL_SPI_MspInit+0x80>)
 80017e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80017ee:	23e0      	movs	r3, #224	@ 0xe0
 80017f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f2:	2302      	movs	r3, #2
 80017f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fa:	2303      	movs	r3, #3
 80017fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017fe:	2305      	movs	r3, #5
 8001800:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001802:	f107 0314 	add.w	r3, r7, #20
 8001806:	4619      	mov	r1, r3
 8001808:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800180c:	f001 fce2 	bl	80031d4 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001810:	bf00      	nop
 8001812:	3728      	adds	r7, #40	@ 0x28
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40013000 	.word	0x40013000
 800181c:	40021000 	.word	0x40021000

08001820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001824:	bf00      	nop
 8001826:	e7fd      	b.n	8001824 <NMI_Handler+0x4>

08001828 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800182c:	bf00      	nop
 800182e:	e7fd      	b.n	800182c <HardFault_Handler+0x4>

08001830 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001834:	bf00      	nop
 8001836:	e7fd      	b.n	8001834 <MemManage_Handler+0x4>

08001838 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800183c:	bf00      	nop
 800183e:	e7fd      	b.n	800183c <BusFault_Handler+0x4>

08001840 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001844:	bf00      	nop
 8001846:	e7fd      	b.n	8001844 <UsageFault_Handler+0x4>

08001848 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001876:	f000 f961 	bl	8001b3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}

0800187e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0
  return 1;
 8001882:	2301      	movs	r3, #1
}
 8001884:	4618      	mov	r0, r3
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr

0800188e <_kill>:

int _kill(int pid, int sig)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b082      	sub	sp, #8
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
 8001896:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001898:	f005 fa1a 	bl	8006cd0 <__errno>
 800189c:	4603      	mov	r3, r0
 800189e:	2216      	movs	r2, #22
 80018a0:	601a      	str	r2, [r3, #0]
  return -1;
 80018a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <_exit>:

void _exit (int status)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b082      	sub	sp, #8
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018b6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7ff ffe7 	bl	800188e <_kill>
  while (1) {}    /* Make sure we hang here */
 80018c0:	bf00      	nop
 80018c2:	e7fd      	b.n	80018c0 <_exit+0x12>

080018c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]
 80018d4:	e00a      	b.n	80018ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018d6:	f3af 8000 	nop.w
 80018da:	4601      	mov	r1, r0
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	1c5a      	adds	r2, r3, #1
 80018e0:	60ba      	str	r2, [r7, #8]
 80018e2:	b2ca      	uxtb	r2, r1
 80018e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	3301      	adds	r3, #1
 80018ea:	617b      	str	r3, [r7, #20]
 80018ec:	697a      	ldr	r2, [r7, #20]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	dbf0      	blt.n	80018d6 <_read+0x12>
  }

  return len;
 80018f4:	687b      	ldr	r3, [r7, #4]
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3718      	adds	r7, #24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b086      	sub	sp, #24
 8001902:	af00      	add	r7, sp, #0
 8001904:	60f8      	str	r0, [r7, #12]
 8001906:	60b9      	str	r1, [r7, #8]
 8001908:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	e009      	b.n	8001924 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	1c5a      	adds	r2, r3, #1
 8001914:	60ba      	str	r2, [r7, #8]
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	3301      	adds	r3, #1
 8001922:	617b      	str	r3, [r7, #20]
 8001924:	697a      	ldr	r2, [r7, #20]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	429a      	cmp	r2, r3
 800192a:	dbf1      	blt.n	8001910 <_write+0x12>
  }
  return len;
 800192c:	687b      	ldr	r3, [r7, #4]
}
 800192e:	4618      	mov	r0, r3
 8001930:	3718      	adds	r7, #24
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <_close>:

int _close(int file)
{
 8001936:	b480      	push	{r7}
 8001938:	b083      	sub	sp, #12
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800193e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001942:	4618      	mov	r0, r3
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800194e:	b480      	push	{r7}
 8001950:	b083      	sub	sp, #12
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
 8001956:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800195e:	605a      	str	r2, [r3, #4]
  return 0;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <_isatty>:

int _isatty(int file)
{
 800196e:	b480      	push	{r7}
 8001970:	b083      	sub	sp, #12
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001976:	2301      	movs	r3, #1
}
 8001978:	4618      	mov	r0, r3
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3714      	adds	r7, #20
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
	...

080019a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019a8:	4a14      	ldr	r2, [pc, #80]	@ (80019fc <_sbrk+0x5c>)
 80019aa:	4b15      	ldr	r3, [pc, #84]	@ (8001a00 <_sbrk+0x60>)
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019b4:	4b13      	ldr	r3, [pc, #76]	@ (8001a04 <_sbrk+0x64>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d102      	bne.n	80019c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019bc:	4b11      	ldr	r3, [pc, #68]	@ (8001a04 <_sbrk+0x64>)
 80019be:	4a12      	ldr	r2, [pc, #72]	@ (8001a08 <_sbrk+0x68>)
 80019c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019c2:	4b10      	ldr	r3, [pc, #64]	@ (8001a04 <_sbrk+0x64>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4413      	add	r3, r2
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d207      	bcs.n	80019e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019d0:	f005 f97e 	bl	8006cd0 <__errno>
 80019d4:	4603      	mov	r3, r0
 80019d6:	220c      	movs	r2, #12
 80019d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019de:	e009      	b.n	80019f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019e0:	4b08      	ldr	r3, [pc, #32]	@ (8001a04 <_sbrk+0x64>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019e6:	4b07      	ldr	r3, [pc, #28]	@ (8001a04 <_sbrk+0x64>)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4413      	add	r3, r2
 80019ee:	4a05      	ldr	r2, [pc, #20]	@ (8001a04 <_sbrk+0x64>)
 80019f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019f2:	68fb      	ldr	r3, [r7, #12]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3718      	adds	r7, #24
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	20018000 	.word	0x20018000
 8001a00:	00000400 	.word	0x00000400
 8001a04:	20000374 	.word	0x20000374
 8001a08:	200004c8 	.word	0x200004c8

08001a0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a10:	4b06      	ldr	r3, [pc, #24]	@ (8001a2c <SystemInit+0x20>)
 8001a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a16:	4a05      	ldr	r2, [pc, #20]	@ (8001a2c <SystemInit+0x20>)
 8001a18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a68 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a34:	f7ff ffea 	bl	8001a0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a38:	480c      	ldr	r0, [pc, #48]	@ (8001a6c <LoopForever+0x6>)
  ldr r1, =_edata
 8001a3a:	490d      	ldr	r1, [pc, #52]	@ (8001a70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001a74 <LoopForever+0xe>)
  movs r3, #0
 8001a3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a40:	e002      	b.n	8001a48 <LoopCopyDataInit>

08001a42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a46:	3304      	adds	r3, #4

08001a48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a4c:	d3f9      	bcc.n	8001a42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a50:	4c0a      	ldr	r4, [pc, #40]	@ (8001a7c <LoopForever+0x16>)
  movs r3, #0
 8001a52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a54:	e001      	b.n	8001a5a <LoopFillZerobss>

08001a56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a58:	3204      	adds	r2, #4

08001a5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a5c:	d3fb      	bcc.n	8001a56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a5e:	f005 f93d 	bl	8006cdc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a62:	f7ff fab1 	bl	8000fc8 <main>

08001a66 <LoopForever>:

LoopForever:
    b LoopForever
 8001a66:	e7fe      	b.n	8001a66 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a68:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a70:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001a74:	08009314 	.word	0x08009314
  ldr r2, =_sbss
 8001a78:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001a7c:	200004c8 	.word	0x200004c8

08001a80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a80:	e7fe      	b.n	8001a80 <ADC1_2_IRQHandler>
	...

08001a84 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac0 <HAL_Init+0x3c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a0b      	ldr	r2, [pc, #44]	@ (8001ac0 <HAL_Init+0x3c>)
 8001a94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a98:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a9a:	2003      	movs	r0, #3
 8001a9c:	f001 fb66 	bl	800316c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001aa0:	2000      	movs	r0, #0
 8001aa2:	f000 f80f 	bl	8001ac4 <HAL_InitTick>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d002      	beq.n	8001ab2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	71fb      	strb	r3, [r7, #7]
 8001ab0:	e001      	b.n	8001ab6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ab2:	f7ff fd89 	bl	80015c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ab6:	79fb      	ldrb	r3, [r7, #7]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3708      	adds	r7, #8
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40022000 	.word	0x40022000

08001ac4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001acc:	2300      	movs	r3, #0
 8001ace:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ad0:	4b17      	ldr	r3, [pc, #92]	@ (8001b30 <HAL_InitTick+0x6c>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d023      	beq.n	8001b20 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ad8:	4b16      	ldr	r3, [pc, #88]	@ (8001b34 <HAL_InitTick+0x70>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	4b14      	ldr	r3, [pc, #80]	@ (8001b30 <HAL_InitTick+0x6c>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ae6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aee:	4618      	mov	r0, r3
 8001af0:	f001 fb63 	bl	80031ba <HAL_SYSTICK_Config>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d10f      	bne.n	8001b1a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2b0f      	cmp	r3, #15
 8001afe:	d809      	bhi.n	8001b14 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b00:	2200      	movs	r2, #0
 8001b02:	6879      	ldr	r1, [r7, #4]
 8001b04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b08:	f001 fb3b 	bl	8003182 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b0c:	4a0a      	ldr	r2, [pc, #40]	@ (8001b38 <HAL_InitTick+0x74>)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	e007      	b.n	8001b24 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	73fb      	strb	r3, [r7, #15]
 8001b18:	e004      	b.n	8001b24 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	73fb      	strb	r3, [r7, #15]
 8001b1e:	e001      	b.n	8001b24 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	2000000c 	.word	0x2000000c
 8001b34:	20000004 	.word	0x20000004
 8001b38:	20000008 	.word	0x20000008

08001b3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b40:	4b06      	ldr	r3, [pc, #24]	@ (8001b5c <HAL_IncTick+0x20>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	461a      	mov	r2, r3
 8001b46:	4b06      	ldr	r3, [pc, #24]	@ (8001b60 <HAL_IncTick+0x24>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	4a04      	ldr	r2, [pc, #16]	@ (8001b60 <HAL_IncTick+0x24>)
 8001b4e:	6013      	str	r3, [r2, #0]
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	2000000c 	.word	0x2000000c
 8001b60:	20000378 	.word	0x20000378

08001b64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  return uwTick;
 8001b68:	4b03      	ldr	r3, [pc, #12]	@ (8001b78 <HAL_GetTick+0x14>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	20000378 	.word	0x20000378

08001b7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b84:	f7ff ffee 	bl	8001b64 <HAL_GetTick>
 8001b88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001b94:	d005      	beq.n	8001ba2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001b96:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc0 <HAL_Delay+0x44>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ba2:	bf00      	nop
 8001ba4:	f7ff ffde 	bl	8001b64 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d8f7      	bhi.n	8001ba4 <HAL_Delay+0x28>
  {
  }
}
 8001bb4:	bf00      	nop
 8001bb6:	bf00      	nop
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	2000000c 	.word	0x2000000c

08001bc4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	431a      	orrs	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	609a      	str	r2, [r3, #8]
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
 8001bf2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	609a      	str	r2, [r3, #8]
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b087      	sub	sp, #28
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
 8001c38:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	3360      	adds	r3, #96	@ 0x60
 8001c3e:	461a      	mov	r2, r3
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4413      	add	r3, r2
 8001c46:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	4b08      	ldr	r3, [pc, #32]	@ (8001c70 <LL_ADC_SetOffset+0x44>)
 8001c4e:	4013      	ands	r3, r2
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001c56:	683a      	ldr	r2, [r7, #0]
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001c64:	bf00      	nop
 8001c66:	371c      	adds	r7, #28
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	03fff000 	.word	0x03fff000

08001c74 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	3360      	adds	r3, #96	@ 0x60
 8001c82:	461a      	mov	r2, r3
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	4413      	add	r3, r2
 8001c8a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b087      	sub	sp, #28
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	3360      	adds	r3, #96	@ 0x60
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001cca:	bf00      	nop
 8001ccc:	371c      	adds	r7, #28
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b083      	sub	sp, #12
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001cea:	2301      	movs	r3, #1
 8001cec:	e000      	b.n	8001cf0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b087      	sub	sp, #28
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	3330      	adds	r3, #48	@ 0x30
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	0a1b      	lsrs	r3, r3, #8
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	f003 030c 	and.w	r3, r3, #12
 8001d18:	4413      	add	r3, r2
 8001d1a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	f003 031f 	and.w	r3, r3, #31
 8001d26:	211f      	movs	r1, #31
 8001d28:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	401a      	ands	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	0e9b      	lsrs	r3, r3, #26
 8001d34:	f003 011f 	and.w	r1, r3, #31
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	f003 031f 	and.w	r3, r3, #31
 8001d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d42:	431a      	orrs	r2, r3
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d48:	bf00      	nop
 8001d4a:	371c      	adds	r7, #28
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b087      	sub	sp, #28
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	3314      	adds	r3, #20
 8001d64:	461a      	mov	r2, r3
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	0e5b      	lsrs	r3, r3, #25
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	f003 0304 	and.w	r3, r3, #4
 8001d70:	4413      	add	r3, r2
 8001d72:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	0d1b      	lsrs	r3, r3, #20
 8001d7c:	f003 031f 	and.w	r3, r3, #31
 8001d80:	2107      	movs	r1, #7
 8001d82:	fa01 f303 	lsl.w	r3, r1, r3
 8001d86:	43db      	mvns	r3, r3
 8001d88:	401a      	ands	r2, r3
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	0d1b      	lsrs	r3, r3, #20
 8001d8e:	f003 031f 	and.w	r3, r3, #31
 8001d92:	6879      	ldr	r1, [r7, #4]
 8001d94:	fa01 f303 	lsl.w	r3, r1, r3
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001d9e:	bf00      	nop
 8001da0:	371c      	adds	r7, #28
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
	...

08001dac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	401a      	ands	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f003 0318 	and.w	r3, r3, #24
 8001dce:	4908      	ldr	r1, [pc, #32]	@ (8001df0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001dd0:	40d9      	lsrs	r1, r3
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	400b      	ands	r3, r1
 8001dd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001de2:	bf00      	nop
 8001de4:	3714      	adds	r7, #20
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	0007ffff 	.word	0x0007ffff

08001df4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f003 031f 	and.w	r3, r3, #31
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001e3c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	6093      	str	r3, [r2, #8]
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e64:	d101      	bne.n	8001e6a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e66:	2301      	movs	r3, #1
 8001e68:	e000      	b.n	8001e6c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e6a:	2300      	movs	r3, #0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001e88:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e8c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e94:	bf00      	nop
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eb0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001eb4:	d101      	bne.n	8001eba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e000      	b.n	8001ebc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ed8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001edc:	f043 0201 	orr.w	r2, r3, #1
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f003 0301 	and.w	r3, r3, #1
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d101      	bne.n	8001f08 <LL_ADC_IsEnabled+0x18>
 8001f04:	2301      	movs	r3, #1
 8001f06:	e000      	b.n	8001f0a <LL_ADC_IsEnabled+0x1a>
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr

08001f16 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001f16:	b480      	push	{r7}
 8001f18:	b083      	sub	sp, #12
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f26:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f2a:	f043 0204 	orr.w	r2, r3, #4
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001f32:	bf00      	nop
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b083      	sub	sp, #12
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f003 0304 	and.w	r3, r3, #4
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	d101      	bne.n	8001f56 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f52:	2301      	movs	r3, #1
 8001f54:	e000      	b.n	8001f58 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f003 0308 	and.w	r3, r3, #8
 8001f74:	2b08      	cmp	r3, #8
 8001f76:	d101      	bne.n	8001f7c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e000      	b.n	8001f7e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
	...

08001f8c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f8c:	b590      	push	{r4, r7, lr}
 8001f8e:	b089      	sub	sp, #36	@ 0x24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f94:	2300      	movs	r3, #0
 8001f96:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e130      	b.n	8002208 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d109      	bne.n	8001fc8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f7ff fb2b 	bl	8001610 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff ff3f 	bl	8001e50 <LL_ADC_IsDeepPowerDownEnabled>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d004      	beq.n	8001fe2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff ff25 	bl	8001e2c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff ff5a 	bl	8001ea0 <LL_ADC_IsInternalRegulatorEnabled>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d115      	bne.n	800201e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff ff3e 	bl	8001e78 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ffc:	4b84      	ldr	r3, [pc, #528]	@ (8002210 <HAL_ADC_Init+0x284>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	099b      	lsrs	r3, r3, #6
 8002002:	4a84      	ldr	r2, [pc, #528]	@ (8002214 <HAL_ADC_Init+0x288>)
 8002004:	fba2 2303 	umull	r2, r3, r2, r3
 8002008:	099b      	lsrs	r3, r3, #6
 800200a:	3301      	adds	r3, #1
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002010:	e002      	b.n	8002018 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	3b01      	subs	r3, #1
 8002016:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1f9      	bne.n	8002012 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff ff3c 	bl	8001ea0 <LL_ADC_IsInternalRegulatorEnabled>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d10d      	bne.n	800204a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002032:	f043 0210 	orr.w	r2, r3, #16
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800203e:	f043 0201 	orr.w	r2, r3, #1
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff ff75 	bl	8001f3e <LL_ADC_REG_IsConversionOngoing>
 8002054:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800205a:	f003 0310 	and.w	r3, r3, #16
 800205e:	2b00      	cmp	r3, #0
 8002060:	f040 80c9 	bne.w	80021f6 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	2b00      	cmp	r3, #0
 8002068:	f040 80c5 	bne.w	80021f6 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002070:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002074:	f043 0202 	orr.w	r2, r3, #2
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff ff35 	bl	8001ef0 <LL_ADC_IsEnabled>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d115      	bne.n	80020b8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800208c:	4862      	ldr	r0, [pc, #392]	@ (8002218 <HAL_ADC_Init+0x28c>)
 800208e:	f7ff ff2f 	bl	8001ef0 <LL_ADC_IsEnabled>
 8002092:	4604      	mov	r4, r0
 8002094:	4861      	ldr	r0, [pc, #388]	@ (800221c <HAL_ADC_Init+0x290>)
 8002096:	f7ff ff2b 	bl	8001ef0 <LL_ADC_IsEnabled>
 800209a:	4603      	mov	r3, r0
 800209c:	431c      	orrs	r4, r3
 800209e:	4860      	ldr	r0, [pc, #384]	@ (8002220 <HAL_ADC_Init+0x294>)
 80020a0:	f7ff ff26 	bl	8001ef0 <LL_ADC_IsEnabled>
 80020a4:	4603      	mov	r3, r0
 80020a6:	4323      	orrs	r3, r4
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d105      	bne.n	80020b8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	4619      	mov	r1, r3
 80020b2:	485c      	ldr	r0, [pc, #368]	@ (8002224 <HAL_ADC_Init+0x298>)
 80020b4:	f7ff fd86 	bl	8001bc4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	7e5b      	ldrb	r3, [r3, #25]
 80020bc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020c2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80020c8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80020ce:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020d6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020d8:	4313      	orrs	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d106      	bne.n	80020f4 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ea:	3b01      	subs	r3, #1
 80020ec:	045b      	lsls	r3, r3, #17
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d009      	beq.n	8002110 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002100:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002108:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4313      	orrs	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	68da      	ldr	r2, [r3, #12]
 8002116:	4b44      	ldr	r3, [pc, #272]	@ (8002228 <HAL_ADC_Init+0x29c>)
 8002118:	4013      	ands	r3, r2
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	6812      	ldr	r2, [r2, #0]
 800211e:	69b9      	ldr	r1, [r7, #24]
 8002120:	430b      	orrs	r3, r1
 8002122:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff ff1b 	bl	8001f64 <LL_ADC_INJ_IsConversionOngoing>
 800212e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d13d      	bne.n	80021b2 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d13a      	bne.n	80021b2 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002140:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002148:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800214a:	4313      	orrs	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002158:	f023 0302 	bic.w	r3, r3, #2
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	6812      	ldr	r2, [r2, #0]
 8002160:	69b9      	ldr	r1, [r7, #24]
 8002162:	430b      	orrs	r3, r1
 8002164:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800216c:	2b01      	cmp	r3, #1
 800216e:	d118      	bne.n	80021a2 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800217a:	f023 0304 	bic.w	r3, r3, #4
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002186:	4311      	orrs	r1, r2
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800218c:	4311      	orrs	r1, r2
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002192:	430a      	orrs	r2, r1
 8002194:	431a      	orrs	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f042 0201 	orr.w	r2, r2, #1
 800219e:	611a      	str	r2, [r3, #16]
 80021a0:	e007      	b.n	80021b2 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	691a      	ldr	r2, [r3, #16]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 0201 	bic.w	r2, r2, #1
 80021b0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d10c      	bne.n	80021d4 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c0:	f023 010f 	bic.w	r1, r3, #15
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	69db      	ldr	r3, [r3, #28]
 80021c8:	1e5a      	subs	r2, r3, #1
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	430a      	orrs	r2, r1
 80021d0:	631a      	str	r2, [r3, #48]	@ 0x30
 80021d2:	e007      	b.n	80021e4 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f022 020f 	bic.w	r2, r2, #15
 80021e2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021e8:	f023 0303 	bic.w	r3, r3, #3
 80021ec:	f043 0201 	orr.w	r2, r3, #1
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	655a      	str	r2, [r3, #84]	@ 0x54
 80021f4:	e007      	b.n	8002206 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021fa:	f043 0210 	orr.w	r2, r3, #16
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002206:	7ffb      	ldrb	r3, [r7, #31]
}
 8002208:	4618      	mov	r0, r3
 800220a:	3724      	adds	r7, #36	@ 0x24
 800220c:	46bd      	mov	sp, r7
 800220e:	bd90      	pop	{r4, r7, pc}
 8002210:	20000004 	.word	0x20000004
 8002214:	053e2d63 	.word	0x053e2d63
 8002218:	50040000 	.word	0x50040000
 800221c:	50040100 	.word	0x50040100
 8002220:	50040200 	.word	0x50040200
 8002224:	50040300 	.word	0x50040300
 8002228:	fff0c007 	.word	0xfff0c007

0800222c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002234:	4857      	ldr	r0, [pc, #348]	@ (8002394 <HAL_ADC_Start+0x168>)
 8002236:	f7ff fddd 	bl	8001df4 <LL_ADC_GetMultimode>
 800223a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff fe7c 	bl	8001f3e <LL_ADC_REG_IsConversionOngoing>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	f040 809c 	bne.w	8002386 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002254:	2b01      	cmp	r3, #1
 8002256:	d101      	bne.n	800225c <HAL_ADC_Start+0x30>
 8002258:	2302      	movs	r3, #2
 800225a:	e097      	b.n	800238c <HAL_ADC_Start+0x160>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f000 fd73 	bl	8002d50 <ADC_Enable>
 800226a:	4603      	mov	r3, r0
 800226c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800226e:	7dfb      	ldrb	r3, [r7, #23]
 8002270:	2b00      	cmp	r3, #0
 8002272:	f040 8083 	bne.w	800237c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800227a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800227e:	f023 0301 	bic.w	r3, r3, #1
 8002282:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a42      	ldr	r2, [pc, #264]	@ (8002398 <HAL_ADC_Start+0x16c>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d002      	beq.n	800229a <HAL_ADC_Start+0x6e>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	e000      	b.n	800229c <HAL_ADC_Start+0x70>
 800229a:	4b40      	ldr	r3, [pc, #256]	@ (800239c <HAL_ADC_Start+0x170>)
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	6812      	ldr	r2, [r2, #0]
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d002      	beq.n	80022aa <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d105      	bne.n	80022b6 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ae:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022c2:	d106      	bne.n	80022d2 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c8:	f023 0206 	bic.w	r2, r3, #6
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	659a      	str	r2, [r3, #88]	@ 0x58
 80022d0:	e002      	b.n	80022d8 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	221c      	movs	r2, #28
 80022de:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a2a      	ldr	r2, [pc, #168]	@ (8002398 <HAL_ADC_Start+0x16c>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d002      	beq.n	80022f8 <HAL_ADC_Start+0xcc>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	e000      	b.n	80022fa <HAL_ADC_Start+0xce>
 80022f8:	4b28      	ldr	r3, [pc, #160]	@ (800239c <HAL_ADC_Start+0x170>)
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	6812      	ldr	r2, [r2, #0]
 80022fe:	4293      	cmp	r3, r2
 8002300:	d008      	beq.n	8002314 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d005      	beq.n	8002314 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	2b05      	cmp	r3, #5
 800230c:	d002      	beq.n	8002314 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	2b09      	cmp	r3, #9
 8002312:	d114      	bne.n	800233e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d007      	beq.n	8002332 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002326:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800232a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff fded 	bl	8001f16 <LL_ADC_REG_StartConversion>
 800233c:	e025      	b.n	800238a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002342:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a12      	ldr	r2, [pc, #72]	@ (8002398 <HAL_ADC_Start+0x16c>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d002      	beq.n	800235a <HAL_ADC_Start+0x12e>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	e000      	b.n	800235c <HAL_ADC_Start+0x130>
 800235a:	4b10      	ldr	r3, [pc, #64]	@ (800239c <HAL_ADC_Start+0x170>)
 800235c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00f      	beq.n	800238a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800236e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002372:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	655a      	str	r2, [r3, #84]	@ 0x54
 800237a:	e006      	b.n	800238a <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002384:	e001      	b.n	800238a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002386:	2302      	movs	r3, #2
 8002388:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800238a:	7dfb      	ldrb	r3, [r7, #23]
}
 800238c:	4618      	mov	r0, r3
 800238e:	3718      	adds	r7, #24
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	50040300 	.word	0x50040300
 8002398:	50040100 	.word	0x50040100
 800239c:	50040000 	.word	0x50040000

080023a0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b088      	sub	sp, #32
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023aa:	4866      	ldr	r0, [pc, #408]	@ (8002544 <HAL_ADC_PollForConversion+0x1a4>)
 80023ac:	f7ff fd22 	bl	8001df4 <LL_ADC_GetMultimode>
 80023b0:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	2b08      	cmp	r3, #8
 80023b8:	d102      	bne.n	80023c0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80023ba:	2308      	movs	r3, #8
 80023bc:	61fb      	str	r3, [r7, #28]
 80023be:	e02a      	b.n	8002416 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d005      	beq.n	80023d2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	2b05      	cmp	r3, #5
 80023ca:	d002      	beq.n	80023d2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	2b09      	cmp	r3, #9
 80023d0:	d111      	bne.n	80023f6 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d007      	beq.n	80023f0 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023e4:	f043 0220 	orr.w	r2, r3, #32
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e0a4      	b.n	800253a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80023f0:	2304      	movs	r3, #4
 80023f2:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80023f4:	e00f      	b.n	8002416 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80023f6:	4853      	ldr	r0, [pc, #332]	@ (8002544 <HAL_ADC_PollForConversion+0x1a4>)
 80023f8:	f7ff fd0a 	bl	8001e10 <LL_ADC_GetMultiDMATransfer>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d007      	beq.n	8002412 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002406:	f043 0220 	orr.w	r2, r3, #32
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e093      	b.n	800253a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002412:	2304      	movs	r3, #4
 8002414:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002416:	f7ff fba5 	bl	8001b64 <HAL_GetTick>
 800241a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800241c:	e021      	b.n	8002462 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002424:	d01d      	beq.n	8002462 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002426:	f7ff fb9d 	bl	8001b64 <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	429a      	cmp	r2, r3
 8002434:	d302      	bcc.n	800243c <HAL_ADC_PollForConversion+0x9c>
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d112      	bne.n	8002462 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	4013      	ands	r3, r2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10b      	bne.n	8002462 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800244e:	f043 0204 	orr.w	r2, r3, #4
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e06b      	b.n	800253a <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	4013      	ands	r3, r2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d0d6      	beq.n	800241e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002474:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff fc28 	bl	8001cd6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d01c      	beq.n	80024c6 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	7e5b      	ldrb	r3, [r3, #25]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d118      	bne.n	80024c6 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0308 	and.w	r3, r3, #8
 800249e:	2b08      	cmp	r3, #8
 80024a0:	d111      	bne.n	80024c6 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024a6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d105      	bne.n	80024c6 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024be:	f043 0201 	orr.w	r2, r3, #1
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a1f      	ldr	r2, [pc, #124]	@ (8002548 <HAL_ADC_PollForConversion+0x1a8>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d002      	beq.n	80024d6 <HAL_ADC_PollForConversion+0x136>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	e000      	b.n	80024d8 <HAL_ADC_PollForConversion+0x138>
 80024d6:	4b1d      	ldr	r3, [pc, #116]	@ (800254c <HAL_ADC_PollForConversion+0x1ac>)
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	6812      	ldr	r2, [r2, #0]
 80024dc:	4293      	cmp	r3, r2
 80024de:	d008      	beq.n	80024f2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d005      	beq.n	80024f2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	2b05      	cmp	r3, #5
 80024ea:	d002      	beq.n	80024f2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	2b09      	cmp	r3, #9
 80024f0:	d104      	bne.n	80024fc <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	61bb      	str	r3, [r7, #24]
 80024fa:	e00c      	b.n	8002516 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a11      	ldr	r2, [pc, #68]	@ (8002548 <HAL_ADC_PollForConversion+0x1a8>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d002      	beq.n	800250c <HAL_ADC_PollForConversion+0x16c>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	e000      	b.n	800250e <HAL_ADC_PollForConversion+0x16e>
 800250c:	4b0f      	ldr	r3, [pc, #60]	@ (800254c <HAL_ADC_PollForConversion+0x1ac>)
 800250e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	2b08      	cmp	r3, #8
 800251a:	d104      	bne.n	8002526 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2208      	movs	r2, #8
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	e008      	b.n	8002538 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d103      	bne.n	8002538 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	220c      	movs	r2, #12
 8002536:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3720      	adds	r7, #32
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	50040300 	.word	0x50040300
 8002548:	50040100 	.word	0x50040100
 800254c:	50040000 	.word	0x50040000

08002550 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800255e:	4618      	mov	r0, r3
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
	...

0800256c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b0b6      	sub	sp, #216	@ 0xd8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002576:	2300      	movs	r3, #0
 8002578:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800257c:	2300      	movs	r3, #0
 800257e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002586:	2b01      	cmp	r3, #1
 8002588:	d101      	bne.n	800258e <HAL_ADC_ConfigChannel+0x22>
 800258a:	2302      	movs	r3, #2
 800258c:	e3c9      	b.n	8002d22 <HAL_ADC_ConfigChannel+0x7b6>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2201      	movs	r2, #1
 8002592:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4618      	mov	r0, r3
 800259c:	f7ff fccf 	bl	8001f3e <LL_ADC_REG_IsConversionOngoing>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	f040 83aa 	bne.w	8002cfc <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	2b05      	cmp	r3, #5
 80025b6:	d824      	bhi.n	8002602 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	3b02      	subs	r3, #2
 80025be:	2b03      	cmp	r3, #3
 80025c0:	d81b      	bhi.n	80025fa <HAL_ADC_ConfigChannel+0x8e>
 80025c2:	a201      	add	r2, pc, #4	@ (adr r2, 80025c8 <HAL_ADC_ConfigChannel+0x5c>)
 80025c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025c8:	080025d9 	.word	0x080025d9
 80025cc:	080025e1 	.word	0x080025e1
 80025d0:	080025e9 	.word	0x080025e9
 80025d4:	080025f1 	.word	0x080025f1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80025d8:	230c      	movs	r3, #12
 80025da:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80025de:	e010      	b.n	8002602 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80025e0:	2312      	movs	r3, #18
 80025e2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80025e6:	e00c      	b.n	8002602 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80025e8:	2318      	movs	r3, #24
 80025ea:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80025ee:	e008      	b.n	8002602 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80025f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80025f8:	e003      	b.n	8002602 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80025fa:	2306      	movs	r3, #6
 80025fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002600:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6818      	ldr	r0, [r3, #0]
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	461a      	mov	r2, r3
 800260c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002610:	f7ff fb74 	bl	8001cfc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff fc90 	bl	8001f3e <LL_ADC_REG_IsConversionOngoing>
 800261e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff fc9c 	bl	8001f64 <LL_ADC_INJ_IsConversionOngoing>
 800262c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002630:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002634:	2b00      	cmp	r3, #0
 8002636:	f040 81a4 	bne.w	8002982 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800263a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800263e:	2b00      	cmp	r3, #0
 8002640:	f040 819f 	bne.w	8002982 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6818      	ldr	r0, [r3, #0]
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	6819      	ldr	r1, [r3, #0]
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	461a      	mov	r2, r3
 8002652:	f7ff fb7f 	bl	8001d54 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	695a      	ldr	r2, [r3, #20]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	08db      	lsrs	r3, r3, #3
 8002662:	f003 0303 	and.w	r3, r3, #3
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	2b04      	cmp	r3, #4
 8002676:	d00a      	beq.n	800268e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6818      	ldr	r0, [r3, #0]
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	6919      	ldr	r1, [r3, #16]
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002688:	f7ff fad0 	bl	8001c2c <LL_ADC_SetOffset>
 800268c:	e179      	b.n	8002982 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2100      	movs	r1, #0
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff faed 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 800269a:	4603      	mov	r3, r0
 800269c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10a      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x14e>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2100      	movs	r1, #0
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff fae2 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 80026b0:	4603      	mov	r3, r0
 80026b2:	0e9b      	lsrs	r3, r3, #26
 80026b4:	f003 021f 	and.w	r2, r3, #31
 80026b8:	e01e      	b.n	80026f8 <HAL_ADC_ConfigChannel+0x18c>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2100      	movs	r1, #0
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff fad7 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 80026c6:	4603      	mov	r3, r0
 80026c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80026d0:	fa93 f3a3 	rbit	r3, r3
 80026d4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80026d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80026dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80026e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d101      	bne.n	80026ec <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80026e8:	2320      	movs	r3, #32
 80026ea:	e004      	b.n	80026f6 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80026ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80026f0:	fab3 f383 	clz	r3, r3
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002700:	2b00      	cmp	r3, #0
 8002702:	d105      	bne.n	8002710 <HAL_ADC_ConfigChannel+0x1a4>
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	0e9b      	lsrs	r3, r3, #26
 800270a:	f003 031f 	and.w	r3, r3, #31
 800270e:	e018      	b.n	8002742 <HAL_ADC_ConfigChannel+0x1d6>
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002718:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800271c:	fa93 f3a3 	rbit	r3, r3
 8002720:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002724:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002728:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800272c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d101      	bne.n	8002738 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002734:	2320      	movs	r3, #32
 8002736:	e004      	b.n	8002742 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002738:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800273c:	fab3 f383 	clz	r3, r3
 8002740:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002742:	429a      	cmp	r2, r3
 8002744:	d106      	bne.n	8002754 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2200      	movs	r2, #0
 800274c:	2100      	movs	r1, #0
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff faa6 	bl	8001ca0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2101      	movs	r1, #1
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff fa8a 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 8002760:	4603      	mov	r3, r0
 8002762:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002766:	2b00      	cmp	r3, #0
 8002768:	d10a      	bne.n	8002780 <HAL_ADC_ConfigChannel+0x214>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2101      	movs	r1, #1
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff fa7f 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 8002776:	4603      	mov	r3, r0
 8002778:	0e9b      	lsrs	r3, r3, #26
 800277a:	f003 021f 	and.w	r2, r3, #31
 800277e:	e01e      	b.n	80027be <HAL_ADC_ConfigChannel+0x252>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2101      	movs	r1, #1
 8002786:	4618      	mov	r0, r3
 8002788:	f7ff fa74 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 800278c:	4603      	mov	r3, r0
 800278e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002792:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002796:	fa93 f3a3 	rbit	r3, r3
 800279a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800279e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80027a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80027a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80027ae:	2320      	movs	r3, #32
 80027b0:	e004      	b.n	80027bc <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80027b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80027b6:	fab3 f383 	clz	r3, r3
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d105      	bne.n	80027d6 <HAL_ADC_ConfigChannel+0x26a>
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	0e9b      	lsrs	r3, r3, #26
 80027d0:	f003 031f 	and.w	r3, r3, #31
 80027d4:	e018      	b.n	8002808 <HAL_ADC_ConfigChannel+0x29c>
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027de:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80027e2:	fa93 f3a3 	rbit	r3, r3
 80027e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80027ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80027ee:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80027f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80027fa:	2320      	movs	r3, #32
 80027fc:	e004      	b.n	8002808 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80027fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002802:	fab3 f383 	clz	r3, r3
 8002806:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002808:	429a      	cmp	r2, r3
 800280a:	d106      	bne.n	800281a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2200      	movs	r2, #0
 8002812:	2101      	movs	r1, #1
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff fa43 	bl	8001ca0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2102      	movs	r1, #2
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff fa27 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 8002826:	4603      	mov	r3, r0
 8002828:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800282c:	2b00      	cmp	r3, #0
 800282e:	d10a      	bne.n	8002846 <HAL_ADC_ConfigChannel+0x2da>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2102      	movs	r1, #2
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff fa1c 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 800283c:	4603      	mov	r3, r0
 800283e:	0e9b      	lsrs	r3, r3, #26
 8002840:	f003 021f 	and.w	r2, r3, #31
 8002844:	e01e      	b.n	8002884 <HAL_ADC_ConfigChannel+0x318>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2102      	movs	r1, #2
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff fa11 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 8002852:	4603      	mov	r3, r0
 8002854:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002858:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800285c:	fa93 f3a3 	rbit	r3, r3
 8002860:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002864:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002868:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800286c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002870:	2b00      	cmp	r3, #0
 8002872:	d101      	bne.n	8002878 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002874:	2320      	movs	r3, #32
 8002876:	e004      	b.n	8002882 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002878:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800287c:	fab3 f383 	clz	r3, r3
 8002880:	b2db      	uxtb	r3, r3
 8002882:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800288c:	2b00      	cmp	r3, #0
 800288e:	d105      	bne.n	800289c <HAL_ADC_ConfigChannel+0x330>
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	0e9b      	lsrs	r3, r3, #26
 8002896:	f003 031f 	and.w	r3, r3, #31
 800289a:	e014      	b.n	80028c6 <HAL_ADC_ConfigChannel+0x35a>
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80028a4:	fa93 f3a3 	rbit	r3, r3
 80028a8:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80028aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80028ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80028b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d101      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80028b8:	2320      	movs	r3, #32
 80028ba:	e004      	b.n	80028c6 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80028bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80028c0:	fab3 f383 	clz	r3, r3
 80028c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d106      	bne.n	80028d8 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2200      	movs	r2, #0
 80028d0:	2102      	movs	r1, #2
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff f9e4 	bl	8001ca0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2103      	movs	r1, #3
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff f9c8 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 80028e4:	4603      	mov	r3, r0
 80028e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d10a      	bne.n	8002904 <HAL_ADC_ConfigChannel+0x398>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2103      	movs	r1, #3
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff f9bd 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 80028fa:	4603      	mov	r3, r0
 80028fc:	0e9b      	lsrs	r3, r3, #26
 80028fe:	f003 021f 	and.w	r2, r3, #31
 8002902:	e017      	b.n	8002934 <HAL_ADC_ConfigChannel+0x3c8>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2103      	movs	r1, #3
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff f9b2 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 8002910:	4603      	mov	r3, r0
 8002912:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002914:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002916:	fa93 f3a3 	rbit	r3, r3
 800291a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800291c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800291e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002920:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002926:	2320      	movs	r3, #32
 8002928:	e003      	b.n	8002932 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800292a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800292c:	fab3 f383 	clz	r3, r3
 8002930:	b2db      	uxtb	r3, r3
 8002932:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800293c:	2b00      	cmp	r3, #0
 800293e:	d105      	bne.n	800294c <HAL_ADC_ConfigChannel+0x3e0>
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	0e9b      	lsrs	r3, r3, #26
 8002946:	f003 031f 	and.w	r3, r3, #31
 800294a:	e011      	b.n	8002970 <HAL_ADC_ConfigChannel+0x404>
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002952:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002954:	fa93 f3a3 	rbit	r3, r3
 8002958:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800295a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800295c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800295e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002960:	2b00      	cmp	r3, #0
 8002962:	d101      	bne.n	8002968 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002964:	2320      	movs	r3, #32
 8002966:	e003      	b.n	8002970 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002968:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800296a:	fab3 f383 	clz	r3, r3
 800296e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002970:	429a      	cmp	r2, r3
 8002972:	d106      	bne.n	8002982 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2200      	movs	r2, #0
 800297a:	2103      	movs	r1, #3
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff f98f 	bl	8001ca0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4618      	mov	r0, r3
 8002988:	f7ff fab2 	bl	8001ef0 <LL_ADC_IsEnabled>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	f040 8140 	bne.w	8002c14 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6818      	ldr	r0, [r3, #0]
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	6819      	ldr	r1, [r3, #0]
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	461a      	mov	r2, r3
 80029a2:	f7ff fa03 	bl	8001dac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	4a8f      	ldr	r2, [pc, #572]	@ (8002be8 <HAL_ADC_ConfigChannel+0x67c>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	f040 8131 	bne.w	8002c14 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d10b      	bne.n	80029da <HAL_ADC_ConfigChannel+0x46e>
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	0e9b      	lsrs	r3, r3, #26
 80029c8:	3301      	adds	r3, #1
 80029ca:	f003 031f 	and.w	r3, r3, #31
 80029ce:	2b09      	cmp	r3, #9
 80029d0:	bf94      	ite	ls
 80029d2:	2301      	movls	r3, #1
 80029d4:	2300      	movhi	r3, #0
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	e019      	b.n	8002a0e <HAL_ADC_ConfigChannel+0x4a2>
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029e2:	fa93 f3a3 	rbit	r3, r3
 80029e6:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80029e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80029ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80029f2:	2320      	movs	r3, #32
 80029f4:	e003      	b.n	80029fe <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80029f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029f8:	fab3 f383 	clz	r3, r3
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	3301      	adds	r3, #1
 8002a00:	f003 031f 	and.w	r3, r3, #31
 8002a04:	2b09      	cmp	r3, #9
 8002a06:	bf94      	ite	ls
 8002a08:	2301      	movls	r3, #1
 8002a0a:	2300      	movhi	r3, #0
 8002a0c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d079      	beq.n	8002b06 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d107      	bne.n	8002a2e <HAL_ADC_ConfigChannel+0x4c2>
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	0e9b      	lsrs	r3, r3, #26
 8002a24:	3301      	adds	r3, #1
 8002a26:	069b      	lsls	r3, r3, #26
 8002a28:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a2c:	e015      	b.n	8002a5a <HAL_ADC_ConfigChannel+0x4ee>
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a36:	fa93 f3a3 	rbit	r3, r3
 8002a3a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002a3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a3e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002a40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002a46:	2320      	movs	r3, #32
 8002a48:	e003      	b.n	8002a52 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002a4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a4c:	fab3 f383 	clz	r3, r3
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	3301      	adds	r3, #1
 8002a54:	069b      	lsls	r3, r3, #26
 8002a56:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d109      	bne.n	8002a7a <HAL_ADC_ConfigChannel+0x50e>
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	0e9b      	lsrs	r3, r3, #26
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	f003 031f 	and.w	r3, r3, #31
 8002a72:	2101      	movs	r1, #1
 8002a74:	fa01 f303 	lsl.w	r3, r1, r3
 8002a78:	e017      	b.n	8002aaa <HAL_ADC_ConfigChannel+0x53e>
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a82:	fa93 f3a3 	rbit	r3, r3
 8002a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002a88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a8a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002a8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002a92:	2320      	movs	r3, #32
 8002a94:	e003      	b.n	8002a9e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002a96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a98:	fab3 f383 	clz	r3, r3
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	f003 031f 	and.w	r3, r3, #31
 8002aa4:	2101      	movs	r1, #1
 8002aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aaa:	ea42 0103 	orr.w	r1, r2, r3
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10a      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x564>
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	0e9b      	lsrs	r3, r3, #26
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	f003 021f 	and.w	r2, r3, #31
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	4413      	add	r3, r2
 8002acc:	051b      	lsls	r3, r3, #20
 8002ace:	e018      	b.n	8002b02 <HAL_ADC_ConfigChannel+0x596>
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ad8:	fa93 f3a3 	rbit	r3, r3
 8002adc:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ae0:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002ae8:	2320      	movs	r3, #32
 8002aea:	e003      	b.n	8002af4 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aee:	fab3 f383 	clz	r3, r3
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	3301      	adds	r3, #1
 8002af6:	f003 021f 	and.w	r2, r3, #31
 8002afa:	4613      	mov	r3, r2
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	4413      	add	r3, r2
 8002b00:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b02:	430b      	orrs	r3, r1
 8002b04:	e081      	b.n	8002c0a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d107      	bne.n	8002b22 <HAL_ADC_ConfigChannel+0x5b6>
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	0e9b      	lsrs	r3, r3, #26
 8002b18:	3301      	adds	r3, #1
 8002b1a:	069b      	lsls	r3, r3, #26
 8002b1c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b20:	e015      	b.n	8002b4e <HAL_ADC_ConfigChannel+0x5e2>
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b2a:	fa93 f3a3 	rbit	r3, r3
 8002b2e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002b3a:	2320      	movs	r3, #32
 8002b3c:	e003      	b.n	8002b46 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002b3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b40:	fab3 f383 	clz	r3, r3
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	3301      	adds	r3, #1
 8002b48:	069b      	lsls	r3, r3, #26
 8002b4a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d109      	bne.n	8002b6e <HAL_ADC_ConfigChannel+0x602>
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	0e9b      	lsrs	r3, r3, #26
 8002b60:	3301      	adds	r3, #1
 8002b62:	f003 031f 	and.w	r3, r3, #31
 8002b66:	2101      	movs	r1, #1
 8002b68:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6c:	e017      	b.n	8002b9e <HAL_ADC_ConfigChannel+0x632>
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	fa93 f3a3 	rbit	r3, r3
 8002b7a:	61bb      	str	r3, [r7, #24]
  return result;
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002b80:	6a3b      	ldr	r3, [r7, #32]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002b86:	2320      	movs	r3, #32
 8002b88:	e003      	b.n	8002b92 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002b8a:	6a3b      	ldr	r3, [r7, #32]
 8002b8c:	fab3 f383 	clz	r3, r3
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	3301      	adds	r3, #1
 8002b94:	f003 031f 	and.w	r3, r3, #31
 8002b98:	2101      	movs	r1, #1
 8002b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b9e:	ea42 0103 	orr.w	r1, r2, r3
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10d      	bne.n	8002bca <HAL_ADC_ConfigChannel+0x65e>
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	0e9b      	lsrs	r3, r3, #26
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	f003 021f 	and.w	r2, r3, #31
 8002bba:	4613      	mov	r3, r2
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	4413      	add	r3, r2
 8002bc0:	3b1e      	subs	r3, #30
 8002bc2:	051b      	lsls	r3, r3, #20
 8002bc4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002bc8:	e01e      	b.n	8002c08 <HAL_ADC_ConfigChannel+0x69c>
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	fa93 f3a3 	rbit	r3, r3
 8002bd6:	60fb      	str	r3, [r7, #12]
  return result;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d104      	bne.n	8002bec <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002be2:	2320      	movs	r3, #32
 8002be4:	e006      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0x688>
 8002be6:	bf00      	nop
 8002be8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	fab3 f383 	clz	r3, r3
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	f003 021f 	and.w	r2, r3, #31
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	4413      	add	r3, r2
 8002c00:	3b1e      	subs	r3, #30
 8002c02:	051b      	lsls	r3, r3, #20
 8002c04:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c08:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c0e:	4619      	mov	r1, r3
 8002c10:	f7ff f8a0 	bl	8001d54 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	4b44      	ldr	r3, [pc, #272]	@ (8002d2c <HAL_ADC_ConfigChannel+0x7c0>)
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d07a      	beq.n	8002d16 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c20:	4843      	ldr	r0, [pc, #268]	@ (8002d30 <HAL_ADC_ConfigChannel+0x7c4>)
 8002c22:	f7fe fff5 	bl	8001c10 <LL_ADC_GetCommonPathInternalCh>
 8002c26:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a41      	ldr	r2, [pc, #260]	@ (8002d34 <HAL_ADC_ConfigChannel+0x7c8>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d12c      	bne.n	8002c8e <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c38:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d126      	bne.n	8002c8e <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a3c      	ldr	r2, [pc, #240]	@ (8002d38 <HAL_ADC_ConfigChannel+0x7cc>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d004      	beq.n	8002c54 <HAL_ADC_ConfigChannel+0x6e8>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a3b      	ldr	r2, [pc, #236]	@ (8002d3c <HAL_ADC_ConfigChannel+0x7d0>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d15d      	bne.n	8002d10 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c58:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	4834      	ldr	r0, [pc, #208]	@ (8002d30 <HAL_ADC_ConfigChannel+0x7c4>)
 8002c60:	f7fe ffc3 	bl	8001bea <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c64:	4b36      	ldr	r3, [pc, #216]	@ (8002d40 <HAL_ADC_ConfigChannel+0x7d4>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	099b      	lsrs	r3, r3, #6
 8002c6a:	4a36      	ldr	r2, [pc, #216]	@ (8002d44 <HAL_ADC_ConfigChannel+0x7d8>)
 8002c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c70:	099b      	lsrs	r3, r3, #6
 8002c72:	1c5a      	adds	r2, r3, #1
 8002c74:	4613      	mov	r3, r2
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	4413      	add	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002c7e:	e002      	b.n	8002c86 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	3b01      	subs	r3, #1
 8002c84:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1f9      	bne.n	8002c80 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c8c:	e040      	b.n	8002d10 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a2d      	ldr	r2, [pc, #180]	@ (8002d48 <HAL_ADC_ConfigChannel+0x7dc>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d118      	bne.n	8002cca <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002c98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c9c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d112      	bne.n	8002cca <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a23      	ldr	r2, [pc, #140]	@ (8002d38 <HAL_ADC_ConfigChannel+0x7cc>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d004      	beq.n	8002cb8 <HAL_ADC_ConfigChannel+0x74c>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a22      	ldr	r2, [pc, #136]	@ (8002d3c <HAL_ADC_ConfigChannel+0x7d0>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d12d      	bne.n	8002d14 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cb8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002cbc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	481b      	ldr	r0, [pc, #108]	@ (8002d30 <HAL_ADC_ConfigChannel+0x7c4>)
 8002cc4:	f7fe ff91 	bl	8001bea <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cc8:	e024      	b.n	8002d14 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a1f      	ldr	r2, [pc, #124]	@ (8002d4c <HAL_ADC_ConfigChannel+0x7e0>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d120      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002cd4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002cd8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d11a      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a14      	ldr	r2, [pc, #80]	@ (8002d38 <HAL_ADC_ConfigChannel+0x7cc>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d115      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002cee:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	480e      	ldr	r0, [pc, #56]	@ (8002d30 <HAL_ADC_ConfigChannel+0x7c4>)
 8002cf6:	f7fe ff78 	bl	8001bea <LL_ADC_SetCommonPathInternalCh>
 8002cfa:	e00c      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d00:	f043 0220 	orr.w	r2, r3, #32
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002d0e:	e002      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d10:	bf00      	nop
 8002d12:	e000      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d14:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d1e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	37d8      	adds	r7, #216	@ 0xd8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	80080000 	.word	0x80080000
 8002d30:	50040300 	.word	0x50040300
 8002d34:	c7520000 	.word	0xc7520000
 8002d38:	50040000 	.word	0x50040000
 8002d3c:	50040200 	.word	0x50040200
 8002d40:	20000004 	.word	0x20000004
 8002d44:	053e2d63 	.word	0x053e2d63
 8002d48:	cb840000 	.word	0xcb840000
 8002d4c:	80000001 	.word	0x80000001

08002d50 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff f8c5 	bl	8001ef0 <LL_ADC_IsEnabled>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d169      	bne.n	8002e40 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	689a      	ldr	r2, [r3, #8]
 8002d72:	4b36      	ldr	r3, [pc, #216]	@ (8002e4c <ADC_Enable+0xfc>)
 8002d74:	4013      	ands	r3, r2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00d      	beq.n	8002d96 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d7e:	f043 0210 	orr.w	r2, r3, #16
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d8a:	f043 0201 	orr.w	r2, r3, #1
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e055      	b.n	8002e42 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff f894 	bl	8001ec8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002da0:	482b      	ldr	r0, [pc, #172]	@ (8002e50 <ADC_Enable+0x100>)
 8002da2:	f7fe ff35 	bl	8001c10 <LL_ADC_GetCommonPathInternalCh>
 8002da6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002da8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d013      	beq.n	8002dd8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002db0:	4b28      	ldr	r3, [pc, #160]	@ (8002e54 <ADC_Enable+0x104>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	099b      	lsrs	r3, r3, #6
 8002db6:	4a28      	ldr	r2, [pc, #160]	@ (8002e58 <ADC_Enable+0x108>)
 8002db8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dbc:	099b      	lsrs	r3, r3, #6
 8002dbe:	1c5a      	adds	r2, r3, #1
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	4413      	add	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002dca:	e002      	b.n	8002dd2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1f9      	bne.n	8002dcc <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002dd8:	f7fe fec4 	bl	8001b64 <HAL_GetTick>
 8002ddc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002dde:	e028      	b.n	8002e32 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7ff f883 	bl	8001ef0 <LL_ADC_IsEnabled>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d104      	bne.n	8002dfa <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff f867 	bl	8001ec8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002dfa:	f7fe feb3 	bl	8001b64 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d914      	bls.n	8002e32 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d00d      	beq.n	8002e32 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e1a:	f043 0210 	orr.w	r2, r3, #16
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e26:	f043 0201 	orr.w	r2, r3, #1
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e007      	b.n	8002e42 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d1cf      	bne.n	8002de0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	8000003f 	.word	0x8000003f
 8002e50:	50040300 	.word	0x50040300
 8002e54:	20000004 	.word	0x20000004
 8002e58:	053e2d63 	.word	0x053e2d63

08002e5c <LL_ADC_IsEnabled>:
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d101      	bne.n	8002e74 <LL_ADC_IsEnabled+0x18>
 8002e70:	2301      	movs	r3, #1
 8002e72:	e000      	b.n	8002e76 <LL_ADC_IsEnabled+0x1a>
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <LL_ADC_REG_IsConversionOngoing>:
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f003 0304 	and.w	r3, r3, #4
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	d101      	bne.n	8002e9a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e96:	2301      	movs	r3, #1
 8002e98:	e000      	b.n	8002e9c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002ea8:	b590      	push	{r4, r7, lr}
 8002eaa:	b09f      	sub	sp, #124	@ 0x7c
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d101      	bne.n	8002ec6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	e093      	b.n	8002fee <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002ece:	2300      	movs	r3, #0
 8002ed0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a47      	ldr	r2, [pc, #284]	@ (8002ff8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d102      	bne.n	8002ee6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002ee0:	4b46      	ldr	r3, [pc, #280]	@ (8002ffc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002ee2:	60bb      	str	r3, [r7, #8]
 8002ee4:	e001      	b.n	8002eea <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10b      	bne.n	8002f08 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ef4:	f043 0220 	orr.w	r2, r3, #32
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e072      	b.n	8002fee <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff ffb9 	bl	8002e82 <LL_ADC_REG_IsConversionOngoing>
 8002f10:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff ffb3 	bl	8002e82 <LL_ADC_REG_IsConversionOngoing>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d154      	bne.n	8002fcc <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002f22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d151      	bne.n	8002fcc <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002f28:	4b35      	ldr	r3, [pc, #212]	@ (8003000 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002f2a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d02c      	beq.n	8002f8e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002f34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	6859      	ldr	r1, [r3, #4]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002f46:	035b      	lsls	r3, r3, #13
 8002f48:	430b      	orrs	r3, r1
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f4e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f50:	4829      	ldr	r0, [pc, #164]	@ (8002ff8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002f52:	f7ff ff83 	bl	8002e5c <LL_ADC_IsEnabled>
 8002f56:	4604      	mov	r4, r0
 8002f58:	4828      	ldr	r0, [pc, #160]	@ (8002ffc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002f5a:	f7ff ff7f 	bl	8002e5c <LL_ADC_IsEnabled>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	431c      	orrs	r4, r3
 8002f62:	4828      	ldr	r0, [pc, #160]	@ (8003004 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002f64:	f7ff ff7a 	bl	8002e5c <LL_ADC_IsEnabled>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	4323      	orrs	r3, r4
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d137      	bne.n	8002fe0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002f70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002f78:	f023 030f 	bic.w	r3, r3, #15
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	6811      	ldr	r1, [r2, #0]
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	6892      	ldr	r2, [r2, #8]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	431a      	orrs	r2, r3
 8002f88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f8a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002f8c:	e028      	b.n	8002fe0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002f8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f98:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f9a:	4817      	ldr	r0, [pc, #92]	@ (8002ff8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002f9c:	f7ff ff5e 	bl	8002e5c <LL_ADC_IsEnabled>
 8002fa0:	4604      	mov	r4, r0
 8002fa2:	4816      	ldr	r0, [pc, #88]	@ (8002ffc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002fa4:	f7ff ff5a 	bl	8002e5c <LL_ADC_IsEnabled>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	431c      	orrs	r4, r3
 8002fac:	4815      	ldr	r0, [pc, #84]	@ (8003004 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002fae:	f7ff ff55 	bl	8002e5c <LL_ADC_IsEnabled>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	4323      	orrs	r3, r4
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d112      	bne.n	8002fe0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002fba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002fc2:	f023 030f 	bic.w	r3, r3, #15
 8002fc6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002fc8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002fca:	e009      	b.n	8002fe0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fd0:	f043 0220 	orr.w	r2, r3, #32
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002fde:	e000      	b.n	8002fe2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002fe0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002fea:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	377c      	adds	r7, #124	@ 0x7c
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd90      	pop	{r4, r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	50040000 	.word	0x50040000
 8002ffc:	50040100 	.word	0x50040100
 8003000:	50040300 	.word	0x50040300
 8003004:	50040200 	.word	0x50040200

08003008 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003008:	b480      	push	{r7}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f003 0307 	and.w	r3, r3, #7
 8003016:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003018:	4b0c      	ldr	r3, [pc, #48]	@ (800304c <__NVIC_SetPriorityGrouping+0x44>)
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800301e:	68ba      	ldr	r2, [r7, #8]
 8003020:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003024:	4013      	ands	r3, r2
 8003026:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003030:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003034:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003038:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800303a:	4a04      	ldr	r2, [pc, #16]	@ (800304c <__NVIC_SetPriorityGrouping+0x44>)
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	60d3      	str	r3, [r2, #12]
}
 8003040:	bf00      	nop
 8003042:	3714      	adds	r7, #20
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	e000ed00 	.word	0xe000ed00

08003050 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003054:	4b04      	ldr	r3, [pc, #16]	@ (8003068 <__NVIC_GetPriorityGrouping+0x18>)
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	0a1b      	lsrs	r3, r3, #8
 800305a:	f003 0307 	and.w	r3, r3, #7
}
 800305e:	4618      	mov	r0, r3
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr
 8003068:	e000ed00 	.word	0xe000ed00

0800306c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	4603      	mov	r3, r0
 8003074:	6039      	str	r1, [r7, #0]
 8003076:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800307c:	2b00      	cmp	r3, #0
 800307e:	db0a      	blt.n	8003096 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	b2da      	uxtb	r2, r3
 8003084:	490c      	ldr	r1, [pc, #48]	@ (80030b8 <__NVIC_SetPriority+0x4c>)
 8003086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800308a:	0112      	lsls	r2, r2, #4
 800308c:	b2d2      	uxtb	r2, r2
 800308e:	440b      	add	r3, r1
 8003090:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003094:	e00a      	b.n	80030ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	b2da      	uxtb	r2, r3
 800309a:	4908      	ldr	r1, [pc, #32]	@ (80030bc <__NVIC_SetPriority+0x50>)
 800309c:	79fb      	ldrb	r3, [r7, #7]
 800309e:	f003 030f 	and.w	r3, r3, #15
 80030a2:	3b04      	subs	r3, #4
 80030a4:	0112      	lsls	r2, r2, #4
 80030a6:	b2d2      	uxtb	r2, r2
 80030a8:	440b      	add	r3, r1
 80030aa:	761a      	strb	r2, [r3, #24]
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	e000e100 	.word	0xe000e100
 80030bc:	e000ed00 	.word	0xe000ed00

080030c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b089      	sub	sp, #36	@ 0x24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f003 0307 	and.w	r3, r3, #7
 80030d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	f1c3 0307 	rsb	r3, r3, #7
 80030da:	2b04      	cmp	r3, #4
 80030dc:	bf28      	it	cs
 80030de:	2304      	movcs	r3, #4
 80030e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	3304      	adds	r3, #4
 80030e6:	2b06      	cmp	r3, #6
 80030e8:	d902      	bls.n	80030f0 <NVIC_EncodePriority+0x30>
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	3b03      	subs	r3, #3
 80030ee:	e000      	b.n	80030f2 <NVIC_EncodePriority+0x32>
 80030f0:	2300      	movs	r3, #0
 80030f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	fa02 f303 	lsl.w	r3, r2, r3
 80030fe:	43da      	mvns	r2, r3
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	401a      	ands	r2, r3
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003108:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	fa01 f303 	lsl.w	r3, r1, r3
 8003112:	43d9      	mvns	r1, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003118:	4313      	orrs	r3, r2
         );
}
 800311a:	4618      	mov	r0, r3
 800311c:	3724      	adds	r7, #36	@ 0x24
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
	...

08003128 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	3b01      	subs	r3, #1
 8003134:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003138:	d301      	bcc.n	800313e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800313a:	2301      	movs	r3, #1
 800313c:	e00f      	b.n	800315e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800313e:	4a0a      	ldr	r2, [pc, #40]	@ (8003168 <SysTick_Config+0x40>)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	3b01      	subs	r3, #1
 8003144:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003146:	210f      	movs	r1, #15
 8003148:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800314c:	f7ff ff8e 	bl	800306c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003150:	4b05      	ldr	r3, [pc, #20]	@ (8003168 <SysTick_Config+0x40>)
 8003152:	2200      	movs	r2, #0
 8003154:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003156:	4b04      	ldr	r3, [pc, #16]	@ (8003168 <SysTick_Config+0x40>)
 8003158:	2207      	movs	r2, #7
 800315a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3708      	adds	r7, #8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	e000e010 	.word	0xe000e010

0800316c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f7ff ff47 	bl	8003008 <__NVIC_SetPriorityGrouping>
}
 800317a:	bf00      	nop
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b086      	sub	sp, #24
 8003186:	af00      	add	r7, sp, #0
 8003188:	4603      	mov	r3, r0
 800318a:	60b9      	str	r1, [r7, #8]
 800318c:	607a      	str	r2, [r7, #4]
 800318e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003190:	2300      	movs	r3, #0
 8003192:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003194:	f7ff ff5c 	bl	8003050 <__NVIC_GetPriorityGrouping>
 8003198:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	68b9      	ldr	r1, [r7, #8]
 800319e:	6978      	ldr	r0, [r7, #20]
 80031a0:	f7ff ff8e 	bl	80030c0 <NVIC_EncodePriority>
 80031a4:	4602      	mov	r2, r0
 80031a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031aa:	4611      	mov	r1, r2
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff ff5d 	bl	800306c <__NVIC_SetPriority>
}
 80031b2:	bf00      	nop
 80031b4:	3718      	adds	r7, #24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b082      	sub	sp, #8
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f7ff ffb0 	bl	8003128 <SysTick_Config>
 80031c8:	4603      	mov	r3, r0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
	...

080031d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b087      	sub	sp, #28
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031de:	2300      	movs	r3, #0
 80031e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031e2:	e17f      	b.n	80034e4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	2101      	movs	r1, #1
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	fa01 f303 	lsl.w	r3, r1, r3
 80031f0:	4013      	ands	r3, r2
 80031f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f000 8171 	beq.w	80034de <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f003 0303 	and.w	r3, r3, #3
 8003204:	2b01      	cmp	r3, #1
 8003206:	d005      	beq.n	8003214 <HAL_GPIO_Init+0x40>
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f003 0303 	and.w	r3, r3, #3
 8003210:	2b02      	cmp	r3, #2
 8003212:	d130      	bne.n	8003276 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	2203      	movs	r2, #3
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	43db      	mvns	r3, r3
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	4013      	ands	r3, r2
 800322a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	68da      	ldr	r2, [r3, #12]
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	4313      	orrs	r3, r2
 800323c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800324a:	2201      	movs	r2, #1
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	fa02 f303 	lsl.w	r3, r2, r3
 8003252:	43db      	mvns	r3, r3
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	4013      	ands	r3, r2
 8003258:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	091b      	lsrs	r3, r3, #4
 8003260:	f003 0201 	and.w	r2, r3, #1
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	fa02 f303 	lsl.w	r3, r2, r3
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	4313      	orrs	r3, r2
 800326e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f003 0303 	and.w	r3, r3, #3
 800327e:	2b03      	cmp	r3, #3
 8003280:	d118      	bne.n	80032b4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003286:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003288:	2201      	movs	r2, #1
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	43db      	mvns	r3, r3
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	4013      	ands	r3, r2
 8003296:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	08db      	lsrs	r3, r3, #3
 800329e:	f003 0201 	and.w	r2, r3, #1
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	693a      	ldr	r2, [r7, #16]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f003 0303 	and.w	r3, r3, #3
 80032bc:	2b03      	cmp	r3, #3
 80032be:	d017      	beq.n	80032f0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	005b      	lsls	r3, r3, #1
 80032ca:	2203      	movs	r2, #3
 80032cc:	fa02 f303 	lsl.w	r3, r2, r3
 80032d0:	43db      	mvns	r3, r3
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	4013      	ands	r3, r2
 80032d6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f003 0303 	and.w	r3, r3, #3
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d123      	bne.n	8003344 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	08da      	lsrs	r2, r3, #3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	3208      	adds	r2, #8
 8003304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003308:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	f003 0307 	and.w	r3, r3, #7
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	220f      	movs	r2, #15
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	43db      	mvns	r3, r3
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	4013      	ands	r3, r2
 800331e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	691a      	ldr	r2, [r3, #16]
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	4313      	orrs	r3, r2
 8003334:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	08da      	lsrs	r2, r3, #3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	3208      	adds	r2, #8
 800333e:	6939      	ldr	r1, [r7, #16]
 8003340:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	2203      	movs	r2, #3
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	43db      	mvns	r3, r3
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	4013      	ands	r3, r2
 800335a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f003 0203 	and.w	r2, r3, #3
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	4313      	orrs	r3, r2
 8003370:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003380:	2b00      	cmp	r3, #0
 8003382:	f000 80ac 	beq.w	80034de <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003386:	4b5f      	ldr	r3, [pc, #380]	@ (8003504 <HAL_GPIO_Init+0x330>)
 8003388:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800338a:	4a5e      	ldr	r2, [pc, #376]	@ (8003504 <HAL_GPIO_Init+0x330>)
 800338c:	f043 0301 	orr.w	r3, r3, #1
 8003390:	6613      	str	r3, [r2, #96]	@ 0x60
 8003392:	4b5c      	ldr	r3, [pc, #368]	@ (8003504 <HAL_GPIO_Init+0x330>)
 8003394:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	60bb      	str	r3, [r7, #8]
 800339c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800339e:	4a5a      	ldr	r2, [pc, #360]	@ (8003508 <HAL_GPIO_Init+0x334>)
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	089b      	lsrs	r3, r3, #2
 80033a4:	3302      	adds	r3, #2
 80033a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	f003 0303 	and.w	r3, r3, #3
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	220f      	movs	r2, #15
 80033b6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ba:	43db      	mvns	r3, r3
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	4013      	ands	r3, r2
 80033c0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80033c8:	d025      	beq.n	8003416 <HAL_GPIO_Init+0x242>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a4f      	ldr	r2, [pc, #316]	@ (800350c <HAL_GPIO_Init+0x338>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d01f      	beq.n	8003412 <HAL_GPIO_Init+0x23e>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a4e      	ldr	r2, [pc, #312]	@ (8003510 <HAL_GPIO_Init+0x33c>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d019      	beq.n	800340e <HAL_GPIO_Init+0x23a>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a4d      	ldr	r2, [pc, #308]	@ (8003514 <HAL_GPIO_Init+0x340>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d013      	beq.n	800340a <HAL_GPIO_Init+0x236>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a4c      	ldr	r2, [pc, #304]	@ (8003518 <HAL_GPIO_Init+0x344>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d00d      	beq.n	8003406 <HAL_GPIO_Init+0x232>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a4b      	ldr	r2, [pc, #300]	@ (800351c <HAL_GPIO_Init+0x348>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d007      	beq.n	8003402 <HAL_GPIO_Init+0x22e>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a4a      	ldr	r2, [pc, #296]	@ (8003520 <HAL_GPIO_Init+0x34c>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d101      	bne.n	80033fe <HAL_GPIO_Init+0x22a>
 80033fa:	2306      	movs	r3, #6
 80033fc:	e00c      	b.n	8003418 <HAL_GPIO_Init+0x244>
 80033fe:	2307      	movs	r3, #7
 8003400:	e00a      	b.n	8003418 <HAL_GPIO_Init+0x244>
 8003402:	2305      	movs	r3, #5
 8003404:	e008      	b.n	8003418 <HAL_GPIO_Init+0x244>
 8003406:	2304      	movs	r3, #4
 8003408:	e006      	b.n	8003418 <HAL_GPIO_Init+0x244>
 800340a:	2303      	movs	r3, #3
 800340c:	e004      	b.n	8003418 <HAL_GPIO_Init+0x244>
 800340e:	2302      	movs	r3, #2
 8003410:	e002      	b.n	8003418 <HAL_GPIO_Init+0x244>
 8003412:	2301      	movs	r3, #1
 8003414:	e000      	b.n	8003418 <HAL_GPIO_Init+0x244>
 8003416:	2300      	movs	r3, #0
 8003418:	697a      	ldr	r2, [r7, #20]
 800341a:	f002 0203 	and.w	r2, r2, #3
 800341e:	0092      	lsls	r2, r2, #2
 8003420:	4093      	lsls	r3, r2
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	4313      	orrs	r3, r2
 8003426:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003428:	4937      	ldr	r1, [pc, #220]	@ (8003508 <HAL_GPIO_Init+0x334>)
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	089b      	lsrs	r3, r3, #2
 800342e:	3302      	adds	r3, #2
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003436:	4b3b      	ldr	r3, [pc, #236]	@ (8003524 <HAL_GPIO_Init+0x350>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	43db      	mvns	r3, r3
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	4013      	ands	r3, r2
 8003444:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	4313      	orrs	r3, r2
 8003458:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800345a:	4a32      	ldr	r2, [pc, #200]	@ (8003524 <HAL_GPIO_Init+0x350>)
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003460:	4b30      	ldr	r3, [pc, #192]	@ (8003524 <HAL_GPIO_Init+0x350>)
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	43db      	mvns	r3, r3
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	4013      	ands	r3, r2
 800346e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d003      	beq.n	8003484 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	4313      	orrs	r3, r2
 8003482:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003484:	4a27      	ldr	r2, [pc, #156]	@ (8003524 <HAL_GPIO_Init+0x350>)
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800348a:	4b26      	ldr	r3, [pc, #152]	@ (8003524 <HAL_GPIO_Init+0x350>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	43db      	mvns	r3, r3
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	4013      	ands	r3, r2
 8003498:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d003      	beq.n	80034ae <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80034ae:	4a1d      	ldr	r2, [pc, #116]	@ (8003524 <HAL_GPIO_Init+0x350>)
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80034b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003524 <HAL_GPIO_Init+0x350>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	43db      	mvns	r3, r3
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	4013      	ands	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d003      	beq.n	80034d8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80034d8:	4a12      	ldr	r2, [pc, #72]	@ (8003524 <HAL_GPIO_Init+0x350>)
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	3301      	adds	r3, #1
 80034e2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	fa22 f303 	lsr.w	r3, r2, r3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f47f ae78 	bne.w	80031e4 <HAL_GPIO_Init+0x10>
  }
}
 80034f4:	bf00      	nop
 80034f6:	bf00      	nop
 80034f8:	371c      	adds	r7, #28
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	40021000 	.word	0x40021000
 8003508:	40010000 	.word	0x40010000
 800350c:	48000400 	.word	0x48000400
 8003510:	48000800 	.word	0x48000800
 8003514:	48000c00 	.word	0x48000c00
 8003518:	48001000 	.word	0x48001000
 800351c:	48001400 	.word	0x48001400
 8003520:	48001800 	.word	0x48001800
 8003524:	40010400 	.word	0x40010400

08003528 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	460b      	mov	r3, r1
 8003532:	807b      	strh	r3, [r7, #2]
 8003534:	4613      	mov	r3, r2
 8003536:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003538:	787b      	ldrb	r3, [r7, #1]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d003      	beq.n	8003546 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800353e:	887a      	ldrh	r2, [r7, #2]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003544:	e002      	b.n	800354c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003546:	887a      	ldrh	r2, [r7, #2]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e08d      	b.n	8003686 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d106      	bne.n	8003584 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7fe f8ae 	bl	80016e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2224      	movs	r2, #36	@ 0x24
 8003588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 0201 	bic.w	r2, r2, #1
 800359a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80035a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80035b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d107      	bne.n	80035d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	689a      	ldr	r2, [r3, #8]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035ce:	609a      	str	r2, [r3, #8]
 80035d0:	e006      	b.n	80035e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	689a      	ldr	r2, [r3, #8]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80035de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d108      	bne.n	80035fa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	685a      	ldr	r2, [r3, #4]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035f6:	605a      	str	r2, [r3, #4]
 80035f8:	e007      	b.n	800360a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003608:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	6812      	ldr	r2, [r2, #0]
 8003614:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003618:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800361c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68da      	ldr	r2, [r3, #12]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800362c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	691a      	ldr	r2, [r3, #16]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	430a      	orrs	r2, r1
 8003646:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	69d9      	ldr	r1, [r3, #28]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a1a      	ldr	r2, [r3, #32]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	430a      	orrs	r2, r1
 8003656:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f042 0201 	orr.w	r2, r2, #1
 8003666:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2220      	movs	r2, #32
 8003672:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
	...

08003690 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b088      	sub	sp, #32
 8003694:	af02      	add	r7, sp, #8
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	607a      	str	r2, [r7, #4]
 800369a:	461a      	mov	r2, r3
 800369c:	460b      	mov	r3, r1
 800369e:	817b      	strh	r3, [r7, #10]
 80036a0:	4613      	mov	r3, r2
 80036a2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b20      	cmp	r3, #32
 80036ae:	f040 80fd 	bne.w	80038ac <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d101      	bne.n	80036c0 <HAL_I2C_Master_Transmit+0x30>
 80036bc:	2302      	movs	r3, #2
 80036be:	e0f6      	b.n	80038ae <HAL_I2C_Master_Transmit+0x21e>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80036c8:	f7fe fa4c 	bl	8001b64 <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	9300      	str	r3, [sp, #0]
 80036d2:	2319      	movs	r3, #25
 80036d4:	2201      	movs	r2, #1
 80036d6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f000 f914 	bl	8003908 <I2C_WaitOnFlagUntilTimeout>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e0e1      	b.n	80038ae <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2221      	movs	r2, #33	@ 0x21
 80036ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2210      	movs	r2, #16
 80036f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	893a      	ldrh	r2, [r7, #8]
 800370a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003716:	b29b      	uxth	r3, r3
 8003718:	2bff      	cmp	r3, #255	@ 0xff
 800371a:	d906      	bls.n	800372a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	22ff      	movs	r2, #255	@ 0xff
 8003720:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003722:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003726:	617b      	str	r3, [r7, #20]
 8003728:	e007      	b.n	800373a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800372e:	b29a      	uxth	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003734:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003738:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800373e:	2b00      	cmp	r3, #0
 8003740:	d024      	beq.n	800378c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003746:	781a      	ldrb	r2, [r3, #0]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003752:	1c5a      	adds	r2, r3, #1
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800375c:	b29b      	uxth	r3, r3
 800375e:	3b01      	subs	r3, #1
 8003760:	b29a      	uxth	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800376a:	3b01      	subs	r3, #1
 800376c:	b29a      	uxth	r2, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003776:	b2db      	uxtb	r3, r3
 8003778:	3301      	adds	r3, #1
 800377a:	b2da      	uxtb	r2, r3
 800377c:	8979      	ldrh	r1, [r7, #10]
 800377e:	4b4e      	ldr	r3, [pc, #312]	@ (80038b8 <HAL_I2C_Master_Transmit+0x228>)
 8003780:	9300      	str	r3, [sp, #0]
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	f000 fa83 	bl	8003c90 <I2C_TransferConfig>
 800378a:	e066      	b.n	800385a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003790:	b2da      	uxtb	r2, r3
 8003792:	8979      	ldrh	r1, [r7, #10]
 8003794:	4b48      	ldr	r3, [pc, #288]	@ (80038b8 <HAL_I2C_Master_Transmit+0x228>)
 8003796:	9300      	str	r3, [sp, #0]
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f000 fa78 	bl	8003c90 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80037a0:	e05b      	b.n	800385a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	6a39      	ldr	r1, [r7, #32]
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f000 f907 	bl	80039ba <I2C_WaitOnTXISFlagUntilTimeout>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e07b      	b.n	80038ae <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ba:	781a      	ldrb	r2, [r3, #0]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c6:	1c5a      	adds	r2, r3, #1
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	3b01      	subs	r3, #1
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037de:	3b01      	subs	r3, #1
 80037e0:	b29a      	uxth	r2, r3
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d034      	beq.n	800385a <HAL_I2C_Master_Transmit+0x1ca>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d130      	bne.n	800385a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	9300      	str	r3, [sp, #0]
 80037fc:	6a3b      	ldr	r3, [r7, #32]
 80037fe:	2200      	movs	r2, #0
 8003800:	2180      	movs	r1, #128	@ 0x80
 8003802:	68f8      	ldr	r0, [r7, #12]
 8003804:	f000 f880 	bl	8003908 <I2C_WaitOnFlagUntilTimeout>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e04d      	b.n	80038ae <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003816:	b29b      	uxth	r3, r3
 8003818:	2bff      	cmp	r3, #255	@ 0xff
 800381a:	d90e      	bls.n	800383a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	22ff      	movs	r2, #255	@ 0xff
 8003820:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003826:	b2da      	uxtb	r2, r3
 8003828:	8979      	ldrh	r1, [r7, #10]
 800382a:	2300      	movs	r3, #0
 800382c:	9300      	str	r3, [sp, #0]
 800382e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f000 fa2c 	bl	8003c90 <I2C_TransferConfig>
 8003838:	e00f      	b.n	800385a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800383e:	b29a      	uxth	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003848:	b2da      	uxtb	r2, r3
 800384a:	8979      	ldrh	r1, [r7, #10]
 800384c:	2300      	movs	r3, #0
 800384e:	9300      	str	r3, [sp, #0]
 8003850:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003854:	68f8      	ldr	r0, [r7, #12]
 8003856:	f000 fa1b 	bl	8003c90 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800385e:	b29b      	uxth	r3, r3
 8003860:	2b00      	cmp	r3, #0
 8003862:	d19e      	bne.n	80037a2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	6a39      	ldr	r1, [r7, #32]
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f000 f8ed 	bl	8003a48 <I2C_WaitOnSTOPFlagUntilTimeout>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d001      	beq.n	8003878 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e01a      	b.n	80038ae <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2220      	movs	r2, #32
 800387e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6859      	ldr	r1, [r3, #4]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	4b0c      	ldr	r3, [pc, #48]	@ (80038bc <HAL_I2C_Master_Transmit+0x22c>)
 800388c:	400b      	ands	r3, r1
 800388e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2220      	movs	r2, #32
 8003894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80038a8:	2300      	movs	r3, #0
 80038aa:	e000      	b.n	80038ae <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80038ac:	2302      	movs	r3, #2
  }
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3718      	adds	r7, #24
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	80002000 	.word	0x80002000
 80038bc:	fe00e800 	.word	0xfe00e800

080038c0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d103      	bne.n	80038de <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2200      	movs	r2, #0
 80038dc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	f003 0301 	and.w	r3, r3, #1
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d007      	beq.n	80038fc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	699a      	ldr	r2, [r3, #24]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f042 0201 	orr.w	r2, r2, #1
 80038fa:	619a      	str	r2, [r3, #24]
  }
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	603b      	str	r3, [r7, #0]
 8003914:	4613      	mov	r3, r2
 8003916:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003918:	e03b      	b.n	8003992 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800391a:	69ba      	ldr	r2, [r7, #24]
 800391c:	6839      	ldr	r1, [r7, #0]
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f000 f8d6 	bl	8003ad0 <I2C_IsErrorOccurred>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e041      	b.n	80039b2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003934:	d02d      	beq.n	8003992 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003936:	f7fe f915 	bl	8001b64 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	429a      	cmp	r2, r3
 8003944:	d302      	bcc.n	800394c <I2C_WaitOnFlagUntilTimeout+0x44>
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d122      	bne.n	8003992 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	699a      	ldr	r2, [r3, #24]
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	4013      	ands	r3, r2
 8003956:	68ba      	ldr	r2, [r7, #8]
 8003958:	429a      	cmp	r2, r3
 800395a:	bf0c      	ite	eq
 800395c:	2301      	moveq	r3, #1
 800395e:	2300      	movne	r3, #0
 8003960:	b2db      	uxtb	r3, r3
 8003962:	461a      	mov	r2, r3
 8003964:	79fb      	ldrb	r3, [r7, #7]
 8003966:	429a      	cmp	r2, r3
 8003968:	d113      	bne.n	8003992 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800396e:	f043 0220 	orr.w	r2, r3, #32
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2220      	movs	r2, #32
 800397a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e00f      	b.n	80039b2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	699a      	ldr	r2, [r3, #24]
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	4013      	ands	r3, r2
 800399c:	68ba      	ldr	r2, [r7, #8]
 800399e:	429a      	cmp	r2, r3
 80039a0:	bf0c      	ite	eq
 80039a2:	2301      	moveq	r3, #1
 80039a4:	2300      	movne	r3, #0
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	461a      	mov	r2, r3
 80039aa:	79fb      	ldrb	r3, [r7, #7]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d0b4      	beq.n	800391a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b084      	sub	sp, #16
 80039be:	af00      	add	r7, sp, #0
 80039c0:	60f8      	str	r0, [r7, #12]
 80039c2:	60b9      	str	r1, [r7, #8]
 80039c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80039c6:	e033      	b.n	8003a30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	68b9      	ldr	r1, [r7, #8]
 80039cc:	68f8      	ldr	r0, [r7, #12]
 80039ce:	f000 f87f 	bl	8003ad0 <I2C_IsErrorOccurred>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d001      	beq.n	80039dc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e031      	b.n	8003a40 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039e2:	d025      	beq.n	8003a30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039e4:	f7fe f8be 	bl	8001b64 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	68ba      	ldr	r2, [r7, #8]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d302      	bcc.n	80039fa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d11a      	bne.n	8003a30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d013      	beq.n	8003a30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a0c:	f043 0220 	orr.w	r2, r3, #32
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2220      	movs	r2, #32
 8003a18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e007      	b.n	8003a40 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d1c4      	bne.n	80039c8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a54:	e02f      	b.n	8003ab6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	68b9      	ldr	r1, [r7, #8]
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	f000 f838 	bl	8003ad0 <I2C_IsErrorOccurred>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e02d      	b.n	8003ac6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a6a:	f7fe f87b 	bl	8001b64 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	68ba      	ldr	r2, [r7, #8]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d302      	bcc.n	8003a80 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d11a      	bne.n	8003ab6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	f003 0320 	and.w	r3, r3, #32
 8003a8a:	2b20      	cmp	r3, #32
 8003a8c:	d013      	beq.n	8003ab6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a92:	f043 0220 	orr.w	r2, r3, #32
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e007      	b.n	8003ac6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	f003 0320 	and.w	r3, r3, #32
 8003ac0:	2b20      	cmp	r3, #32
 8003ac2:	d1c8      	bne.n	8003a56 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
	...

08003ad0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b08a      	sub	sp, #40	@ 0x28
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003adc:	2300      	movs	r3, #0
 8003ade:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003aea:	2300      	movs	r3, #0
 8003aec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	f003 0310 	and.w	r3, r3, #16
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d068      	beq.n	8003bce <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2210      	movs	r2, #16
 8003b02:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003b04:	e049      	b.n	8003b9a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b0c:	d045      	beq.n	8003b9a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003b0e:	f7fe f829 	bl	8001b64 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	68ba      	ldr	r2, [r7, #8]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d302      	bcc.n	8003b24 <I2C_IsErrorOccurred+0x54>
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d13a      	bne.n	8003b9a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b2e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003b36:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b46:	d121      	bne.n	8003b8c <I2C_IsErrorOccurred+0xbc>
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b4e:	d01d      	beq.n	8003b8c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003b50:	7cfb      	ldrb	r3, [r7, #19]
 8003b52:	2b20      	cmp	r3, #32
 8003b54:	d01a      	beq.n	8003b8c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	685a      	ldr	r2, [r3, #4]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b64:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003b66:	f7fd fffd 	bl	8001b64 <HAL_GetTick>
 8003b6a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b6c:	e00e      	b.n	8003b8c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003b6e:	f7fd fff9 	bl	8001b64 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b19      	cmp	r3, #25
 8003b7a:	d907      	bls.n	8003b8c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003b7c:	6a3b      	ldr	r3, [r7, #32]
 8003b7e:	f043 0320 	orr.w	r3, r3, #32
 8003b82:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003b8a:	e006      	b.n	8003b9a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	f003 0320 	and.w	r3, r3, #32
 8003b96:	2b20      	cmp	r3, #32
 8003b98:	d1e9      	bne.n	8003b6e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	f003 0320 	and.w	r3, r3, #32
 8003ba4:	2b20      	cmp	r3, #32
 8003ba6:	d003      	beq.n	8003bb0 <I2C_IsErrorOccurred+0xe0>
 8003ba8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d0aa      	beq.n	8003b06 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003bb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d103      	bne.n	8003bc0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2220      	movs	r2, #32
 8003bbe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003bc0:	6a3b      	ldr	r3, [r7, #32]
 8003bc2:	f043 0304 	orr.w	r3, r3, #4
 8003bc6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00b      	beq.n	8003bf8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003be0:	6a3b      	ldr	r3, [r7, #32]
 8003be2:	f043 0301 	orr.w	r3, r3, #1
 8003be6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003bf0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00b      	beq.n	8003c1a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003c02:	6a3b      	ldr	r3, [r7, #32]
 8003c04:	f043 0308 	orr.w	r3, r3, #8
 8003c08:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c12:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00b      	beq.n	8003c3c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003c24:	6a3b      	ldr	r3, [r7, #32]
 8003c26:	f043 0302 	orr.w	r3, r3, #2
 8003c2a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c34:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003c3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d01c      	beq.n	8003c7e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f7ff fe3b 	bl	80038c0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	6859      	ldr	r1, [r3, #4]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	4b0d      	ldr	r3, [pc, #52]	@ (8003c8c <I2C_IsErrorOccurred+0x1bc>)
 8003c56:	400b      	ands	r3, r1
 8003c58:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c5e:	6a3b      	ldr	r3, [r7, #32]
 8003c60:	431a      	orrs	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2220      	movs	r2, #32
 8003c6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003c7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3728      	adds	r7, #40	@ 0x28
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	fe00e800 	.word	0xfe00e800

08003c90 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b087      	sub	sp, #28
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	607b      	str	r3, [r7, #4]
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	817b      	strh	r3, [r7, #10]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ca2:	897b      	ldrh	r3, [r7, #10]
 8003ca4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003ca8:	7a7b      	ldrb	r3, [r7, #9]
 8003caa:	041b      	lsls	r3, r3, #16
 8003cac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003cb0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003cb6:	6a3b      	ldr	r3, [r7, #32]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003cbe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	685a      	ldr	r2, [r3, #4]
 8003cc6:	6a3b      	ldr	r3, [r7, #32]
 8003cc8:	0d5b      	lsrs	r3, r3, #21
 8003cca:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003cce:	4b08      	ldr	r3, [pc, #32]	@ (8003cf0 <I2C_TransferConfig+0x60>)
 8003cd0:	430b      	orrs	r3, r1
 8003cd2:	43db      	mvns	r3, r3
 8003cd4:	ea02 0103 	and.w	r1, r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003ce2:	bf00      	nop
 8003ce4:	371c      	adds	r7, #28
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	03ff63ff 	.word	0x03ff63ff

08003cf4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b20      	cmp	r3, #32
 8003d08:	d138      	bne.n	8003d7c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d101      	bne.n	8003d18 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d14:	2302      	movs	r3, #2
 8003d16:	e032      	b.n	8003d7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2224      	movs	r2, #36	@ 0x24
 8003d24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f022 0201 	bic.w	r2, r2, #1
 8003d36:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003d46:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6819      	ldr	r1, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	430a      	orrs	r2, r1
 8003d56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f042 0201 	orr.w	r2, r2, #1
 8003d66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	e000      	b.n	8003d7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003d7c:	2302      	movs	r3, #2
  }
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	370c      	adds	r7, #12
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr

08003d8a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	b085      	sub	sp, #20
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
 8003d92:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	2b20      	cmp	r3, #32
 8003d9e:	d139      	bne.n	8003e14 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d101      	bne.n	8003dae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003daa:	2302      	movs	r3, #2
 8003dac:	e033      	b.n	8003e16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2224      	movs	r2, #36	@ 0x24
 8003dba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f022 0201 	bic.w	r2, r2, #1
 8003dcc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003ddc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	021b      	lsls	r3, r3, #8
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f042 0201 	orr.w	r2, r2, #1
 8003dfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2220      	movs	r2, #32
 8003e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e10:	2300      	movs	r3, #0
 8003e12:	e000      	b.n	8003e16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e14:	2302      	movs	r3, #2
  }
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3714      	adds	r7, #20
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
	...

08003e24 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003e28:	4b04      	ldr	r3, [pc, #16]	@ (8003e3c <HAL_PWREx_GetVoltageRange+0x18>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	40007000 	.word	0x40007000

08003e40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e4e:	d130      	bne.n	8003eb2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e50:	4b23      	ldr	r3, [pc, #140]	@ (8003ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003e58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e5c:	d038      	beq.n	8003ed0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e5e:	4b20      	ldr	r3, [pc, #128]	@ (8003ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003e66:	4a1e      	ldr	r2, [pc, #120]	@ (8003ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e68:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003e6c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e6e:	4b1d      	ldr	r3, [pc, #116]	@ (8003ee4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2232      	movs	r2, #50	@ 0x32
 8003e74:	fb02 f303 	mul.w	r3, r2, r3
 8003e78:	4a1b      	ldr	r2, [pc, #108]	@ (8003ee8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7e:	0c9b      	lsrs	r3, r3, #18
 8003e80:	3301      	adds	r3, #1
 8003e82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e84:	e002      	b.n	8003e8c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e8c:	4b14      	ldr	r3, [pc, #80]	@ (8003ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e8e:	695b      	ldr	r3, [r3, #20]
 8003e90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e98:	d102      	bne.n	8003ea0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1f2      	bne.n	8003e86 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ea0:	4b0f      	ldr	r3, [pc, #60]	@ (8003ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ea8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003eac:	d110      	bne.n	8003ed0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e00f      	b.n	8003ed2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8003ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003eba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ebe:	d007      	beq.n	8003ed0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003ec0:	4b07      	ldr	r3, [pc, #28]	@ (8003ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003ec8:	4a05      	ldr	r2, [pc, #20]	@ (8003ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003eca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003ece:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3714      	adds	r7, #20
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	40007000 	.word	0x40007000
 8003ee4:	20000004 	.word	0x20000004
 8003ee8:	431bde83 	.word	0x431bde83

08003eec <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b088      	sub	sp, #32
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d101      	bne.n	8003efe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e3ca      	b.n	8004694 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003efe:	4b97      	ldr	r3, [pc, #604]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f003 030c 	and.w	r3, r3, #12
 8003f06:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f08:	4b94      	ldr	r3, [pc, #592]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	f003 0303 	and.w	r3, r3, #3
 8003f10:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0310 	and.w	r3, r3, #16
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	f000 80e4 	beq.w	80040e8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d007      	beq.n	8003f36 <HAL_RCC_OscConfig+0x4a>
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	2b0c      	cmp	r3, #12
 8003f2a:	f040 808b 	bne.w	8004044 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	f040 8087 	bne.w	8004044 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f36:	4b89      	ldr	r3, [pc, #548]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d005      	beq.n	8003f4e <HAL_RCC_OscConfig+0x62>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e3a2      	b.n	8004694 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a1a      	ldr	r2, [r3, #32]
 8003f52:	4b82      	ldr	r3, [pc, #520]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0308 	and.w	r3, r3, #8
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d004      	beq.n	8003f68 <HAL_RCC_OscConfig+0x7c>
 8003f5e:	4b7f      	ldr	r3, [pc, #508]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f66:	e005      	b.n	8003f74 <HAL_RCC_OscConfig+0x88>
 8003f68:	4b7c      	ldr	r3, [pc, #496]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 8003f6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f6e:	091b      	lsrs	r3, r3, #4
 8003f70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d223      	bcs.n	8003fc0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f000 fd1d 	bl	80049bc <RCC_SetFlashLatencyFromMSIRange>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d001      	beq.n	8003f8c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e383      	b.n	8004694 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f8c:	4b73      	ldr	r3, [pc, #460]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a72      	ldr	r2, [pc, #456]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 8003f92:	f043 0308 	orr.w	r3, r3, #8
 8003f96:	6013      	str	r3, [r2, #0]
 8003f98:	4b70      	ldr	r3, [pc, #448]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a1b      	ldr	r3, [r3, #32]
 8003fa4:	496d      	ldr	r1, [pc, #436]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003faa:	4b6c      	ldr	r3, [pc, #432]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	69db      	ldr	r3, [r3, #28]
 8003fb6:	021b      	lsls	r3, r3, #8
 8003fb8:	4968      	ldr	r1, [pc, #416]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	604b      	str	r3, [r1, #4]
 8003fbe:	e025      	b.n	800400c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fc0:	4b66      	ldr	r3, [pc, #408]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a65      	ldr	r2, [pc, #404]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 8003fc6:	f043 0308 	orr.w	r3, r3, #8
 8003fca:	6013      	str	r3, [r2, #0]
 8003fcc:	4b63      	ldr	r3, [pc, #396]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a1b      	ldr	r3, [r3, #32]
 8003fd8:	4960      	ldr	r1, [pc, #384]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fde:	4b5f      	ldr	r3, [pc, #380]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	69db      	ldr	r3, [r3, #28]
 8003fea:	021b      	lsls	r3, r3, #8
 8003fec:	495b      	ldr	r1, [pc, #364]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d109      	bne.n	800400c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a1b      	ldr	r3, [r3, #32]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f000 fcdd 	bl	80049bc <RCC_SetFlashLatencyFromMSIRange>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d001      	beq.n	800400c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e343      	b.n	8004694 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800400c:	f000 fc4a 	bl	80048a4 <HAL_RCC_GetSysClockFreq>
 8004010:	4602      	mov	r2, r0
 8004012:	4b52      	ldr	r3, [pc, #328]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	091b      	lsrs	r3, r3, #4
 8004018:	f003 030f 	and.w	r3, r3, #15
 800401c:	4950      	ldr	r1, [pc, #320]	@ (8004160 <HAL_RCC_OscConfig+0x274>)
 800401e:	5ccb      	ldrb	r3, [r1, r3]
 8004020:	f003 031f 	and.w	r3, r3, #31
 8004024:	fa22 f303 	lsr.w	r3, r2, r3
 8004028:	4a4e      	ldr	r2, [pc, #312]	@ (8004164 <HAL_RCC_OscConfig+0x278>)
 800402a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800402c:	4b4e      	ldr	r3, [pc, #312]	@ (8004168 <HAL_RCC_OscConfig+0x27c>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4618      	mov	r0, r3
 8004032:	f7fd fd47 	bl	8001ac4 <HAL_InitTick>
 8004036:	4603      	mov	r3, r0
 8004038:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800403a:	7bfb      	ldrb	r3, [r7, #15]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d052      	beq.n	80040e6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004040:	7bfb      	ldrb	r3, [r7, #15]
 8004042:	e327      	b.n	8004694 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d032      	beq.n	80040b2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800404c:	4b43      	ldr	r3, [pc, #268]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a42      	ldr	r2, [pc, #264]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 8004052:	f043 0301 	orr.w	r3, r3, #1
 8004056:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004058:	f7fd fd84 	bl	8001b64 <HAL_GetTick>
 800405c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800405e:	e008      	b.n	8004072 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004060:	f7fd fd80 	bl	8001b64 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b02      	cmp	r3, #2
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e310      	b.n	8004694 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004072:	4b3a      	ldr	r3, [pc, #232]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d0f0      	beq.n	8004060 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800407e:	4b37      	ldr	r3, [pc, #220]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a36      	ldr	r2, [pc, #216]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 8004084:	f043 0308 	orr.w	r3, r3, #8
 8004088:	6013      	str	r3, [r2, #0]
 800408a:	4b34      	ldr	r3, [pc, #208]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	4931      	ldr	r1, [pc, #196]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 8004098:	4313      	orrs	r3, r2
 800409a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800409c:	4b2f      	ldr	r3, [pc, #188]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	69db      	ldr	r3, [r3, #28]
 80040a8:	021b      	lsls	r3, r3, #8
 80040aa:	492c      	ldr	r1, [pc, #176]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	604b      	str	r3, [r1, #4]
 80040b0:	e01a      	b.n	80040e8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80040b2:	4b2a      	ldr	r3, [pc, #168]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a29      	ldr	r2, [pc, #164]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 80040b8:	f023 0301 	bic.w	r3, r3, #1
 80040bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80040be:	f7fd fd51 	bl	8001b64 <HAL_GetTick>
 80040c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80040c4:	e008      	b.n	80040d8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040c6:	f7fd fd4d 	bl	8001b64 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d901      	bls.n	80040d8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e2dd      	b.n	8004694 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80040d8:	4b20      	ldr	r3, [pc, #128]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d1f0      	bne.n	80040c6 <HAL_RCC_OscConfig+0x1da>
 80040e4:	e000      	b.n	80040e8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80040e6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0301 	and.w	r3, r3, #1
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d074      	beq.n	80041de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	2b08      	cmp	r3, #8
 80040f8:	d005      	beq.n	8004106 <HAL_RCC_OscConfig+0x21a>
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	2b0c      	cmp	r3, #12
 80040fe:	d10e      	bne.n	800411e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	2b03      	cmp	r3, #3
 8004104:	d10b      	bne.n	800411e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004106:	4b15      	ldr	r3, [pc, #84]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d064      	beq.n	80041dc <HAL_RCC_OscConfig+0x2f0>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d160      	bne.n	80041dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e2ba      	b.n	8004694 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004126:	d106      	bne.n	8004136 <HAL_RCC_OscConfig+0x24a>
 8004128:	4b0c      	ldr	r3, [pc, #48]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a0b      	ldr	r2, [pc, #44]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 800412e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004132:	6013      	str	r3, [r2, #0]
 8004134:	e026      	b.n	8004184 <HAL_RCC_OscConfig+0x298>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800413e:	d115      	bne.n	800416c <HAL_RCC_OscConfig+0x280>
 8004140:	4b06      	ldr	r3, [pc, #24]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a05      	ldr	r2, [pc, #20]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 8004146:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800414a:	6013      	str	r3, [r2, #0]
 800414c:	4b03      	ldr	r3, [pc, #12]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a02      	ldr	r2, [pc, #8]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 8004152:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004156:	6013      	str	r3, [r2, #0]
 8004158:	e014      	b.n	8004184 <HAL_RCC_OscConfig+0x298>
 800415a:	bf00      	nop
 800415c:	40021000 	.word	0x40021000
 8004160:	08008f4c 	.word	0x08008f4c
 8004164:	20000004 	.word	0x20000004
 8004168:	20000008 	.word	0x20000008
 800416c:	4ba0      	ldr	r3, [pc, #640]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a9f      	ldr	r2, [pc, #636]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 8004172:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004176:	6013      	str	r3, [r2, #0]
 8004178:	4b9d      	ldr	r3, [pc, #628]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a9c      	ldr	r2, [pc, #624]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 800417e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004182:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d013      	beq.n	80041b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800418c:	f7fd fcea 	bl	8001b64 <HAL_GetTick>
 8004190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004192:	e008      	b.n	80041a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004194:	f7fd fce6 	bl	8001b64 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b64      	cmp	r3, #100	@ 0x64
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e276      	b.n	8004694 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041a6:	4b92      	ldr	r3, [pc, #584]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d0f0      	beq.n	8004194 <HAL_RCC_OscConfig+0x2a8>
 80041b2:	e014      	b.n	80041de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b4:	f7fd fcd6 	bl	8001b64 <HAL_GetTick>
 80041b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041ba:	e008      	b.n	80041ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041bc:	f7fd fcd2 	bl	8001b64 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b64      	cmp	r3, #100	@ 0x64
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e262      	b.n	8004694 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041ce:	4b88      	ldr	r3, [pc, #544]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1f0      	bne.n	80041bc <HAL_RCC_OscConfig+0x2d0>
 80041da:	e000      	b.n	80041de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d060      	beq.n	80042ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	2b04      	cmp	r3, #4
 80041ee:	d005      	beq.n	80041fc <HAL_RCC_OscConfig+0x310>
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	2b0c      	cmp	r3, #12
 80041f4:	d119      	bne.n	800422a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d116      	bne.n	800422a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041fc:	4b7c      	ldr	r3, [pc, #496]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004204:	2b00      	cmp	r3, #0
 8004206:	d005      	beq.n	8004214 <HAL_RCC_OscConfig+0x328>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d101      	bne.n	8004214 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e23f      	b.n	8004694 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004214:	4b76      	ldr	r3, [pc, #472]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	061b      	lsls	r3, r3, #24
 8004222:	4973      	ldr	r1, [pc, #460]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 8004224:	4313      	orrs	r3, r2
 8004226:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004228:	e040      	b.n	80042ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d023      	beq.n	800427a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004232:	4b6f      	ldr	r3, [pc, #444]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a6e      	ldr	r2, [pc, #440]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 8004238:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800423c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800423e:	f7fd fc91 	bl	8001b64 <HAL_GetTick>
 8004242:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004244:	e008      	b.n	8004258 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004246:	f7fd fc8d 	bl	8001b64 <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	2b02      	cmp	r3, #2
 8004252:	d901      	bls.n	8004258 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e21d      	b.n	8004694 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004258:	4b65      	ldr	r3, [pc, #404]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004260:	2b00      	cmp	r3, #0
 8004262:	d0f0      	beq.n	8004246 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004264:	4b62      	ldr	r3, [pc, #392]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	061b      	lsls	r3, r3, #24
 8004272:	495f      	ldr	r1, [pc, #380]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 8004274:	4313      	orrs	r3, r2
 8004276:	604b      	str	r3, [r1, #4]
 8004278:	e018      	b.n	80042ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800427a:	4b5d      	ldr	r3, [pc, #372]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a5c      	ldr	r2, [pc, #368]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 8004280:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004284:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004286:	f7fd fc6d 	bl	8001b64 <HAL_GetTick>
 800428a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800428c:	e008      	b.n	80042a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800428e:	f7fd fc69 	bl	8001b64 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	2b02      	cmp	r3, #2
 800429a:	d901      	bls.n	80042a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e1f9      	b.n	8004694 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042a0:	4b53      	ldr	r3, [pc, #332]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1f0      	bne.n	800428e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0308 	and.w	r3, r3, #8
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d03c      	beq.n	8004332 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	695b      	ldr	r3, [r3, #20]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d01c      	beq.n	80042fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042c0:	4b4b      	ldr	r3, [pc, #300]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 80042c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042c6:	4a4a      	ldr	r2, [pc, #296]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 80042c8:	f043 0301 	orr.w	r3, r3, #1
 80042cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d0:	f7fd fc48 	bl	8001b64 <HAL_GetTick>
 80042d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042d6:	e008      	b.n	80042ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042d8:	f7fd fc44 	bl	8001b64 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e1d4      	b.n	8004694 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042ea:	4b41      	ldr	r3, [pc, #260]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 80042ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d0ef      	beq.n	80042d8 <HAL_RCC_OscConfig+0x3ec>
 80042f8:	e01b      	b.n	8004332 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042fa:	4b3d      	ldr	r3, [pc, #244]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 80042fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004300:	4a3b      	ldr	r2, [pc, #236]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 8004302:	f023 0301 	bic.w	r3, r3, #1
 8004306:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800430a:	f7fd fc2b 	bl	8001b64 <HAL_GetTick>
 800430e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004310:	e008      	b.n	8004324 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004312:	f7fd fc27 	bl	8001b64 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	2b02      	cmp	r3, #2
 800431e:	d901      	bls.n	8004324 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e1b7      	b.n	8004694 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004324:	4b32      	ldr	r3, [pc, #200]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 8004326:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800432a:	f003 0302 	and.w	r3, r3, #2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1ef      	bne.n	8004312 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0304 	and.w	r3, r3, #4
 800433a:	2b00      	cmp	r3, #0
 800433c:	f000 80a6 	beq.w	800448c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004340:	2300      	movs	r3, #0
 8004342:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004344:	4b2a      	ldr	r3, [pc, #168]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 8004346:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004348:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d10d      	bne.n	800436c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004350:	4b27      	ldr	r3, [pc, #156]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 8004352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004354:	4a26      	ldr	r2, [pc, #152]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 8004356:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800435a:	6593      	str	r3, [r2, #88]	@ 0x58
 800435c:	4b24      	ldr	r3, [pc, #144]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 800435e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004360:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004364:	60bb      	str	r3, [r7, #8]
 8004366:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004368:	2301      	movs	r3, #1
 800436a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800436c:	4b21      	ldr	r3, [pc, #132]	@ (80043f4 <HAL_RCC_OscConfig+0x508>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004374:	2b00      	cmp	r3, #0
 8004376:	d118      	bne.n	80043aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004378:	4b1e      	ldr	r3, [pc, #120]	@ (80043f4 <HAL_RCC_OscConfig+0x508>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a1d      	ldr	r2, [pc, #116]	@ (80043f4 <HAL_RCC_OscConfig+0x508>)
 800437e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004382:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004384:	f7fd fbee 	bl	8001b64 <HAL_GetTick>
 8004388:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800438a:	e008      	b.n	800439e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800438c:	f7fd fbea 	bl	8001b64 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b02      	cmp	r3, #2
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e17a      	b.n	8004694 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800439e:	4b15      	ldr	r3, [pc, #84]	@ (80043f4 <HAL_RCC_OscConfig+0x508>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d0f0      	beq.n	800438c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d108      	bne.n	80043c4 <HAL_RCC_OscConfig+0x4d8>
 80043b2:	4b0f      	ldr	r3, [pc, #60]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 80043b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043b8:	4a0d      	ldr	r2, [pc, #52]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 80043ba:	f043 0301 	orr.w	r3, r3, #1
 80043be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80043c2:	e029      	b.n	8004418 <HAL_RCC_OscConfig+0x52c>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	2b05      	cmp	r3, #5
 80043ca:	d115      	bne.n	80043f8 <HAL_RCC_OscConfig+0x50c>
 80043cc:	4b08      	ldr	r3, [pc, #32]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 80043ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043d2:	4a07      	ldr	r2, [pc, #28]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 80043d4:	f043 0304 	orr.w	r3, r3, #4
 80043d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80043dc:	4b04      	ldr	r3, [pc, #16]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 80043de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043e2:	4a03      	ldr	r2, [pc, #12]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 80043e4:	f043 0301 	orr.w	r3, r3, #1
 80043e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80043ec:	e014      	b.n	8004418 <HAL_RCC_OscConfig+0x52c>
 80043ee:	bf00      	nop
 80043f0:	40021000 	.word	0x40021000
 80043f4:	40007000 	.word	0x40007000
 80043f8:	4b9c      	ldr	r3, [pc, #624]	@ (800466c <HAL_RCC_OscConfig+0x780>)
 80043fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043fe:	4a9b      	ldr	r2, [pc, #620]	@ (800466c <HAL_RCC_OscConfig+0x780>)
 8004400:	f023 0301 	bic.w	r3, r3, #1
 8004404:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004408:	4b98      	ldr	r3, [pc, #608]	@ (800466c <HAL_RCC_OscConfig+0x780>)
 800440a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800440e:	4a97      	ldr	r2, [pc, #604]	@ (800466c <HAL_RCC_OscConfig+0x780>)
 8004410:	f023 0304 	bic.w	r3, r3, #4
 8004414:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d016      	beq.n	800444e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004420:	f7fd fba0 	bl	8001b64 <HAL_GetTick>
 8004424:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004426:	e00a      	b.n	800443e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004428:	f7fd fb9c 	bl	8001b64 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004436:	4293      	cmp	r3, r2
 8004438:	d901      	bls.n	800443e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e12a      	b.n	8004694 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800443e:	4b8b      	ldr	r3, [pc, #556]	@ (800466c <HAL_RCC_OscConfig+0x780>)
 8004440:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004444:	f003 0302 	and.w	r3, r3, #2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d0ed      	beq.n	8004428 <HAL_RCC_OscConfig+0x53c>
 800444c:	e015      	b.n	800447a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800444e:	f7fd fb89 	bl	8001b64 <HAL_GetTick>
 8004452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004454:	e00a      	b.n	800446c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004456:	f7fd fb85 	bl	8001b64 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004464:	4293      	cmp	r3, r2
 8004466:	d901      	bls.n	800446c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e113      	b.n	8004694 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800446c:	4b7f      	ldr	r3, [pc, #508]	@ (800466c <HAL_RCC_OscConfig+0x780>)
 800446e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1ed      	bne.n	8004456 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800447a:	7ffb      	ldrb	r3, [r7, #31]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d105      	bne.n	800448c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004480:	4b7a      	ldr	r3, [pc, #488]	@ (800466c <HAL_RCC_OscConfig+0x780>)
 8004482:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004484:	4a79      	ldr	r2, [pc, #484]	@ (800466c <HAL_RCC_OscConfig+0x780>)
 8004486:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800448a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004490:	2b00      	cmp	r3, #0
 8004492:	f000 80fe 	beq.w	8004692 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800449a:	2b02      	cmp	r3, #2
 800449c:	f040 80d0 	bne.w	8004640 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80044a0:	4b72      	ldr	r3, [pc, #456]	@ (800466c <HAL_RCC_OscConfig+0x780>)
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	f003 0203 	and.w	r2, r3, #3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d130      	bne.n	8004516 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044be:	3b01      	subs	r3, #1
 80044c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d127      	bne.n	8004516 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d11f      	bne.n	8004516 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80044e0:	2a07      	cmp	r2, #7
 80044e2:	bf14      	ite	ne
 80044e4:	2201      	movne	r2, #1
 80044e6:	2200      	moveq	r2, #0
 80044e8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d113      	bne.n	8004516 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044f8:	085b      	lsrs	r3, r3, #1
 80044fa:	3b01      	subs	r3, #1
 80044fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80044fe:	429a      	cmp	r2, r3
 8004500:	d109      	bne.n	8004516 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800450c:	085b      	lsrs	r3, r3, #1
 800450e:	3b01      	subs	r3, #1
 8004510:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004512:	429a      	cmp	r2, r3
 8004514:	d06e      	beq.n	80045f4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	2b0c      	cmp	r3, #12
 800451a:	d069      	beq.n	80045f0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800451c:	4b53      	ldr	r3, [pc, #332]	@ (800466c <HAL_RCC_OscConfig+0x780>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d105      	bne.n	8004534 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004528:	4b50      	ldr	r3, [pc, #320]	@ (800466c <HAL_RCC_OscConfig+0x780>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d001      	beq.n	8004538 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e0ad      	b.n	8004694 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004538:	4b4c      	ldr	r3, [pc, #304]	@ (800466c <HAL_RCC_OscConfig+0x780>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a4b      	ldr	r2, [pc, #300]	@ (800466c <HAL_RCC_OscConfig+0x780>)
 800453e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004542:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004544:	f7fd fb0e 	bl	8001b64 <HAL_GetTick>
 8004548:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800454a:	e008      	b.n	800455e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800454c:	f7fd fb0a 	bl	8001b64 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b02      	cmp	r3, #2
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e09a      	b.n	8004694 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800455e:	4b43      	ldr	r3, [pc, #268]	@ (800466c <HAL_RCC_OscConfig+0x780>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1f0      	bne.n	800454c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800456a:	4b40      	ldr	r3, [pc, #256]	@ (800466c <HAL_RCC_OscConfig+0x780>)
 800456c:	68da      	ldr	r2, [r3, #12]
 800456e:	4b40      	ldr	r3, [pc, #256]	@ (8004670 <HAL_RCC_OscConfig+0x784>)
 8004570:	4013      	ands	r3, r2
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800457a:	3a01      	subs	r2, #1
 800457c:	0112      	lsls	r2, r2, #4
 800457e:	4311      	orrs	r1, r2
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004584:	0212      	lsls	r2, r2, #8
 8004586:	4311      	orrs	r1, r2
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800458c:	0852      	lsrs	r2, r2, #1
 800458e:	3a01      	subs	r2, #1
 8004590:	0552      	lsls	r2, r2, #21
 8004592:	4311      	orrs	r1, r2
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004598:	0852      	lsrs	r2, r2, #1
 800459a:	3a01      	subs	r2, #1
 800459c:	0652      	lsls	r2, r2, #25
 800459e:	4311      	orrs	r1, r2
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80045a4:	0912      	lsrs	r2, r2, #4
 80045a6:	0452      	lsls	r2, r2, #17
 80045a8:	430a      	orrs	r2, r1
 80045aa:	4930      	ldr	r1, [pc, #192]	@ (800466c <HAL_RCC_OscConfig+0x780>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80045b0:	4b2e      	ldr	r3, [pc, #184]	@ (800466c <HAL_RCC_OscConfig+0x780>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a2d      	ldr	r2, [pc, #180]	@ (800466c <HAL_RCC_OscConfig+0x780>)
 80045b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045bc:	4b2b      	ldr	r3, [pc, #172]	@ (800466c <HAL_RCC_OscConfig+0x780>)
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	4a2a      	ldr	r2, [pc, #168]	@ (800466c <HAL_RCC_OscConfig+0x780>)
 80045c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80045c8:	f7fd facc 	bl	8001b64 <HAL_GetTick>
 80045cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045ce:	e008      	b.n	80045e2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045d0:	f7fd fac8 	bl	8001b64 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d901      	bls.n	80045e2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e058      	b.n	8004694 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045e2:	4b22      	ldr	r3, [pc, #136]	@ (800466c <HAL_RCC_OscConfig+0x780>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d0f0      	beq.n	80045d0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80045ee:	e050      	b.n	8004692 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e04f      	b.n	8004694 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045f4:	4b1d      	ldr	r3, [pc, #116]	@ (800466c <HAL_RCC_OscConfig+0x780>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d148      	bne.n	8004692 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004600:	4b1a      	ldr	r3, [pc, #104]	@ (800466c <HAL_RCC_OscConfig+0x780>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a19      	ldr	r2, [pc, #100]	@ (800466c <HAL_RCC_OscConfig+0x780>)
 8004606:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800460a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800460c:	4b17      	ldr	r3, [pc, #92]	@ (800466c <HAL_RCC_OscConfig+0x780>)
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	4a16      	ldr	r2, [pc, #88]	@ (800466c <HAL_RCC_OscConfig+0x780>)
 8004612:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004616:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004618:	f7fd faa4 	bl	8001b64 <HAL_GetTick>
 800461c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800461e:	e008      	b.n	8004632 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004620:	f7fd faa0 	bl	8001b64 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b02      	cmp	r3, #2
 800462c:	d901      	bls.n	8004632 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e030      	b.n	8004694 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004632:	4b0e      	ldr	r3, [pc, #56]	@ (800466c <HAL_RCC_OscConfig+0x780>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d0f0      	beq.n	8004620 <HAL_RCC_OscConfig+0x734>
 800463e:	e028      	b.n	8004692 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	2b0c      	cmp	r3, #12
 8004644:	d023      	beq.n	800468e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004646:	4b09      	ldr	r3, [pc, #36]	@ (800466c <HAL_RCC_OscConfig+0x780>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a08      	ldr	r2, [pc, #32]	@ (800466c <HAL_RCC_OscConfig+0x780>)
 800464c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004650:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004652:	f7fd fa87 	bl	8001b64 <HAL_GetTick>
 8004656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004658:	e00c      	b.n	8004674 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800465a:	f7fd fa83 	bl	8001b64 <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	2b02      	cmp	r3, #2
 8004666:	d905      	bls.n	8004674 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e013      	b.n	8004694 <HAL_RCC_OscConfig+0x7a8>
 800466c:	40021000 	.word	0x40021000
 8004670:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004674:	4b09      	ldr	r3, [pc, #36]	@ (800469c <HAL_RCC_OscConfig+0x7b0>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1ec      	bne.n	800465a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004680:	4b06      	ldr	r3, [pc, #24]	@ (800469c <HAL_RCC_OscConfig+0x7b0>)
 8004682:	68da      	ldr	r2, [r3, #12]
 8004684:	4905      	ldr	r1, [pc, #20]	@ (800469c <HAL_RCC_OscConfig+0x7b0>)
 8004686:	4b06      	ldr	r3, [pc, #24]	@ (80046a0 <HAL_RCC_OscConfig+0x7b4>)
 8004688:	4013      	ands	r3, r2
 800468a:	60cb      	str	r3, [r1, #12]
 800468c:	e001      	b.n	8004692 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e000      	b.n	8004694 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3720      	adds	r7, #32
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	40021000 	.word	0x40021000
 80046a0:	feeefffc 	.word	0xfeeefffc

080046a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d101      	bne.n	80046b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e0e7      	b.n	8004888 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046b8:	4b75      	ldr	r3, [pc, #468]	@ (8004890 <HAL_RCC_ClockConfig+0x1ec>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0307 	and.w	r3, r3, #7
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d910      	bls.n	80046e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046c6:	4b72      	ldr	r3, [pc, #456]	@ (8004890 <HAL_RCC_ClockConfig+0x1ec>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f023 0207 	bic.w	r2, r3, #7
 80046ce:	4970      	ldr	r1, [pc, #448]	@ (8004890 <HAL_RCC_ClockConfig+0x1ec>)
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046d6:	4b6e      	ldr	r3, [pc, #440]	@ (8004890 <HAL_RCC_ClockConfig+0x1ec>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0307 	and.w	r3, r3, #7
 80046de:	683a      	ldr	r2, [r7, #0]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d001      	beq.n	80046e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e0cf      	b.n	8004888 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d010      	beq.n	8004716 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	689a      	ldr	r2, [r3, #8]
 80046f8:	4b66      	ldr	r3, [pc, #408]	@ (8004894 <HAL_RCC_ClockConfig+0x1f0>)
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004700:	429a      	cmp	r2, r3
 8004702:	d908      	bls.n	8004716 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004704:	4b63      	ldr	r3, [pc, #396]	@ (8004894 <HAL_RCC_ClockConfig+0x1f0>)
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	4960      	ldr	r1, [pc, #384]	@ (8004894 <HAL_RCC_ClockConfig+0x1f0>)
 8004712:	4313      	orrs	r3, r2
 8004714:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b00      	cmp	r3, #0
 8004720:	d04c      	beq.n	80047bc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	2b03      	cmp	r3, #3
 8004728:	d107      	bne.n	800473a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800472a:	4b5a      	ldr	r3, [pc, #360]	@ (8004894 <HAL_RCC_ClockConfig+0x1f0>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d121      	bne.n	800477a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e0a6      	b.n	8004888 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	2b02      	cmp	r3, #2
 8004740:	d107      	bne.n	8004752 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004742:	4b54      	ldr	r3, [pc, #336]	@ (8004894 <HAL_RCC_ClockConfig+0x1f0>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d115      	bne.n	800477a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e09a      	b.n	8004888 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d107      	bne.n	800476a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800475a:	4b4e      	ldr	r3, [pc, #312]	@ (8004894 <HAL_RCC_ClockConfig+0x1f0>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b00      	cmp	r3, #0
 8004764:	d109      	bne.n	800477a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e08e      	b.n	8004888 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800476a:	4b4a      	ldr	r3, [pc, #296]	@ (8004894 <HAL_RCC_ClockConfig+0x1f0>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004772:	2b00      	cmp	r3, #0
 8004774:	d101      	bne.n	800477a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e086      	b.n	8004888 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800477a:	4b46      	ldr	r3, [pc, #280]	@ (8004894 <HAL_RCC_ClockConfig+0x1f0>)
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f023 0203 	bic.w	r2, r3, #3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	4943      	ldr	r1, [pc, #268]	@ (8004894 <HAL_RCC_ClockConfig+0x1f0>)
 8004788:	4313      	orrs	r3, r2
 800478a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800478c:	f7fd f9ea 	bl	8001b64 <HAL_GetTick>
 8004790:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004792:	e00a      	b.n	80047aa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004794:	f7fd f9e6 	bl	8001b64 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d901      	bls.n	80047aa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e06e      	b.n	8004888 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047aa:	4b3a      	ldr	r3, [pc, #232]	@ (8004894 <HAL_RCC_ClockConfig+0x1f0>)
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f003 020c 	and.w	r2, r3, #12
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d1eb      	bne.n	8004794 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0302 	and.w	r3, r3, #2
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d010      	beq.n	80047ea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	689a      	ldr	r2, [r3, #8]
 80047cc:	4b31      	ldr	r3, [pc, #196]	@ (8004894 <HAL_RCC_ClockConfig+0x1f0>)
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d208      	bcs.n	80047ea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047d8:	4b2e      	ldr	r3, [pc, #184]	@ (8004894 <HAL_RCC_ClockConfig+0x1f0>)
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	492b      	ldr	r1, [pc, #172]	@ (8004894 <HAL_RCC_ClockConfig+0x1f0>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047ea:	4b29      	ldr	r3, [pc, #164]	@ (8004890 <HAL_RCC_ClockConfig+0x1ec>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0307 	and.w	r3, r3, #7
 80047f2:	683a      	ldr	r2, [r7, #0]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d210      	bcs.n	800481a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047f8:	4b25      	ldr	r3, [pc, #148]	@ (8004890 <HAL_RCC_ClockConfig+0x1ec>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f023 0207 	bic.w	r2, r3, #7
 8004800:	4923      	ldr	r1, [pc, #140]	@ (8004890 <HAL_RCC_ClockConfig+0x1ec>)
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	4313      	orrs	r3, r2
 8004806:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004808:	4b21      	ldr	r3, [pc, #132]	@ (8004890 <HAL_RCC_ClockConfig+0x1ec>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0307 	and.w	r3, r3, #7
 8004810:	683a      	ldr	r2, [r7, #0]
 8004812:	429a      	cmp	r2, r3
 8004814:	d001      	beq.n	800481a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e036      	b.n	8004888 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0304 	and.w	r3, r3, #4
 8004822:	2b00      	cmp	r3, #0
 8004824:	d008      	beq.n	8004838 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004826:	4b1b      	ldr	r3, [pc, #108]	@ (8004894 <HAL_RCC_ClockConfig+0x1f0>)
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	4918      	ldr	r1, [pc, #96]	@ (8004894 <HAL_RCC_ClockConfig+0x1f0>)
 8004834:	4313      	orrs	r3, r2
 8004836:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0308 	and.w	r3, r3, #8
 8004840:	2b00      	cmp	r3, #0
 8004842:	d009      	beq.n	8004858 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004844:	4b13      	ldr	r3, [pc, #76]	@ (8004894 <HAL_RCC_ClockConfig+0x1f0>)
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	00db      	lsls	r3, r3, #3
 8004852:	4910      	ldr	r1, [pc, #64]	@ (8004894 <HAL_RCC_ClockConfig+0x1f0>)
 8004854:	4313      	orrs	r3, r2
 8004856:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004858:	f000 f824 	bl	80048a4 <HAL_RCC_GetSysClockFreq>
 800485c:	4602      	mov	r2, r0
 800485e:	4b0d      	ldr	r3, [pc, #52]	@ (8004894 <HAL_RCC_ClockConfig+0x1f0>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	091b      	lsrs	r3, r3, #4
 8004864:	f003 030f 	and.w	r3, r3, #15
 8004868:	490b      	ldr	r1, [pc, #44]	@ (8004898 <HAL_RCC_ClockConfig+0x1f4>)
 800486a:	5ccb      	ldrb	r3, [r1, r3]
 800486c:	f003 031f 	and.w	r3, r3, #31
 8004870:	fa22 f303 	lsr.w	r3, r2, r3
 8004874:	4a09      	ldr	r2, [pc, #36]	@ (800489c <HAL_RCC_ClockConfig+0x1f8>)
 8004876:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004878:	4b09      	ldr	r3, [pc, #36]	@ (80048a0 <HAL_RCC_ClockConfig+0x1fc>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4618      	mov	r0, r3
 800487e:	f7fd f921 	bl	8001ac4 <HAL_InitTick>
 8004882:	4603      	mov	r3, r0
 8004884:	72fb      	strb	r3, [r7, #11]

  return status;
 8004886:	7afb      	ldrb	r3, [r7, #11]
}
 8004888:	4618      	mov	r0, r3
 800488a:	3710      	adds	r7, #16
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	40022000 	.word	0x40022000
 8004894:	40021000 	.word	0x40021000
 8004898:	08008f4c 	.word	0x08008f4c
 800489c:	20000004 	.word	0x20000004
 80048a0:	20000008 	.word	0x20000008

080048a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b089      	sub	sp, #36	@ 0x24
 80048a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80048aa:	2300      	movs	r3, #0
 80048ac:	61fb      	str	r3, [r7, #28]
 80048ae:	2300      	movs	r3, #0
 80048b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048b2:	4b3e      	ldr	r3, [pc, #248]	@ (80049ac <HAL_RCC_GetSysClockFreq+0x108>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f003 030c 	and.w	r3, r3, #12
 80048ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048bc:	4b3b      	ldr	r3, [pc, #236]	@ (80049ac <HAL_RCC_GetSysClockFreq+0x108>)
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	f003 0303 	and.w	r3, r3, #3
 80048c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d005      	beq.n	80048d8 <HAL_RCC_GetSysClockFreq+0x34>
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	2b0c      	cmp	r3, #12
 80048d0:	d121      	bne.n	8004916 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d11e      	bne.n	8004916 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80048d8:	4b34      	ldr	r3, [pc, #208]	@ (80049ac <HAL_RCC_GetSysClockFreq+0x108>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0308 	and.w	r3, r3, #8
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d107      	bne.n	80048f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80048e4:	4b31      	ldr	r3, [pc, #196]	@ (80049ac <HAL_RCC_GetSysClockFreq+0x108>)
 80048e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048ea:	0a1b      	lsrs	r3, r3, #8
 80048ec:	f003 030f 	and.w	r3, r3, #15
 80048f0:	61fb      	str	r3, [r7, #28]
 80048f2:	e005      	b.n	8004900 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80048f4:	4b2d      	ldr	r3, [pc, #180]	@ (80049ac <HAL_RCC_GetSysClockFreq+0x108>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	091b      	lsrs	r3, r3, #4
 80048fa:	f003 030f 	and.w	r3, r3, #15
 80048fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004900:	4a2b      	ldr	r2, [pc, #172]	@ (80049b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004908:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d10d      	bne.n	800492c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004914:	e00a      	b.n	800492c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	2b04      	cmp	r3, #4
 800491a:	d102      	bne.n	8004922 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800491c:	4b25      	ldr	r3, [pc, #148]	@ (80049b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800491e:	61bb      	str	r3, [r7, #24]
 8004920:	e004      	b.n	800492c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	2b08      	cmp	r3, #8
 8004926:	d101      	bne.n	800492c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004928:	4b23      	ldr	r3, [pc, #140]	@ (80049b8 <HAL_RCC_GetSysClockFreq+0x114>)
 800492a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	2b0c      	cmp	r3, #12
 8004930:	d134      	bne.n	800499c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004932:	4b1e      	ldr	r3, [pc, #120]	@ (80049ac <HAL_RCC_GetSysClockFreq+0x108>)
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	f003 0303 	and.w	r3, r3, #3
 800493a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	2b02      	cmp	r3, #2
 8004940:	d003      	beq.n	800494a <HAL_RCC_GetSysClockFreq+0xa6>
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	2b03      	cmp	r3, #3
 8004946:	d003      	beq.n	8004950 <HAL_RCC_GetSysClockFreq+0xac>
 8004948:	e005      	b.n	8004956 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800494a:	4b1a      	ldr	r3, [pc, #104]	@ (80049b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800494c:	617b      	str	r3, [r7, #20]
      break;
 800494e:	e005      	b.n	800495c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004950:	4b19      	ldr	r3, [pc, #100]	@ (80049b8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004952:	617b      	str	r3, [r7, #20]
      break;
 8004954:	e002      	b.n	800495c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	617b      	str	r3, [r7, #20]
      break;
 800495a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800495c:	4b13      	ldr	r3, [pc, #76]	@ (80049ac <HAL_RCC_GetSysClockFreq+0x108>)
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	091b      	lsrs	r3, r3, #4
 8004962:	f003 0307 	and.w	r3, r3, #7
 8004966:	3301      	adds	r3, #1
 8004968:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800496a:	4b10      	ldr	r3, [pc, #64]	@ (80049ac <HAL_RCC_GetSysClockFreq+0x108>)
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	0a1b      	lsrs	r3, r3, #8
 8004970:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	fb03 f202 	mul.w	r2, r3, r2
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004980:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004982:	4b0a      	ldr	r3, [pc, #40]	@ (80049ac <HAL_RCC_GetSysClockFreq+0x108>)
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	0e5b      	lsrs	r3, r3, #25
 8004988:	f003 0303 	and.w	r3, r3, #3
 800498c:	3301      	adds	r3, #1
 800498e:	005b      	lsls	r3, r3, #1
 8004990:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	fbb2 f3f3 	udiv	r3, r2, r3
 800499a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800499c:	69bb      	ldr	r3, [r7, #24]
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3724      	adds	r7, #36	@ 0x24
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	40021000 	.word	0x40021000
 80049b0:	08008f5c 	.word	0x08008f5c
 80049b4:	00f42400 	.word	0x00f42400
 80049b8:	007a1200 	.word	0x007a1200

080049bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80049c4:	2300      	movs	r3, #0
 80049c6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80049c8:	4b2a      	ldr	r3, [pc, #168]	@ (8004a74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d003      	beq.n	80049dc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80049d4:	f7ff fa26 	bl	8003e24 <HAL_PWREx_GetVoltageRange>
 80049d8:	6178      	str	r0, [r7, #20]
 80049da:	e014      	b.n	8004a06 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80049dc:	4b25      	ldr	r3, [pc, #148]	@ (8004a74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049e0:	4a24      	ldr	r2, [pc, #144]	@ (8004a74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80049e8:	4b22      	ldr	r3, [pc, #136]	@ (8004a74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049f0:	60fb      	str	r3, [r7, #12]
 80049f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80049f4:	f7ff fa16 	bl	8003e24 <HAL_PWREx_GetVoltageRange>
 80049f8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80049fa:	4b1e      	ldr	r3, [pc, #120]	@ (8004a74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049fe:	4a1d      	ldr	r2, [pc, #116]	@ (8004a74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a04:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a0c:	d10b      	bne.n	8004a26 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2b80      	cmp	r3, #128	@ 0x80
 8004a12:	d919      	bls.n	8004a48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2ba0      	cmp	r3, #160	@ 0xa0
 8004a18:	d902      	bls.n	8004a20 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	613b      	str	r3, [r7, #16]
 8004a1e:	e013      	b.n	8004a48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a20:	2301      	movs	r3, #1
 8004a22:	613b      	str	r3, [r7, #16]
 8004a24:	e010      	b.n	8004a48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2b80      	cmp	r3, #128	@ 0x80
 8004a2a:	d902      	bls.n	8004a32 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	613b      	str	r3, [r7, #16]
 8004a30:	e00a      	b.n	8004a48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2b80      	cmp	r3, #128	@ 0x80
 8004a36:	d102      	bne.n	8004a3e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004a38:	2302      	movs	r3, #2
 8004a3a:	613b      	str	r3, [r7, #16]
 8004a3c:	e004      	b.n	8004a48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2b70      	cmp	r3, #112	@ 0x70
 8004a42:	d101      	bne.n	8004a48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a44:	2301      	movs	r3, #1
 8004a46:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004a48:	4b0b      	ldr	r3, [pc, #44]	@ (8004a78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f023 0207 	bic.w	r2, r3, #7
 8004a50:	4909      	ldr	r1, [pc, #36]	@ (8004a78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004a58:	4b07      	ldr	r3, [pc, #28]	@ (8004a78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0307 	and.w	r3, r3, #7
 8004a60:	693a      	ldr	r2, [r7, #16]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d001      	beq.n	8004a6a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e000      	b.n	8004a6c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3718      	adds	r7, #24
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	40021000 	.word	0x40021000
 8004a78:	40022000 	.word	0x40022000

08004a7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b086      	sub	sp, #24
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a84:	2300      	movs	r3, #0
 8004a86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a88:	2300      	movs	r3, #0
 8004a8a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d041      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a9c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004aa0:	d02a      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004aa2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004aa6:	d824      	bhi.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004aa8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004aac:	d008      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004aae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004ab2:	d81e      	bhi.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00a      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004ab8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004abc:	d010      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004abe:	e018      	b.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ac0:	4b86      	ldr	r3, [pc, #536]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	4a85      	ldr	r2, [pc, #532]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ac6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004aca:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004acc:	e015      	b.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	3304      	adds	r3, #4
 8004ad2:	2100      	movs	r1, #0
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f000 fabb 	bl	8005050 <RCCEx_PLLSAI1_Config>
 8004ada:	4603      	mov	r3, r0
 8004adc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ade:	e00c      	b.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	3320      	adds	r3, #32
 8004ae4:	2100      	movs	r1, #0
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f000 fba6 	bl	8005238 <RCCEx_PLLSAI2_Config>
 8004aec:	4603      	mov	r3, r0
 8004aee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004af0:	e003      	b.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	74fb      	strb	r3, [r7, #19]
      break;
 8004af6:	e000      	b.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004af8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004afa:	7cfb      	ldrb	r3, [r7, #19]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d10b      	bne.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b00:	4b76      	ldr	r3, [pc, #472]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b06:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b0e:	4973      	ldr	r1, [pc, #460]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004b16:	e001      	b.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b18:	7cfb      	ldrb	r3, [r7, #19]
 8004b1a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d041      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b2c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004b30:	d02a      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004b32:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004b36:	d824      	bhi.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004b38:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b3c:	d008      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004b3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b42:	d81e      	bhi.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d00a      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004b48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b4c:	d010      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004b4e:	e018      	b.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004b50:	4b62      	ldr	r3, [pc, #392]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	4a61      	ldr	r2, [pc, #388]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b5a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b5c:	e015      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	3304      	adds	r3, #4
 8004b62:	2100      	movs	r1, #0
 8004b64:	4618      	mov	r0, r3
 8004b66:	f000 fa73 	bl	8005050 <RCCEx_PLLSAI1_Config>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b6e:	e00c      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	3320      	adds	r3, #32
 8004b74:	2100      	movs	r1, #0
 8004b76:	4618      	mov	r0, r3
 8004b78:	f000 fb5e 	bl	8005238 <RCCEx_PLLSAI2_Config>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b80:	e003      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	74fb      	strb	r3, [r7, #19]
      break;
 8004b86:	e000      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004b88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b8a:	7cfb      	ldrb	r3, [r7, #19]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d10b      	bne.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b90:	4b52      	ldr	r3, [pc, #328]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b96:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b9e:	494f      	ldr	r1, [pc, #316]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004ba6:	e001      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ba8:	7cfb      	ldrb	r3, [r7, #19]
 8004baa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	f000 80a0 	beq.w	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004bbe:	4b47      	ldr	r3, [pc, #284]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e000      	b.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004bce:	2300      	movs	r3, #0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d00d      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bd4:	4b41      	ldr	r3, [pc, #260]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bd8:	4a40      	ldr	r2, [pc, #256]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bde:	6593      	str	r3, [r2, #88]	@ 0x58
 8004be0:	4b3e      	ldr	r3, [pc, #248]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004be2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004be4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004be8:	60bb      	str	r3, [r7, #8]
 8004bea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bec:	2301      	movs	r3, #1
 8004bee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bf0:	4b3b      	ldr	r3, [pc, #236]	@ (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a3a      	ldr	r2, [pc, #232]	@ (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004bf6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bfa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bfc:	f7fc ffb2 	bl	8001b64 <HAL_GetTick>
 8004c00:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004c02:	e009      	b.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c04:	f7fc ffae 	bl	8001b64 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d902      	bls.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	74fb      	strb	r3, [r7, #19]
        break;
 8004c16:	e005      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004c18:	4b31      	ldr	r3, [pc, #196]	@ (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d0ef      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004c24:	7cfb      	ldrb	r3, [r7, #19]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d15c      	bne.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c2a:	4b2c      	ldr	r3, [pc, #176]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c34:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d01f      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c42:	697a      	ldr	r2, [r7, #20]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d019      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c48:	4b24      	ldr	r3, [pc, #144]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c52:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c54:	4b21      	ldr	r3, [pc, #132]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c5a:	4a20      	ldr	r2, [pc, #128]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c64:	4b1d      	ldr	r3, [pc, #116]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c6a:	4a1c      	ldr	r2, [pc, #112]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c74:	4a19      	ldr	r2, [pc, #100]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	f003 0301 	and.w	r3, r3, #1
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d016      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c86:	f7fc ff6d 	bl	8001b64 <HAL_GetTick>
 8004c8a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c8c:	e00b      	b.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c8e:	f7fc ff69 	bl	8001b64 <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d902      	bls.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	74fb      	strb	r3, [r7, #19]
            break;
 8004ca4:	e006      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cac:	f003 0302 	and.w	r3, r3, #2
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d0ec      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004cb4:	7cfb      	ldrb	r3, [r7, #19]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d10c      	bne.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cba:	4b08      	ldr	r3, [pc, #32]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cc0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cca:	4904      	ldr	r1, [pc, #16]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004cd2:	e009      	b.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004cd4:	7cfb      	ldrb	r3, [r7, #19]
 8004cd6:	74bb      	strb	r3, [r7, #18]
 8004cd8:	e006      	b.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004cda:	bf00      	nop
 8004cdc:	40021000 	.word	0x40021000
 8004ce0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ce4:	7cfb      	ldrb	r3, [r7, #19]
 8004ce6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ce8:	7c7b      	ldrb	r3, [r7, #17]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d105      	bne.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cee:	4b9e      	ldr	r3, [pc, #632]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cf2:	4a9d      	ldr	r2, [pc, #628]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cf4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cf8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00a      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d06:	4b98      	ldr	r3, [pc, #608]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d0c:	f023 0203 	bic.w	r2, r3, #3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d14:	4994      	ldr	r1, [pc, #592]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0302 	and.w	r3, r3, #2
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00a      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d28:	4b8f      	ldr	r3, [pc, #572]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d2e:	f023 020c 	bic.w	r2, r3, #12
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d36:	498c      	ldr	r1, [pc, #560]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0304 	and.w	r3, r3, #4
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00a      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d4a:	4b87      	ldr	r3, [pc, #540]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d50:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d58:	4983      	ldr	r1, [pc, #524]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0308 	and.w	r3, r3, #8
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d00a      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d6c:	4b7e      	ldr	r3, [pc, #504]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d72:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d7a:	497b      	ldr	r1, [pc, #492]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0310 	and.w	r3, r3, #16
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00a      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d8e:	4b76      	ldr	r3, [pc, #472]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d9c:	4972      	ldr	r1, [pc, #456]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0320 	and.w	r3, r3, #32
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d00a      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004db0:	4b6d      	ldr	r3, [pc, #436]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004db6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dbe:	496a      	ldr	r1, [pc, #424]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00a      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004dd2:	4b65      	ldr	r3, [pc, #404]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dd8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004de0:	4961      	ldr	r1, [pc, #388]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00a      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004df4:	4b5c      	ldr	r3, [pc, #368]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dfa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e02:	4959      	ldr	r1, [pc, #356]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00a      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e16:	4b54      	ldr	r3, [pc, #336]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e1c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e24:	4950      	ldr	r1, [pc, #320]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00a      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e38:	4b4b      	ldr	r3, [pc, #300]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e3e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e46:	4948      	ldr	r1, [pc, #288]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00a      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e5a:	4b43      	ldr	r3, [pc, #268]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e60:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e68:	493f      	ldr	r1, [pc, #252]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d028      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e7c:	4b3a      	ldr	r3, [pc, #232]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e82:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e8a:	4937      	ldr	r1, [pc, #220]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e9a:	d106      	bne.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e9c:	4b32      	ldr	r3, [pc, #200]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	4a31      	ldr	r2, [pc, #196]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ea2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ea6:	60d3      	str	r3, [r2, #12]
 8004ea8:	e011      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004eae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004eb2:	d10c      	bne.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	3304      	adds	r3, #4
 8004eb8:	2101      	movs	r1, #1
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f000 f8c8 	bl	8005050 <RCCEx_PLLSAI1_Config>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004ec4:	7cfb      	ldrb	r3, [r7, #19]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d001      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004eca:	7cfb      	ldrb	r3, [r7, #19]
 8004ecc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d028      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004eda:	4b23      	ldr	r3, [pc, #140]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ee0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ee8:	491f      	ldr	r1, [pc, #124]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ef4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ef8:	d106      	bne.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004efa:	4b1b      	ldr	r3, [pc, #108]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	4a1a      	ldr	r2, [pc, #104]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f00:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f04:	60d3      	str	r3, [r2, #12]
 8004f06:	e011      	b.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f0c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004f10:	d10c      	bne.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	3304      	adds	r3, #4
 8004f16:	2101      	movs	r1, #1
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f000 f899 	bl	8005050 <RCCEx_PLLSAI1_Config>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f22:	7cfb      	ldrb	r3, [r7, #19]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d001      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004f28:	7cfb      	ldrb	r3, [r7, #19]
 8004f2a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d02b      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f38:	4b0b      	ldr	r3, [pc, #44]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f3e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f46:	4908      	ldr	r1, [pc, #32]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f56:	d109      	bne.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f58:	4b03      	ldr	r3, [pc, #12]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	4a02      	ldr	r2, [pc, #8]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f62:	60d3      	str	r3, [r2, #12]
 8004f64:	e014      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004f66:	bf00      	nop
 8004f68:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f70:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004f74:	d10c      	bne.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	3304      	adds	r3, #4
 8004f7a:	2101      	movs	r1, #1
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f000 f867 	bl	8005050 <RCCEx_PLLSAI1_Config>
 8004f82:	4603      	mov	r3, r0
 8004f84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f86:	7cfb      	ldrb	r3, [r7, #19]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d001      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004f8c:	7cfb      	ldrb	r3, [r7, #19]
 8004f8e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d02f      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f9c:	4b2b      	ldr	r3, [pc, #172]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fa2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004faa:	4928      	ldr	r1, [pc, #160]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004fac:	4313      	orrs	r3, r2
 8004fae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004fb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004fba:	d10d      	bne.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	3304      	adds	r3, #4
 8004fc0:	2102      	movs	r1, #2
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f000 f844 	bl	8005050 <RCCEx_PLLSAI1_Config>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004fcc:	7cfb      	ldrb	r3, [r7, #19]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d014      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004fd2:	7cfb      	ldrb	r3, [r7, #19]
 8004fd4:	74bb      	strb	r3, [r7, #18]
 8004fd6:	e011      	b.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004fdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004fe0:	d10c      	bne.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	3320      	adds	r3, #32
 8004fe6:	2102      	movs	r1, #2
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f000 f925 	bl	8005238 <RCCEx_PLLSAI2_Config>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ff2:	7cfb      	ldrb	r3, [r7, #19]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d001      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004ff8:	7cfb      	ldrb	r3, [r7, #19]
 8004ffa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00a      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005008:	4b10      	ldr	r3, [pc, #64]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800500a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800500e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005016:	490d      	ldr	r1, [pc, #52]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005018:	4313      	orrs	r3, r2
 800501a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00b      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800502a:	4b08      	ldr	r3, [pc, #32]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800502c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005030:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800503a:	4904      	ldr	r1, [pc, #16]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800503c:	4313      	orrs	r3, r2
 800503e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005042:	7cbb      	ldrb	r3, [r7, #18]
}
 8005044:	4618      	mov	r0, r3
 8005046:	3718      	adds	r7, #24
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}
 800504c:	40021000 	.word	0x40021000

08005050 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800505a:	2300      	movs	r3, #0
 800505c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800505e:	4b75      	ldr	r3, [pc, #468]	@ (8005234 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	f003 0303 	and.w	r3, r3, #3
 8005066:	2b00      	cmp	r3, #0
 8005068:	d018      	beq.n	800509c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800506a:	4b72      	ldr	r3, [pc, #456]	@ (8005234 <RCCEx_PLLSAI1_Config+0x1e4>)
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	f003 0203 	and.w	r2, r3, #3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	429a      	cmp	r2, r3
 8005078:	d10d      	bne.n	8005096 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
       ||
 800507e:	2b00      	cmp	r3, #0
 8005080:	d009      	beq.n	8005096 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005082:	4b6c      	ldr	r3, [pc, #432]	@ (8005234 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	091b      	lsrs	r3, r3, #4
 8005088:	f003 0307 	and.w	r3, r3, #7
 800508c:	1c5a      	adds	r2, r3, #1
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
       ||
 8005092:	429a      	cmp	r2, r3
 8005094:	d047      	beq.n	8005126 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	73fb      	strb	r3, [r7, #15]
 800509a:	e044      	b.n	8005126 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2b03      	cmp	r3, #3
 80050a2:	d018      	beq.n	80050d6 <RCCEx_PLLSAI1_Config+0x86>
 80050a4:	2b03      	cmp	r3, #3
 80050a6:	d825      	bhi.n	80050f4 <RCCEx_PLLSAI1_Config+0xa4>
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d002      	beq.n	80050b2 <RCCEx_PLLSAI1_Config+0x62>
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d009      	beq.n	80050c4 <RCCEx_PLLSAI1_Config+0x74>
 80050b0:	e020      	b.n	80050f4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80050b2:	4b60      	ldr	r3, [pc, #384]	@ (8005234 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0302 	and.w	r3, r3, #2
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d11d      	bne.n	80050fa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050c2:	e01a      	b.n	80050fa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80050c4:	4b5b      	ldr	r3, [pc, #364]	@ (8005234 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d116      	bne.n	80050fe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050d4:	e013      	b.n	80050fe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80050d6:	4b57      	ldr	r3, [pc, #348]	@ (8005234 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d10f      	bne.n	8005102 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80050e2:	4b54      	ldr	r3, [pc, #336]	@ (8005234 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d109      	bne.n	8005102 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80050f2:	e006      	b.n	8005102 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	73fb      	strb	r3, [r7, #15]
      break;
 80050f8:	e004      	b.n	8005104 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050fa:	bf00      	nop
 80050fc:	e002      	b.n	8005104 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050fe:	bf00      	nop
 8005100:	e000      	b.n	8005104 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005102:	bf00      	nop
    }

    if(status == HAL_OK)
 8005104:	7bfb      	ldrb	r3, [r7, #15]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d10d      	bne.n	8005126 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800510a:	4b4a      	ldr	r3, [pc, #296]	@ (8005234 <RCCEx_PLLSAI1_Config+0x1e4>)
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6819      	ldr	r1, [r3, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	3b01      	subs	r3, #1
 800511c:	011b      	lsls	r3, r3, #4
 800511e:	430b      	orrs	r3, r1
 8005120:	4944      	ldr	r1, [pc, #272]	@ (8005234 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005122:	4313      	orrs	r3, r2
 8005124:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005126:	7bfb      	ldrb	r3, [r7, #15]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d17d      	bne.n	8005228 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800512c:	4b41      	ldr	r3, [pc, #260]	@ (8005234 <RCCEx_PLLSAI1_Config+0x1e4>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a40      	ldr	r2, [pc, #256]	@ (8005234 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005132:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005136:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005138:	f7fc fd14 	bl	8001b64 <HAL_GetTick>
 800513c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800513e:	e009      	b.n	8005154 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005140:	f7fc fd10 	bl	8001b64 <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	2b02      	cmp	r3, #2
 800514c:	d902      	bls.n	8005154 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	73fb      	strb	r3, [r7, #15]
        break;
 8005152:	e005      	b.n	8005160 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005154:	4b37      	ldr	r3, [pc, #220]	@ (8005234 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d1ef      	bne.n	8005140 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005160:	7bfb      	ldrb	r3, [r7, #15]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d160      	bne.n	8005228 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d111      	bne.n	8005190 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800516c:	4b31      	ldr	r3, [pc, #196]	@ (8005234 <RCCEx_PLLSAI1_Config+0x1e4>)
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005174:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	6892      	ldr	r2, [r2, #8]
 800517c:	0211      	lsls	r1, r2, #8
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	68d2      	ldr	r2, [r2, #12]
 8005182:	0912      	lsrs	r2, r2, #4
 8005184:	0452      	lsls	r2, r2, #17
 8005186:	430a      	orrs	r2, r1
 8005188:	492a      	ldr	r1, [pc, #168]	@ (8005234 <RCCEx_PLLSAI1_Config+0x1e4>)
 800518a:	4313      	orrs	r3, r2
 800518c:	610b      	str	r3, [r1, #16]
 800518e:	e027      	b.n	80051e0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	2b01      	cmp	r3, #1
 8005194:	d112      	bne.n	80051bc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005196:	4b27      	ldr	r3, [pc, #156]	@ (8005234 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800519e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	6892      	ldr	r2, [r2, #8]
 80051a6:	0211      	lsls	r1, r2, #8
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	6912      	ldr	r2, [r2, #16]
 80051ac:	0852      	lsrs	r2, r2, #1
 80051ae:	3a01      	subs	r2, #1
 80051b0:	0552      	lsls	r2, r2, #21
 80051b2:	430a      	orrs	r2, r1
 80051b4:	491f      	ldr	r1, [pc, #124]	@ (8005234 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	610b      	str	r3, [r1, #16]
 80051ba:	e011      	b.n	80051e0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80051bc:	4b1d      	ldr	r3, [pc, #116]	@ (8005234 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80051c4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	6892      	ldr	r2, [r2, #8]
 80051cc:	0211      	lsls	r1, r2, #8
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	6952      	ldr	r2, [r2, #20]
 80051d2:	0852      	lsrs	r2, r2, #1
 80051d4:	3a01      	subs	r2, #1
 80051d6:	0652      	lsls	r2, r2, #25
 80051d8:	430a      	orrs	r2, r1
 80051da:	4916      	ldr	r1, [pc, #88]	@ (8005234 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80051e0:	4b14      	ldr	r3, [pc, #80]	@ (8005234 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a13      	ldr	r2, [pc, #76]	@ (8005234 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051e6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80051ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ec:	f7fc fcba 	bl	8001b64 <HAL_GetTick>
 80051f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051f2:	e009      	b.n	8005208 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051f4:	f7fc fcb6 	bl	8001b64 <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d902      	bls.n	8005208 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	73fb      	strb	r3, [r7, #15]
          break;
 8005206:	e005      	b.n	8005214 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005208:	4b0a      	ldr	r3, [pc, #40]	@ (8005234 <RCCEx_PLLSAI1_Config+0x1e4>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005210:	2b00      	cmp	r3, #0
 8005212:	d0ef      	beq.n	80051f4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005214:	7bfb      	ldrb	r3, [r7, #15]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d106      	bne.n	8005228 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800521a:	4b06      	ldr	r3, [pc, #24]	@ (8005234 <RCCEx_PLLSAI1_Config+0x1e4>)
 800521c:	691a      	ldr	r2, [r3, #16]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	4904      	ldr	r1, [pc, #16]	@ (8005234 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005224:	4313      	orrs	r3, r2
 8005226:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005228:	7bfb      	ldrb	r3, [r7, #15]
}
 800522a:	4618      	mov	r0, r3
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	40021000 	.word	0x40021000

08005238 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005242:	2300      	movs	r3, #0
 8005244:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005246:	4b6a      	ldr	r3, [pc, #424]	@ (80053f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	f003 0303 	and.w	r3, r3, #3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d018      	beq.n	8005284 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005252:	4b67      	ldr	r3, [pc, #412]	@ (80053f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	f003 0203 	and.w	r2, r3, #3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	429a      	cmp	r2, r3
 8005260:	d10d      	bne.n	800527e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
       ||
 8005266:	2b00      	cmp	r3, #0
 8005268:	d009      	beq.n	800527e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800526a:	4b61      	ldr	r3, [pc, #388]	@ (80053f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	091b      	lsrs	r3, r3, #4
 8005270:	f003 0307 	and.w	r3, r3, #7
 8005274:	1c5a      	adds	r2, r3, #1
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
       ||
 800527a:	429a      	cmp	r2, r3
 800527c:	d047      	beq.n	800530e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	73fb      	strb	r3, [r7, #15]
 8005282:	e044      	b.n	800530e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2b03      	cmp	r3, #3
 800528a:	d018      	beq.n	80052be <RCCEx_PLLSAI2_Config+0x86>
 800528c:	2b03      	cmp	r3, #3
 800528e:	d825      	bhi.n	80052dc <RCCEx_PLLSAI2_Config+0xa4>
 8005290:	2b01      	cmp	r3, #1
 8005292:	d002      	beq.n	800529a <RCCEx_PLLSAI2_Config+0x62>
 8005294:	2b02      	cmp	r3, #2
 8005296:	d009      	beq.n	80052ac <RCCEx_PLLSAI2_Config+0x74>
 8005298:	e020      	b.n	80052dc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800529a:	4b55      	ldr	r3, [pc, #340]	@ (80053f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0302 	and.w	r3, r3, #2
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d11d      	bne.n	80052e2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052aa:	e01a      	b.n	80052e2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80052ac:	4b50      	ldr	r3, [pc, #320]	@ (80053f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d116      	bne.n	80052e6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052bc:	e013      	b.n	80052e6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80052be:	4b4c      	ldr	r3, [pc, #304]	@ (80053f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d10f      	bne.n	80052ea <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80052ca:	4b49      	ldr	r3, [pc, #292]	@ (80053f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d109      	bne.n	80052ea <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80052da:	e006      	b.n	80052ea <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	73fb      	strb	r3, [r7, #15]
      break;
 80052e0:	e004      	b.n	80052ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80052e2:	bf00      	nop
 80052e4:	e002      	b.n	80052ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80052e6:	bf00      	nop
 80052e8:	e000      	b.n	80052ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80052ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80052ec:	7bfb      	ldrb	r3, [r7, #15]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d10d      	bne.n	800530e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80052f2:	4b3f      	ldr	r3, [pc, #252]	@ (80053f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6819      	ldr	r1, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	3b01      	subs	r3, #1
 8005304:	011b      	lsls	r3, r3, #4
 8005306:	430b      	orrs	r3, r1
 8005308:	4939      	ldr	r1, [pc, #228]	@ (80053f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800530a:	4313      	orrs	r3, r2
 800530c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800530e:	7bfb      	ldrb	r3, [r7, #15]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d167      	bne.n	80053e4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005314:	4b36      	ldr	r3, [pc, #216]	@ (80053f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a35      	ldr	r2, [pc, #212]	@ (80053f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800531a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800531e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005320:	f7fc fc20 	bl	8001b64 <HAL_GetTick>
 8005324:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005326:	e009      	b.n	800533c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005328:	f7fc fc1c 	bl	8001b64 <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	2b02      	cmp	r3, #2
 8005334:	d902      	bls.n	800533c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	73fb      	strb	r3, [r7, #15]
        break;
 800533a:	e005      	b.n	8005348 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800533c:	4b2c      	ldr	r3, [pc, #176]	@ (80053f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005344:	2b00      	cmp	r3, #0
 8005346:	d1ef      	bne.n	8005328 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005348:	7bfb      	ldrb	r3, [r7, #15]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d14a      	bne.n	80053e4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d111      	bne.n	8005378 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005354:	4b26      	ldr	r3, [pc, #152]	@ (80053f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005356:	695b      	ldr	r3, [r3, #20]
 8005358:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800535c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	6892      	ldr	r2, [r2, #8]
 8005364:	0211      	lsls	r1, r2, #8
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	68d2      	ldr	r2, [r2, #12]
 800536a:	0912      	lsrs	r2, r2, #4
 800536c:	0452      	lsls	r2, r2, #17
 800536e:	430a      	orrs	r2, r1
 8005370:	491f      	ldr	r1, [pc, #124]	@ (80053f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005372:	4313      	orrs	r3, r2
 8005374:	614b      	str	r3, [r1, #20]
 8005376:	e011      	b.n	800539c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005378:	4b1d      	ldr	r3, [pc, #116]	@ (80053f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800537a:	695b      	ldr	r3, [r3, #20]
 800537c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005380:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	6892      	ldr	r2, [r2, #8]
 8005388:	0211      	lsls	r1, r2, #8
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	6912      	ldr	r2, [r2, #16]
 800538e:	0852      	lsrs	r2, r2, #1
 8005390:	3a01      	subs	r2, #1
 8005392:	0652      	lsls	r2, r2, #25
 8005394:	430a      	orrs	r2, r1
 8005396:	4916      	ldr	r1, [pc, #88]	@ (80053f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005398:	4313      	orrs	r3, r2
 800539a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800539c:	4b14      	ldr	r3, [pc, #80]	@ (80053f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a13      	ldr	r2, [pc, #76]	@ (80053f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053a8:	f7fc fbdc 	bl	8001b64 <HAL_GetTick>
 80053ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80053ae:	e009      	b.n	80053c4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80053b0:	f7fc fbd8 	bl	8001b64 <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d902      	bls.n	80053c4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	73fb      	strb	r3, [r7, #15]
          break;
 80053c2:	e005      	b.n	80053d0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80053c4:	4b0a      	ldr	r3, [pc, #40]	@ (80053f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d0ef      	beq.n	80053b0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80053d0:	7bfb      	ldrb	r3, [r7, #15]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d106      	bne.n	80053e4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80053d6:	4b06      	ldr	r3, [pc, #24]	@ (80053f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053d8:	695a      	ldr	r2, [r3, #20]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	695b      	ldr	r3, [r3, #20]
 80053de:	4904      	ldr	r1, [pc, #16]	@ (80053f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053e0:	4313      	orrs	r3, r2
 80053e2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80053e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3710      	adds	r7, #16
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	40021000 	.word	0x40021000

080053f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d101      	bne.n	8005406 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e095      	b.n	8005532 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800540a:	2b00      	cmp	r3, #0
 800540c:	d108      	bne.n	8005420 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005416:	d009      	beq.n	800542c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	61da      	str	r2, [r3, #28]
 800541e:	e005      	b.n	800542c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d106      	bne.n	800544c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f7fc f9a8 	bl	800179c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2202      	movs	r2, #2
 8005450:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005462:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800546c:	d902      	bls.n	8005474 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800546e:	2300      	movs	r3, #0
 8005470:	60fb      	str	r3, [r7, #12]
 8005472:	e002      	b.n	800547a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005474:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005478:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005482:	d007      	beq.n	8005494 <HAL_SPI_Init+0xa0>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800548c:	d002      	beq.n	8005494 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80054a4:	431a      	orrs	r2, r3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	f003 0302 	and.w	r3, r3, #2
 80054ae:	431a      	orrs	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	695b      	ldr	r3, [r3, #20]
 80054b4:	f003 0301 	and.w	r3, r3, #1
 80054b8:	431a      	orrs	r2, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054c2:	431a      	orrs	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	69db      	ldr	r3, [r3, #28]
 80054c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80054cc:	431a      	orrs	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054d6:	ea42 0103 	orr.w	r1, r2, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054de:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	430a      	orrs	r2, r1
 80054e8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	0c1b      	lsrs	r3, r3, #16
 80054f0:	f003 0204 	and.w	r2, r3, #4
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f8:	f003 0310 	and.w	r3, r3, #16
 80054fc:	431a      	orrs	r2, r3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005502:	f003 0308 	and.w	r3, r3, #8
 8005506:	431a      	orrs	r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005510:	ea42 0103 	orr.w	r1, r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	430a      	orrs	r2, r1
 8005520:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3710      	adds	r7, #16
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}

0800553a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800553a:	b580      	push	{r7, lr}
 800553c:	b088      	sub	sp, #32
 800553e:	af00      	add	r7, sp, #0
 8005540:	60f8      	str	r0, [r7, #12]
 8005542:	60b9      	str	r1, [r7, #8]
 8005544:	603b      	str	r3, [r7, #0]
 8005546:	4613      	mov	r3, r2
 8005548:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800554a:	f7fc fb0b 	bl	8001b64 <HAL_GetTick>
 800554e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005550:	88fb      	ldrh	r3, [r7, #6]
 8005552:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800555a:	b2db      	uxtb	r3, r3
 800555c:	2b01      	cmp	r3, #1
 800555e:	d001      	beq.n	8005564 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005560:	2302      	movs	r3, #2
 8005562:	e15c      	b.n	800581e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d002      	beq.n	8005570 <HAL_SPI_Transmit+0x36>
 800556a:	88fb      	ldrh	r3, [r7, #6]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d101      	bne.n	8005574 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e154      	b.n	800581e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800557a:	2b01      	cmp	r3, #1
 800557c:	d101      	bne.n	8005582 <HAL_SPI_Transmit+0x48>
 800557e:	2302      	movs	r3, #2
 8005580:	e14d      	b.n	800581e <HAL_SPI_Transmit+0x2e4>
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2201      	movs	r2, #1
 8005586:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2203      	movs	r2, #3
 800558e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2200      	movs	r2, #0
 8005596:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	68ba      	ldr	r2, [r7, #8]
 800559c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	88fa      	ldrh	r2, [r7, #6]
 80055a2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	88fa      	ldrh	r2, [r7, #6]
 80055a8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2200      	movs	r2, #0
 80055ae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055d4:	d10f      	bne.n	80055f6 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80055f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005600:	2b40      	cmp	r3, #64	@ 0x40
 8005602:	d007      	beq.n	8005614 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005612:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800561c:	d952      	bls.n	80056c4 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d002      	beq.n	800562c <HAL_SPI_Transmit+0xf2>
 8005626:	8b7b      	ldrh	r3, [r7, #26]
 8005628:	2b01      	cmp	r3, #1
 800562a:	d145      	bne.n	80056b8 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005630:	881a      	ldrh	r2, [r3, #0]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800563c:	1c9a      	adds	r2, r3, #2
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005646:	b29b      	uxth	r3, r3
 8005648:	3b01      	subs	r3, #1
 800564a:	b29a      	uxth	r2, r3
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005650:	e032      	b.n	80056b8 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f003 0302 	and.w	r3, r3, #2
 800565c:	2b02      	cmp	r3, #2
 800565e:	d112      	bne.n	8005686 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005664:	881a      	ldrh	r2, [r3, #0]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005670:	1c9a      	adds	r2, r3, #2
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800567a:	b29b      	uxth	r3, r3
 800567c:	3b01      	subs	r3, #1
 800567e:	b29a      	uxth	r2, r3
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005684:	e018      	b.n	80056b8 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005686:	f7fc fa6d 	bl	8001b64 <HAL_GetTick>
 800568a:	4602      	mov	r2, r0
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	683a      	ldr	r2, [r7, #0]
 8005692:	429a      	cmp	r2, r3
 8005694:	d803      	bhi.n	800569e <HAL_SPI_Transmit+0x164>
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800569c:	d102      	bne.n	80056a4 <HAL_SPI_Transmit+0x16a>
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d109      	bne.n	80056b8 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e0b2      	b.n	800581e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056bc:	b29b      	uxth	r3, r3
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1c7      	bne.n	8005652 <HAL_SPI_Transmit+0x118>
 80056c2:	e083      	b.n	80057cc <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d002      	beq.n	80056d2 <HAL_SPI_Transmit+0x198>
 80056cc:	8b7b      	ldrh	r3, [r7, #26]
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d177      	bne.n	80057c2 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d912      	bls.n	8005702 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056e0:	881a      	ldrh	r2, [r3, #0]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ec:	1c9a      	adds	r2, r3, #2
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	3b02      	subs	r3, #2
 80056fa:	b29a      	uxth	r2, r3
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005700:	e05f      	b.n	80057c2 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	330c      	adds	r3, #12
 800570c:	7812      	ldrb	r2, [r2, #0]
 800570e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005714:	1c5a      	adds	r2, r3, #1
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800571e:	b29b      	uxth	r3, r3
 8005720:	3b01      	subs	r3, #1
 8005722:	b29a      	uxth	r2, r3
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005728:	e04b      	b.n	80057c2 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	f003 0302 	and.w	r3, r3, #2
 8005734:	2b02      	cmp	r3, #2
 8005736:	d12b      	bne.n	8005790 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800573c:	b29b      	uxth	r3, r3
 800573e:	2b01      	cmp	r3, #1
 8005740:	d912      	bls.n	8005768 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005746:	881a      	ldrh	r2, [r3, #0]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005752:	1c9a      	adds	r2, r3, #2
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800575c:	b29b      	uxth	r3, r3
 800575e:	3b02      	subs	r3, #2
 8005760:	b29a      	uxth	r2, r3
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005766:	e02c      	b.n	80057c2 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	330c      	adds	r3, #12
 8005772:	7812      	ldrb	r2, [r2, #0]
 8005774:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800577a:	1c5a      	adds	r2, r3, #1
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005784:	b29b      	uxth	r3, r3
 8005786:	3b01      	subs	r3, #1
 8005788:	b29a      	uxth	r2, r3
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800578e:	e018      	b.n	80057c2 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005790:	f7fc f9e8 	bl	8001b64 <HAL_GetTick>
 8005794:	4602      	mov	r2, r0
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	683a      	ldr	r2, [r7, #0]
 800579c:	429a      	cmp	r2, r3
 800579e:	d803      	bhi.n	80057a8 <HAL_SPI_Transmit+0x26e>
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80057a6:	d102      	bne.n	80057ae <HAL_SPI_Transmit+0x274>
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d109      	bne.n	80057c2 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2201      	movs	r2, #1
 80057b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e02d      	b.n	800581e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d1ae      	bne.n	800572a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057cc:	69fa      	ldr	r2, [r7, #28]
 80057ce:	6839      	ldr	r1, [r7, #0]
 80057d0:	68f8      	ldr	r0, [r7, #12]
 80057d2:	f000 fcf5 	bl	80061c0 <SPI_EndRxTxTransaction>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d002      	beq.n	80057e2 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2220      	movs	r2, #32
 80057e0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d10a      	bne.n	8005800 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057ea:	2300      	movs	r3, #0
 80057ec:	617b      	str	r3, [r7, #20]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	617b      	str	r3, [r7, #20]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	617b      	str	r3, [r7, #20]
 80057fe:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005814:	2b00      	cmp	r3, #0
 8005816:	d001      	beq.n	800581c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e000      	b.n	800581e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800581c:	2300      	movs	r3, #0
  }
}
 800581e:	4618      	mov	r0, r3
 8005820:	3720      	adds	r7, #32
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}

08005826 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005826:	b580      	push	{r7, lr}
 8005828:	b088      	sub	sp, #32
 800582a:	af02      	add	r7, sp, #8
 800582c:	60f8      	str	r0, [r7, #12]
 800582e:	60b9      	str	r1, [r7, #8]
 8005830:	603b      	str	r3, [r7, #0]
 8005832:	4613      	mov	r3, r2
 8005834:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800583c:	b2db      	uxtb	r3, r3
 800583e:	2b01      	cmp	r3, #1
 8005840:	d001      	beq.n	8005846 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8005842:	2302      	movs	r3, #2
 8005844:	e123      	b.n	8005a8e <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800584e:	d112      	bne.n	8005876 <HAL_SPI_Receive+0x50>
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d10e      	bne.n	8005876 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2204      	movs	r2, #4
 800585c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005860:	88fa      	ldrh	r2, [r7, #6]
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	9300      	str	r3, [sp, #0]
 8005866:	4613      	mov	r3, r2
 8005868:	68ba      	ldr	r2, [r7, #8]
 800586a:	68b9      	ldr	r1, [r7, #8]
 800586c:	68f8      	ldr	r0, [r7, #12]
 800586e:	f000 f912 	bl	8005a96 <HAL_SPI_TransmitReceive>
 8005872:	4603      	mov	r3, r0
 8005874:	e10b      	b.n	8005a8e <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005876:	f7fc f975 	bl	8001b64 <HAL_GetTick>
 800587a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d002      	beq.n	8005888 <HAL_SPI_Receive+0x62>
 8005882:	88fb      	ldrh	r3, [r7, #6]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d101      	bne.n	800588c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e100      	b.n	8005a8e <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005892:	2b01      	cmp	r3, #1
 8005894:	d101      	bne.n	800589a <HAL_SPI_Receive+0x74>
 8005896:	2302      	movs	r3, #2
 8005898:	e0f9      	b.n	8005a8e <HAL_SPI_Receive+0x268>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2201      	movs	r2, #1
 800589e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2204      	movs	r2, #4
 80058a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2200      	movs	r2, #0
 80058ae:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	68ba      	ldr	r2, [r7, #8]
 80058b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	88fa      	ldrh	r2, [r7, #6]
 80058ba:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	88fa      	ldrh	r2, [r7, #6]
 80058c2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80058ec:	d908      	bls.n	8005900 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	685a      	ldr	r2, [r3, #4]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80058fc:	605a      	str	r2, [r3, #4]
 80058fe:	e007      	b.n	8005910 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	685a      	ldr	r2, [r3, #4]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800590e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005918:	d10f      	bne.n	800593a <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005928:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005938:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005944:	2b40      	cmp	r3, #64	@ 0x40
 8005946:	d007      	beq.n	8005958 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005956:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005960:	d875      	bhi.n	8005a4e <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005962:	e037      	b.n	80059d4 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	f003 0301 	and.w	r3, r3, #1
 800596e:	2b01      	cmp	r3, #1
 8005970:	d117      	bne.n	80059a2 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f103 020c 	add.w	r2, r3, #12
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800597e:	7812      	ldrb	r2, [r2, #0]
 8005980:	b2d2      	uxtb	r2, r2
 8005982:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005988:	1c5a      	adds	r2, r3, #1
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005994:	b29b      	uxth	r3, r3
 8005996:	3b01      	subs	r3, #1
 8005998:	b29a      	uxth	r2, r3
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80059a0:	e018      	b.n	80059d4 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059a2:	f7fc f8df 	bl	8001b64 <HAL_GetTick>
 80059a6:	4602      	mov	r2, r0
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	1ad3      	subs	r3, r2, r3
 80059ac:	683a      	ldr	r2, [r7, #0]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d803      	bhi.n	80059ba <HAL_SPI_Receive+0x194>
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80059b8:	d102      	bne.n	80059c0 <HAL_SPI_Receive+0x19a>
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d109      	bne.n	80059d4 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80059d0:	2303      	movs	r3, #3
 80059d2:	e05c      	b.n	8005a8e <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80059da:	b29b      	uxth	r3, r3
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d1c1      	bne.n	8005964 <HAL_SPI_Receive+0x13e>
 80059e0:	e03b      	b.n	8005a5a <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	f003 0301 	and.w	r3, r3, #1
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d115      	bne.n	8005a1c <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68da      	ldr	r2, [r3, #12]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059fa:	b292      	uxth	r2, r2
 80059fc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a02:	1c9a      	adds	r2, r3, #2
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	3b01      	subs	r3, #1
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005a1a:	e018      	b.n	8005a4e <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a1c:	f7fc f8a2 	bl	8001b64 <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	683a      	ldr	r2, [r7, #0]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d803      	bhi.n	8005a34 <HAL_SPI_Receive+0x20e>
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a32:	d102      	bne.n	8005a3a <HAL_SPI_Receive+0x214>
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d109      	bne.n	8005a4e <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e01f      	b.n	8005a8e <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1c3      	bne.n	80059e2 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a5a:	697a      	ldr	r2, [r7, #20]
 8005a5c:	6839      	ldr	r1, [r7, #0]
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	f000 fb56 	bl	8006110 <SPI_EndRxTransaction>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d002      	beq.n	8005a70 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2220      	movs	r2, #32
 8005a6e:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d001      	beq.n	8005a8c <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e000      	b.n	8005a8e <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
  }
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3718      	adds	r7, #24
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005a96:	b580      	push	{r7, lr}
 8005a98:	b08a      	sub	sp, #40	@ 0x28
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	60f8      	str	r0, [r7, #12]
 8005a9e:	60b9      	str	r1, [r7, #8]
 8005aa0:	607a      	str	r2, [r7, #4]
 8005aa2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005aa8:	f7fc f85c 	bl	8001b64 <HAL_GetTick>
 8005aac:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005ab4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005abc:	887b      	ldrh	r3, [r7, #2]
 8005abe:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8005ac0:	887b      	ldrh	r3, [r7, #2]
 8005ac2:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005ac4:	7ffb      	ldrb	r3, [r7, #31]
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d00c      	beq.n	8005ae4 <HAL_SPI_TransmitReceive+0x4e>
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ad0:	d106      	bne.n	8005ae0 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d102      	bne.n	8005ae0 <HAL_SPI_TransmitReceive+0x4a>
 8005ada:	7ffb      	ldrb	r3, [r7, #31]
 8005adc:	2b04      	cmp	r3, #4
 8005ade:	d001      	beq.n	8005ae4 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005ae0:	2302      	movs	r3, #2
 8005ae2:	e1f3      	b.n	8005ecc <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d005      	beq.n	8005af6 <HAL_SPI_TransmitReceive+0x60>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d002      	beq.n	8005af6 <HAL_SPI_TransmitReceive+0x60>
 8005af0:	887b      	ldrh	r3, [r7, #2]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d101      	bne.n	8005afa <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e1e8      	b.n	8005ecc <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d101      	bne.n	8005b08 <HAL_SPI_TransmitReceive+0x72>
 8005b04:	2302      	movs	r3, #2
 8005b06:	e1e1      	b.n	8005ecc <HAL_SPI_TransmitReceive+0x436>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	2b04      	cmp	r3, #4
 8005b1a:	d003      	beq.n	8005b24 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2205      	movs	r2, #5
 8005b20:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2200      	movs	r2, #0
 8005b28:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	887a      	ldrh	r2, [r7, #2]
 8005b34:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	887a      	ldrh	r2, [r7, #2]
 8005b3c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	68ba      	ldr	r2, [r7, #8]
 8005b44:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	887a      	ldrh	r2, [r7, #2]
 8005b4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	887a      	ldrh	r2, [r7, #2]
 8005b50:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005b66:	d802      	bhi.n	8005b6e <HAL_SPI_TransmitReceive+0xd8>
 8005b68:	8abb      	ldrh	r3, [r7, #20]
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d908      	bls.n	8005b80 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	685a      	ldr	r2, [r3, #4]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005b7c:	605a      	str	r2, [r3, #4]
 8005b7e:	e007      	b.n	8005b90 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	685a      	ldr	r2, [r3, #4]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005b8e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b9a:	2b40      	cmp	r3, #64	@ 0x40
 8005b9c:	d007      	beq.n	8005bae <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005bac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005bb6:	f240 8083 	bls.w	8005cc0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d002      	beq.n	8005bc8 <HAL_SPI_TransmitReceive+0x132>
 8005bc2:	8afb      	ldrh	r3, [r7, #22]
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d16f      	bne.n	8005ca8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bcc:	881a      	ldrh	r2, [r3, #0]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bd8:	1c9a      	adds	r2, r3, #2
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	3b01      	subs	r3, #1
 8005be6:	b29a      	uxth	r2, r3
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bec:	e05c      	b.n	8005ca8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	f003 0302 	and.w	r3, r3, #2
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d11b      	bne.n	8005c34 <HAL_SPI_TransmitReceive+0x19e>
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d016      	beq.n	8005c34 <HAL_SPI_TransmitReceive+0x19e>
 8005c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d113      	bne.n	8005c34 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c10:	881a      	ldrh	r2, [r3, #0]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c1c:	1c9a      	adds	r2, r3, #2
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c30:	2300      	movs	r3, #0
 8005c32:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	f003 0301 	and.w	r3, r3, #1
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d11c      	bne.n	8005c7c <HAL_SPI_TransmitReceive+0x1e6>
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d016      	beq.n	8005c7c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68da      	ldr	r2, [r3, #12]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c58:	b292      	uxth	r2, r2
 8005c5a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c60:	1c9a      	adds	r2, r3, #2
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	3b01      	subs	r3, #1
 8005c70:	b29a      	uxth	r2, r3
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005c7c:	f7fb ff72 	bl	8001b64 <HAL_GetTick>
 8005c80:	4602      	mov	r2, r0
 8005c82:	6a3b      	ldr	r3, [r7, #32]
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d80d      	bhi.n	8005ca8 <HAL_SPI_TransmitReceive+0x212>
 8005c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c92:	d009      	beq.n	8005ca8 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005ca4:	2303      	movs	r3, #3
 8005ca6:	e111      	b.n	8005ecc <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d19d      	bne.n	8005bee <HAL_SPI_TransmitReceive+0x158>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d197      	bne.n	8005bee <HAL_SPI_TransmitReceive+0x158>
 8005cbe:	e0e5      	b.n	8005e8c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d003      	beq.n	8005cd0 <HAL_SPI_TransmitReceive+0x23a>
 8005cc8:	8afb      	ldrh	r3, [r7, #22]
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	f040 80d1 	bne.w	8005e72 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d912      	bls.n	8005d00 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cde:	881a      	ldrh	r2, [r3, #0]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cea:	1c9a      	adds	r2, r3, #2
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	3b02      	subs	r3, #2
 8005cf8:	b29a      	uxth	r2, r3
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005cfe:	e0b8      	b.n	8005e72 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	330c      	adds	r3, #12
 8005d0a:	7812      	ldrb	r2, [r2, #0]
 8005d0c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d12:	1c5a      	adds	r2, r3, #1
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	3b01      	subs	r3, #1
 8005d20:	b29a      	uxth	r2, r3
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d26:	e0a4      	b.n	8005e72 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	f003 0302 	and.w	r3, r3, #2
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	d134      	bne.n	8005da0 <HAL_SPI_TransmitReceive+0x30a>
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d02f      	beq.n	8005da0 <HAL_SPI_TransmitReceive+0x30a>
 8005d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d12c      	bne.n	8005da0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d912      	bls.n	8005d76 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d54:	881a      	ldrh	r2, [r3, #0]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d60:	1c9a      	adds	r2, r3, #2
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	3b02      	subs	r3, #2
 8005d6e:	b29a      	uxth	r2, r3
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005d74:	e012      	b.n	8005d9c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	330c      	adds	r3, #12
 8005d80:	7812      	ldrb	r2, [r2, #0]
 8005d82:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d88:	1c5a      	adds	r2, r3, #1
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	3b01      	subs	r3, #1
 8005d96:	b29a      	uxth	r2, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d148      	bne.n	8005e40 <HAL_SPI_TransmitReceive+0x3aa>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d042      	beq.n	8005e40 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d923      	bls.n	8005e0e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68da      	ldr	r2, [r3, #12]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd0:	b292      	uxth	r2, r2
 8005dd2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd8:	1c9a      	adds	r2, r3, #2
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	3b02      	subs	r3, #2
 8005de8:	b29a      	uxth	r2, r3
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d81f      	bhi.n	8005e3c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	685a      	ldr	r2, [r3, #4]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005e0a:	605a      	str	r2, [r3, #4]
 8005e0c:	e016      	b.n	8005e3c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f103 020c 	add.w	r2, r3, #12
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e1a:	7812      	ldrb	r2, [r2, #0]
 8005e1c:	b2d2      	uxtb	r2, r2
 8005e1e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e24:	1c5a      	adds	r2, r3, #1
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	3b01      	subs	r3, #1
 8005e34:	b29a      	uxth	r2, r3
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005e40:	f7fb fe90 	bl	8001b64 <HAL_GetTick>
 8005e44:	4602      	mov	r2, r0
 8005e46:	6a3b      	ldr	r3, [r7, #32]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d803      	bhi.n	8005e58 <HAL_SPI_TransmitReceive+0x3c2>
 8005e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e52:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e56:	d102      	bne.n	8005e5e <HAL_SPI_TransmitReceive+0x3c8>
 8005e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d109      	bne.n	8005e72 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2201      	movs	r2, #1
 8005e62:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e02c      	b.n	8005ecc <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f47f af55 	bne.w	8005d28 <HAL_SPI_TransmitReceive+0x292>
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	f47f af4e 	bne.w	8005d28 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e8c:	6a3a      	ldr	r2, [r7, #32]
 8005e8e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005e90:	68f8      	ldr	r0, [r7, #12]
 8005e92:	f000 f995 	bl	80061c0 <SPI_EndRxTxTransaction>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d008      	beq.n	8005eae <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2220      	movs	r2, #32
 8005ea0:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e00e      	b.n	8005ecc <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d001      	beq.n	8005eca <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e000      	b.n	8005ecc <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8005eca:	2300      	movs	r3, #0
  }
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3728      	adds	r7, #40	@ 0x28
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b088      	sub	sp, #32
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	603b      	str	r3, [r7, #0]
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005ee4:	f7fb fe3e 	bl	8001b64 <HAL_GetTick>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eec:	1a9b      	subs	r3, r3, r2
 8005eee:	683a      	ldr	r2, [r7, #0]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005ef4:	f7fb fe36 	bl	8001b64 <HAL_GetTick>
 8005ef8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005efa:	4b39      	ldr	r3, [pc, #228]	@ (8005fe0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	015b      	lsls	r3, r3, #5
 8005f00:	0d1b      	lsrs	r3, r3, #20
 8005f02:	69fa      	ldr	r2, [r7, #28]
 8005f04:	fb02 f303 	mul.w	r3, r2, r3
 8005f08:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f0a:	e054      	b.n	8005fb6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f12:	d050      	beq.n	8005fb6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f14:	f7fb fe26 	bl	8001b64 <HAL_GetTick>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	69fa      	ldr	r2, [r7, #28]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d902      	bls.n	8005f2a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d13d      	bne.n	8005fa6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	685a      	ldr	r2, [r3, #4]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005f38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f42:	d111      	bne.n	8005f68 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f4c:	d004      	beq.n	8005f58 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f56:	d107      	bne.n	8005f68 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f66:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f70:	d10f      	bne.n	8005f92 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005f80:	601a      	str	r2, [r3, #0]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005f90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2201      	movs	r2, #1
 8005f96:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e017      	b.n	8005fd6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d101      	bne.n	8005fb0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005fac:	2300      	movs	r3, #0
 8005fae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	3b01      	subs	r3, #1
 8005fb4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	689a      	ldr	r2, [r3, #8]
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	68ba      	ldr	r2, [r7, #8]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	bf0c      	ite	eq
 8005fc6:	2301      	moveq	r3, #1
 8005fc8:	2300      	movne	r3, #0
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	461a      	mov	r2, r3
 8005fce:	79fb      	ldrb	r3, [r7, #7]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d19b      	bne.n	8005f0c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3720      	adds	r7, #32
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	20000004 	.word	0x20000004

08005fe4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b08a      	sub	sp, #40	@ 0x28
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	607a      	str	r2, [r7, #4]
 8005ff0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005ff6:	f7fb fdb5 	bl	8001b64 <HAL_GetTick>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ffe:	1a9b      	subs	r3, r3, r2
 8006000:	683a      	ldr	r2, [r7, #0]
 8006002:	4413      	add	r3, r2
 8006004:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006006:	f7fb fdad 	bl	8001b64 <HAL_GetTick>
 800600a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	330c      	adds	r3, #12
 8006012:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006014:	4b3d      	ldr	r3, [pc, #244]	@ (800610c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	4613      	mov	r3, r2
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	4413      	add	r3, r2
 800601e:	00da      	lsls	r2, r3, #3
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	0d1b      	lsrs	r3, r3, #20
 8006024:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006026:	fb02 f303 	mul.w	r3, r2, r3
 800602a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800602c:	e060      	b.n	80060f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006034:	d107      	bne.n	8006046 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d104      	bne.n	8006046 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	b2db      	uxtb	r3, r3
 8006042:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006044:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800604c:	d050      	beq.n	80060f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800604e:	f7fb fd89 	bl	8001b64 <HAL_GetTick>
 8006052:	4602      	mov	r2, r0
 8006054:	6a3b      	ldr	r3, [r7, #32]
 8006056:	1ad3      	subs	r3, r2, r3
 8006058:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800605a:	429a      	cmp	r2, r3
 800605c:	d902      	bls.n	8006064 <SPI_WaitFifoStateUntilTimeout+0x80>
 800605e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006060:	2b00      	cmp	r3, #0
 8006062:	d13d      	bne.n	80060e0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	685a      	ldr	r2, [r3, #4]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006072:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800607c:	d111      	bne.n	80060a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006086:	d004      	beq.n	8006092 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006090:	d107      	bne.n	80060a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060a0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060aa:	d10f      	bne.n	80060cc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80060ba:	601a      	str	r2, [r3, #0]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80060ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80060dc:	2303      	movs	r3, #3
 80060de:	e010      	b.n	8006102 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d101      	bne.n	80060ea <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80060e6:	2300      	movs	r3, #0
 80060e8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	3b01      	subs	r3, #1
 80060ee:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	689a      	ldr	r2, [r3, #8]
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	4013      	ands	r3, r2
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d196      	bne.n	800602e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	3728      	adds	r7, #40	@ 0x28
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	20000004 	.word	0x20000004

08006110 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b086      	sub	sp, #24
 8006114:	af02      	add	r7, sp, #8
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006124:	d111      	bne.n	800614a <SPI_EndRxTransaction+0x3a>
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800612e:	d004      	beq.n	800613a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006138:	d107      	bne.n	800614a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006148:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	9300      	str	r3, [sp, #0]
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	2200      	movs	r2, #0
 8006152:	2180      	movs	r1, #128	@ 0x80
 8006154:	68f8      	ldr	r0, [r7, #12]
 8006156:	f7ff febd 	bl	8005ed4 <SPI_WaitFlagStateUntilTimeout>
 800615a:	4603      	mov	r3, r0
 800615c:	2b00      	cmp	r3, #0
 800615e:	d007      	beq.n	8006170 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006164:	f043 0220 	orr.w	r2, r3, #32
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800616c:	2303      	movs	r3, #3
 800616e:	e023      	b.n	80061b8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006178:	d11d      	bne.n	80061b6 <SPI_EndRxTransaction+0xa6>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006182:	d004      	beq.n	800618e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800618c:	d113      	bne.n	80061b6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	9300      	str	r3, [sp, #0]
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	2200      	movs	r2, #0
 8006196:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f7ff ff22 	bl	8005fe4 <SPI_WaitFifoStateUntilTimeout>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d007      	beq.n	80061b6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061aa:	f043 0220 	orr.w	r2, r3, #32
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80061b2:	2303      	movs	r3, #3
 80061b4:	e000      	b.n	80061b8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80061b6:	2300      	movs	r3, #0
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3710      	adds	r7, #16
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b086      	sub	sp, #24
 80061c4:	af02      	add	r7, sp, #8
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	9300      	str	r3, [sp, #0]
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80061d8:	68f8      	ldr	r0, [r7, #12]
 80061da:	f7ff ff03 	bl	8005fe4 <SPI_WaitFifoStateUntilTimeout>
 80061de:	4603      	mov	r3, r0
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d007      	beq.n	80061f4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061e8:	f043 0220 	orr.w	r2, r3, #32
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80061f0:	2303      	movs	r3, #3
 80061f2:	e027      	b.n	8006244 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	9300      	str	r3, [sp, #0]
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	2200      	movs	r2, #0
 80061fc:	2180      	movs	r1, #128	@ 0x80
 80061fe:	68f8      	ldr	r0, [r7, #12]
 8006200:	f7ff fe68 	bl	8005ed4 <SPI_WaitFlagStateUntilTimeout>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	d007      	beq.n	800621a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800620e:	f043 0220 	orr.w	r2, r3, #32
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006216:	2303      	movs	r3, #3
 8006218:	e014      	b.n	8006244 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	9300      	str	r3, [sp, #0]
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	2200      	movs	r2, #0
 8006222:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	f7ff fedc 	bl	8005fe4 <SPI_WaitFifoStateUntilTimeout>
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d007      	beq.n	8006242 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006236:	f043 0220 	orr.w	r2, r3, #32
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800623e:	2303      	movs	r3, #3
 8006240:	e000      	b.n	8006244 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3710      	adds	r7, #16
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <__cvt>:
 800624c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006250:	ec57 6b10 	vmov	r6, r7, d0
 8006254:	2f00      	cmp	r7, #0
 8006256:	460c      	mov	r4, r1
 8006258:	4619      	mov	r1, r3
 800625a:	463b      	mov	r3, r7
 800625c:	bfbb      	ittet	lt
 800625e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006262:	461f      	movlt	r7, r3
 8006264:	2300      	movge	r3, #0
 8006266:	232d      	movlt	r3, #45	@ 0x2d
 8006268:	700b      	strb	r3, [r1, #0]
 800626a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800626c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006270:	4691      	mov	r9, r2
 8006272:	f023 0820 	bic.w	r8, r3, #32
 8006276:	bfbc      	itt	lt
 8006278:	4632      	movlt	r2, r6
 800627a:	4616      	movlt	r6, r2
 800627c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006280:	d005      	beq.n	800628e <__cvt+0x42>
 8006282:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006286:	d100      	bne.n	800628a <__cvt+0x3e>
 8006288:	3401      	adds	r4, #1
 800628a:	2102      	movs	r1, #2
 800628c:	e000      	b.n	8006290 <__cvt+0x44>
 800628e:	2103      	movs	r1, #3
 8006290:	ab03      	add	r3, sp, #12
 8006292:	9301      	str	r3, [sp, #4]
 8006294:	ab02      	add	r3, sp, #8
 8006296:	9300      	str	r3, [sp, #0]
 8006298:	ec47 6b10 	vmov	d0, r6, r7
 800629c:	4653      	mov	r3, sl
 800629e:	4622      	mov	r2, r4
 80062a0:	f000 fdd2 	bl	8006e48 <_dtoa_r>
 80062a4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80062a8:	4605      	mov	r5, r0
 80062aa:	d119      	bne.n	80062e0 <__cvt+0x94>
 80062ac:	f019 0f01 	tst.w	r9, #1
 80062b0:	d00e      	beq.n	80062d0 <__cvt+0x84>
 80062b2:	eb00 0904 	add.w	r9, r0, r4
 80062b6:	2200      	movs	r2, #0
 80062b8:	2300      	movs	r3, #0
 80062ba:	4630      	mov	r0, r6
 80062bc:	4639      	mov	r1, r7
 80062be:	f7fa fc03 	bl	8000ac8 <__aeabi_dcmpeq>
 80062c2:	b108      	cbz	r0, 80062c8 <__cvt+0x7c>
 80062c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80062c8:	2230      	movs	r2, #48	@ 0x30
 80062ca:	9b03      	ldr	r3, [sp, #12]
 80062cc:	454b      	cmp	r3, r9
 80062ce:	d31e      	bcc.n	800630e <__cvt+0xc2>
 80062d0:	9b03      	ldr	r3, [sp, #12]
 80062d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80062d4:	1b5b      	subs	r3, r3, r5
 80062d6:	4628      	mov	r0, r5
 80062d8:	6013      	str	r3, [r2, #0]
 80062da:	b004      	add	sp, #16
 80062dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062e0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80062e4:	eb00 0904 	add.w	r9, r0, r4
 80062e8:	d1e5      	bne.n	80062b6 <__cvt+0x6a>
 80062ea:	7803      	ldrb	r3, [r0, #0]
 80062ec:	2b30      	cmp	r3, #48	@ 0x30
 80062ee:	d10a      	bne.n	8006306 <__cvt+0xba>
 80062f0:	2200      	movs	r2, #0
 80062f2:	2300      	movs	r3, #0
 80062f4:	4630      	mov	r0, r6
 80062f6:	4639      	mov	r1, r7
 80062f8:	f7fa fbe6 	bl	8000ac8 <__aeabi_dcmpeq>
 80062fc:	b918      	cbnz	r0, 8006306 <__cvt+0xba>
 80062fe:	f1c4 0401 	rsb	r4, r4, #1
 8006302:	f8ca 4000 	str.w	r4, [sl]
 8006306:	f8da 3000 	ldr.w	r3, [sl]
 800630a:	4499      	add	r9, r3
 800630c:	e7d3      	b.n	80062b6 <__cvt+0x6a>
 800630e:	1c59      	adds	r1, r3, #1
 8006310:	9103      	str	r1, [sp, #12]
 8006312:	701a      	strb	r2, [r3, #0]
 8006314:	e7d9      	b.n	80062ca <__cvt+0x7e>

08006316 <__exponent>:
 8006316:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006318:	2900      	cmp	r1, #0
 800631a:	bfba      	itte	lt
 800631c:	4249      	neglt	r1, r1
 800631e:	232d      	movlt	r3, #45	@ 0x2d
 8006320:	232b      	movge	r3, #43	@ 0x2b
 8006322:	2909      	cmp	r1, #9
 8006324:	7002      	strb	r2, [r0, #0]
 8006326:	7043      	strb	r3, [r0, #1]
 8006328:	dd29      	ble.n	800637e <__exponent+0x68>
 800632a:	f10d 0307 	add.w	r3, sp, #7
 800632e:	461d      	mov	r5, r3
 8006330:	270a      	movs	r7, #10
 8006332:	461a      	mov	r2, r3
 8006334:	fbb1 f6f7 	udiv	r6, r1, r7
 8006338:	fb07 1416 	mls	r4, r7, r6, r1
 800633c:	3430      	adds	r4, #48	@ 0x30
 800633e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006342:	460c      	mov	r4, r1
 8006344:	2c63      	cmp	r4, #99	@ 0x63
 8006346:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800634a:	4631      	mov	r1, r6
 800634c:	dcf1      	bgt.n	8006332 <__exponent+0x1c>
 800634e:	3130      	adds	r1, #48	@ 0x30
 8006350:	1e94      	subs	r4, r2, #2
 8006352:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006356:	1c41      	adds	r1, r0, #1
 8006358:	4623      	mov	r3, r4
 800635a:	42ab      	cmp	r3, r5
 800635c:	d30a      	bcc.n	8006374 <__exponent+0x5e>
 800635e:	f10d 0309 	add.w	r3, sp, #9
 8006362:	1a9b      	subs	r3, r3, r2
 8006364:	42ac      	cmp	r4, r5
 8006366:	bf88      	it	hi
 8006368:	2300      	movhi	r3, #0
 800636a:	3302      	adds	r3, #2
 800636c:	4403      	add	r3, r0
 800636e:	1a18      	subs	r0, r3, r0
 8006370:	b003      	add	sp, #12
 8006372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006374:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006378:	f801 6f01 	strb.w	r6, [r1, #1]!
 800637c:	e7ed      	b.n	800635a <__exponent+0x44>
 800637e:	2330      	movs	r3, #48	@ 0x30
 8006380:	3130      	adds	r1, #48	@ 0x30
 8006382:	7083      	strb	r3, [r0, #2]
 8006384:	70c1      	strb	r1, [r0, #3]
 8006386:	1d03      	adds	r3, r0, #4
 8006388:	e7f1      	b.n	800636e <__exponent+0x58>
	...

0800638c <_printf_float>:
 800638c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006390:	b08d      	sub	sp, #52	@ 0x34
 8006392:	460c      	mov	r4, r1
 8006394:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006398:	4616      	mov	r6, r2
 800639a:	461f      	mov	r7, r3
 800639c:	4605      	mov	r5, r0
 800639e:	f000 fcc5 	bl	8006d2c <_localeconv_r>
 80063a2:	6803      	ldr	r3, [r0, #0]
 80063a4:	9304      	str	r3, [sp, #16]
 80063a6:	4618      	mov	r0, r3
 80063a8:	f7f9 ff62 	bl	8000270 <strlen>
 80063ac:	2300      	movs	r3, #0
 80063ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80063b0:	f8d8 3000 	ldr.w	r3, [r8]
 80063b4:	9005      	str	r0, [sp, #20]
 80063b6:	3307      	adds	r3, #7
 80063b8:	f023 0307 	bic.w	r3, r3, #7
 80063bc:	f103 0208 	add.w	r2, r3, #8
 80063c0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80063c4:	f8d4 b000 	ldr.w	fp, [r4]
 80063c8:	f8c8 2000 	str.w	r2, [r8]
 80063cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80063d0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80063d4:	9307      	str	r3, [sp, #28]
 80063d6:	f8cd 8018 	str.w	r8, [sp, #24]
 80063da:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80063de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80063e2:	4b9c      	ldr	r3, [pc, #624]	@ (8006654 <_printf_float+0x2c8>)
 80063e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80063e8:	f7fa fba0 	bl	8000b2c <__aeabi_dcmpun>
 80063ec:	bb70      	cbnz	r0, 800644c <_printf_float+0xc0>
 80063ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80063f2:	4b98      	ldr	r3, [pc, #608]	@ (8006654 <_printf_float+0x2c8>)
 80063f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80063f8:	f7fa fb7a 	bl	8000af0 <__aeabi_dcmple>
 80063fc:	bb30      	cbnz	r0, 800644c <_printf_float+0xc0>
 80063fe:	2200      	movs	r2, #0
 8006400:	2300      	movs	r3, #0
 8006402:	4640      	mov	r0, r8
 8006404:	4649      	mov	r1, r9
 8006406:	f7fa fb69 	bl	8000adc <__aeabi_dcmplt>
 800640a:	b110      	cbz	r0, 8006412 <_printf_float+0x86>
 800640c:	232d      	movs	r3, #45	@ 0x2d
 800640e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006412:	4a91      	ldr	r2, [pc, #580]	@ (8006658 <_printf_float+0x2cc>)
 8006414:	4b91      	ldr	r3, [pc, #580]	@ (800665c <_printf_float+0x2d0>)
 8006416:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800641a:	bf8c      	ite	hi
 800641c:	4690      	movhi	r8, r2
 800641e:	4698      	movls	r8, r3
 8006420:	2303      	movs	r3, #3
 8006422:	6123      	str	r3, [r4, #16]
 8006424:	f02b 0304 	bic.w	r3, fp, #4
 8006428:	6023      	str	r3, [r4, #0]
 800642a:	f04f 0900 	mov.w	r9, #0
 800642e:	9700      	str	r7, [sp, #0]
 8006430:	4633      	mov	r3, r6
 8006432:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006434:	4621      	mov	r1, r4
 8006436:	4628      	mov	r0, r5
 8006438:	f000 f9d2 	bl	80067e0 <_printf_common>
 800643c:	3001      	adds	r0, #1
 800643e:	f040 808d 	bne.w	800655c <_printf_float+0x1d0>
 8006442:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006446:	b00d      	add	sp, #52	@ 0x34
 8006448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800644c:	4642      	mov	r2, r8
 800644e:	464b      	mov	r3, r9
 8006450:	4640      	mov	r0, r8
 8006452:	4649      	mov	r1, r9
 8006454:	f7fa fb6a 	bl	8000b2c <__aeabi_dcmpun>
 8006458:	b140      	cbz	r0, 800646c <_printf_float+0xe0>
 800645a:	464b      	mov	r3, r9
 800645c:	2b00      	cmp	r3, #0
 800645e:	bfbc      	itt	lt
 8006460:	232d      	movlt	r3, #45	@ 0x2d
 8006462:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006466:	4a7e      	ldr	r2, [pc, #504]	@ (8006660 <_printf_float+0x2d4>)
 8006468:	4b7e      	ldr	r3, [pc, #504]	@ (8006664 <_printf_float+0x2d8>)
 800646a:	e7d4      	b.n	8006416 <_printf_float+0x8a>
 800646c:	6863      	ldr	r3, [r4, #4]
 800646e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006472:	9206      	str	r2, [sp, #24]
 8006474:	1c5a      	adds	r2, r3, #1
 8006476:	d13b      	bne.n	80064f0 <_printf_float+0x164>
 8006478:	2306      	movs	r3, #6
 800647a:	6063      	str	r3, [r4, #4]
 800647c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006480:	2300      	movs	r3, #0
 8006482:	6022      	str	r2, [r4, #0]
 8006484:	9303      	str	r3, [sp, #12]
 8006486:	ab0a      	add	r3, sp, #40	@ 0x28
 8006488:	e9cd a301 	strd	sl, r3, [sp, #4]
 800648c:	ab09      	add	r3, sp, #36	@ 0x24
 800648e:	9300      	str	r3, [sp, #0]
 8006490:	6861      	ldr	r1, [r4, #4]
 8006492:	ec49 8b10 	vmov	d0, r8, r9
 8006496:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800649a:	4628      	mov	r0, r5
 800649c:	f7ff fed6 	bl	800624c <__cvt>
 80064a0:	9b06      	ldr	r3, [sp, #24]
 80064a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80064a4:	2b47      	cmp	r3, #71	@ 0x47
 80064a6:	4680      	mov	r8, r0
 80064a8:	d129      	bne.n	80064fe <_printf_float+0x172>
 80064aa:	1cc8      	adds	r0, r1, #3
 80064ac:	db02      	blt.n	80064b4 <_printf_float+0x128>
 80064ae:	6863      	ldr	r3, [r4, #4]
 80064b0:	4299      	cmp	r1, r3
 80064b2:	dd41      	ble.n	8006538 <_printf_float+0x1ac>
 80064b4:	f1aa 0a02 	sub.w	sl, sl, #2
 80064b8:	fa5f fa8a 	uxtb.w	sl, sl
 80064bc:	3901      	subs	r1, #1
 80064be:	4652      	mov	r2, sl
 80064c0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80064c4:	9109      	str	r1, [sp, #36]	@ 0x24
 80064c6:	f7ff ff26 	bl	8006316 <__exponent>
 80064ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80064cc:	1813      	adds	r3, r2, r0
 80064ce:	2a01      	cmp	r2, #1
 80064d0:	4681      	mov	r9, r0
 80064d2:	6123      	str	r3, [r4, #16]
 80064d4:	dc02      	bgt.n	80064dc <_printf_float+0x150>
 80064d6:	6822      	ldr	r2, [r4, #0]
 80064d8:	07d2      	lsls	r2, r2, #31
 80064da:	d501      	bpl.n	80064e0 <_printf_float+0x154>
 80064dc:	3301      	adds	r3, #1
 80064de:	6123      	str	r3, [r4, #16]
 80064e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d0a2      	beq.n	800642e <_printf_float+0xa2>
 80064e8:	232d      	movs	r3, #45	@ 0x2d
 80064ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064ee:	e79e      	b.n	800642e <_printf_float+0xa2>
 80064f0:	9a06      	ldr	r2, [sp, #24]
 80064f2:	2a47      	cmp	r2, #71	@ 0x47
 80064f4:	d1c2      	bne.n	800647c <_printf_float+0xf0>
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d1c0      	bne.n	800647c <_printf_float+0xf0>
 80064fa:	2301      	movs	r3, #1
 80064fc:	e7bd      	b.n	800647a <_printf_float+0xee>
 80064fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006502:	d9db      	bls.n	80064bc <_printf_float+0x130>
 8006504:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006508:	d118      	bne.n	800653c <_printf_float+0x1b0>
 800650a:	2900      	cmp	r1, #0
 800650c:	6863      	ldr	r3, [r4, #4]
 800650e:	dd0b      	ble.n	8006528 <_printf_float+0x19c>
 8006510:	6121      	str	r1, [r4, #16]
 8006512:	b913      	cbnz	r3, 800651a <_printf_float+0x18e>
 8006514:	6822      	ldr	r2, [r4, #0]
 8006516:	07d0      	lsls	r0, r2, #31
 8006518:	d502      	bpl.n	8006520 <_printf_float+0x194>
 800651a:	3301      	adds	r3, #1
 800651c:	440b      	add	r3, r1
 800651e:	6123      	str	r3, [r4, #16]
 8006520:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006522:	f04f 0900 	mov.w	r9, #0
 8006526:	e7db      	b.n	80064e0 <_printf_float+0x154>
 8006528:	b913      	cbnz	r3, 8006530 <_printf_float+0x1a4>
 800652a:	6822      	ldr	r2, [r4, #0]
 800652c:	07d2      	lsls	r2, r2, #31
 800652e:	d501      	bpl.n	8006534 <_printf_float+0x1a8>
 8006530:	3302      	adds	r3, #2
 8006532:	e7f4      	b.n	800651e <_printf_float+0x192>
 8006534:	2301      	movs	r3, #1
 8006536:	e7f2      	b.n	800651e <_printf_float+0x192>
 8006538:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800653c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800653e:	4299      	cmp	r1, r3
 8006540:	db05      	blt.n	800654e <_printf_float+0x1c2>
 8006542:	6823      	ldr	r3, [r4, #0]
 8006544:	6121      	str	r1, [r4, #16]
 8006546:	07d8      	lsls	r0, r3, #31
 8006548:	d5ea      	bpl.n	8006520 <_printf_float+0x194>
 800654a:	1c4b      	adds	r3, r1, #1
 800654c:	e7e7      	b.n	800651e <_printf_float+0x192>
 800654e:	2900      	cmp	r1, #0
 8006550:	bfd4      	ite	le
 8006552:	f1c1 0202 	rsble	r2, r1, #2
 8006556:	2201      	movgt	r2, #1
 8006558:	4413      	add	r3, r2
 800655a:	e7e0      	b.n	800651e <_printf_float+0x192>
 800655c:	6823      	ldr	r3, [r4, #0]
 800655e:	055a      	lsls	r2, r3, #21
 8006560:	d407      	bmi.n	8006572 <_printf_float+0x1e6>
 8006562:	6923      	ldr	r3, [r4, #16]
 8006564:	4642      	mov	r2, r8
 8006566:	4631      	mov	r1, r6
 8006568:	4628      	mov	r0, r5
 800656a:	47b8      	blx	r7
 800656c:	3001      	adds	r0, #1
 800656e:	d12b      	bne.n	80065c8 <_printf_float+0x23c>
 8006570:	e767      	b.n	8006442 <_printf_float+0xb6>
 8006572:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006576:	f240 80dd 	bls.w	8006734 <_printf_float+0x3a8>
 800657a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800657e:	2200      	movs	r2, #0
 8006580:	2300      	movs	r3, #0
 8006582:	f7fa faa1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006586:	2800      	cmp	r0, #0
 8006588:	d033      	beq.n	80065f2 <_printf_float+0x266>
 800658a:	4a37      	ldr	r2, [pc, #220]	@ (8006668 <_printf_float+0x2dc>)
 800658c:	2301      	movs	r3, #1
 800658e:	4631      	mov	r1, r6
 8006590:	4628      	mov	r0, r5
 8006592:	47b8      	blx	r7
 8006594:	3001      	adds	r0, #1
 8006596:	f43f af54 	beq.w	8006442 <_printf_float+0xb6>
 800659a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800659e:	4543      	cmp	r3, r8
 80065a0:	db02      	blt.n	80065a8 <_printf_float+0x21c>
 80065a2:	6823      	ldr	r3, [r4, #0]
 80065a4:	07d8      	lsls	r0, r3, #31
 80065a6:	d50f      	bpl.n	80065c8 <_printf_float+0x23c>
 80065a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065ac:	4631      	mov	r1, r6
 80065ae:	4628      	mov	r0, r5
 80065b0:	47b8      	blx	r7
 80065b2:	3001      	adds	r0, #1
 80065b4:	f43f af45 	beq.w	8006442 <_printf_float+0xb6>
 80065b8:	f04f 0900 	mov.w	r9, #0
 80065bc:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80065c0:	f104 0a1a 	add.w	sl, r4, #26
 80065c4:	45c8      	cmp	r8, r9
 80065c6:	dc09      	bgt.n	80065dc <_printf_float+0x250>
 80065c8:	6823      	ldr	r3, [r4, #0]
 80065ca:	079b      	lsls	r3, r3, #30
 80065cc:	f100 8103 	bmi.w	80067d6 <_printf_float+0x44a>
 80065d0:	68e0      	ldr	r0, [r4, #12]
 80065d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80065d4:	4298      	cmp	r0, r3
 80065d6:	bfb8      	it	lt
 80065d8:	4618      	movlt	r0, r3
 80065da:	e734      	b.n	8006446 <_printf_float+0xba>
 80065dc:	2301      	movs	r3, #1
 80065de:	4652      	mov	r2, sl
 80065e0:	4631      	mov	r1, r6
 80065e2:	4628      	mov	r0, r5
 80065e4:	47b8      	blx	r7
 80065e6:	3001      	adds	r0, #1
 80065e8:	f43f af2b 	beq.w	8006442 <_printf_float+0xb6>
 80065ec:	f109 0901 	add.w	r9, r9, #1
 80065f0:	e7e8      	b.n	80065c4 <_printf_float+0x238>
 80065f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	dc39      	bgt.n	800666c <_printf_float+0x2e0>
 80065f8:	4a1b      	ldr	r2, [pc, #108]	@ (8006668 <_printf_float+0x2dc>)
 80065fa:	2301      	movs	r3, #1
 80065fc:	4631      	mov	r1, r6
 80065fe:	4628      	mov	r0, r5
 8006600:	47b8      	blx	r7
 8006602:	3001      	adds	r0, #1
 8006604:	f43f af1d 	beq.w	8006442 <_printf_float+0xb6>
 8006608:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800660c:	ea59 0303 	orrs.w	r3, r9, r3
 8006610:	d102      	bne.n	8006618 <_printf_float+0x28c>
 8006612:	6823      	ldr	r3, [r4, #0]
 8006614:	07d9      	lsls	r1, r3, #31
 8006616:	d5d7      	bpl.n	80065c8 <_printf_float+0x23c>
 8006618:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800661c:	4631      	mov	r1, r6
 800661e:	4628      	mov	r0, r5
 8006620:	47b8      	blx	r7
 8006622:	3001      	adds	r0, #1
 8006624:	f43f af0d 	beq.w	8006442 <_printf_float+0xb6>
 8006628:	f04f 0a00 	mov.w	sl, #0
 800662c:	f104 0b1a 	add.w	fp, r4, #26
 8006630:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006632:	425b      	negs	r3, r3
 8006634:	4553      	cmp	r3, sl
 8006636:	dc01      	bgt.n	800663c <_printf_float+0x2b0>
 8006638:	464b      	mov	r3, r9
 800663a:	e793      	b.n	8006564 <_printf_float+0x1d8>
 800663c:	2301      	movs	r3, #1
 800663e:	465a      	mov	r2, fp
 8006640:	4631      	mov	r1, r6
 8006642:	4628      	mov	r0, r5
 8006644:	47b8      	blx	r7
 8006646:	3001      	adds	r0, #1
 8006648:	f43f aefb 	beq.w	8006442 <_printf_float+0xb6>
 800664c:	f10a 0a01 	add.w	sl, sl, #1
 8006650:	e7ee      	b.n	8006630 <_printf_float+0x2a4>
 8006652:	bf00      	nop
 8006654:	7fefffff 	.word	0x7fefffff
 8006658:	08008f90 	.word	0x08008f90
 800665c:	08008f8c 	.word	0x08008f8c
 8006660:	08008f98 	.word	0x08008f98
 8006664:	08008f94 	.word	0x08008f94
 8006668:	08008f9c 	.word	0x08008f9c
 800666c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800666e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006672:	4553      	cmp	r3, sl
 8006674:	bfa8      	it	ge
 8006676:	4653      	movge	r3, sl
 8006678:	2b00      	cmp	r3, #0
 800667a:	4699      	mov	r9, r3
 800667c:	dc36      	bgt.n	80066ec <_printf_float+0x360>
 800667e:	f04f 0b00 	mov.w	fp, #0
 8006682:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006686:	f104 021a 	add.w	r2, r4, #26
 800668a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800668c:	9306      	str	r3, [sp, #24]
 800668e:	eba3 0309 	sub.w	r3, r3, r9
 8006692:	455b      	cmp	r3, fp
 8006694:	dc31      	bgt.n	80066fa <_printf_float+0x36e>
 8006696:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006698:	459a      	cmp	sl, r3
 800669a:	dc3a      	bgt.n	8006712 <_printf_float+0x386>
 800669c:	6823      	ldr	r3, [r4, #0]
 800669e:	07da      	lsls	r2, r3, #31
 80066a0:	d437      	bmi.n	8006712 <_printf_float+0x386>
 80066a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066a4:	ebaa 0903 	sub.w	r9, sl, r3
 80066a8:	9b06      	ldr	r3, [sp, #24]
 80066aa:	ebaa 0303 	sub.w	r3, sl, r3
 80066ae:	4599      	cmp	r9, r3
 80066b0:	bfa8      	it	ge
 80066b2:	4699      	movge	r9, r3
 80066b4:	f1b9 0f00 	cmp.w	r9, #0
 80066b8:	dc33      	bgt.n	8006722 <_printf_float+0x396>
 80066ba:	f04f 0800 	mov.w	r8, #0
 80066be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066c2:	f104 0b1a 	add.w	fp, r4, #26
 80066c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066c8:	ebaa 0303 	sub.w	r3, sl, r3
 80066cc:	eba3 0309 	sub.w	r3, r3, r9
 80066d0:	4543      	cmp	r3, r8
 80066d2:	f77f af79 	ble.w	80065c8 <_printf_float+0x23c>
 80066d6:	2301      	movs	r3, #1
 80066d8:	465a      	mov	r2, fp
 80066da:	4631      	mov	r1, r6
 80066dc:	4628      	mov	r0, r5
 80066de:	47b8      	blx	r7
 80066e0:	3001      	adds	r0, #1
 80066e2:	f43f aeae 	beq.w	8006442 <_printf_float+0xb6>
 80066e6:	f108 0801 	add.w	r8, r8, #1
 80066ea:	e7ec      	b.n	80066c6 <_printf_float+0x33a>
 80066ec:	4642      	mov	r2, r8
 80066ee:	4631      	mov	r1, r6
 80066f0:	4628      	mov	r0, r5
 80066f2:	47b8      	blx	r7
 80066f4:	3001      	adds	r0, #1
 80066f6:	d1c2      	bne.n	800667e <_printf_float+0x2f2>
 80066f8:	e6a3      	b.n	8006442 <_printf_float+0xb6>
 80066fa:	2301      	movs	r3, #1
 80066fc:	4631      	mov	r1, r6
 80066fe:	4628      	mov	r0, r5
 8006700:	9206      	str	r2, [sp, #24]
 8006702:	47b8      	blx	r7
 8006704:	3001      	adds	r0, #1
 8006706:	f43f ae9c 	beq.w	8006442 <_printf_float+0xb6>
 800670a:	9a06      	ldr	r2, [sp, #24]
 800670c:	f10b 0b01 	add.w	fp, fp, #1
 8006710:	e7bb      	b.n	800668a <_printf_float+0x2fe>
 8006712:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006716:	4631      	mov	r1, r6
 8006718:	4628      	mov	r0, r5
 800671a:	47b8      	blx	r7
 800671c:	3001      	adds	r0, #1
 800671e:	d1c0      	bne.n	80066a2 <_printf_float+0x316>
 8006720:	e68f      	b.n	8006442 <_printf_float+0xb6>
 8006722:	9a06      	ldr	r2, [sp, #24]
 8006724:	464b      	mov	r3, r9
 8006726:	4442      	add	r2, r8
 8006728:	4631      	mov	r1, r6
 800672a:	4628      	mov	r0, r5
 800672c:	47b8      	blx	r7
 800672e:	3001      	adds	r0, #1
 8006730:	d1c3      	bne.n	80066ba <_printf_float+0x32e>
 8006732:	e686      	b.n	8006442 <_printf_float+0xb6>
 8006734:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006738:	f1ba 0f01 	cmp.w	sl, #1
 800673c:	dc01      	bgt.n	8006742 <_printf_float+0x3b6>
 800673e:	07db      	lsls	r3, r3, #31
 8006740:	d536      	bpl.n	80067b0 <_printf_float+0x424>
 8006742:	2301      	movs	r3, #1
 8006744:	4642      	mov	r2, r8
 8006746:	4631      	mov	r1, r6
 8006748:	4628      	mov	r0, r5
 800674a:	47b8      	blx	r7
 800674c:	3001      	adds	r0, #1
 800674e:	f43f ae78 	beq.w	8006442 <_printf_float+0xb6>
 8006752:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006756:	4631      	mov	r1, r6
 8006758:	4628      	mov	r0, r5
 800675a:	47b8      	blx	r7
 800675c:	3001      	adds	r0, #1
 800675e:	f43f ae70 	beq.w	8006442 <_printf_float+0xb6>
 8006762:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006766:	2200      	movs	r2, #0
 8006768:	2300      	movs	r3, #0
 800676a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800676e:	f7fa f9ab 	bl	8000ac8 <__aeabi_dcmpeq>
 8006772:	b9c0      	cbnz	r0, 80067a6 <_printf_float+0x41a>
 8006774:	4653      	mov	r3, sl
 8006776:	f108 0201 	add.w	r2, r8, #1
 800677a:	4631      	mov	r1, r6
 800677c:	4628      	mov	r0, r5
 800677e:	47b8      	blx	r7
 8006780:	3001      	adds	r0, #1
 8006782:	d10c      	bne.n	800679e <_printf_float+0x412>
 8006784:	e65d      	b.n	8006442 <_printf_float+0xb6>
 8006786:	2301      	movs	r3, #1
 8006788:	465a      	mov	r2, fp
 800678a:	4631      	mov	r1, r6
 800678c:	4628      	mov	r0, r5
 800678e:	47b8      	blx	r7
 8006790:	3001      	adds	r0, #1
 8006792:	f43f ae56 	beq.w	8006442 <_printf_float+0xb6>
 8006796:	f108 0801 	add.w	r8, r8, #1
 800679a:	45d0      	cmp	r8, sl
 800679c:	dbf3      	blt.n	8006786 <_printf_float+0x3fa>
 800679e:	464b      	mov	r3, r9
 80067a0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80067a4:	e6df      	b.n	8006566 <_printf_float+0x1da>
 80067a6:	f04f 0800 	mov.w	r8, #0
 80067aa:	f104 0b1a 	add.w	fp, r4, #26
 80067ae:	e7f4      	b.n	800679a <_printf_float+0x40e>
 80067b0:	2301      	movs	r3, #1
 80067b2:	4642      	mov	r2, r8
 80067b4:	e7e1      	b.n	800677a <_printf_float+0x3ee>
 80067b6:	2301      	movs	r3, #1
 80067b8:	464a      	mov	r2, r9
 80067ba:	4631      	mov	r1, r6
 80067bc:	4628      	mov	r0, r5
 80067be:	47b8      	blx	r7
 80067c0:	3001      	adds	r0, #1
 80067c2:	f43f ae3e 	beq.w	8006442 <_printf_float+0xb6>
 80067c6:	f108 0801 	add.w	r8, r8, #1
 80067ca:	68e3      	ldr	r3, [r4, #12]
 80067cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80067ce:	1a5b      	subs	r3, r3, r1
 80067d0:	4543      	cmp	r3, r8
 80067d2:	dcf0      	bgt.n	80067b6 <_printf_float+0x42a>
 80067d4:	e6fc      	b.n	80065d0 <_printf_float+0x244>
 80067d6:	f04f 0800 	mov.w	r8, #0
 80067da:	f104 0919 	add.w	r9, r4, #25
 80067de:	e7f4      	b.n	80067ca <_printf_float+0x43e>

080067e0 <_printf_common>:
 80067e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067e4:	4616      	mov	r6, r2
 80067e6:	4698      	mov	r8, r3
 80067e8:	688a      	ldr	r2, [r1, #8]
 80067ea:	690b      	ldr	r3, [r1, #16]
 80067ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80067f0:	4293      	cmp	r3, r2
 80067f2:	bfb8      	it	lt
 80067f4:	4613      	movlt	r3, r2
 80067f6:	6033      	str	r3, [r6, #0]
 80067f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80067fc:	4607      	mov	r7, r0
 80067fe:	460c      	mov	r4, r1
 8006800:	b10a      	cbz	r2, 8006806 <_printf_common+0x26>
 8006802:	3301      	adds	r3, #1
 8006804:	6033      	str	r3, [r6, #0]
 8006806:	6823      	ldr	r3, [r4, #0]
 8006808:	0699      	lsls	r1, r3, #26
 800680a:	bf42      	ittt	mi
 800680c:	6833      	ldrmi	r3, [r6, #0]
 800680e:	3302      	addmi	r3, #2
 8006810:	6033      	strmi	r3, [r6, #0]
 8006812:	6825      	ldr	r5, [r4, #0]
 8006814:	f015 0506 	ands.w	r5, r5, #6
 8006818:	d106      	bne.n	8006828 <_printf_common+0x48>
 800681a:	f104 0a19 	add.w	sl, r4, #25
 800681e:	68e3      	ldr	r3, [r4, #12]
 8006820:	6832      	ldr	r2, [r6, #0]
 8006822:	1a9b      	subs	r3, r3, r2
 8006824:	42ab      	cmp	r3, r5
 8006826:	dc26      	bgt.n	8006876 <_printf_common+0x96>
 8006828:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800682c:	6822      	ldr	r2, [r4, #0]
 800682e:	3b00      	subs	r3, #0
 8006830:	bf18      	it	ne
 8006832:	2301      	movne	r3, #1
 8006834:	0692      	lsls	r2, r2, #26
 8006836:	d42b      	bmi.n	8006890 <_printf_common+0xb0>
 8006838:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800683c:	4641      	mov	r1, r8
 800683e:	4638      	mov	r0, r7
 8006840:	47c8      	blx	r9
 8006842:	3001      	adds	r0, #1
 8006844:	d01e      	beq.n	8006884 <_printf_common+0xa4>
 8006846:	6823      	ldr	r3, [r4, #0]
 8006848:	6922      	ldr	r2, [r4, #16]
 800684a:	f003 0306 	and.w	r3, r3, #6
 800684e:	2b04      	cmp	r3, #4
 8006850:	bf02      	ittt	eq
 8006852:	68e5      	ldreq	r5, [r4, #12]
 8006854:	6833      	ldreq	r3, [r6, #0]
 8006856:	1aed      	subeq	r5, r5, r3
 8006858:	68a3      	ldr	r3, [r4, #8]
 800685a:	bf0c      	ite	eq
 800685c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006860:	2500      	movne	r5, #0
 8006862:	4293      	cmp	r3, r2
 8006864:	bfc4      	itt	gt
 8006866:	1a9b      	subgt	r3, r3, r2
 8006868:	18ed      	addgt	r5, r5, r3
 800686a:	2600      	movs	r6, #0
 800686c:	341a      	adds	r4, #26
 800686e:	42b5      	cmp	r5, r6
 8006870:	d11a      	bne.n	80068a8 <_printf_common+0xc8>
 8006872:	2000      	movs	r0, #0
 8006874:	e008      	b.n	8006888 <_printf_common+0xa8>
 8006876:	2301      	movs	r3, #1
 8006878:	4652      	mov	r2, sl
 800687a:	4641      	mov	r1, r8
 800687c:	4638      	mov	r0, r7
 800687e:	47c8      	blx	r9
 8006880:	3001      	adds	r0, #1
 8006882:	d103      	bne.n	800688c <_printf_common+0xac>
 8006884:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800688c:	3501      	adds	r5, #1
 800688e:	e7c6      	b.n	800681e <_printf_common+0x3e>
 8006890:	18e1      	adds	r1, r4, r3
 8006892:	1c5a      	adds	r2, r3, #1
 8006894:	2030      	movs	r0, #48	@ 0x30
 8006896:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800689a:	4422      	add	r2, r4
 800689c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80068a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80068a4:	3302      	adds	r3, #2
 80068a6:	e7c7      	b.n	8006838 <_printf_common+0x58>
 80068a8:	2301      	movs	r3, #1
 80068aa:	4622      	mov	r2, r4
 80068ac:	4641      	mov	r1, r8
 80068ae:	4638      	mov	r0, r7
 80068b0:	47c8      	blx	r9
 80068b2:	3001      	adds	r0, #1
 80068b4:	d0e6      	beq.n	8006884 <_printf_common+0xa4>
 80068b6:	3601      	adds	r6, #1
 80068b8:	e7d9      	b.n	800686e <_printf_common+0x8e>
	...

080068bc <_printf_i>:
 80068bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068c0:	7e0f      	ldrb	r7, [r1, #24]
 80068c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80068c4:	2f78      	cmp	r7, #120	@ 0x78
 80068c6:	4691      	mov	r9, r2
 80068c8:	4680      	mov	r8, r0
 80068ca:	460c      	mov	r4, r1
 80068cc:	469a      	mov	sl, r3
 80068ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80068d2:	d807      	bhi.n	80068e4 <_printf_i+0x28>
 80068d4:	2f62      	cmp	r7, #98	@ 0x62
 80068d6:	d80a      	bhi.n	80068ee <_printf_i+0x32>
 80068d8:	2f00      	cmp	r7, #0
 80068da:	f000 80d1 	beq.w	8006a80 <_printf_i+0x1c4>
 80068de:	2f58      	cmp	r7, #88	@ 0x58
 80068e0:	f000 80b8 	beq.w	8006a54 <_printf_i+0x198>
 80068e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80068e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80068ec:	e03a      	b.n	8006964 <_printf_i+0xa8>
 80068ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80068f2:	2b15      	cmp	r3, #21
 80068f4:	d8f6      	bhi.n	80068e4 <_printf_i+0x28>
 80068f6:	a101      	add	r1, pc, #4	@ (adr r1, 80068fc <_printf_i+0x40>)
 80068f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80068fc:	08006955 	.word	0x08006955
 8006900:	08006969 	.word	0x08006969
 8006904:	080068e5 	.word	0x080068e5
 8006908:	080068e5 	.word	0x080068e5
 800690c:	080068e5 	.word	0x080068e5
 8006910:	080068e5 	.word	0x080068e5
 8006914:	08006969 	.word	0x08006969
 8006918:	080068e5 	.word	0x080068e5
 800691c:	080068e5 	.word	0x080068e5
 8006920:	080068e5 	.word	0x080068e5
 8006924:	080068e5 	.word	0x080068e5
 8006928:	08006a67 	.word	0x08006a67
 800692c:	08006993 	.word	0x08006993
 8006930:	08006a21 	.word	0x08006a21
 8006934:	080068e5 	.word	0x080068e5
 8006938:	080068e5 	.word	0x080068e5
 800693c:	08006a89 	.word	0x08006a89
 8006940:	080068e5 	.word	0x080068e5
 8006944:	08006993 	.word	0x08006993
 8006948:	080068e5 	.word	0x080068e5
 800694c:	080068e5 	.word	0x080068e5
 8006950:	08006a29 	.word	0x08006a29
 8006954:	6833      	ldr	r3, [r6, #0]
 8006956:	1d1a      	adds	r2, r3, #4
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	6032      	str	r2, [r6, #0]
 800695c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006960:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006964:	2301      	movs	r3, #1
 8006966:	e09c      	b.n	8006aa2 <_printf_i+0x1e6>
 8006968:	6833      	ldr	r3, [r6, #0]
 800696a:	6820      	ldr	r0, [r4, #0]
 800696c:	1d19      	adds	r1, r3, #4
 800696e:	6031      	str	r1, [r6, #0]
 8006970:	0606      	lsls	r6, r0, #24
 8006972:	d501      	bpl.n	8006978 <_printf_i+0xbc>
 8006974:	681d      	ldr	r5, [r3, #0]
 8006976:	e003      	b.n	8006980 <_printf_i+0xc4>
 8006978:	0645      	lsls	r5, r0, #25
 800697a:	d5fb      	bpl.n	8006974 <_printf_i+0xb8>
 800697c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006980:	2d00      	cmp	r5, #0
 8006982:	da03      	bge.n	800698c <_printf_i+0xd0>
 8006984:	232d      	movs	r3, #45	@ 0x2d
 8006986:	426d      	negs	r5, r5
 8006988:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800698c:	4858      	ldr	r0, [pc, #352]	@ (8006af0 <_printf_i+0x234>)
 800698e:	230a      	movs	r3, #10
 8006990:	e011      	b.n	80069b6 <_printf_i+0xfa>
 8006992:	6821      	ldr	r1, [r4, #0]
 8006994:	6833      	ldr	r3, [r6, #0]
 8006996:	0608      	lsls	r0, r1, #24
 8006998:	f853 5b04 	ldr.w	r5, [r3], #4
 800699c:	d402      	bmi.n	80069a4 <_printf_i+0xe8>
 800699e:	0649      	lsls	r1, r1, #25
 80069a0:	bf48      	it	mi
 80069a2:	b2ad      	uxthmi	r5, r5
 80069a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80069a6:	4852      	ldr	r0, [pc, #328]	@ (8006af0 <_printf_i+0x234>)
 80069a8:	6033      	str	r3, [r6, #0]
 80069aa:	bf14      	ite	ne
 80069ac:	230a      	movne	r3, #10
 80069ae:	2308      	moveq	r3, #8
 80069b0:	2100      	movs	r1, #0
 80069b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80069b6:	6866      	ldr	r6, [r4, #4]
 80069b8:	60a6      	str	r6, [r4, #8]
 80069ba:	2e00      	cmp	r6, #0
 80069bc:	db05      	blt.n	80069ca <_printf_i+0x10e>
 80069be:	6821      	ldr	r1, [r4, #0]
 80069c0:	432e      	orrs	r6, r5
 80069c2:	f021 0104 	bic.w	r1, r1, #4
 80069c6:	6021      	str	r1, [r4, #0]
 80069c8:	d04b      	beq.n	8006a62 <_printf_i+0x1a6>
 80069ca:	4616      	mov	r6, r2
 80069cc:	fbb5 f1f3 	udiv	r1, r5, r3
 80069d0:	fb03 5711 	mls	r7, r3, r1, r5
 80069d4:	5dc7      	ldrb	r7, [r0, r7]
 80069d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80069da:	462f      	mov	r7, r5
 80069dc:	42bb      	cmp	r3, r7
 80069de:	460d      	mov	r5, r1
 80069e0:	d9f4      	bls.n	80069cc <_printf_i+0x110>
 80069e2:	2b08      	cmp	r3, #8
 80069e4:	d10b      	bne.n	80069fe <_printf_i+0x142>
 80069e6:	6823      	ldr	r3, [r4, #0]
 80069e8:	07df      	lsls	r7, r3, #31
 80069ea:	d508      	bpl.n	80069fe <_printf_i+0x142>
 80069ec:	6923      	ldr	r3, [r4, #16]
 80069ee:	6861      	ldr	r1, [r4, #4]
 80069f0:	4299      	cmp	r1, r3
 80069f2:	bfde      	ittt	le
 80069f4:	2330      	movle	r3, #48	@ 0x30
 80069f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80069fa:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80069fe:	1b92      	subs	r2, r2, r6
 8006a00:	6122      	str	r2, [r4, #16]
 8006a02:	f8cd a000 	str.w	sl, [sp]
 8006a06:	464b      	mov	r3, r9
 8006a08:	aa03      	add	r2, sp, #12
 8006a0a:	4621      	mov	r1, r4
 8006a0c:	4640      	mov	r0, r8
 8006a0e:	f7ff fee7 	bl	80067e0 <_printf_common>
 8006a12:	3001      	adds	r0, #1
 8006a14:	d14a      	bne.n	8006aac <_printf_i+0x1f0>
 8006a16:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006a1a:	b004      	add	sp, #16
 8006a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a20:	6823      	ldr	r3, [r4, #0]
 8006a22:	f043 0320 	orr.w	r3, r3, #32
 8006a26:	6023      	str	r3, [r4, #0]
 8006a28:	4832      	ldr	r0, [pc, #200]	@ (8006af4 <_printf_i+0x238>)
 8006a2a:	2778      	movs	r7, #120	@ 0x78
 8006a2c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006a30:	6823      	ldr	r3, [r4, #0]
 8006a32:	6831      	ldr	r1, [r6, #0]
 8006a34:	061f      	lsls	r7, r3, #24
 8006a36:	f851 5b04 	ldr.w	r5, [r1], #4
 8006a3a:	d402      	bmi.n	8006a42 <_printf_i+0x186>
 8006a3c:	065f      	lsls	r7, r3, #25
 8006a3e:	bf48      	it	mi
 8006a40:	b2ad      	uxthmi	r5, r5
 8006a42:	6031      	str	r1, [r6, #0]
 8006a44:	07d9      	lsls	r1, r3, #31
 8006a46:	bf44      	itt	mi
 8006a48:	f043 0320 	orrmi.w	r3, r3, #32
 8006a4c:	6023      	strmi	r3, [r4, #0]
 8006a4e:	b11d      	cbz	r5, 8006a58 <_printf_i+0x19c>
 8006a50:	2310      	movs	r3, #16
 8006a52:	e7ad      	b.n	80069b0 <_printf_i+0xf4>
 8006a54:	4826      	ldr	r0, [pc, #152]	@ (8006af0 <_printf_i+0x234>)
 8006a56:	e7e9      	b.n	8006a2c <_printf_i+0x170>
 8006a58:	6823      	ldr	r3, [r4, #0]
 8006a5a:	f023 0320 	bic.w	r3, r3, #32
 8006a5e:	6023      	str	r3, [r4, #0]
 8006a60:	e7f6      	b.n	8006a50 <_printf_i+0x194>
 8006a62:	4616      	mov	r6, r2
 8006a64:	e7bd      	b.n	80069e2 <_printf_i+0x126>
 8006a66:	6833      	ldr	r3, [r6, #0]
 8006a68:	6825      	ldr	r5, [r4, #0]
 8006a6a:	6961      	ldr	r1, [r4, #20]
 8006a6c:	1d18      	adds	r0, r3, #4
 8006a6e:	6030      	str	r0, [r6, #0]
 8006a70:	062e      	lsls	r6, r5, #24
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	d501      	bpl.n	8006a7a <_printf_i+0x1be>
 8006a76:	6019      	str	r1, [r3, #0]
 8006a78:	e002      	b.n	8006a80 <_printf_i+0x1c4>
 8006a7a:	0668      	lsls	r0, r5, #25
 8006a7c:	d5fb      	bpl.n	8006a76 <_printf_i+0x1ba>
 8006a7e:	8019      	strh	r1, [r3, #0]
 8006a80:	2300      	movs	r3, #0
 8006a82:	6123      	str	r3, [r4, #16]
 8006a84:	4616      	mov	r6, r2
 8006a86:	e7bc      	b.n	8006a02 <_printf_i+0x146>
 8006a88:	6833      	ldr	r3, [r6, #0]
 8006a8a:	1d1a      	adds	r2, r3, #4
 8006a8c:	6032      	str	r2, [r6, #0]
 8006a8e:	681e      	ldr	r6, [r3, #0]
 8006a90:	6862      	ldr	r2, [r4, #4]
 8006a92:	2100      	movs	r1, #0
 8006a94:	4630      	mov	r0, r6
 8006a96:	f7f9 fb9b 	bl	80001d0 <memchr>
 8006a9a:	b108      	cbz	r0, 8006aa0 <_printf_i+0x1e4>
 8006a9c:	1b80      	subs	r0, r0, r6
 8006a9e:	6060      	str	r0, [r4, #4]
 8006aa0:	6863      	ldr	r3, [r4, #4]
 8006aa2:	6123      	str	r3, [r4, #16]
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006aaa:	e7aa      	b.n	8006a02 <_printf_i+0x146>
 8006aac:	6923      	ldr	r3, [r4, #16]
 8006aae:	4632      	mov	r2, r6
 8006ab0:	4649      	mov	r1, r9
 8006ab2:	4640      	mov	r0, r8
 8006ab4:	47d0      	blx	sl
 8006ab6:	3001      	adds	r0, #1
 8006ab8:	d0ad      	beq.n	8006a16 <_printf_i+0x15a>
 8006aba:	6823      	ldr	r3, [r4, #0]
 8006abc:	079b      	lsls	r3, r3, #30
 8006abe:	d413      	bmi.n	8006ae8 <_printf_i+0x22c>
 8006ac0:	68e0      	ldr	r0, [r4, #12]
 8006ac2:	9b03      	ldr	r3, [sp, #12]
 8006ac4:	4298      	cmp	r0, r3
 8006ac6:	bfb8      	it	lt
 8006ac8:	4618      	movlt	r0, r3
 8006aca:	e7a6      	b.n	8006a1a <_printf_i+0x15e>
 8006acc:	2301      	movs	r3, #1
 8006ace:	4632      	mov	r2, r6
 8006ad0:	4649      	mov	r1, r9
 8006ad2:	4640      	mov	r0, r8
 8006ad4:	47d0      	blx	sl
 8006ad6:	3001      	adds	r0, #1
 8006ad8:	d09d      	beq.n	8006a16 <_printf_i+0x15a>
 8006ada:	3501      	adds	r5, #1
 8006adc:	68e3      	ldr	r3, [r4, #12]
 8006ade:	9903      	ldr	r1, [sp, #12]
 8006ae0:	1a5b      	subs	r3, r3, r1
 8006ae2:	42ab      	cmp	r3, r5
 8006ae4:	dcf2      	bgt.n	8006acc <_printf_i+0x210>
 8006ae6:	e7eb      	b.n	8006ac0 <_printf_i+0x204>
 8006ae8:	2500      	movs	r5, #0
 8006aea:	f104 0619 	add.w	r6, r4, #25
 8006aee:	e7f5      	b.n	8006adc <_printf_i+0x220>
 8006af0:	08008f9e 	.word	0x08008f9e
 8006af4:	08008faf 	.word	0x08008faf

08006af8 <siprintf>:
 8006af8:	b40e      	push	{r1, r2, r3}
 8006afa:	b510      	push	{r4, lr}
 8006afc:	b09d      	sub	sp, #116	@ 0x74
 8006afe:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006b00:	9002      	str	r0, [sp, #8]
 8006b02:	9006      	str	r0, [sp, #24]
 8006b04:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006b08:	480a      	ldr	r0, [pc, #40]	@ (8006b34 <siprintf+0x3c>)
 8006b0a:	9107      	str	r1, [sp, #28]
 8006b0c:	9104      	str	r1, [sp, #16]
 8006b0e:	490a      	ldr	r1, [pc, #40]	@ (8006b38 <siprintf+0x40>)
 8006b10:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b14:	9105      	str	r1, [sp, #20]
 8006b16:	2400      	movs	r4, #0
 8006b18:	a902      	add	r1, sp, #8
 8006b1a:	6800      	ldr	r0, [r0, #0]
 8006b1c:	9301      	str	r3, [sp, #4]
 8006b1e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006b20:	f000 ffbe 	bl	8007aa0 <_svfiprintf_r>
 8006b24:	9b02      	ldr	r3, [sp, #8]
 8006b26:	701c      	strb	r4, [r3, #0]
 8006b28:	b01d      	add	sp, #116	@ 0x74
 8006b2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b2e:	b003      	add	sp, #12
 8006b30:	4770      	bx	lr
 8006b32:	bf00      	nop
 8006b34:	2000001c 	.word	0x2000001c
 8006b38:	ffff0208 	.word	0xffff0208

08006b3c <std>:
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	b510      	push	{r4, lr}
 8006b40:	4604      	mov	r4, r0
 8006b42:	e9c0 3300 	strd	r3, r3, [r0]
 8006b46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b4a:	6083      	str	r3, [r0, #8]
 8006b4c:	8181      	strh	r1, [r0, #12]
 8006b4e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006b50:	81c2      	strh	r2, [r0, #14]
 8006b52:	6183      	str	r3, [r0, #24]
 8006b54:	4619      	mov	r1, r3
 8006b56:	2208      	movs	r2, #8
 8006b58:	305c      	adds	r0, #92	@ 0x5c
 8006b5a:	f000 f8b1 	bl	8006cc0 <memset>
 8006b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8006b94 <std+0x58>)
 8006b60:	6263      	str	r3, [r4, #36]	@ 0x24
 8006b62:	4b0d      	ldr	r3, [pc, #52]	@ (8006b98 <std+0x5c>)
 8006b64:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006b66:	4b0d      	ldr	r3, [pc, #52]	@ (8006b9c <std+0x60>)
 8006b68:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ba0 <std+0x64>)
 8006b6c:	6323      	str	r3, [r4, #48]	@ 0x30
 8006b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8006ba4 <std+0x68>)
 8006b70:	6224      	str	r4, [r4, #32]
 8006b72:	429c      	cmp	r4, r3
 8006b74:	d006      	beq.n	8006b84 <std+0x48>
 8006b76:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006b7a:	4294      	cmp	r4, r2
 8006b7c:	d002      	beq.n	8006b84 <std+0x48>
 8006b7e:	33d0      	adds	r3, #208	@ 0xd0
 8006b80:	429c      	cmp	r4, r3
 8006b82:	d105      	bne.n	8006b90 <std+0x54>
 8006b84:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b8c:	f000 b8ca 	b.w	8006d24 <__retarget_lock_init_recursive>
 8006b90:	bd10      	pop	{r4, pc}
 8006b92:	bf00      	nop
 8006b94:	08008651 	.word	0x08008651
 8006b98:	08008673 	.word	0x08008673
 8006b9c:	080086ab 	.word	0x080086ab
 8006ba0:	080086cf 	.word	0x080086cf
 8006ba4:	2000037c 	.word	0x2000037c

08006ba8 <stdio_exit_handler>:
 8006ba8:	4a02      	ldr	r2, [pc, #8]	@ (8006bb4 <stdio_exit_handler+0xc>)
 8006baa:	4903      	ldr	r1, [pc, #12]	@ (8006bb8 <stdio_exit_handler+0x10>)
 8006bac:	4803      	ldr	r0, [pc, #12]	@ (8006bbc <stdio_exit_handler+0x14>)
 8006bae:	f000 b869 	b.w	8006c84 <_fwalk_sglue>
 8006bb2:	bf00      	nop
 8006bb4:	20000010 	.word	0x20000010
 8006bb8:	08007ef5 	.word	0x08007ef5
 8006bbc:	20000020 	.word	0x20000020

08006bc0 <cleanup_stdio>:
 8006bc0:	6841      	ldr	r1, [r0, #4]
 8006bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8006bf4 <cleanup_stdio+0x34>)
 8006bc4:	4299      	cmp	r1, r3
 8006bc6:	b510      	push	{r4, lr}
 8006bc8:	4604      	mov	r4, r0
 8006bca:	d001      	beq.n	8006bd0 <cleanup_stdio+0x10>
 8006bcc:	f001 f992 	bl	8007ef4 <_fflush_r>
 8006bd0:	68a1      	ldr	r1, [r4, #8]
 8006bd2:	4b09      	ldr	r3, [pc, #36]	@ (8006bf8 <cleanup_stdio+0x38>)
 8006bd4:	4299      	cmp	r1, r3
 8006bd6:	d002      	beq.n	8006bde <cleanup_stdio+0x1e>
 8006bd8:	4620      	mov	r0, r4
 8006bda:	f001 f98b 	bl	8007ef4 <_fflush_r>
 8006bde:	68e1      	ldr	r1, [r4, #12]
 8006be0:	4b06      	ldr	r3, [pc, #24]	@ (8006bfc <cleanup_stdio+0x3c>)
 8006be2:	4299      	cmp	r1, r3
 8006be4:	d004      	beq.n	8006bf0 <cleanup_stdio+0x30>
 8006be6:	4620      	mov	r0, r4
 8006be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bec:	f001 b982 	b.w	8007ef4 <_fflush_r>
 8006bf0:	bd10      	pop	{r4, pc}
 8006bf2:	bf00      	nop
 8006bf4:	2000037c 	.word	0x2000037c
 8006bf8:	200003e4 	.word	0x200003e4
 8006bfc:	2000044c 	.word	0x2000044c

08006c00 <global_stdio_init.part.0>:
 8006c00:	b510      	push	{r4, lr}
 8006c02:	4b0b      	ldr	r3, [pc, #44]	@ (8006c30 <global_stdio_init.part.0+0x30>)
 8006c04:	4c0b      	ldr	r4, [pc, #44]	@ (8006c34 <global_stdio_init.part.0+0x34>)
 8006c06:	4a0c      	ldr	r2, [pc, #48]	@ (8006c38 <global_stdio_init.part.0+0x38>)
 8006c08:	601a      	str	r2, [r3, #0]
 8006c0a:	4620      	mov	r0, r4
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	2104      	movs	r1, #4
 8006c10:	f7ff ff94 	bl	8006b3c <std>
 8006c14:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006c18:	2201      	movs	r2, #1
 8006c1a:	2109      	movs	r1, #9
 8006c1c:	f7ff ff8e 	bl	8006b3c <std>
 8006c20:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006c24:	2202      	movs	r2, #2
 8006c26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c2a:	2112      	movs	r1, #18
 8006c2c:	f7ff bf86 	b.w	8006b3c <std>
 8006c30:	200004b4 	.word	0x200004b4
 8006c34:	2000037c 	.word	0x2000037c
 8006c38:	08006ba9 	.word	0x08006ba9

08006c3c <__sfp_lock_acquire>:
 8006c3c:	4801      	ldr	r0, [pc, #4]	@ (8006c44 <__sfp_lock_acquire+0x8>)
 8006c3e:	f000 b872 	b.w	8006d26 <__retarget_lock_acquire_recursive>
 8006c42:	bf00      	nop
 8006c44:	200004b9 	.word	0x200004b9

08006c48 <__sfp_lock_release>:
 8006c48:	4801      	ldr	r0, [pc, #4]	@ (8006c50 <__sfp_lock_release+0x8>)
 8006c4a:	f000 b86d 	b.w	8006d28 <__retarget_lock_release_recursive>
 8006c4e:	bf00      	nop
 8006c50:	200004b9 	.word	0x200004b9

08006c54 <__sinit>:
 8006c54:	b510      	push	{r4, lr}
 8006c56:	4604      	mov	r4, r0
 8006c58:	f7ff fff0 	bl	8006c3c <__sfp_lock_acquire>
 8006c5c:	6a23      	ldr	r3, [r4, #32]
 8006c5e:	b11b      	cbz	r3, 8006c68 <__sinit+0x14>
 8006c60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c64:	f7ff bff0 	b.w	8006c48 <__sfp_lock_release>
 8006c68:	4b04      	ldr	r3, [pc, #16]	@ (8006c7c <__sinit+0x28>)
 8006c6a:	6223      	str	r3, [r4, #32]
 8006c6c:	4b04      	ldr	r3, [pc, #16]	@ (8006c80 <__sinit+0x2c>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d1f5      	bne.n	8006c60 <__sinit+0xc>
 8006c74:	f7ff ffc4 	bl	8006c00 <global_stdio_init.part.0>
 8006c78:	e7f2      	b.n	8006c60 <__sinit+0xc>
 8006c7a:	bf00      	nop
 8006c7c:	08006bc1 	.word	0x08006bc1
 8006c80:	200004b4 	.word	0x200004b4

08006c84 <_fwalk_sglue>:
 8006c84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c88:	4607      	mov	r7, r0
 8006c8a:	4688      	mov	r8, r1
 8006c8c:	4614      	mov	r4, r2
 8006c8e:	2600      	movs	r6, #0
 8006c90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c94:	f1b9 0901 	subs.w	r9, r9, #1
 8006c98:	d505      	bpl.n	8006ca6 <_fwalk_sglue+0x22>
 8006c9a:	6824      	ldr	r4, [r4, #0]
 8006c9c:	2c00      	cmp	r4, #0
 8006c9e:	d1f7      	bne.n	8006c90 <_fwalk_sglue+0xc>
 8006ca0:	4630      	mov	r0, r6
 8006ca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ca6:	89ab      	ldrh	r3, [r5, #12]
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d907      	bls.n	8006cbc <_fwalk_sglue+0x38>
 8006cac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	d003      	beq.n	8006cbc <_fwalk_sglue+0x38>
 8006cb4:	4629      	mov	r1, r5
 8006cb6:	4638      	mov	r0, r7
 8006cb8:	47c0      	blx	r8
 8006cba:	4306      	orrs	r6, r0
 8006cbc:	3568      	adds	r5, #104	@ 0x68
 8006cbe:	e7e9      	b.n	8006c94 <_fwalk_sglue+0x10>

08006cc0 <memset>:
 8006cc0:	4402      	add	r2, r0
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d100      	bne.n	8006cca <memset+0xa>
 8006cc8:	4770      	bx	lr
 8006cca:	f803 1b01 	strb.w	r1, [r3], #1
 8006cce:	e7f9      	b.n	8006cc4 <memset+0x4>

08006cd0 <__errno>:
 8006cd0:	4b01      	ldr	r3, [pc, #4]	@ (8006cd8 <__errno+0x8>)
 8006cd2:	6818      	ldr	r0, [r3, #0]
 8006cd4:	4770      	bx	lr
 8006cd6:	bf00      	nop
 8006cd8:	2000001c 	.word	0x2000001c

08006cdc <__libc_init_array>:
 8006cdc:	b570      	push	{r4, r5, r6, lr}
 8006cde:	4d0d      	ldr	r5, [pc, #52]	@ (8006d14 <__libc_init_array+0x38>)
 8006ce0:	4c0d      	ldr	r4, [pc, #52]	@ (8006d18 <__libc_init_array+0x3c>)
 8006ce2:	1b64      	subs	r4, r4, r5
 8006ce4:	10a4      	asrs	r4, r4, #2
 8006ce6:	2600      	movs	r6, #0
 8006ce8:	42a6      	cmp	r6, r4
 8006cea:	d109      	bne.n	8006d00 <__libc_init_array+0x24>
 8006cec:	4d0b      	ldr	r5, [pc, #44]	@ (8006d1c <__libc_init_array+0x40>)
 8006cee:	4c0c      	ldr	r4, [pc, #48]	@ (8006d20 <__libc_init_array+0x44>)
 8006cf0:	f002 f8f8 	bl	8008ee4 <_init>
 8006cf4:	1b64      	subs	r4, r4, r5
 8006cf6:	10a4      	asrs	r4, r4, #2
 8006cf8:	2600      	movs	r6, #0
 8006cfa:	42a6      	cmp	r6, r4
 8006cfc:	d105      	bne.n	8006d0a <__libc_init_array+0x2e>
 8006cfe:	bd70      	pop	{r4, r5, r6, pc}
 8006d00:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d04:	4798      	blx	r3
 8006d06:	3601      	adds	r6, #1
 8006d08:	e7ee      	b.n	8006ce8 <__libc_init_array+0xc>
 8006d0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d0e:	4798      	blx	r3
 8006d10:	3601      	adds	r6, #1
 8006d12:	e7f2      	b.n	8006cfa <__libc_init_array+0x1e>
 8006d14:	0800930c 	.word	0x0800930c
 8006d18:	0800930c 	.word	0x0800930c
 8006d1c:	0800930c 	.word	0x0800930c
 8006d20:	08009310 	.word	0x08009310

08006d24 <__retarget_lock_init_recursive>:
 8006d24:	4770      	bx	lr

08006d26 <__retarget_lock_acquire_recursive>:
 8006d26:	4770      	bx	lr

08006d28 <__retarget_lock_release_recursive>:
 8006d28:	4770      	bx	lr
	...

08006d2c <_localeconv_r>:
 8006d2c:	4800      	ldr	r0, [pc, #0]	@ (8006d30 <_localeconv_r+0x4>)
 8006d2e:	4770      	bx	lr
 8006d30:	2000015c 	.word	0x2000015c

08006d34 <quorem>:
 8006d34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d38:	6903      	ldr	r3, [r0, #16]
 8006d3a:	690c      	ldr	r4, [r1, #16]
 8006d3c:	42a3      	cmp	r3, r4
 8006d3e:	4607      	mov	r7, r0
 8006d40:	db7e      	blt.n	8006e40 <quorem+0x10c>
 8006d42:	3c01      	subs	r4, #1
 8006d44:	f101 0814 	add.w	r8, r1, #20
 8006d48:	00a3      	lsls	r3, r4, #2
 8006d4a:	f100 0514 	add.w	r5, r0, #20
 8006d4e:	9300      	str	r3, [sp, #0]
 8006d50:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d54:	9301      	str	r3, [sp, #4]
 8006d56:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006d5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d5e:	3301      	adds	r3, #1
 8006d60:	429a      	cmp	r2, r3
 8006d62:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006d66:	fbb2 f6f3 	udiv	r6, r2, r3
 8006d6a:	d32e      	bcc.n	8006dca <quorem+0x96>
 8006d6c:	f04f 0a00 	mov.w	sl, #0
 8006d70:	46c4      	mov	ip, r8
 8006d72:	46ae      	mov	lr, r5
 8006d74:	46d3      	mov	fp, sl
 8006d76:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006d7a:	b298      	uxth	r0, r3
 8006d7c:	fb06 a000 	mla	r0, r6, r0, sl
 8006d80:	0c02      	lsrs	r2, r0, #16
 8006d82:	0c1b      	lsrs	r3, r3, #16
 8006d84:	fb06 2303 	mla	r3, r6, r3, r2
 8006d88:	f8de 2000 	ldr.w	r2, [lr]
 8006d8c:	b280      	uxth	r0, r0
 8006d8e:	b292      	uxth	r2, r2
 8006d90:	1a12      	subs	r2, r2, r0
 8006d92:	445a      	add	r2, fp
 8006d94:	f8de 0000 	ldr.w	r0, [lr]
 8006d98:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006da2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006da6:	b292      	uxth	r2, r2
 8006da8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006dac:	45e1      	cmp	r9, ip
 8006dae:	f84e 2b04 	str.w	r2, [lr], #4
 8006db2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006db6:	d2de      	bcs.n	8006d76 <quorem+0x42>
 8006db8:	9b00      	ldr	r3, [sp, #0]
 8006dba:	58eb      	ldr	r3, [r5, r3]
 8006dbc:	b92b      	cbnz	r3, 8006dca <quorem+0x96>
 8006dbe:	9b01      	ldr	r3, [sp, #4]
 8006dc0:	3b04      	subs	r3, #4
 8006dc2:	429d      	cmp	r5, r3
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	d32f      	bcc.n	8006e28 <quorem+0xf4>
 8006dc8:	613c      	str	r4, [r7, #16]
 8006dca:	4638      	mov	r0, r7
 8006dcc:	f001 fb38 	bl	8008440 <__mcmp>
 8006dd0:	2800      	cmp	r0, #0
 8006dd2:	db25      	blt.n	8006e20 <quorem+0xec>
 8006dd4:	4629      	mov	r1, r5
 8006dd6:	2000      	movs	r0, #0
 8006dd8:	f858 2b04 	ldr.w	r2, [r8], #4
 8006ddc:	f8d1 c000 	ldr.w	ip, [r1]
 8006de0:	fa1f fe82 	uxth.w	lr, r2
 8006de4:	fa1f f38c 	uxth.w	r3, ip
 8006de8:	eba3 030e 	sub.w	r3, r3, lr
 8006dec:	4403      	add	r3, r0
 8006dee:	0c12      	lsrs	r2, r2, #16
 8006df0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006df4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006dfe:	45c1      	cmp	r9, r8
 8006e00:	f841 3b04 	str.w	r3, [r1], #4
 8006e04:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006e08:	d2e6      	bcs.n	8006dd8 <quorem+0xa4>
 8006e0a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e12:	b922      	cbnz	r2, 8006e1e <quorem+0xea>
 8006e14:	3b04      	subs	r3, #4
 8006e16:	429d      	cmp	r5, r3
 8006e18:	461a      	mov	r2, r3
 8006e1a:	d30b      	bcc.n	8006e34 <quorem+0x100>
 8006e1c:	613c      	str	r4, [r7, #16]
 8006e1e:	3601      	adds	r6, #1
 8006e20:	4630      	mov	r0, r6
 8006e22:	b003      	add	sp, #12
 8006e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e28:	6812      	ldr	r2, [r2, #0]
 8006e2a:	3b04      	subs	r3, #4
 8006e2c:	2a00      	cmp	r2, #0
 8006e2e:	d1cb      	bne.n	8006dc8 <quorem+0x94>
 8006e30:	3c01      	subs	r4, #1
 8006e32:	e7c6      	b.n	8006dc2 <quorem+0x8e>
 8006e34:	6812      	ldr	r2, [r2, #0]
 8006e36:	3b04      	subs	r3, #4
 8006e38:	2a00      	cmp	r2, #0
 8006e3a:	d1ef      	bne.n	8006e1c <quorem+0xe8>
 8006e3c:	3c01      	subs	r4, #1
 8006e3e:	e7ea      	b.n	8006e16 <quorem+0xe2>
 8006e40:	2000      	movs	r0, #0
 8006e42:	e7ee      	b.n	8006e22 <quorem+0xee>
 8006e44:	0000      	movs	r0, r0
	...

08006e48 <_dtoa_r>:
 8006e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e4c:	69c7      	ldr	r7, [r0, #28]
 8006e4e:	b097      	sub	sp, #92	@ 0x5c
 8006e50:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006e54:	ec55 4b10 	vmov	r4, r5, d0
 8006e58:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8006e5a:	9107      	str	r1, [sp, #28]
 8006e5c:	4681      	mov	r9, r0
 8006e5e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006e60:	9311      	str	r3, [sp, #68]	@ 0x44
 8006e62:	b97f      	cbnz	r7, 8006e84 <_dtoa_r+0x3c>
 8006e64:	2010      	movs	r0, #16
 8006e66:	f000 ff17 	bl	8007c98 <malloc>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	f8c9 001c 	str.w	r0, [r9, #28]
 8006e70:	b920      	cbnz	r0, 8006e7c <_dtoa_r+0x34>
 8006e72:	4ba9      	ldr	r3, [pc, #676]	@ (8007118 <_dtoa_r+0x2d0>)
 8006e74:	21ef      	movs	r1, #239	@ 0xef
 8006e76:	48a9      	ldr	r0, [pc, #676]	@ (800711c <_dtoa_r+0x2d4>)
 8006e78:	f001 fcda 	bl	8008830 <__assert_func>
 8006e7c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006e80:	6007      	str	r7, [r0, #0]
 8006e82:	60c7      	str	r7, [r0, #12]
 8006e84:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006e88:	6819      	ldr	r1, [r3, #0]
 8006e8a:	b159      	cbz	r1, 8006ea4 <_dtoa_r+0x5c>
 8006e8c:	685a      	ldr	r2, [r3, #4]
 8006e8e:	604a      	str	r2, [r1, #4]
 8006e90:	2301      	movs	r3, #1
 8006e92:	4093      	lsls	r3, r2
 8006e94:	608b      	str	r3, [r1, #8]
 8006e96:	4648      	mov	r0, r9
 8006e98:	f001 f8a0 	bl	8007fdc <_Bfree>
 8006e9c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	601a      	str	r2, [r3, #0]
 8006ea4:	1e2b      	subs	r3, r5, #0
 8006ea6:	bfb9      	ittee	lt
 8006ea8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006eac:	9305      	strlt	r3, [sp, #20]
 8006eae:	2300      	movge	r3, #0
 8006eb0:	6033      	strge	r3, [r6, #0]
 8006eb2:	9f05      	ldr	r7, [sp, #20]
 8006eb4:	4b9a      	ldr	r3, [pc, #616]	@ (8007120 <_dtoa_r+0x2d8>)
 8006eb6:	bfbc      	itt	lt
 8006eb8:	2201      	movlt	r2, #1
 8006eba:	6032      	strlt	r2, [r6, #0]
 8006ebc:	43bb      	bics	r3, r7
 8006ebe:	d112      	bne.n	8006ee6 <_dtoa_r+0x9e>
 8006ec0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006ec2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006ec6:	6013      	str	r3, [r2, #0]
 8006ec8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006ecc:	4323      	orrs	r3, r4
 8006ece:	f000 855a 	beq.w	8007986 <_dtoa_r+0xb3e>
 8006ed2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006ed4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8007134 <_dtoa_r+0x2ec>
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f000 855c 	beq.w	8007996 <_dtoa_r+0xb4e>
 8006ede:	f10a 0303 	add.w	r3, sl, #3
 8006ee2:	f000 bd56 	b.w	8007992 <_dtoa_r+0xb4a>
 8006ee6:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006eea:	2200      	movs	r2, #0
 8006eec:	ec51 0b17 	vmov	r0, r1, d7
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8006ef6:	f7f9 fde7 	bl	8000ac8 <__aeabi_dcmpeq>
 8006efa:	4680      	mov	r8, r0
 8006efc:	b158      	cbz	r0, 8006f16 <_dtoa_r+0xce>
 8006efe:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006f00:	2301      	movs	r3, #1
 8006f02:	6013      	str	r3, [r2, #0]
 8006f04:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006f06:	b113      	cbz	r3, 8006f0e <_dtoa_r+0xc6>
 8006f08:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006f0a:	4b86      	ldr	r3, [pc, #536]	@ (8007124 <_dtoa_r+0x2dc>)
 8006f0c:	6013      	str	r3, [r2, #0]
 8006f0e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007138 <_dtoa_r+0x2f0>
 8006f12:	f000 bd40 	b.w	8007996 <_dtoa_r+0xb4e>
 8006f16:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8006f1a:	aa14      	add	r2, sp, #80	@ 0x50
 8006f1c:	a915      	add	r1, sp, #84	@ 0x54
 8006f1e:	4648      	mov	r0, r9
 8006f20:	f001 fb3e 	bl	80085a0 <__d2b>
 8006f24:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006f28:	9002      	str	r0, [sp, #8]
 8006f2a:	2e00      	cmp	r6, #0
 8006f2c:	d078      	beq.n	8007020 <_dtoa_r+0x1d8>
 8006f2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f30:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8006f34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f38:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006f3c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006f40:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006f44:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006f48:	4619      	mov	r1, r3
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	4b76      	ldr	r3, [pc, #472]	@ (8007128 <_dtoa_r+0x2e0>)
 8006f4e:	f7f9 f99b 	bl	8000288 <__aeabi_dsub>
 8006f52:	a36b      	add	r3, pc, #428	@ (adr r3, 8007100 <_dtoa_r+0x2b8>)
 8006f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f58:	f7f9 fb4e 	bl	80005f8 <__aeabi_dmul>
 8006f5c:	a36a      	add	r3, pc, #424	@ (adr r3, 8007108 <_dtoa_r+0x2c0>)
 8006f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f62:	f7f9 f993 	bl	800028c <__adddf3>
 8006f66:	4604      	mov	r4, r0
 8006f68:	4630      	mov	r0, r6
 8006f6a:	460d      	mov	r5, r1
 8006f6c:	f7f9 fada 	bl	8000524 <__aeabi_i2d>
 8006f70:	a367      	add	r3, pc, #412	@ (adr r3, 8007110 <_dtoa_r+0x2c8>)
 8006f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f76:	f7f9 fb3f 	bl	80005f8 <__aeabi_dmul>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	4620      	mov	r0, r4
 8006f80:	4629      	mov	r1, r5
 8006f82:	f7f9 f983 	bl	800028c <__adddf3>
 8006f86:	4604      	mov	r4, r0
 8006f88:	460d      	mov	r5, r1
 8006f8a:	f7f9 fde5 	bl	8000b58 <__aeabi_d2iz>
 8006f8e:	2200      	movs	r2, #0
 8006f90:	4607      	mov	r7, r0
 8006f92:	2300      	movs	r3, #0
 8006f94:	4620      	mov	r0, r4
 8006f96:	4629      	mov	r1, r5
 8006f98:	f7f9 fda0 	bl	8000adc <__aeabi_dcmplt>
 8006f9c:	b140      	cbz	r0, 8006fb0 <_dtoa_r+0x168>
 8006f9e:	4638      	mov	r0, r7
 8006fa0:	f7f9 fac0 	bl	8000524 <__aeabi_i2d>
 8006fa4:	4622      	mov	r2, r4
 8006fa6:	462b      	mov	r3, r5
 8006fa8:	f7f9 fd8e 	bl	8000ac8 <__aeabi_dcmpeq>
 8006fac:	b900      	cbnz	r0, 8006fb0 <_dtoa_r+0x168>
 8006fae:	3f01      	subs	r7, #1
 8006fb0:	2f16      	cmp	r7, #22
 8006fb2:	d852      	bhi.n	800705a <_dtoa_r+0x212>
 8006fb4:	4b5d      	ldr	r3, [pc, #372]	@ (800712c <_dtoa_r+0x2e4>)
 8006fb6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fbe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006fc2:	f7f9 fd8b 	bl	8000adc <__aeabi_dcmplt>
 8006fc6:	2800      	cmp	r0, #0
 8006fc8:	d049      	beq.n	800705e <_dtoa_r+0x216>
 8006fca:	3f01      	subs	r7, #1
 8006fcc:	2300      	movs	r3, #0
 8006fce:	9310      	str	r3, [sp, #64]	@ 0x40
 8006fd0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006fd2:	1b9b      	subs	r3, r3, r6
 8006fd4:	1e5a      	subs	r2, r3, #1
 8006fd6:	bf45      	ittet	mi
 8006fd8:	f1c3 0301 	rsbmi	r3, r3, #1
 8006fdc:	9300      	strmi	r3, [sp, #0]
 8006fde:	2300      	movpl	r3, #0
 8006fe0:	2300      	movmi	r3, #0
 8006fe2:	9206      	str	r2, [sp, #24]
 8006fe4:	bf54      	ite	pl
 8006fe6:	9300      	strpl	r3, [sp, #0]
 8006fe8:	9306      	strmi	r3, [sp, #24]
 8006fea:	2f00      	cmp	r7, #0
 8006fec:	db39      	blt.n	8007062 <_dtoa_r+0x21a>
 8006fee:	9b06      	ldr	r3, [sp, #24]
 8006ff0:	970d      	str	r7, [sp, #52]	@ 0x34
 8006ff2:	443b      	add	r3, r7
 8006ff4:	9306      	str	r3, [sp, #24]
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	9308      	str	r3, [sp, #32]
 8006ffa:	9b07      	ldr	r3, [sp, #28]
 8006ffc:	2b09      	cmp	r3, #9
 8006ffe:	d863      	bhi.n	80070c8 <_dtoa_r+0x280>
 8007000:	2b05      	cmp	r3, #5
 8007002:	bfc4      	itt	gt
 8007004:	3b04      	subgt	r3, #4
 8007006:	9307      	strgt	r3, [sp, #28]
 8007008:	9b07      	ldr	r3, [sp, #28]
 800700a:	f1a3 0302 	sub.w	r3, r3, #2
 800700e:	bfcc      	ite	gt
 8007010:	2400      	movgt	r4, #0
 8007012:	2401      	movle	r4, #1
 8007014:	2b03      	cmp	r3, #3
 8007016:	d863      	bhi.n	80070e0 <_dtoa_r+0x298>
 8007018:	e8df f003 	tbb	[pc, r3]
 800701c:	2b375452 	.word	0x2b375452
 8007020:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007024:	441e      	add	r6, r3
 8007026:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800702a:	2b20      	cmp	r3, #32
 800702c:	bfc1      	itttt	gt
 800702e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007032:	409f      	lslgt	r7, r3
 8007034:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007038:	fa24 f303 	lsrgt.w	r3, r4, r3
 800703c:	bfd6      	itet	le
 800703e:	f1c3 0320 	rsble	r3, r3, #32
 8007042:	ea47 0003 	orrgt.w	r0, r7, r3
 8007046:	fa04 f003 	lslle.w	r0, r4, r3
 800704a:	f7f9 fa5b 	bl	8000504 <__aeabi_ui2d>
 800704e:	2201      	movs	r2, #1
 8007050:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007054:	3e01      	subs	r6, #1
 8007056:	9212      	str	r2, [sp, #72]	@ 0x48
 8007058:	e776      	b.n	8006f48 <_dtoa_r+0x100>
 800705a:	2301      	movs	r3, #1
 800705c:	e7b7      	b.n	8006fce <_dtoa_r+0x186>
 800705e:	9010      	str	r0, [sp, #64]	@ 0x40
 8007060:	e7b6      	b.n	8006fd0 <_dtoa_r+0x188>
 8007062:	9b00      	ldr	r3, [sp, #0]
 8007064:	1bdb      	subs	r3, r3, r7
 8007066:	9300      	str	r3, [sp, #0]
 8007068:	427b      	negs	r3, r7
 800706a:	9308      	str	r3, [sp, #32]
 800706c:	2300      	movs	r3, #0
 800706e:	930d      	str	r3, [sp, #52]	@ 0x34
 8007070:	e7c3      	b.n	8006ffa <_dtoa_r+0x1b2>
 8007072:	2301      	movs	r3, #1
 8007074:	9309      	str	r3, [sp, #36]	@ 0x24
 8007076:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007078:	eb07 0b03 	add.w	fp, r7, r3
 800707c:	f10b 0301 	add.w	r3, fp, #1
 8007080:	2b01      	cmp	r3, #1
 8007082:	9303      	str	r3, [sp, #12]
 8007084:	bfb8      	it	lt
 8007086:	2301      	movlt	r3, #1
 8007088:	e006      	b.n	8007098 <_dtoa_r+0x250>
 800708a:	2301      	movs	r3, #1
 800708c:	9309      	str	r3, [sp, #36]	@ 0x24
 800708e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007090:	2b00      	cmp	r3, #0
 8007092:	dd28      	ble.n	80070e6 <_dtoa_r+0x29e>
 8007094:	469b      	mov	fp, r3
 8007096:	9303      	str	r3, [sp, #12]
 8007098:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800709c:	2100      	movs	r1, #0
 800709e:	2204      	movs	r2, #4
 80070a0:	f102 0514 	add.w	r5, r2, #20
 80070a4:	429d      	cmp	r5, r3
 80070a6:	d926      	bls.n	80070f6 <_dtoa_r+0x2ae>
 80070a8:	6041      	str	r1, [r0, #4]
 80070aa:	4648      	mov	r0, r9
 80070ac:	f000 ff56 	bl	8007f5c <_Balloc>
 80070b0:	4682      	mov	sl, r0
 80070b2:	2800      	cmp	r0, #0
 80070b4:	d142      	bne.n	800713c <_dtoa_r+0x2f4>
 80070b6:	4b1e      	ldr	r3, [pc, #120]	@ (8007130 <_dtoa_r+0x2e8>)
 80070b8:	4602      	mov	r2, r0
 80070ba:	f240 11af 	movw	r1, #431	@ 0x1af
 80070be:	e6da      	b.n	8006e76 <_dtoa_r+0x2e>
 80070c0:	2300      	movs	r3, #0
 80070c2:	e7e3      	b.n	800708c <_dtoa_r+0x244>
 80070c4:	2300      	movs	r3, #0
 80070c6:	e7d5      	b.n	8007074 <_dtoa_r+0x22c>
 80070c8:	2401      	movs	r4, #1
 80070ca:	2300      	movs	r3, #0
 80070cc:	9307      	str	r3, [sp, #28]
 80070ce:	9409      	str	r4, [sp, #36]	@ 0x24
 80070d0:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 80070d4:	2200      	movs	r2, #0
 80070d6:	f8cd b00c 	str.w	fp, [sp, #12]
 80070da:	2312      	movs	r3, #18
 80070dc:	920c      	str	r2, [sp, #48]	@ 0x30
 80070de:	e7db      	b.n	8007098 <_dtoa_r+0x250>
 80070e0:	2301      	movs	r3, #1
 80070e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80070e4:	e7f4      	b.n	80070d0 <_dtoa_r+0x288>
 80070e6:	f04f 0b01 	mov.w	fp, #1
 80070ea:	f8cd b00c 	str.w	fp, [sp, #12]
 80070ee:	465b      	mov	r3, fp
 80070f0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80070f4:	e7d0      	b.n	8007098 <_dtoa_r+0x250>
 80070f6:	3101      	adds	r1, #1
 80070f8:	0052      	lsls	r2, r2, #1
 80070fa:	e7d1      	b.n	80070a0 <_dtoa_r+0x258>
 80070fc:	f3af 8000 	nop.w
 8007100:	636f4361 	.word	0x636f4361
 8007104:	3fd287a7 	.word	0x3fd287a7
 8007108:	8b60c8b3 	.word	0x8b60c8b3
 800710c:	3fc68a28 	.word	0x3fc68a28
 8007110:	509f79fb 	.word	0x509f79fb
 8007114:	3fd34413 	.word	0x3fd34413
 8007118:	08008fcd 	.word	0x08008fcd
 800711c:	08008fe4 	.word	0x08008fe4
 8007120:	7ff00000 	.word	0x7ff00000
 8007124:	08008f9d 	.word	0x08008f9d
 8007128:	3ff80000 	.word	0x3ff80000
 800712c:	08009138 	.word	0x08009138
 8007130:	0800903c 	.word	0x0800903c
 8007134:	08008fc9 	.word	0x08008fc9
 8007138:	08008f9c 	.word	0x08008f9c
 800713c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007140:	6018      	str	r0, [r3, #0]
 8007142:	9b03      	ldr	r3, [sp, #12]
 8007144:	2b0e      	cmp	r3, #14
 8007146:	f200 80a1 	bhi.w	800728c <_dtoa_r+0x444>
 800714a:	2c00      	cmp	r4, #0
 800714c:	f000 809e 	beq.w	800728c <_dtoa_r+0x444>
 8007150:	2f00      	cmp	r7, #0
 8007152:	dd33      	ble.n	80071bc <_dtoa_r+0x374>
 8007154:	4b9c      	ldr	r3, [pc, #624]	@ (80073c8 <_dtoa_r+0x580>)
 8007156:	f007 020f 	and.w	r2, r7, #15
 800715a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800715e:	ed93 7b00 	vldr	d7, [r3]
 8007162:	05f8      	lsls	r0, r7, #23
 8007164:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007168:	ea4f 1427 	mov.w	r4, r7, asr #4
 800716c:	d516      	bpl.n	800719c <_dtoa_r+0x354>
 800716e:	4b97      	ldr	r3, [pc, #604]	@ (80073cc <_dtoa_r+0x584>)
 8007170:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007174:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007178:	f7f9 fb68 	bl	800084c <__aeabi_ddiv>
 800717c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007180:	f004 040f 	and.w	r4, r4, #15
 8007184:	2603      	movs	r6, #3
 8007186:	4d91      	ldr	r5, [pc, #580]	@ (80073cc <_dtoa_r+0x584>)
 8007188:	b954      	cbnz	r4, 80071a0 <_dtoa_r+0x358>
 800718a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800718e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007192:	f7f9 fb5b 	bl	800084c <__aeabi_ddiv>
 8007196:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800719a:	e028      	b.n	80071ee <_dtoa_r+0x3a6>
 800719c:	2602      	movs	r6, #2
 800719e:	e7f2      	b.n	8007186 <_dtoa_r+0x33e>
 80071a0:	07e1      	lsls	r1, r4, #31
 80071a2:	d508      	bpl.n	80071b6 <_dtoa_r+0x36e>
 80071a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80071a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80071ac:	f7f9 fa24 	bl	80005f8 <__aeabi_dmul>
 80071b0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80071b4:	3601      	adds	r6, #1
 80071b6:	1064      	asrs	r4, r4, #1
 80071b8:	3508      	adds	r5, #8
 80071ba:	e7e5      	b.n	8007188 <_dtoa_r+0x340>
 80071bc:	f000 80af 	beq.w	800731e <_dtoa_r+0x4d6>
 80071c0:	427c      	negs	r4, r7
 80071c2:	4b81      	ldr	r3, [pc, #516]	@ (80073c8 <_dtoa_r+0x580>)
 80071c4:	4d81      	ldr	r5, [pc, #516]	@ (80073cc <_dtoa_r+0x584>)
 80071c6:	f004 020f 	and.w	r2, r4, #15
 80071ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80071ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80071d6:	f7f9 fa0f 	bl	80005f8 <__aeabi_dmul>
 80071da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80071de:	1124      	asrs	r4, r4, #4
 80071e0:	2300      	movs	r3, #0
 80071e2:	2602      	movs	r6, #2
 80071e4:	2c00      	cmp	r4, #0
 80071e6:	f040 808f 	bne.w	8007308 <_dtoa_r+0x4c0>
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d1d3      	bne.n	8007196 <_dtoa_r+0x34e>
 80071ee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80071f0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	f000 8094 	beq.w	8007322 <_dtoa_r+0x4da>
 80071fa:	4b75      	ldr	r3, [pc, #468]	@ (80073d0 <_dtoa_r+0x588>)
 80071fc:	2200      	movs	r2, #0
 80071fe:	4620      	mov	r0, r4
 8007200:	4629      	mov	r1, r5
 8007202:	f7f9 fc6b 	bl	8000adc <__aeabi_dcmplt>
 8007206:	2800      	cmp	r0, #0
 8007208:	f000 808b 	beq.w	8007322 <_dtoa_r+0x4da>
 800720c:	9b03      	ldr	r3, [sp, #12]
 800720e:	2b00      	cmp	r3, #0
 8007210:	f000 8087 	beq.w	8007322 <_dtoa_r+0x4da>
 8007214:	f1bb 0f00 	cmp.w	fp, #0
 8007218:	dd34      	ble.n	8007284 <_dtoa_r+0x43c>
 800721a:	4620      	mov	r0, r4
 800721c:	4b6d      	ldr	r3, [pc, #436]	@ (80073d4 <_dtoa_r+0x58c>)
 800721e:	2200      	movs	r2, #0
 8007220:	4629      	mov	r1, r5
 8007222:	f7f9 f9e9 	bl	80005f8 <__aeabi_dmul>
 8007226:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800722a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800722e:	3601      	adds	r6, #1
 8007230:	465c      	mov	r4, fp
 8007232:	4630      	mov	r0, r6
 8007234:	f7f9 f976 	bl	8000524 <__aeabi_i2d>
 8007238:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800723c:	f7f9 f9dc 	bl	80005f8 <__aeabi_dmul>
 8007240:	4b65      	ldr	r3, [pc, #404]	@ (80073d8 <_dtoa_r+0x590>)
 8007242:	2200      	movs	r2, #0
 8007244:	f7f9 f822 	bl	800028c <__adddf3>
 8007248:	4605      	mov	r5, r0
 800724a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800724e:	2c00      	cmp	r4, #0
 8007250:	d16a      	bne.n	8007328 <_dtoa_r+0x4e0>
 8007252:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007256:	4b61      	ldr	r3, [pc, #388]	@ (80073dc <_dtoa_r+0x594>)
 8007258:	2200      	movs	r2, #0
 800725a:	f7f9 f815 	bl	8000288 <__aeabi_dsub>
 800725e:	4602      	mov	r2, r0
 8007260:	460b      	mov	r3, r1
 8007262:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007266:	462a      	mov	r2, r5
 8007268:	4633      	mov	r3, r6
 800726a:	f7f9 fc55 	bl	8000b18 <__aeabi_dcmpgt>
 800726e:	2800      	cmp	r0, #0
 8007270:	f040 8298 	bne.w	80077a4 <_dtoa_r+0x95c>
 8007274:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007278:	462a      	mov	r2, r5
 800727a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800727e:	f7f9 fc2d 	bl	8000adc <__aeabi_dcmplt>
 8007282:	bb38      	cbnz	r0, 80072d4 <_dtoa_r+0x48c>
 8007284:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007288:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800728c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800728e:	2b00      	cmp	r3, #0
 8007290:	f2c0 8157 	blt.w	8007542 <_dtoa_r+0x6fa>
 8007294:	2f0e      	cmp	r7, #14
 8007296:	f300 8154 	bgt.w	8007542 <_dtoa_r+0x6fa>
 800729a:	4b4b      	ldr	r3, [pc, #300]	@ (80073c8 <_dtoa_r+0x580>)
 800729c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80072a0:	ed93 7b00 	vldr	d7, [r3]
 80072a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	ed8d 7b00 	vstr	d7, [sp]
 80072ac:	f280 80e5 	bge.w	800747a <_dtoa_r+0x632>
 80072b0:	9b03      	ldr	r3, [sp, #12]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	f300 80e1 	bgt.w	800747a <_dtoa_r+0x632>
 80072b8:	d10c      	bne.n	80072d4 <_dtoa_r+0x48c>
 80072ba:	4b48      	ldr	r3, [pc, #288]	@ (80073dc <_dtoa_r+0x594>)
 80072bc:	2200      	movs	r2, #0
 80072be:	ec51 0b17 	vmov	r0, r1, d7
 80072c2:	f7f9 f999 	bl	80005f8 <__aeabi_dmul>
 80072c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072ca:	f7f9 fc1b 	bl	8000b04 <__aeabi_dcmpge>
 80072ce:	2800      	cmp	r0, #0
 80072d0:	f000 8266 	beq.w	80077a0 <_dtoa_r+0x958>
 80072d4:	2400      	movs	r4, #0
 80072d6:	4625      	mov	r5, r4
 80072d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80072da:	4656      	mov	r6, sl
 80072dc:	ea6f 0803 	mvn.w	r8, r3
 80072e0:	2700      	movs	r7, #0
 80072e2:	4621      	mov	r1, r4
 80072e4:	4648      	mov	r0, r9
 80072e6:	f000 fe79 	bl	8007fdc <_Bfree>
 80072ea:	2d00      	cmp	r5, #0
 80072ec:	f000 80bd 	beq.w	800746a <_dtoa_r+0x622>
 80072f0:	b12f      	cbz	r7, 80072fe <_dtoa_r+0x4b6>
 80072f2:	42af      	cmp	r7, r5
 80072f4:	d003      	beq.n	80072fe <_dtoa_r+0x4b6>
 80072f6:	4639      	mov	r1, r7
 80072f8:	4648      	mov	r0, r9
 80072fa:	f000 fe6f 	bl	8007fdc <_Bfree>
 80072fe:	4629      	mov	r1, r5
 8007300:	4648      	mov	r0, r9
 8007302:	f000 fe6b 	bl	8007fdc <_Bfree>
 8007306:	e0b0      	b.n	800746a <_dtoa_r+0x622>
 8007308:	07e2      	lsls	r2, r4, #31
 800730a:	d505      	bpl.n	8007318 <_dtoa_r+0x4d0>
 800730c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007310:	f7f9 f972 	bl	80005f8 <__aeabi_dmul>
 8007314:	3601      	adds	r6, #1
 8007316:	2301      	movs	r3, #1
 8007318:	1064      	asrs	r4, r4, #1
 800731a:	3508      	adds	r5, #8
 800731c:	e762      	b.n	80071e4 <_dtoa_r+0x39c>
 800731e:	2602      	movs	r6, #2
 8007320:	e765      	b.n	80071ee <_dtoa_r+0x3a6>
 8007322:	9c03      	ldr	r4, [sp, #12]
 8007324:	46b8      	mov	r8, r7
 8007326:	e784      	b.n	8007232 <_dtoa_r+0x3ea>
 8007328:	4b27      	ldr	r3, [pc, #156]	@ (80073c8 <_dtoa_r+0x580>)
 800732a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800732c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007330:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007334:	4454      	add	r4, sl
 8007336:	2900      	cmp	r1, #0
 8007338:	d054      	beq.n	80073e4 <_dtoa_r+0x59c>
 800733a:	4929      	ldr	r1, [pc, #164]	@ (80073e0 <_dtoa_r+0x598>)
 800733c:	2000      	movs	r0, #0
 800733e:	f7f9 fa85 	bl	800084c <__aeabi_ddiv>
 8007342:	4633      	mov	r3, r6
 8007344:	462a      	mov	r2, r5
 8007346:	f7f8 ff9f 	bl	8000288 <__aeabi_dsub>
 800734a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800734e:	4656      	mov	r6, sl
 8007350:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007354:	f7f9 fc00 	bl	8000b58 <__aeabi_d2iz>
 8007358:	4605      	mov	r5, r0
 800735a:	f7f9 f8e3 	bl	8000524 <__aeabi_i2d>
 800735e:	4602      	mov	r2, r0
 8007360:	460b      	mov	r3, r1
 8007362:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007366:	f7f8 ff8f 	bl	8000288 <__aeabi_dsub>
 800736a:	3530      	adds	r5, #48	@ 0x30
 800736c:	4602      	mov	r2, r0
 800736e:	460b      	mov	r3, r1
 8007370:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007374:	f806 5b01 	strb.w	r5, [r6], #1
 8007378:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800737c:	f7f9 fbae 	bl	8000adc <__aeabi_dcmplt>
 8007380:	2800      	cmp	r0, #0
 8007382:	d172      	bne.n	800746a <_dtoa_r+0x622>
 8007384:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007388:	4911      	ldr	r1, [pc, #68]	@ (80073d0 <_dtoa_r+0x588>)
 800738a:	2000      	movs	r0, #0
 800738c:	f7f8 ff7c 	bl	8000288 <__aeabi_dsub>
 8007390:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007394:	f7f9 fba2 	bl	8000adc <__aeabi_dcmplt>
 8007398:	2800      	cmp	r0, #0
 800739a:	f040 80b4 	bne.w	8007506 <_dtoa_r+0x6be>
 800739e:	42a6      	cmp	r6, r4
 80073a0:	f43f af70 	beq.w	8007284 <_dtoa_r+0x43c>
 80073a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80073a8:	4b0a      	ldr	r3, [pc, #40]	@ (80073d4 <_dtoa_r+0x58c>)
 80073aa:	2200      	movs	r2, #0
 80073ac:	f7f9 f924 	bl	80005f8 <__aeabi_dmul>
 80073b0:	4b08      	ldr	r3, [pc, #32]	@ (80073d4 <_dtoa_r+0x58c>)
 80073b2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80073b6:	2200      	movs	r2, #0
 80073b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80073bc:	f7f9 f91c 	bl	80005f8 <__aeabi_dmul>
 80073c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073c4:	e7c4      	b.n	8007350 <_dtoa_r+0x508>
 80073c6:	bf00      	nop
 80073c8:	08009138 	.word	0x08009138
 80073cc:	08009110 	.word	0x08009110
 80073d0:	3ff00000 	.word	0x3ff00000
 80073d4:	40240000 	.word	0x40240000
 80073d8:	401c0000 	.word	0x401c0000
 80073dc:	40140000 	.word	0x40140000
 80073e0:	3fe00000 	.word	0x3fe00000
 80073e4:	4631      	mov	r1, r6
 80073e6:	4628      	mov	r0, r5
 80073e8:	f7f9 f906 	bl	80005f8 <__aeabi_dmul>
 80073ec:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80073f0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80073f2:	4656      	mov	r6, sl
 80073f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80073f8:	f7f9 fbae 	bl	8000b58 <__aeabi_d2iz>
 80073fc:	4605      	mov	r5, r0
 80073fe:	f7f9 f891 	bl	8000524 <__aeabi_i2d>
 8007402:	4602      	mov	r2, r0
 8007404:	460b      	mov	r3, r1
 8007406:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800740a:	f7f8 ff3d 	bl	8000288 <__aeabi_dsub>
 800740e:	3530      	adds	r5, #48	@ 0x30
 8007410:	f806 5b01 	strb.w	r5, [r6], #1
 8007414:	4602      	mov	r2, r0
 8007416:	460b      	mov	r3, r1
 8007418:	42a6      	cmp	r6, r4
 800741a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800741e:	f04f 0200 	mov.w	r2, #0
 8007422:	d124      	bne.n	800746e <_dtoa_r+0x626>
 8007424:	4baf      	ldr	r3, [pc, #700]	@ (80076e4 <_dtoa_r+0x89c>)
 8007426:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800742a:	f7f8 ff2f 	bl	800028c <__adddf3>
 800742e:	4602      	mov	r2, r0
 8007430:	460b      	mov	r3, r1
 8007432:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007436:	f7f9 fb6f 	bl	8000b18 <__aeabi_dcmpgt>
 800743a:	2800      	cmp	r0, #0
 800743c:	d163      	bne.n	8007506 <_dtoa_r+0x6be>
 800743e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007442:	49a8      	ldr	r1, [pc, #672]	@ (80076e4 <_dtoa_r+0x89c>)
 8007444:	2000      	movs	r0, #0
 8007446:	f7f8 ff1f 	bl	8000288 <__aeabi_dsub>
 800744a:	4602      	mov	r2, r0
 800744c:	460b      	mov	r3, r1
 800744e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007452:	f7f9 fb43 	bl	8000adc <__aeabi_dcmplt>
 8007456:	2800      	cmp	r0, #0
 8007458:	f43f af14 	beq.w	8007284 <_dtoa_r+0x43c>
 800745c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800745e:	1e73      	subs	r3, r6, #1
 8007460:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007462:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007466:	2b30      	cmp	r3, #48	@ 0x30
 8007468:	d0f8      	beq.n	800745c <_dtoa_r+0x614>
 800746a:	4647      	mov	r7, r8
 800746c:	e03b      	b.n	80074e6 <_dtoa_r+0x69e>
 800746e:	4b9e      	ldr	r3, [pc, #632]	@ (80076e8 <_dtoa_r+0x8a0>)
 8007470:	f7f9 f8c2 	bl	80005f8 <__aeabi_dmul>
 8007474:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007478:	e7bc      	b.n	80073f4 <_dtoa_r+0x5ac>
 800747a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800747e:	4656      	mov	r6, sl
 8007480:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007484:	4620      	mov	r0, r4
 8007486:	4629      	mov	r1, r5
 8007488:	f7f9 f9e0 	bl	800084c <__aeabi_ddiv>
 800748c:	f7f9 fb64 	bl	8000b58 <__aeabi_d2iz>
 8007490:	4680      	mov	r8, r0
 8007492:	f7f9 f847 	bl	8000524 <__aeabi_i2d>
 8007496:	e9dd 2300 	ldrd	r2, r3, [sp]
 800749a:	f7f9 f8ad 	bl	80005f8 <__aeabi_dmul>
 800749e:	4602      	mov	r2, r0
 80074a0:	460b      	mov	r3, r1
 80074a2:	4620      	mov	r0, r4
 80074a4:	4629      	mov	r1, r5
 80074a6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80074aa:	f7f8 feed 	bl	8000288 <__aeabi_dsub>
 80074ae:	f806 4b01 	strb.w	r4, [r6], #1
 80074b2:	9d03      	ldr	r5, [sp, #12]
 80074b4:	eba6 040a 	sub.w	r4, r6, sl
 80074b8:	42a5      	cmp	r5, r4
 80074ba:	4602      	mov	r2, r0
 80074bc:	460b      	mov	r3, r1
 80074be:	d133      	bne.n	8007528 <_dtoa_r+0x6e0>
 80074c0:	f7f8 fee4 	bl	800028c <__adddf3>
 80074c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074c8:	4604      	mov	r4, r0
 80074ca:	460d      	mov	r5, r1
 80074cc:	f7f9 fb24 	bl	8000b18 <__aeabi_dcmpgt>
 80074d0:	b9c0      	cbnz	r0, 8007504 <_dtoa_r+0x6bc>
 80074d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074d6:	4620      	mov	r0, r4
 80074d8:	4629      	mov	r1, r5
 80074da:	f7f9 faf5 	bl	8000ac8 <__aeabi_dcmpeq>
 80074de:	b110      	cbz	r0, 80074e6 <_dtoa_r+0x69e>
 80074e0:	f018 0f01 	tst.w	r8, #1
 80074e4:	d10e      	bne.n	8007504 <_dtoa_r+0x6bc>
 80074e6:	9902      	ldr	r1, [sp, #8]
 80074e8:	4648      	mov	r0, r9
 80074ea:	f000 fd77 	bl	8007fdc <_Bfree>
 80074ee:	2300      	movs	r3, #0
 80074f0:	7033      	strb	r3, [r6, #0]
 80074f2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80074f4:	3701      	adds	r7, #1
 80074f6:	601f      	str	r7, [r3, #0]
 80074f8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	f000 824b 	beq.w	8007996 <_dtoa_r+0xb4e>
 8007500:	601e      	str	r6, [r3, #0]
 8007502:	e248      	b.n	8007996 <_dtoa_r+0xb4e>
 8007504:	46b8      	mov	r8, r7
 8007506:	4633      	mov	r3, r6
 8007508:	461e      	mov	r6, r3
 800750a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800750e:	2a39      	cmp	r2, #57	@ 0x39
 8007510:	d106      	bne.n	8007520 <_dtoa_r+0x6d8>
 8007512:	459a      	cmp	sl, r3
 8007514:	d1f8      	bne.n	8007508 <_dtoa_r+0x6c0>
 8007516:	2230      	movs	r2, #48	@ 0x30
 8007518:	f108 0801 	add.w	r8, r8, #1
 800751c:	f88a 2000 	strb.w	r2, [sl]
 8007520:	781a      	ldrb	r2, [r3, #0]
 8007522:	3201      	adds	r2, #1
 8007524:	701a      	strb	r2, [r3, #0]
 8007526:	e7a0      	b.n	800746a <_dtoa_r+0x622>
 8007528:	4b6f      	ldr	r3, [pc, #444]	@ (80076e8 <_dtoa_r+0x8a0>)
 800752a:	2200      	movs	r2, #0
 800752c:	f7f9 f864 	bl	80005f8 <__aeabi_dmul>
 8007530:	2200      	movs	r2, #0
 8007532:	2300      	movs	r3, #0
 8007534:	4604      	mov	r4, r0
 8007536:	460d      	mov	r5, r1
 8007538:	f7f9 fac6 	bl	8000ac8 <__aeabi_dcmpeq>
 800753c:	2800      	cmp	r0, #0
 800753e:	d09f      	beq.n	8007480 <_dtoa_r+0x638>
 8007540:	e7d1      	b.n	80074e6 <_dtoa_r+0x69e>
 8007542:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007544:	2a00      	cmp	r2, #0
 8007546:	f000 80ea 	beq.w	800771e <_dtoa_r+0x8d6>
 800754a:	9a07      	ldr	r2, [sp, #28]
 800754c:	2a01      	cmp	r2, #1
 800754e:	f300 80cd 	bgt.w	80076ec <_dtoa_r+0x8a4>
 8007552:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007554:	2a00      	cmp	r2, #0
 8007556:	f000 80c1 	beq.w	80076dc <_dtoa_r+0x894>
 800755a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800755e:	9c08      	ldr	r4, [sp, #32]
 8007560:	9e00      	ldr	r6, [sp, #0]
 8007562:	9a00      	ldr	r2, [sp, #0]
 8007564:	441a      	add	r2, r3
 8007566:	9200      	str	r2, [sp, #0]
 8007568:	9a06      	ldr	r2, [sp, #24]
 800756a:	2101      	movs	r1, #1
 800756c:	441a      	add	r2, r3
 800756e:	4648      	mov	r0, r9
 8007570:	9206      	str	r2, [sp, #24]
 8007572:	f000 fde7 	bl	8008144 <__i2b>
 8007576:	4605      	mov	r5, r0
 8007578:	b166      	cbz	r6, 8007594 <_dtoa_r+0x74c>
 800757a:	9b06      	ldr	r3, [sp, #24]
 800757c:	2b00      	cmp	r3, #0
 800757e:	dd09      	ble.n	8007594 <_dtoa_r+0x74c>
 8007580:	42b3      	cmp	r3, r6
 8007582:	9a00      	ldr	r2, [sp, #0]
 8007584:	bfa8      	it	ge
 8007586:	4633      	movge	r3, r6
 8007588:	1ad2      	subs	r2, r2, r3
 800758a:	9200      	str	r2, [sp, #0]
 800758c:	9a06      	ldr	r2, [sp, #24]
 800758e:	1af6      	subs	r6, r6, r3
 8007590:	1ad3      	subs	r3, r2, r3
 8007592:	9306      	str	r3, [sp, #24]
 8007594:	9b08      	ldr	r3, [sp, #32]
 8007596:	b30b      	cbz	r3, 80075dc <_dtoa_r+0x794>
 8007598:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800759a:	2b00      	cmp	r3, #0
 800759c:	f000 80c6 	beq.w	800772c <_dtoa_r+0x8e4>
 80075a0:	2c00      	cmp	r4, #0
 80075a2:	f000 80c0 	beq.w	8007726 <_dtoa_r+0x8de>
 80075a6:	4629      	mov	r1, r5
 80075a8:	4622      	mov	r2, r4
 80075aa:	4648      	mov	r0, r9
 80075ac:	f000 fe82 	bl	80082b4 <__pow5mult>
 80075b0:	9a02      	ldr	r2, [sp, #8]
 80075b2:	4601      	mov	r1, r0
 80075b4:	4605      	mov	r5, r0
 80075b6:	4648      	mov	r0, r9
 80075b8:	f000 fdda 	bl	8008170 <__multiply>
 80075bc:	9902      	ldr	r1, [sp, #8]
 80075be:	4680      	mov	r8, r0
 80075c0:	4648      	mov	r0, r9
 80075c2:	f000 fd0b 	bl	8007fdc <_Bfree>
 80075c6:	9b08      	ldr	r3, [sp, #32]
 80075c8:	1b1b      	subs	r3, r3, r4
 80075ca:	9308      	str	r3, [sp, #32]
 80075cc:	f000 80b1 	beq.w	8007732 <_dtoa_r+0x8ea>
 80075d0:	9a08      	ldr	r2, [sp, #32]
 80075d2:	4641      	mov	r1, r8
 80075d4:	4648      	mov	r0, r9
 80075d6:	f000 fe6d 	bl	80082b4 <__pow5mult>
 80075da:	9002      	str	r0, [sp, #8]
 80075dc:	2101      	movs	r1, #1
 80075de:	4648      	mov	r0, r9
 80075e0:	f000 fdb0 	bl	8008144 <__i2b>
 80075e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80075e6:	4604      	mov	r4, r0
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	f000 81d8 	beq.w	800799e <_dtoa_r+0xb56>
 80075ee:	461a      	mov	r2, r3
 80075f0:	4601      	mov	r1, r0
 80075f2:	4648      	mov	r0, r9
 80075f4:	f000 fe5e 	bl	80082b4 <__pow5mult>
 80075f8:	9b07      	ldr	r3, [sp, #28]
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	4604      	mov	r4, r0
 80075fe:	f300 809f 	bgt.w	8007740 <_dtoa_r+0x8f8>
 8007602:	9b04      	ldr	r3, [sp, #16]
 8007604:	2b00      	cmp	r3, #0
 8007606:	f040 8097 	bne.w	8007738 <_dtoa_r+0x8f0>
 800760a:	9b05      	ldr	r3, [sp, #20]
 800760c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007610:	2b00      	cmp	r3, #0
 8007612:	f040 8093 	bne.w	800773c <_dtoa_r+0x8f4>
 8007616:	9b05      	ldr	r3, [sp, #20]
 8007618:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800761c:	0d1b      	lsrs	r3, r3, #20
 800761e:	051b      	lsls	r3, r3, #20
 8007620:	b133      	cbz	r3, 8007630 <_dtoa_r+0x7e8>
 8007622:	9b00      	ldr	r3, [sp, #0]
 8007624:	3301      	adds	r3, #1
 8007626:	9300      	str	r3, [sp, #0]
 8007628:	9b06      	ldr	r3, [sp, #24]
 800762a:	3301      	adds	r3, #1
 800762c:	9306      	str	r3, [sp, #24]
 800762e:	2301      	movs	r3, #1
 8007630:	9308      	str	r3, [sp, #32]
 8007632:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007634:	2b00      	cmp	r3, #0
 8007636:	f000 81b8 	beq.w	80079aa <_dtoa_r+0xb62>
 800763a:	6923      	ldr	r3, [r4, #16]
 800763c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007640:	6918      	ldr	r0, [r3, #16]
 8007642:	f000 fd33 	bl	80080ac <__hi0bits>
 8007646:	f1c0 0020 	rsb	r0, r0, #32
 800764a:	9b06      	ldr	r3, [sp, #24]
 800764c:	4418      	add	r0, r3
 800764e:	f010 001f 	ands.w	r0, r0, #31
 8007652:	f000 8082 	beq.w	800775a <_dtoa_r+0x912>
 8007656:	f1c0 0320 	rsb	r3, r0, #32
 800765a:	2b04      	cmp	r3, #4
 800765c:	dd73      	ble.n	8007746 <_dtoa_r+0x8fe>
 800765e:	9b00      	ldr	r3, [sp, #0]
 8007660:	f1c0 001c 	rsb	r0, r0, #28
 8007664:	4403      	add	r3, r0
 8007666:	9300      	str	r3, [sp, #0]
 8007668:	9b06      	ldr	r3, [sp, #24]
 800766a:	4403      	add	r3, r0
 800766c:	4406      	add	r6, r0
 800766e:	9306      	str	r3, [sp, #24]
 8007670:	9b00      	ldr	r3, [sp, #0]
 8007672:	2b00      	cmp	r3, #0
 8007674:	dd05      	ble.n	8007682 <_dtoa_r+0x83a>
 8007676:	9902      	ldr	r1, [sp, #8]
 8007678:	461a      	mov	r2, r3
 800767a:	4648      	mov	r0, r9
 800767c:	f000 fe74 	bl	8008368 <__lshift>
 8007680:	9002      	str	r0, [sp, #8]
 8007682:	9b06      	ldr	r3, [sp, #24]
 8007684:	2b00      	cmp	r3, #0
 8007686:	dd05      	ble.n	8007694 <_dtoa_r+0x84c>
 8007688:	4621      	mov	r1, r4
 800768a:	461a      	mov	r2, r3
 800768c:	4648      	mov	r0, r9
 800768e:	f000 fe6b 	bl	8008368 <__lshift>
 8007692:	4604      	mov	r4, r0
 8007694:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007696:	2b00      	cmp	r3, #0
 8007698:	d061      	beq.n	800775e <_dtoa_r+0x916>
 800769a:	9802      	ldr	r0, [sp, #8]
 800769c:	4621      	mov	r1, r4
 800769e:	f000 fecf 	bl	8008440 <__mcmp>
 80076a2:	2800      	cmp	r0, #0
 80076a4:	da5b      	bge.n	800775e <_dtoa_r+0x916>
 80076a6:	2300      	movs	r3, #0
 80076a8:	9902      	ldr	r1, [sp, #8]
 80076aa:	220a      	movs	r2, #10
 80076ac:	4648      	mov	r0, r9
 80076ae:	f000 fcb7 	bl	8008020 <__multadd>
 80076b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076b4:	9002      	str	r0, [sp, #8]
 80076b6:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	f000 8177 	beq.w	80079ae <_dtoa_r+0xb66>
 80076c0:	4629      	mov	r1, r5
 80076c2:	2300      	movs	r3, #0
 80076c4:	220a      	movs	r2, #10
 80076c6:	4648      	mov	r0, r9
 80076c8:	f000 fcaa 	bl	8008020 <__multadd>
 80076cc:	f1bb 0f00 	cmp.w	fp, #0
 80076d0:	4605      	mov	r5, r0
 80076d2:	dc6f      	bgt.n	80077b4 <_dtoa_r+0x96c>
 80076d4:	9b07      	ldr	r3, [sp, #28]
 80076d6:	2b02      	cmp	r3, #2
 80076d8:	dc49      	bgt.n	800776e <_dtoa_r+0x926>
 80076da:	e06b      	b.n	80077b4 <_dtoa_r+0x96c>
 80076dc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80076de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80076e2:	e73c      	b.n	800755e <_dtoa_r+0x716>
 80076e4:	3fe00000 	.word	0x3fe00000
 80076e8:	40240000 	.word	0x40240000
 80076ec:	9b03      	ldr	r3, [sp, #12]
 80076ee:	1e5c      	subs	r4, r3, #1
 80076f0:	9b08      	ldr	r3, [sp, #32]
 80076f2:	42a3      	cmp	r3, r4
 80076f4:	db09      	blt.n	800770a <_dtoa_r+0x8c2>
 80076f6:	1b1c      	subs	r4, r3, r4
 80076f8:	9b03      	ldr	r3, [sp, #12]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	f6bf af30 	bge.w	8007560 <_dtoa_r+0x718>
 8007700:	9b00      	ldr	r3, [sp, #0]
 8007702:	9a03      	ldr	r2, [sp, #12]
 8007704:	1a9e      	subs	r6, r3, r2
 8007706:	2300      	movs	r3, #0
 8007708:	e72b      	b.n	8007562 <_dtoa_r+0x71a>
 800770a:	9b08      	ldr	r3, [sp, #32]
 800770c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800770e:	9408      	str	r4, [sp, #32]
 8007710:	1ae3      	subs	r3, r4, r3
 8007712:	441a      	add	r2, r3
 8007714:	9e00      	ldr	r6, [sp, #0]
 8007716:	9b03      	ldr	r3, [sp, #12]
 8007718:	920d      	str	r2, [sp, #52]	@ 0x34
 800771a:	2400      	movs	r4, #0
 800771c:	e721      	b.n	8007562 <_dtoa_r+0x71a>
 800771e:	9c08      	ldr	r4, [sp, #32]
 8007720:	9e00      	ldr	r6, [sp, #0]
 8007722:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8007724:	e728      	b.n	8007578 <_dtoa_r+0x730>
 8007726:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800772a:	e751      	b.n	80075d0 <_dtoa_r+0x788>
 800772c:	9a08      	ldr	r2, [sp, #32]
 800772e:	9902      	ldr	r1, [sp, #8]
 8007730:	e750      	b.n	80075d4 <_dtoa_r+0x78c>
 8007732:	f8cd 8008 	str.w	r8, [sp, #8]
 8007736:	e751      	b.n	80075dc <_dtoa_r+0x794>
 8007738:	2300      	movs	r3, #0
 800773a:	e779      	b.n	8007630 <_dtoa_r+0x7e8>
 800773c:	9b04      	ldr	r3, [sp, #16]
 800773e:	e777      	b.n	8007630 <_dtoa_r+0x7e8>
 8007740:	2300      	movs	r3, #0
 8007742:	9308      	str	r3, [sp, #32]
 8007744:	e779      	b.n	800763a <_dtoa_r+0x7f2>
 8007746:	d093      	beq.n	8007670 <_dtoa_r+0x828>
 8007748:	9a00      	ldr	r2, [sp, #0]
 800774a:	331c      	adds	r3, #28
 800774c:	441a      	add	r2, r3
 800774e:	9200      	str	r2, [sp, #0]
 8007750:	9a06      	ldr	r2, [sp, #24]
 8007752:	441a      	add	r2, r3
 8007754:	441e      	add	r6, r3
 8007756:	9206      	str	r2, [sp, #24]
 8007758:	e78a      	b.n	8007670 <_dtoa_r+0x828>
 800775a:	4603      	mov	r3, r0
 800775c:	e7f4      	b.n	8007748 <_dtoa_r+0x900>
 800775e:	9b03      	ldr	r3, [sp, #12]
 8007760:	2b00      	cmp	r3, #0
 8007762:	46b8      	mov	r8, r7
 8007764:	dc20      	bgt.n	80077a8 <_dtoa_r+0x960>
 8007766:	469b      	mov	fp, r3
 8007768:	9b07      	ldr	r3, [sp, #28]
 800776a:	2b02      	cmp	r3, #2
 800776c:	dd1e      	ble.n	80077ac <_dtoa_r+0x964>
 800776e:	f1bb 0f00 	cmp.w	fp, #0
 8007772:	f47f adb1 	bne.w	80072d8 <_dtoa_r+0x490>
 8007776:	4621      	mov	r1, r4
 8007778:	465b      	mov	r3, fp
 800777a:	2205      	movs	r2, #5
 800777c:	4648      	mov	r0, r9
 800777e:	f000 fc4f 	bl	8008020 <__multadd>
 8007782:	4601      	mov	r1, r0
 8007784:	4604      	mov	r4, r0
 8007786:	9802      	ldr	r0, [sp, #8]
 8007788:	f000 fe5a 	bl	8008440 <__mcmp>
 800778c:	2800      	cmp	r0, #0
 800778e:	f77f ada3 	ble.w	80072d8 <_dtoa_r+0x490>
 8007792:	4656      	mov	r6, sl
 8007794:	2331      	movs	r3, #49	@ 0x31
 8007796:	f806 3b01 	strb.w	r3, [r6], #1
 800779a:	f108 0801 	add.w	r8, r8, #1
 800779e:	e59f      	b.n	80072e0 <_dtoa_r+0x498>
 80077a0:	9c03      	ldr	r4, [sp, #12]
 80077a2:	46b8      	mov	r8, r7
 80077a4:	4625      	mov	r5, r4
 80077a6:	e7f4      	b.n	8007792 <_dtoa_r+0x94a>
 80077a8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80077ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	f000 8101 	beq.w	80079b6 <_dtoa_r+0xb6e>
 80077b4:	2e00      	cmp	r6, #0
 80077b6:	dd05      	ble.n	80077c4 <_dtoa_r+0x97c>
 80077b8:	4629      	mov	r1, r5
 80077ba:	4632      	mov	r2, r6
 80077bc:	4648      	mov	r0, r9
 80077be:	f000 fdd3 	bl	8008368 <__lshift>
 80077c2:	4605      	mov	r5, r0
 80077c4:	9b08      	ldr	r3, [sp, #32]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d05c      	beq.n	8007884 <_dtoa_r+0xa3c>
 80077ca:	6869      	ldr	r1, [r5, #4]
 80077cc:	4648      	mov	r0, r9
 80077ce:	f000 fbc5 	bl	8007f5c <_Balloc>
 80077d2:	4606      	mov	r6, r0
 80077d4:	b928      	cbnz	r0, 80077e2 <_dtoa_r+0x99a>
 80077d6:	4b82      	ldr	r3, [pc, #520]	@ (80079e0 <_dtoa_r+0xb98>)
 80077d8:	4602      	mov	r2, r0
 80077da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80077de:	f7ff bb4a 	b.w	8006e76 <_dtoa_r+0x2e>
 80077e2:	692a      	ldr	r2, [r5, #16]
 80077e4:	3202      	adds	r2, #2
 80077e6:	0092      	lsls	r2, r2, #2
 80077e8:	f105 010c 	add.w	r1, r5, #12
 80077ec:	300c      	adds	r0, #12
 80077ee:	f001 f811 	bl	8008814 <memcpy>
 80077f2:	2201      	movs	r2, #1
 80077f4:	4631      	mov	r1, r6
 80077f6:	4648      	mov	r0, r9
 80077f8:	f000 fdb6 	bl	8008368 <__lshift>
 80077fc:	f10a 0301 	add.w	r3, sl, #1
 8007800:	9300      	str	r3, [sp, #0]
 8007802:	eb0a 030b 	add.w	r3, sl, fp
 8007806:	9308      	str	r3, [sp, #32]
 8007808:	9b04      	ldr	r3, [sp, #16]
 800780a:	f003 0301 	and.w	r3, r3, #1
 800780e:	462f      	mov	r7, r5
 8007810:	9306      	str	r3, [sp, #24]
 8007812:	4605      	mov	r5, r0
 8007814:	9b00      	ldr	r3, [sp, #0]
 8007816:	9802      	ldr	r0, [sp, #8]
 8007818:	4621      	mov	r1, r4
 800781a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800781e:	f7ff fa89 	bl	8006d34 <quorem>
 8007822:	4603      	mov	r3, r0
 8007824:	3330      	adds	r3, #48	@ 0x30
 8007826:	9003      	str	r0, [sp, #12]
 8007828:	4639      	mov	r1, r7
 800782a:	9802      	ldr	r0, [sp, #8]
 800782c:	9309      	str	r3, [sp, #36]	@ 0x24
 800782e:	f000 fe07 	bl	8008440 <__mcmp>
 8007832:	462a      	mov	r2, r5
 8007834:	9004      	str	r0, [sp, #16]
 8007836:	4621      	mov	r1, r4
 8007838:	4648      	mov	r0, r9
 800783a:	f000 fe1d 	bl	8008478 <__mdiff>
 800783e:	68c2      	ldr	r2, [r0, #12]
 8007840:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007842:	4606      	mov	r6, r0
 8007844:	bb02      	cbnz	r2, 8007888 <_dtoa_r+0xa40>
 8007846:	4601      	mov	r1, r0
 8007848:	9802      	ldr	r0, [sp, #8]
 800784a:	f000 fdf9 	bl	8008440 <__mcmp>
 800784e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007850:	4602      	mov	r2, r0
 8007852:	4631      	mov	r1, r6
 8007854:	4648      	mov	r0, r9
 8007856:	920c      	str	r2, [sp, #48]	@ 0x30
 8007858:	9309      	str	r3, [sp, #36]	@ 0x24
 800785a:	f000 fbbf 	bl	8007fdc <_Bfree>
 800785e:	9b07      	ldr	r3, [sp, #28]
 8007860:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007862:	9e00      	ldr	r6, [sp, #0]
 8007864:	ea42 0103 	orr.w	r1, r2, r3
 8007868:	9b06      	ldr	r3, [sp, #24]
 800786a:	4319      	orrs	r1, r3
 800786c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800786e:	d10d      	bne.n	800788c <_dtoa_r+0xa44>
 8007870:	2b39      	cmp	r3, #57	@ 0x39
 8007872:	d027      	beq.n	80078c4 <_dtoa_r+0xa7c>
 8007874:	9a04      	ldr	r2, [sp, #16]
 8007876:	2a00      	cmp	r2, #0
 8007878:	dd01      	ble.n	800787e <_dtoa_r+0xa36>
 800787a:	9b03      	ldr	r3, [sp, #12]
 800787c:	3331      	adds	r3, #49	@ 0x31
 800787e:	f88b 3000 	strb.w	r3, [fp]
 8007882:	e52e      	b.n	80072e2 <_dtoa_r+0x49a>
 8007884:	4628      	mov	r0, r5
 8007886:	e7b9      	b.n	80077fc <_dtoa_r+0x9b4>
 8007888:	2201      	movs	r2, #1
 800788a:	e7e2      	b.n	8007852 <_dtoa_r+0xa0a>
 800788c:	9904      	ldr	r1, [sp, #16]
 800788e:	2900      	cmp	r1, #0
 8007890:	db04      	blt.n	800789c <_dtoa_r+0xa54>
 8007892:	9807      	ldr	r0, [sp, #28]
 8007894:	4301      	orrs	r1, r0
 8007896:	9806      	ldr	r0, [sp, #24]
 8007898:	4301      	orrs	r1, r0
 800789a:	d120      	bne.n	80078de <_dtoa_r+0xa96>
 800789c:	2a00      	cmp	r2, #0
 800789e:	ddee      	ble.n	800787e <_dtoa_r+0xa36>
 80078a0:	9902      	ldr	r1, [sp, #8]
 80078a2:	9300      	str	r3, [sp, #0]
 80078a4:	2201      	movs	r2, #1
 80078a6:	4648      	mov	r0, r9
 80078a8:	f000 fd5e 	bl	8008368 <__lshift>
 80078ac:	4621      	mov	r1, r4
 80078ae:	9002      	str	r0, [sp, #8]
 80078b0:	f000 fdc6 	bl	8008440 <__mcmp>
 80078b4:	2800      	cmp	r0, #0
 80078b6:	9b00      	ldr	r3, [sp, #0]
 80078b8:	dc02      	bgt.n	80078c0 <_dtoa_r+0xa78>
 80078ba:	d1e0      	bne.n	800787e <_dtoa_r+0xa36>
 80078bc:	07da      	lsls	r2, r3, #31
 80078be:	d5de      	bpl.n	800787e <_dtoa_r+0xa36>
 80078c0:	2b39      	cmp	r3, #57	@ 0x39
 80078c2:	d1da      	bne.n	800787a <_dtoa_r+0xa32>
 80078c4:	2339      	movs	r3, #57	@ 0x39
 80078c6:	f88b 3000 	strb.w	r3, [fp]
 80078ca:	4633      	mov	r3, r6
 80078cc:	461e      	mov	r6, r3
 80078ce:	3b01      	subs	r3, #1
 80078d0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80078d4:	2a39      	cmp	r2, #57	@ 0x39
 80078d6:	d04e      	beq.n	8007976 <_dtoa_r+0xb2e>
 80078d8:	3201      	adds	r2, #1
 80078da:	701a      	strb	r2, [r3, #0]
 80078dc:	e501      	b.n	80072e2 <_dtoa_r+0x49a>
 80078de:	2a00      	cmp	r2, #0
 80078e0:	dd03      	ble.n	80078ea <_dtoa_r+0xaa2>
 80078e2:	2b39      	cmp	r3, #57	@ 0x39
 80078e4:	d0ee      	beq.n	80078c4 <_dtoa_r+0xa7c>
 80078e6:	3301      	adds	r3, #1
 80078e8:	e7c9      	b.n	800787e <_dtoa_r+0xa36>
 80078ea:	9a00      	ldr	r2, [sp, #0]
 80078ec:	9908      	ldr	r1, [sp, #32]
 80078ee:	f802 3c01 	strb.w	r3, [r2, #-1]
 80078f2:	428a      	cmp	r2, r1
 80078f4:	d028      	beq.n	8007948 <_dtoa_r+0xb00>
 80078f6:	9902      	ldr	r1, [sp, #8]
 80078f8:	2300      	movs	r3, #0
 80078fa:	220a      	movs	r2, #10
 80078fc:	4648      	mov	r0, r9
 80078fe:	f000 fb8f 	bl	8008020 <__multadd>
 8007902:	42af      	cmp	r7, r5
 8007904:	9002      	str	r0, [sp, #8]
 8007906:	f04f 0300 	mov.w	r3, #0
 800790a:	f04f 020a 	mov.w	r2, #10
 800790e:	4639      	mov	r1, r7
 8007910:	4648      	mov	r0, r9
 8007912:	d107      	bne.n	8007924 <_dtoa_r+0xadc>
 8007914:	f000 fb84 	bl	8008020 <__multadd>
 8007918:	4607      	mov	r7, r0
 800791a:	4605      	mov	r5, r0
 800791c:	9b00      	ldr	r3, [sp, #0]
 800791e:	3301      	adds	r3, #1
 8007920:	9300      	str	r3, [sp, #0]
 8007922:	e777      	b.n	8007814 <_dtoa_r+0x9cc>
 8007924:	f000 fb7c 	bl	8008020 <__multadd>
 8007928:	4629      	mov	r1, r5
 800792a:	4607      	mov	r7, r0
 800792c:	2300      	movs	r3, #0
 800792e:	220a      	movs	r2, #10
 8007930:	4648      	mov	r0, r9
 8007932:	f000 fb75 	bl	8008020 <__multadd>
 8007936:	4605      	mov	r5, r0
 8007938:	e7f0      	b.n	800791c <_dtoa_r+0xad4>
 800793a:	f1bb 0f00 	cmp.w	fp, #0
 800793e:	bfcc      	ite	gt
 8007940:	465e      	movgt	r6, fp
 8007942:	2601      	movle	r6, #1
 8007944:	4456      	add	r6, sl
 8007946:	2700      	movs	r7, #0
 8007948:	9902      	ldr	r1, [sp, #8]
 800794a:	9300      	str	r3, [sp, #0]
 800794c:	2201      	movs	r2, #1
 800794e:	4648      	mov	r0, r9
 8007950:	f000 fd0a 	bl	8008368 <__lshift>
 8007954:	4621      	mov	r1, r4
 8007956:	9002      	str	r0, [sp, #8]
 8007958:	f000 fd72 	bl	8008440 <__mcmp>
 800795c:	2800      	cmp	r0, #0
 800795e:	dcb4      	bgt.n	80078ca <_dtoa_r+0xa82>
 8007960:	d102      	bne.n	8007968 <_dtoa_r+0xb20>
 8007962:	9b00      	ldr	r3, [sp, #0]
 8007964:	07db      	lsls	r3, r3, #31
 8007966:	d4b0      	bmi.n	80078ca <_dtoa_r+0xa82>
 8007968:	4633      	mov	r3, r6
 800796a:	461e      	mov	r6, r3
 800796c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007970:	2a30      	cmp	r2, #48	@ 0x30
 8007972:	d0fa      	beq.n	800796a <_dtoa_r+0xb22>
 8007974:	e4b5      	b.n	80072e2 <_dtoa_r+0x49a>
 8007976:	459a      	cmp	sl, r3
 8007978:	d1a8      	bne.n	80078cc <_dtoa_r+0xa84>
 800797a:	2331      	movs	r3, #49	@ 0x31
 800797c:	f108 0801 	add.w	r8, r8, #1
 8007980:	f88a 3000 	strb.w	r3, [sl]
 8007984:	e4ad      	b.n	80072e2 <_dtoa_r+0x49a>
 8007986:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007988:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80079e4 <_dtoa_r+0xb9c>
 800798c:	b11b      	cbz	r3, 8007996 <_dtoa_r+0xb4e>
 800798e:	f10a 0308 	add.w	r3, sl, #8
 8007992:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007994:	6013      	str	r3, [r2, #0]
 8007996:	4650      	mov	r0, sl
 8007998:	b017      	add	sp, #92	@ 0x5c
 800799a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800799e:	9b07      	ldr	r3, [sp, #28]
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	f77f ae2e 	ble.w	8007602 <_dtoa_r+0x7ba>
 80079a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80079a8:	9308      	str	r3, [sp, #32]
 80079aa:	2001      	movs	r0, #1
 80079ac:	e64d      	b.n	800764a <_dtoa_r+0x802>
 80079ae:	f1bb 0f00 	cmp.w	fp, #0
 80079b2:	f77f aed9 	ble.w	8007768 <_dtoa_r+0x920>
 80079b6:	4656      	mov	r6, sl
 80079b8:	9802      	ldr	r0, [sp, #8]
 80079ba:	4621      	mov	r1, r4
 80079bc:	f7ff f9ba 	bl	8006d34 <quorem>
 80079c0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80079c4:	f806 3b01 	strb.w	r3, [r6], #1
 80079c8:	eba6 020a 	sub.w	r2, r6, sl
 80079cc:	4593      	cmp	fp, r2
 80079ce:	ddb4      	ble.n	800793a <_dtoa_r+0xaf2>
 80079d0:	9902      	ldr	r1, [sp, #8]
 80079d2:	2300      	movs	r3, #0
 80079d4:	220a      	movs	r2, #10
 80079d6:	4648      	mov	r0, r9
 80079d8:	f000 fb22 	bl	8008020 <__multadd>
 80079dc:	9002      	str	r0, [sp, #8]
 80079de:	e7eb      	b.n	80079b8 <_dtoa_r+0xb70>
 80079e0:	0800903c 	.word	0x0800903c
 80079e4:	08008fc0 	.word	0x08008fc0

080079e8 <__ssputs_r>:
 80079e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079ec:	688e      	ldr	r6, [r1, #8]
 80079ee:	461f      	mov	r7, r3
 80079f0:	42be      	cmp	r6, r7
 80079f2:	680b      	ldr	r3, [r1, #0]
 80079f4:	4682      	mov	sl, r0
 80079f6:	460c      	mov	r4, r1
 80079f8:	4690      	mov	r8, r2
 80079fa:	d82d      	bhi.n	8007a58 <__ssputs_r+0x70>
 80079fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007a00:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007a04:	d026      	beq.n	8007a54 <__ssputs_r+0x6c>
 8007a06:	6965      	ldr	r5, [r4, #20]
 8007a08:	6909      	ldr	r1, [r1, #16]
 8007a0a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a0e:	eba3 0901 	sub.w	r9, r3, r1
 8007a12:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a16:	1c7b      	adds	r3, r7, #1
 8007a18:	444b      	add	r3, r9
 8007a1a:	106d      	asrs	r5, r5, #1
 8007a1c:	429d      	cmp	r5, r3
 8007a1e:	bf38      	it	cc
 8007a20:	461d      	movcc	r5, r3
 8007a22:	0553      	lsls	r3, r2, #21
 8007a24:	d527      	bpl.n	8007a76 <__ssputs_r+0x8e>
 8007a26:	4629      	mov	r1, r5
 8007a28:	f000 f960 	bl	8007cec <_malloc_r>
 8007a2c:	4606      	mov	r6, r0
 8007a2e:	b360      	cbz	r0, 8007a8a <__ssputs_r+0xa2>
 8007a30:	6921      	ldr	r1, [r4, #16]
 8007a32:	464a      	mov	r2, r9
 8007a34:	f000 feee 	bl	8008814 <memcpy>
 8007a38:	89a3      	ldrh	r3, [r4, #12]
 8007a3a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007a3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a42:	81a3      	strh	r3, [r4, #12]
 8007a44:	6126      	str	r6, [r4, #16]
 8007a46:	6165      	str	r5, [r4, #20]
 8007a48:	444e      	add	r6, r9
 8007a4a:	eba5 0509 	sub.w	r5, r5, r9
 8007a4e:	6026      	str	r6, [r4, #0]
 8007a50:	60a5      	str	r5, [r4, #8]
 8007a52:	463e      	mov	r6, r7
 8007a54:	42be      	cmp	r6, r7
 8007a56:	d900      	bls.n	8007a5a <__ssputs_r+0x72>
 8007a58:	463e      	mov	r6, r7
 8007a5a:	6820      	ldr	r0, [r4, #0]
 8007a5c:	4632      	mov	r2, r6
 8007a5e:	4641      	mov	r1, r8
 8007a60:	f000 fe67 	bl	8008732 <memmove>
 8007a64:	68a3      	ldr	r3, [r4, #8]
 8007a66:	1b9b      	subs	r3, r3, r6
 8007a68:	60a3      	str	r3, [r4, #8]
 8007a6a:	6823      	ldr	r3, [r4, #0]
 8007a6c:	4433      	add	r3, r6
 8007a6e:	6023      	str	r3, [r4, #0]
 8007a70:	2000      	movs	r0, #0
 8007a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a76:	462a      	mov	r2, r5
 8007a78:	f000 fe2d 	bl	80086d6 <_realloc_r>
 8007a7c:	4606      	mov	r6, r0
 8007a7e:	2800      	cmp	r0, #0
 8007a80:	d1e0      	bne.n	8007a44 <__ssputs_r+0x5c>
 8007a82:	6921      	ldr	r1, [r4, #16]
 8007a84:	4650      	mov	r0, sl
 8007a86:	f000 ff05 	bl	8008894 <_free_r>
 8007a8a:	230c      	movs	r3, #12
 8007a8c:	f8ca 3000 	str.w	r3, [sl]
 8007a90:	89a3      	ldrh	r3, [r4, #12]
 8007a92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a96:	81a3      	strh	r3, [r4, #12]
 8007a98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007a9c:	e7e9      	b.n	8007a72 <__ssputs_r+0x8a>
	...

08007aa0 <_svfiprintf_r>:
 8007aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aa4:	4698      	mov	r8, r3
 8007aa6:	898b      	ldrh	r3, [r1, #12]
 8007aa8:	061b      	lsls	r3, r3, #24
 8007aaa:	b09d      	sub	sp, #116	@ 0x74
 8007aac:	4607      	mov	r7, r0
 8007aae:	460d      	mov	r5, r1
 8007ab0:	4614      	mov	r4, r2
 8007ab2:	d510      	bpl.n	8007ad6 <_svfiprintf_r+0x36>
 8007ab4:	690b      	ldr	r3, [r1, #16]
 8007ab6:	b973      	cbnz	r3, 8007ad6 <_svfiprintf_r+0x36>
 8007ab8:	2140      	movs	r1, #64	@ 0x40
 8007aba:	f000 f917 	bl	8007cec <_malloc_r>
 8007abe:	6028      	str	r0, [r5, #0]
 8007ac0:	6128      	str	r0, [r5, #16]
 8007ac2:	b930      	cbnz	r0, 8007ad2 <_svfiprintf_r+0x32>
 8007ac4:	230c      	movs	r3, #12
 8007ac6:	603b      	str	r3, [r7, #0]
 8007ac8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007acc:	b01d      	add	sp, #116	@ 0x74
 8007ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ad2:	2340      	movs	r3, #64	@ 0x40
 8007ad4:	616b      	str	r3, [r5, #20]
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ada:	2320      	movs	r3, #32
 8007adc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007ae0:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ae4:	2330      	movs	r3, #48	@ 0x30
 8007ae6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007c84 <_svfiprintf_r+0x1e4>
 8007aea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007aee:	f04f 0901 	mov.w	r9, #1
 8007af2:	4623      	mov	r3, r4
 8007af4:	469a      	mov	sl, r3
 8007af6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007afa:	b10a      	cbz	r2, 8007b00 <_svfiprintf_r+0x60>
 8007afc:	2a25      	cmp	r2, #37	@ 0x25
 8007afe:	d1f9      	bne.n	8007af4 <_svfiprintf_r+0x54>
 8007b00:	ebba 0b04 	subs.w	fp, sl, r4
 8007b04:	d00b      	beq.n	8007b1e <_svfiprintf_r+0x7e>
 8007b06:	465b      	mov	r3, fp
 8007b08:	4622      	mov	r2, r4
 8007b0a:	4629      	mov	r1, r5
 8007b0c:	4638      	mov	r0, r7
 8007b0e:	f7ff ff6b 	bl	80079e8 <__ssputs_r>
 8007b12:	3001      	adds	r0, #1
 8007b14:	f000 80a7 	beq.w	8007c66 <_svfiprintf_r+0x1c6>
 8007b18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b1a:	445a      	add	r2, fp
 8007b1c:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b1e:	f89a 3000 	ldrb.w	r3, [sl]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	f000 809f 	beq.w	8007c66 <_svfiprintf_r+0x1c6>
 8007b28:	2300      	movs	r3, #0
 8007b2a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007b2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b32:	f10a 0a01 	add.w	sl, sl, #1
 8007b36:	9304      	str	r3, [sp, #16]
 8007b38:	9307      	str	r3, [sp, #28]
 8007b3a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007b3e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007b40:	4654      	mov	r4, sl
 8007b42:	2205      	movs	r2, #5
 8007b44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b48:	484e      	ldr	r0, [pc, #312]	@ (8007c84 <_svfiprintf_r+0x1e4>)
 8007b4a:	f7f8 fb41 	bl	80001d0 <memchr>
 8007b4e:	9a04      	ldr	r2, [sp, #16]
 8007b50:	b9d8      	cbnz	r0, 8007b8a <_svfiprintf_r+0xea>
 8007b52:	06d0      	lsls	r0, r2, #27
 8007b54:	bf44      	itt	mi
 8007b56:	2320      	movmi	r3, #32
 8007b58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b5c:	0711      	lsls	r1, r2, #28
 8007b5e:	bf44      	itt	mi
 8007b60:	232b      	movmi	r3, #43	@ 0x2b
 8007b62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b66:	f89a 3000 	ldrb.w	r3, [sl]
 8007b6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b6c:	d015      	beq.n	8007b9a <_svfiprintf_r+0xfa>
 8007b6e:	9a07      	ldr	r2, [sp, #28]
 8007b70:	4654      	mov	r4, sl
 8007b72:	2000      	movs	r0, #0
 8007b74:	f04f 0c0a 	mov.w	ip, #10
 8007b78:	4621      	mov	r1, r4
 8007b7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b7e:	3b30      	subs	r3, #48	@ 0x30
 8007b80:	2b09      	cmp	r3, #9
 8007b82:	d94b      	bls.n	8007c1c <_svfiprintf_r+0x17c>
 8007b84:	b1b0      	cbz	r0, 8007bb4 <_svfiprintf_r+0x114>
 8007b86:	9207      	str	r2, [sp, #28]
 8007b88:	e014      	b.n	8007bb4 <_svfiprintf_r+0x114>
 8007b8a:	eba0 0308 	sub.w	r3, r0, r8
 8007b8e:	fa09 f303 	lsl.w	r3, r9, r3
 8007b92:	4313      	orrs	r3, r2
 8007b94:	9304      	str	r3, [sp, #16]
 8007b96:	46a2      	mov	sl, r4
 8007b98:	e7d2      	b.n	8007b40 <_svfiprintf_r+0xa0>
 8007b9a:	9b03      	ldr	r3, [sp, #12]
 8007b9c:	1d19      	adds	r1, r3, #4
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	9103      	str	r1, [sp, #12]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	bfbb      	ittet	lt
 8007ba6:	425b      	neglt	r3, r3
 8007ba8:	f042 0202 	orrlt.w	r2, r2, #2
 8007bac:	9307      	strge	r3, [sp, #28]
 8007bae:	9307      	strlt	r3, [sp, #28]
 8007bb0:	bfb8      	it	lt
 8007bb2:	9204      	strlt	r2, [sp, #16]
 8007bb4:	7823      	ldrb	r3, [r4, #0]
 8007bb6:	2b2e      	cmp	r3, #46	@ 0x2e
 8007bb8:	d10a      	bne.n	8007bd0 <_svfiprintf_r+0x130>
 8007bba:	7863      	ldrb	r3, [r4, #1]
 8007bbc:	2b2a      	cmp	r3, #42	@ 0x2a
 8007bbe:	d132      	bne.n	8007c26 <_svfiprintf_r+0x186>
 8007bc0:	9b03      	ldr	r3, [sp, #12]
 8007bc2:	1d1a      	adds	r2, r3, #4
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	9203      	str	r2, [sp, #12]
 8007bc8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007bcc:	3402      	adds	r4, #2
 8007bce:	9305      	str	r3, [sp, #20]
 8007bd0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007c94 <_svfiprintf_r+0x1f4>
 8007bd4:	7821      	ldrb	r1, [r4, #0]
 8007bd6:	2203      	movs	r2, #3
 8007bd8:	4650      	mov	r0, sl
 8007bda:	f7f8 faf9 	bl	80001d0 <memchr>
 8007bde:	b138      	cbz	r0, 8007bf0 <_svfiprintf_r+0x150>
 8007be0:	9b04      	ldr	r3, [sp, #16]
 8007be2:	eba0 000a 	sub.w	r0, r0, sl
 8007be6:	2240      	movs	r2, #64	@ 0x40
 8007be8:	4082      	lsls	r2, r0
 8007bea:	4313      	orrs	r3, r2
 8007bec:	3401      	adds	r4, #1
 8007bee:	9304      	str	r3, [sp, #16]
 8007bf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bf4:	4824      	ldr	r0, [pc, #144]	@ (8007c88 <_svfiprintf_r+0x1e8>)
 8007bf6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007bfa:	2206      	movs	r2, #6
 8007bfc:	f7f8 fae8 	bl	80001d0 <memchr>
 8007c00:	2800      	cmp	r0, #0
 8007c02:	d036      	beq.n	8007c72 <_svfiprintf_r+0x1d2>
 8007c04:	4b21      	ldr	r3, [pc, #132]	@ (8007c8c <_svfiprintf_r+0x1ec>)
 8007c06:	bb1b      	cbnz	r3, 8007c50 <_svfiprintf_r+0x1b0>
 8007c08:	9b03      	ldr	r3, [sp, #12]
 8007c0a:	3307      	adds	r3, #7
 8007c0c:	f023 0307 	bic.w	r3, r3, #7
 8007c10:	3308      	adds	r3, #8
 8007c12:	9303      	str	r3, [sp, #12]
 8007c14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c16:	4433      	add	r3, r6
 8007c18:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c1a:	e76a      	b.n	8007af2 <_svfiprintf_r+0x52>
 8007c1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c20:	460c      	mov	r4, r1
 8007c22:	2001      	movs	r0, #1
 8007c24:	e7a8      	b.n	8007b78 <_svfiprintf_r+0xd8>
 8007c26:	2300      	movs	r3, #0
 8007c28:	3401      	adds	r4, #1
 8007c2a:	9305      	str	r3, [sp, #20]
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	f04f 0c0a 	mov.w	ip, #10
 8007c32:	4620      	mov	r0, r4
 8007c34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c38:	3a30      	subs	r2, #48	@ 0x30
 8007c3a:	2a09      	cmp	r2, #9
 8007c3c:	d903      	bls.n	8007c46 <_svfiprintf_r+0x1a6>
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d0c6      	beq.n	8007bd0 <_svfiprintf_r+0x130>
 8007c42:	9105      	str	r1, [sp, #20]
 8007c44:	e7c4      	b.n	8007bd0 <_svfiprintf_r+0x130>
 8007c46:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c4a:	4604      	mov	r4, r0
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	e7f0      	b.n	8007c32 <_svfiprintf_r+0x192>
 8007c50:	ab03      	add	r3, sp, #12
 8007c52:	9300      	str	r3, [sp, #0]
 8007c54:	462a      	mov	r2, r5
 8007c56:	4b0e      	ldr	r3, [pc, #56]	@ (8007c90 <_svfiprintf_r+0x1f0>)
 8007c58:	a904      	add	r1, sp, #16
 8007c5a:	4638      	mov	r0, r7
 8007c5c:	f7fe fb96 	bl	800638c <_printf_float>
 8007c60:	1c42      	adds	r2, r0, #1
 8007c62:	4606      	mov	r6, r0
 8007c64:	d1d6      	bne.n	8007c14 <_svfiprintf_r+0x174>
 8007c66:	89ab      	ldrh	r3, [r5, #12]
 8007c68:	065b      	lsls	r3, r3, #25
 8007c6a:	f53f af2d 	bmi.w	8007ac8 <_svfiprintf_r+0x28>
 8007c6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c70:	e72c      	b.n	8007acc <_svfiprintf_r+0x2c>
 8007c72:	ab03      	add	r3, sp, #12
 8007c74:	9300      	str	r3, [sp, #0]
 8007c76:	462a      	mov	r2, r5
 8007c78:	4b05      	ldr	r3, [pc, #20]	@ (8007c90 <_svfiprintf_r+0x1f0>)
 8007c7a:	a904      	add	r1, sp, #16
 8007c7c:	4638      	mov	r0, r7
 8007c7e:	f7fe fe1d 	bl	80068bc <_printf_i>
 8007c82:	e7ed      	b.n	8007c60 <_svfiprintf_r+0x1c0>
 8007c84:	0800904d 	.word	0x0800904d
 8007c88:	08009057 	.word	0x08009057
 8007c8c:	0800638d 	.word	0x0800638d
 8007c90:	080079e9 	.word	0x080079e9
 8007c94:	08009053 	.word	0x08009053

08007c98 <malloc>:
 8007c98:	4b02      	ldr	r3, [pc, #8]	@ (8007ca4 <malloc+0xc>)
 8007c9a:	4601      	mov	r1, r0
 8007c9c:	6818      	ldr	r0, [r3, #0]
 8007c9e:	f000 b825 	b.w	8007cec <_malloc_r>
 8007ca2:	bf00      	nop
 8007ca4:	2000001c 	.word	0x2000001c

08007ca8 <sbrk_aligned>:
 8007ca8:	b570      	push	{r4, r5, r6, lr}
 8007caa:	4e0f      	ldr	r6, [pc, #60]	@ (8007ce8 <sbrk_aligned+0x40>)
 8007cac:	460c      	mov	r4, r1
 8007cae:	6831      	ldr	r1, [r6, #0]
 8007cb0:	4605      	mov	r5, r0
 8007cb2:	b911      	cbnz	r1, 8007cba <sbrk_aligned+0x12>
 8007cb4:	f000 fd7c 	bl	80087b0 <_sbrk_r>
 8007cb8:	6030      	str	r0, [r6, #0]
 8007cba:	4621      	mov	r1, r4
 8007cbc:	4628      	mov	r0, r5
 8007cbe:	f000 fd77 	bl	80087b0 <_sbrk_r>
 8007cc2:	1c43      	adds	r3, r0, #1
 8007cc4:	d103      	bne.n	8007cce <sbrk_aligned+0x26>
 8007cc6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007cca:	4620      	mov	r0, r4
 8007ccc:	bd70      	pop	{r4, r5, r6, pc}
 8007cce:	1cc4      	adds	r4, r0, #3
 8007cd0:	f024 0403 	bic.w	r4, r4, #3
 8007cd4:	42a0      	cmp	r0, r4
 8007cd6:	d0f8      	beq.n	8007cca <sbrk_aligned+0x22>
 8007cd8:	1a21      	subs	r1, r4, r0
 8007cda:	4628      	mov	r0, r5
 8007cdc:	f000 fd68 	bl	80087b0 <_sbrk_r>
 8007ce0:	3001      	adds	r0, #1
 8007ce2:	d1f2      	bne.n	8007cca <sbrk_aligned+0x22>
 8007ce4:	e7ef      	b.n	8007cc6 <sbrk_aligned+0x1e>
 8007ce6:	bf00      	nop
 8007ce8:	200004bc 	.word	0x200004bc

08007cec <_malloc_r>:
 8007cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cf0:	1ccd      	adds	r5, r1, #3
 8007cf2:	f025 0503 	bic.w	r5, r5, #3
 8007cf6:	3508      	adds	r5, #8
 8007cf8:	2d0c      	cmp	r5, #12
 8007cfa:	bf38      	it	cc
 8007cfc:	250c      	movcc	r5, #12
 8007cfe:	2d00      	cmp	r5, #0
 8007d00:	4606      	mov	r6, r0
 8007d02:	db01      	blt.n	8007d08 <_malloc_r+0x1c>
 8007d04:	42a9      	cmp	r1, r5
 8007d06:	d904      	bls.n	8007d12 <_malloc_r+0x26>
 8007d08:	230c      	movs	r3, #12
 8007d0a:	6033      	str	r3, [r6, #0]
 8007d0c:	2000      	movs	r0, #0
 8007d0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007de8 <_malloc_r+0xfc>
 8007d16:	f000 f915 	bl	8007f44 <__malloc_lock>
 8007d1a:	f8d8 3000 	ldr.w	r3, [r8]
 8007d1e:	461c      	mov	r4, r3
 8007d20:	bb44      	cbnz	r4, 8007d74 <_malloc_r+0x88>
 8007d22:	4629      	mov	r1, r5
 8007d24:	4630      	mov	r0, r6
 8007d26:	f7ff ffbf 	bl	8007ca8 <sbrk_aligned>
 8007d2a:	1c43      	adds	r3, r0, #1
 8007d2c:	4604      	mov	r4, r0
 8007d2e:	d158      	bne.n	8007de2 <_malloc_r+0xf6>
 8007d30:	f8d8 4000 	ldr.w	r4, [r8]
 8007d34:	4627      	mov	r7, r4
 8007d36:	2f00      	cmp	r7, #0
 8007d38:	d143      	bne.n	8007dc2 <_malloc_r+0xd6>
 8007d3a:	2c00      	cmp	r4, #0
 8007d3c:	d04b      	beq.n	8007dd6 <_malloc_r+0xea>
 8007d3e:	6823      	ldr	r3, [r4, #0]
 8007d40:	4639      	mov	r1, r7
 8007d42:	4630      	mov	r0, r6
 8007d44:	eb04 0903 	add.w	r9, r4, r3
 8007d48:	f000 fd32 	bl	80087b0 <_sbrk_r>
 8007d4c:	4581      	cmp	r9, r0
 8007d4e:	d142      	bne.n	8007dd6 <_malloc_r+0xea>
 8007d50:	6821      	ldr	r1, [r4, #0]
 8007d52:	1a6d      	subs	r5, r5, r1
 8007d54:	4629      	mov	r1, r5
 8007d56:	4630      	mov	r0, r6
 8007d58:	f7ff ffa6 	bl	8007ca8 <sbrk_aligned>
 8007d5c:	3001      	adds	r0, #1
 8007d5e:	d03a      	beq.n	8007dd6 <_malloc_r+0xea>
 8007d60:	6823      	ldr	r3, [r4, #0]
 8007d62:	442b      	add	r3, r5
 8007d64:	6023      	str	r3, [r4, #0]
 8007d66:	f8d8 3000 	ldr.w	r3, [r8]
 8007d6a:	685a      	ldr	r2, [r3, #4]
 8007d6c:	bb62      	cbnz	r2, 8007dc8 <_malloc_r+0xdc>
 8007d6e:	f8c8 7000 	str.w	r7, [r8]
 8007d72:	e00f      	b.n	8007d94 <_malloc_r+0xa8>
 8007d74:	6822      	ldr	r2, [r4, #0]
 8007d76:	1b52      	subs	r2, r2, r5
 8007d78:	d420      	bmi.n	8007dbc <_malloc_r+0xd0>
 8007d7a:	2a0b      	cmp	r2, #11
 8007d7c:	d917      	bls.n	8007dae <_malloc_r+0xc2>
 8007d7e:	1961      	adds	r1, r4, r5
 8007d80:	42a3      	cmp	r3, r4
 8007d82:	6025      	str	r5, [r4, #0]
 8007d84:	bf18      	it	ne
 8007d86:	6059      	strne	r1, [r3, #4]
 8007d88:	6863      	ldr	r3, [r4, #4]
 8007d8a:	bf08      	it	eq
 8007d8c:	f8c8 1000 	streq.w	r1, [r8]
 8007d90:	5162      	str	r2, [r4, r5]
 8007d92:	604b      	str	r3, [r1, #4]
 8007d94:	4630      	mov	r0, r6
 8007d96:	f000 f8db 	bl	8007f50 <__malloc_unlock>
 8007d9a:	f104 000b 	add.w	r0, r4, #11
 8007d9e:	1d23      	adds	r3, r4, #4
 8007da0:	f020 0007 	bic.w	r0, r0, #7
 8007da4:	1ac2      	subs	r2, r0, r3
 8007da6:	bf1c      	itt	ne
 8007da8:	1a1b      	subne	r3, r3, r0
 8007daa:	50a3      	strne	r3, [r4, r2]
 8007dac:	e7af      	b.n	8007d0e <_malloc_r+0x22>
 8007dae:	6862      	ldr	r2, [r4, #4]
 8007db0:	42a3      	cmp	r3, r4
 8007db2:	bf0c      	ite	eq
 8007db4:	f8c8 2000 	streq.w	r2, [r8]
 8007db8:	605a      	strne	r2, [r3, #4]
 8007dba:	e7eb      	b.n	8007d94 <_malloc_r+0xa8>
 8007dbc:	4623      	mov	r3, r4
 8007dbe:	6864      	ldr	r4, [r4, #4]
 8007dc0:	e7ae      	b.n	8007d20 <_malloc_r+0x34>
 8007dc2:	463c      	mov	r4, r7
 8007dc4:	687f      	ldr	r7, [r7, #4]
 8007dc6:	e7b6      	b.n	8007d36 <_malloc_r+0x4a>
 8007dc8:	461a      	mov	r2, r3
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	42a3      	cmp	r3, r4
 8007dce:	d1fb      	bne.n	8007dc8 <_malloc_r+0xdc>
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	6053      	str	r3, [r2, #4]
 8007dd4:	e7de      	b.n	8007d94 <_malloc_r+0xa8>
 8007dd6:	230c      	movs	r3, #12
 8007dd8:	6033      	str	r3, [r6, #0]
 8007dda:	4630      	mov	r0, r6
 8007ddc:	f000 f8b8 	bl	8007f50 <__malloc_unlock>
 8007de0:	e794      	b.n	8007d0c <_malloc_r+0x20>
 8007de2:	6005      	str	r5, [r0, #0]
 8007de4:	e7d6      	b.n	8007d94 <_malloc_r+0xa8>
 8007de6:	bf00      	nop
 8007de8:	200004c0 	.word	0x200004c0

08007dec <__sflush_r>:
 8007dec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007df4:	0716      	lsls	r6, r2, #28
 8007df6:	4605      	mov	r5, r0
 8007df8:	460c      	mov	r4, r1
 8007dfa:	d454      	bmi.n	8007ea6 <__sflush_r+0xba>
 8007dfc:	684b      	ldr	r3, [r1, #4]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	dc02      	bgt.n	8007e08 <__sflush_r+0x1c>
 8007e02:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	dd48      	ble.n	8007e9a <__sflush_r+0xae>
 8007e08:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007e0a:	2e00      	cmp	r6, #0
 8007e0c:	d045      	beq.n	8007e9a <__sflush_r+0xae>
 8007e0e:	2300      	movs	r3, #0
 8007e10:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007e14:	682f      	ldr	r7, [r5, #0]
 8007e16:	6a21      	ldr	r1, [r4, #32]
 8007e18:	602b      	str	r3, [r5, #0]
 8007e1a:	d030      	beq.n	8007e7e <__sflush_r+0x92>
 8007e1c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007e1e:	89a3      	ldrh	r3, [r4, #12]
 8007e20:	0759      	lsls	r1, r3, #29
 8007e22:	d505      	bpl.n	8007e30 <__sflush_r+0x44>
 8007e24:	6863      	ldr	r3, [r4, #4]
 8007e26:	1ad2      	subs	r2, r2, r3
 8007e28:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007e2a:	b10b      	cbz	r3, 8007e30 <__sflush_r+0x44>
 8007e2c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007e2e:	1ad2      	subs	r2, r2, r3
 8007e30:	2300      	movs	r3, #0
 8007e32:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007e34:	6a21      	ldr	r1, [r4, #32]
 8007e36:	4628      	mov	r0, r5
 8007e38:	47b0      	blx	r6
 8007e3a:	1c43      	adds	r3, r0, #1
 8007e3c:	89a3      	ldrh	r3, [r4, #12]
 8007e3e:	d106      	bne.n	8007e4e <__sflush_r+0x62>
 8007e40:	6829      	ldr	r1, [r5, #0]
 8007e42:	291d      	cmp	r1, #29
 8007e44:	d82b      	bhi.n	8007e9e <__sflush_r+0xb2>
 8007e46:	4a2a      	ldr	r2, [pc, #168]	@ (8007ef0 <__sflush_r+0x104>)
 8007e48:	40ca      	lsrs	r2, r1
 8007e4a:	07d6      	lsls	r6, r2, #31
 8007e4c:	d527      	bpl.n	8007e9e <__sflush_r+0xb2>
 8007e4e:	2200      	movs	r2, #0
 8007e50:	6062      	str	r2, [r4, #4]
 8007e52:	04d9      	lsls	r1, r3, #19
 8007e54:	6922      	ldr	r2, [r4, #16]
 8007e56:	6022      	str	r2, [r4, #0]
 8007e58:	d504      	bpl.n	8007e64 <__sflush_r+0x78>
 8007e5a:	1c42      	adds	r2, r0, #1
 8007e5c:	d101      	bne.n	8007e62 <__sflush_r+0x76>
 8007e5e:	682b      	ldr	r3, [r5, #0]
 8007e60:	b903      	cbnz	r3, 8007e64 <__sflush_r+0x78>
 8007e62:	6560      	str	r0, [r4, #84]	@ 0x54
 8007e64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007e66:	602f      	str	r7, [r5, #0]
 8007e68:	b1b9      	cbz	r1, 8007e9a <__sflush_r+0xae>
 8007e6a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007e6e:	4299      	cmp	r1, r3
 8007e70:	d002      	beq.n	8007e78 <__sflush_r+0x8c>
 8007e72:	4628      	mov	r0, r5
 8007e74:	f000 fd0e 	bl	8008894 <_free_r>
 8007e78:	2300      	movs	r3, #0
 8007e7a:	6363      	str	r3, [r4, #52]	@ 0x34
 8007e7c:	e00d      	b.n	8007e9a <__sflush_r+0xae>
 8007e7e:	2301      	movs	r3, #1
 8007e80:	4628      	mov	r0, r5
 8007e82:	47b0      	blx	r6
 8007e84:	4602      	mov	r2, r0
 8007e86:	1c50      	adds	r0, r2, #1
 8007e88:	d1c9      	bne.n	8007e1e <__sflush_r+0x32>
 8007e8a:	682b      	ldr	r3, [r5, #0]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d0c6      	beq.n	8007e1e <__sflush_r+0x32>
 8007e90:	2b1d      	cmp	r3, #29
 8007e92:	d001      	beq.n	8007e98 <__sflush_r+0xac>
 8007e94:	2b16      	cmp	r3, #22
 8007e96:	d11e      	bne.n	8007ed6 <__sflush_r+0xea>
 8007e98:	602f      	str	r7, [r5, #0]
 8007e9a:	2000      	movs	r0, #0
 8007e9c:	e022      	b.n	8007ee4 <__sflush_r+0xf8>
 8007e9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ea2:	b21b      	sxth	r3, r3
 8007ea4:	e01b      	b.n	8007ede <__sflush_r+0xf2>
 8007ea6:	690f      	ldr	r7, [r1, #16]
 8007ea8:	2f00      	cmp	r7, #0
 8007eaa:	d0f6      	beq.n	8007e9a <__sflush_r+0xae>
 8007eac:	0793      	lsls	r3, r2, #30
 8007eae:	680e      	ldr	r6, [r1, #0]
 8007eb0:	bf08      	it	eq
 8007eb2:	694b      	ldreq	r3, [r1, #20]
 8007eb4:	600f      	str	r7, [r1, #0]
 8007eb6:	bf18      	it	ne
 8007eb8:	2300      	movne	r3, #0
 8007eba:	eba6 0807 	sub.w	r8, r6, r7
 8007ebe:	608b      	str	r3, [r1, #8]
 8007ec0:	f1b8 0f00 	cmp.w	r8, #0
 8007ec4:	dde9      	ble.n	8007e9a <__sflush_r+0xae>
 8007ec6:	6a21      	ldr	r1, [r4, #32]
 8007ec8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007eca:	4643      	mov	r3, r8
 8007ecc:	463a      	mov	r2, r7
 8007ece:	4628      	mov	r0, r5
 8007ed0:	47b0      	blx	r6
 8007ed2:	2800      	cmp	r0, #0
 8007ed4:	dc08      	bgt.n	8007ee8 <__sflush_r+0xfc>
 8007ed6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007eda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ede:	81a3      	strh	r3, [r4, #12]
 8007ee0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ee8:	4407      	add	r7, r0
 8007eea:	eba8 0800 	sub.w	r8, r8, r0
 8007eee:	e7e7      	b.n	8007ec0 <__sflush_r+0xd4>
 8007ef0:	20400001 	.word	0x20400001

08007ef4 <_fflush_r>:
 8007ef4:	b538      	push	{r3, r4, r5, lr}
 8007ef6:	690b      	ldr	r3, [r1, #16]
 8007ef8:	4605      	mov	r5, r0
 8007efa:	460c      	mov	r4, r1
 8007efc:	b913      	cbnz	r3, 8007f04 <_fflush_r+0x10>
 8007efe:	2500      	movs	r5, #0
 8007f00:	4628      	mov	r0, r5
 8007f02:	bd38      	pop	{r3, r4, r5, pc}
 8007f04:	b118      	cbz	r0, 8007f0e <_fflush_r+0x1a>
 8007f06:	6a03      	ldr	r3, [r0, #32]
 8007f08:	b90b      	cbnz	r3, 8007f0e <_fflush_r+0x1a>
 8007f0a:	f7fe fea3 	bl	8006c54 <__sinit>
 8007f0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d0f3      	beq.n	8007efe <_fflush_r+0xa>
 8007f16:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007f18:	07d0      	lsls	r0, r2, #31
 8007f1a:	d404      	bmi.n	8007f26 <_fflush_r+0x32>
 8007f1c:	0599      	lsls	r1, r3, #22
 8007f1e:	d402      	bmi.n	8007f26 <_fflush_r+0x32>
 8007f20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f22:	f7fe ff00 	bl	8006d26 <__retarget_lock_acquire_recursive>
 8007f26:	4628      	mov	r0, r5
 8007f28:	4621      	mov	r1, r4
 8007f2a:	f7ff ff5f 	bl	8007dec <__sflush_r>
 8007f2e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007f30:	07da      	lsls	r2, r3, #31
 8007f32:	4605      	mov	r5, r0
 8007f34:	d4e4      	bmi.n	8007f00 <_fflush_r+0xc>
 8007f36:	89a3      	ldrh	r3, [r4, #12]
 8007f38:	059b      	lsls	r3, r3, #22
 8007f3a:	d4e1      	bmi.n	8007f00 <_fflush_r+0xc>
 8007f3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f3e:	f7fe fef3 	bl	8006d28 <__retarget_lock_release_recursive>
 8007f42:	e7dd      	b.n	8007f00 <_fflush_r+0xc>

08007f44 <__malloc_lock>:
 8007f44:	4801      	ldr	r0, [pc, #4]	@ (8007f4c <__malloc_lock+0x8>)
 8007f46:	f7fe beee 	b.w	8006d26 <__retarget_lock_acquire_recursive>
 8007f4a:	bf00      	nop
 8007f4c:	200004b8 	.word	0x200004b8

08007f50 <__malloc_unlock>:
 8007f50:	4801      	ldr	r0, [pc, #4]	@ (8007f58 <__malloc_unlock+0x8>)
 8007f52:	f7fe bee9 	b.w	8006d28 <__retarget_lock_release_recursive>
 8007f56:	bf00      	nop
 8007f58:	200004b8 	.word	0x200004b8

08007f5c <_Balloc>:
 8007f5c:	b570      	push	{r4, r5, r6, lr}
 8007f5e:	69c6      	ldr	r6, [r0, #28]
 8007f60:	4604      	mov	r4, r0
 8007f62:	460d      	mov	r5, r1
 8007f64:	b976      	cbnz	r6, 8007f84 <_Balloc+0x28>
 8007f66:	2010      	movs	r0, #16
 8007f68:	f7ff fe96 	bl	8007c98 <malloc>
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	61e0      	str	r0, [r4, #28]
 8007f70:	b920      	cbnz	r0, 8007f7c <_Balloc+0x20>
 8007f72:	4b18      	ldr	r3, [pc, #96]	@ (8007fd4 <_Balloc+0x78>)
 8007f74:	4818      	ldr	r0, [pc, #96]	@ (8007fd8 <_Balloc+0x7c>)
 8007f76:	216b      	movs	r1, #107	@ 0x6b
 8007f78:	f000 fc5a 	bl	8008830 <__assert_func>
 8007f7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f80:	6006      	str	r6, [r0, #0]
 8007f82:	60c6      	str	r6, [r0, #12]
 8007f84:	69e6      	ldr	r6, [r4, #28]
 8007f86:	68f3      	ldr	r3, [r6, #12]
 8007f88:	b183      	cbz	r3, 8007fac <_Balloc+0x50>
 8007f8a:	69e3      	ldr	r3, [r4, #28]
 8007f8c:	68db      	ldr	r3, [r3, #12]
 8007f8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007f92:	b9b8      	cbnz	r0, 8007fc4 <_Balloc+0x68>
 8007f94:	2101      	movs	r1, #1
 8007f96:	fa01 f605 	lsl.w	r6, r1, r5
 8007f9a:	1d72      	adds	r2, r6, #5
 8007f9c:	0092      	lsls	r2, r2, #2
 8007f9e:	4620      	mov	r0, r4
 8007fa0:	f000 fc64 	bl	800886c <_calloc_r>
 8007fa4:	b160      	cbz	r0, 8007fc0 <_Balloc+0x64>
 8007fa6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007faa:	e00e      	b.n	8007fca <_Balloc+0x6e>
 8007fac:	2221      	movs	r2, #33	@ 0x21
 8007fae:	2104      	movs	r1, #4
 8007fb0:	4620      	mov	r0, r4
 8007fb2:	f000 fc5b 	bl	800886c <_calloc_r>
 8007fb6:	69e3      	ldr	r3, [r4, #28]
 8007fb8:	60f0      	str	r0, [r6, #12]
 8007fba:	68db      	ldr	r3, [r3, #12]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d1e4      	bne.n	8007f8a <_Balloc+0x2e>
 8007fc0:	2000      	movs	r0, #0
 8007fc2:	bd70      	pop	{r4, r5, r6, pc}
 8007fc4:	6802      	ldr	r2, [r0, #0]
 8007fc6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007fca:	2300      	movs	r3, #0
 8007fcc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007fd0:	e7f7      	b.n	8007fc2 <_Balloc+0x66>
 8007fd2:	bf00      	nop
 8007fd4:	08008fcd 	.word	0x08008fcd
 8007fd8:	0800905e 	.word	0x0800905e

08007fdc <_Bfree>:
 8007fdc:	b570      	push	{r4, r5, r6, lr}
 8007fde:	69c6      	ldr	r6, [r0, #28]
 8007fe0:	4605      	mov	r5, r0
 8007fe2:	460c      	mov	r4, r1
 8007fe4:	b976      	cbnz	r6, 8008004 <_Bfree+0x28>
 8007fe6:	2010      	movs	r0, #16
 8007fe8:	f7ff fe56 	bl	8007c98 <malloc>
 8007fec:	4602      	mov	r2, r0
 8007fee:	61e8      	str	r0, [r5, #28]
 8007ff0:	b920      	cbnz	r0, 8007ffc <_Bfree+0x20>
 8007ff2:	4b09      	ldr	r3, [pc, #36]	@ (8008018 <_Bfree+0x3c>)
 8007ff4:	4809      	ldr	r0, [pc, #36]	@ (800801c <_Bfree+0x40>)
 8007ff6:	218f      	movs	r1, #143	@ 0x8f
 8007ff8:	f000 fc1a 	bl	8008830 <__assert_func>
 8007ffc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008000:	6006      	str	r6, [r0, #0]
 8008002:	60c6      	str	r6, [r0, #12]
 8008004:	b13c      	cbz	r4, 8008016 <_Bfree+0x3a>
 8008006:	69eb      	ldr	r3, [r5, #28]
 8008008:	6862      	ldr	r2, [r4, #4]
 800800a:	68db      	ldr	r3, [r3, #12]
 800800c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008010:	6021      	str	r1, [r4, #0]
 8008012:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008016:	bd70      	pop	{r4, r5, r6, pc}
 8008018:	08008fcd 	.word	0x08008fcd
 800801c:	0800905e 	.word	0x0800905e

08008020 <__multadd>:
 8008020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008024:	690d      	ldr	r5, [r1, #16]
 8008026:	4607      	mov	r7, r0
 8008028:	460c      	mov	r4, r1
 800802a:	461e      	mov	r6, r3
 800802c:	f101 0c14 	add.w	ip, r1, #20
 8008030:	2000      	movs	r0, #0
 8008032:	f8dc 3000 	ldr.w	r3, [ip]
 8008036:	b299      	uxth	r1, r3
 8008038:	fb02 6101 	mla	r1, r2, r1, r6
 800803c:	0c1e      	lsrs	r6, r3, #16
 800803e:	0c0b      	lsrs	r3, r1, #16
 8008040:	fb02 3306 	mla	r3, r2, r6, r3
 8008044:	b289      	uxth	r1, r1
 8008046:	3001      	adds	r0, #1
 8008048:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800804c:	4285      	cmp	r5, r0
 800804e:	f84c 1b04 	str.w	r1, [ip], #4
 8008052:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008056:	dcec      	bgt.n	8008032 <__multadd+0x12>
 8008058:	b30e      	cbz	r6, 800809e <__multadd+0x7e>
 800805a:	68a3      	ldr	r3, [r4, #8]
 800805c:	42ab      	cmp	r3, r5
 800805e:	dc19      	bgt.n	8008094 <__multadd+0x74>
 8008060:	6861      	ldr	r1, [r4, #4]
 8008062:	4638      	mov	r0, r7
 8008064:	3101      	adds	r1, #1
 8008066:	f7ff ff79 	bl	8007f5c <_Balloc>
 800806a:	4680      	mov	r8, r0
 800806c:	b928      	cbnz	r0, 800807a <__multadd+0x5a>
 800806e:	4602      	mov	r2, r0
 8008070:	4b0c      	ldr	r3, [pc, #48]	@ (80080a4 <__multadd+0x84>)
 8008072:	480d      	ldr	r0, [pc, #52]	@ (80080a8 <__multadd+0x88>)
 8008074:	21ba      	movs	r1, #186	@ 0xba
 8008076:	f000 fbdb 	bl	8008830 <__assert_func>
 800807a:	6922      	ldr	r2, [r4, #16]
 800807c:	3202      	adds	r2, #2
 800807e:	f104 010c 	add.w	r1, r4, #12
 8008082:	0092      	lsls	r2, r2, #2
 8008084:	300c      	adds	r0, #12
 8008086:	f000 fbc5 	bl	8008814 <memcpy>
 800808a:	4621      	mov	r1, r4
 800808c:	4638      	mov	r0, r7
 800808e:	f7ff ffa5 	bl	8007fdc <_Bfree>
 8008092:	4644      	mov	r4, r8
 8008094:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008098:	3501      	adds	r5, #1
 800809a:	615e      	str	r6, [r3, #20]
 800809c:	6125      	str	r5, [r4, #16]
 800809e:	4620      	mov	r0, r4
 80080a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080a4:	0800903c 	.word	0x0800903c
 80080a8:	0800905e 	.word	0x0800905e

080080ac <__hi0bits>:
 80080ac:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80080b0:	4603      	mov	r3, r0
 80080b2:	bf36      	itet	cc
 80080b4:	0403      	lslcc	r3, r0, #16
 80080b6:	2000      	movcs	r0, #0
 80080b8:	2010      	movcc	r0, #16
 80080ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80080be:	bf3c      	itt	cc
 80080c0:	021b      	lslcc	r3, r3, #8
 80080c2:	3008      	addcc	r0, #8
 80080c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80080c8:	bf3c      	itt	cc
 80080ca:	011b      	lslcc	r3, r3, #4
 80080cc:	3004      	addcc	r0, #4
 80080ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080d2:	bf3c      	itt	cc
 80080d4:	009b      	lslcc	r3, r3, #2
 80080d6:	3002      	addcc	r0, #2
 80080d8:	2b00      	cmp	r3, #0
 80080da:	db05      	blt.n	80080e8 <__hi0bits+0x3c>
 80080dc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80080e0:	f100 0001 	add.w	r0, r0, #1
 80080e4:	bf08      	it	eq
 80080e6:	2020      	moveq	r0, #32
 80080e8:	4770      	bx	lr

080080ea <__lo0bits>:
 80080ea:	6803      	ldr	r3, [r0, #0]
 80080ec:	4602      	mov	r2, r0
 80080ee:	f013 0007 	ands.w	r0, r3, #7
 80080f2:	d00b      	beq.n	800810c <__lo0bits+0x22>
 80080f4:	07d9      	lsls	r1, r3, #31
 80080f6:	d421      	bmi.n	800813c <__lo0bits+0x52>
 80080f8:	0798      	lsls	r0, r3, #30
 80080fa:	bf49      	itett	mi
 80080fc:	085b      	lsrmi	r3, r3, #1
 80080fe:	089b      	lsrpl	r3, r3, #2
 8008100:	2001      	movmi	r0, #1
 8008102:	6013      	strmi	r3, [r2, #0]
 8008104:	bf5c      	itt	pl
 8008106:	6013      	strpl	r3, [r2, #0]
 8008108:	2002      	movpl	r0, #2
 800810a:	4770      	bx	lr
 800810c:	b299      	uxth	r1, r3
 800810e:	b909      	cbnz	r1, 8008114 <__lo0bits+0x2a>
 8008110:	0c1b      	lsrs	r3, r3, #16
 8008112:	2010      	movs	r0, #16
 8008114:	b2d9      	uxtb	r1, r3
 8008116:	b909      	cbnz	r1, 800811c <__lo0bits+0x32>
 8008118:	3008      	adds	r0, #8
 800811a:	0a1b      	lsrs	r3, r3, #8
 800811c:	0719      	lsls	r1, r3, #28
 800811e:	bf04      	itt	eq
 8008120:	091b      	lsreq	r3, r3, #4
 8008122:	3004      	addeq	r0, #4
 8008124:	0799      	lsls	r1, r3, #30
 8008126:	bf04      	itt	eq
 8008128:	089b      	lsreq	r3, r3, #2
 800812a:	3002      	addeq	r0, #2
 800812c:	07d9      	lsls	r1, r3, #31
 800812e:	d403      	bmi.n	8008138 <__lo0bits+0x4e>
 8008130:	085b      	lsrs	r3, r3, #1
 8008132:	f100 0001 	add.w	r0, r0, #1
 8008136:	d003      	beq.n	8008140 <__lo0bits+0x56>
 8008138:	6013      	str	r3, [r2, #0]
 800813a:	4770      	bx	lr
 800813c:	2000      	movs	r0, #0
 800813e:	4770      	bx	lr
 8008140:	2020      	movs	r0, #32
 8008142:	4770      	bx	lr

08008144 <__i2b>:
 8008144:	b510      	push	{r4, lr}
 8008146:	460c      	mov	r4, r1
 8008148:	2101      	movs	r1, #1
 800814a:	f7ff ff07 	bl	8007f5c <_Balloc>
 800814e:	4602      	mov	r2, r0
 8008150:	b928      	cbnz	r0, 800815e <__i2b+0x1a>
 8008152:	4b05      	ldr	r3, [pc, #20]	@ (8008168 <__i2b+0x24>)
 8008154:	4805      	ldr	r0, [pc, #20]	@ (800816c <__i2b+0x28>)
 8008156:	f240 1145 	movw	r1, #325	@ 0x145
 800815a:	f000 fb69 	bl	8008830 <__assert_func>
 800815e:	2301      	movs	r3, #1
 8008160:	6144      	str	r4, [r0, #20]
 8008162:	6103      	str	r3, [r0, #16]
 8008164:	bd10      	pop	{r4, pc}
 8008166:	bf00      	nop
 8008168:	0800903c 	.word	0x0800903c
 800816c:	0800905e 	.word	0x0800905e

08008170 <__multiply>:
 8008170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008174:	4617      	mov	r7, r2
 8008176:	690a      	ldr	r2, [r1, #16]
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	429a      	cmp	r2, r3
 800817c:	bfa8      	it	ge
 800817e:	463b      	movge	r3, r7
 8008180:	4689      	mov	r9, r1
 8008182:	bfa4      	itt	ge
 8008184:	460f      	movge	r7, r1
 8008186:	4699      	movge	r9, r3
 8008188:	693d      	ldr	r5, [r7, #16]
 800818a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	6879      	ldr	r1, [r7, #4]
 8008192:	eb05 060a 	add.w	r6, r5, sl
 8008196:	42b3      	cmp	r3, r6
 8008198:	b085      	sub	sp, #20
 800819a:	bfb8      	it	lt
 800819c:	3101      	addlt	r1, #1
 800819e:	f7ff fedd 	bl	8007f5c <_Balloc>
 80081a2:	b930      	cbnz	r0, 80081b2 <__multiply+0x42>
 80081a4:	4602      	mov	r2, r0
 80081a6:	4b41      	ldr	r3, [pc, #260]	@ (80082ac <__multiply+0x13c>)
 80081a8:	4841      	ldr	r0, [pc, #260]	@ (80082b0 <__multiply+0x140>)
 80081aa:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80081ae:	f000 fb3f 	bl	8008830 <__assert_func>
 80081b2:	f100 0414 	add.w	r4, r0, #20
 80081b6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80081ba:	4623      	mov	r3, r4
 80081bc:	2200      	movs	r2, #0
 80081be:	4573      	cmp	r3, lr
 80081c0:	d320      	bcc.n	8008204 <__multiply+0x94>
 80081c2:	f107 0814 	add.w	r8, r7, #20
 80081c6:	f109 0114 	add.w	r1, r9, #20
 80081ca:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80081ce:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80081d2:	9302      	str	r3, [sp, #8]
 80081d4:	1beb      	subs	r3, r5, r7
 80081d6:	3b15      	subs	r3, #21
 80081d8:	f023 0303 	bic.w	r3, r3, #3
 80081dc:	3304      	adds	r3, #4
 80081de:	3715      	adds	r7, #21
 80081e0:	42bd      	cmp	r5, r7
 80081e2:	bf38      	it	cc
 80081e4:	2304      	movcc	r3, #4
 80081e6:	9301      	str	r3, [sp, #4]
 80081e8:	9b02      	ldr	r3, [sp, #8]
 80081ea:	9103      	str	r1, [sp, #12]
 80081ec:	428b      	cmp	r3, r1
 80081ee:	d80c      	bhi.n	800820a <__multiply+0x9a>
 80081f0:	2e00      	cmp	r6, #0
 80081f2:	dd03      	ble.n	80081fc <__multiply+0x8c>
 80081f4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d055      	beq.n	80082a8 <__multiply+0x138>
 80081fc:	6106      	str	r6, [r0, #16]
 80081fe:	b005      	add	sp, #20
 8008200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008204:	f843 2b04 	str.w	r2, [r3], #4
 8008208:	e7d9      	b.n	80081be <__multiply+0x4e>
 800820a:	f8b1 a000 	ldrh.w	sl, [r1]
 800820e:	f1ba 0f00 	cmp.w	sl, #0
 8008212:	d01f      	beq.n	8008254 <__multiply+0xe4>
 8008214:	46c4      	mov	ip, r8
 8008216:	46a1      	mov	r9, r4
 8008218:	2700      	movs	r7, #0
 800821a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800821e:	f8d9 3000 	ldr.w	r3, [r9]
 8008222:	fa1f fb82 	uxth.w	fp, r2
 8008226:	b29b      	uxth	r3, r3
 8008228:	fb0a 330b 	mla	r3, sl, fp, r3
 800822c:	443b      	add	r3, r7
 800822e:	f8d9 7000 	ldr.w	r7, [r9]
 8008232:	0c12      	lsrs	r2, r2, #16
 8008234:	0c3f      	lsrs	r7, r7, #16
 8008236:	fb0a 7202 	mla	r2, sl, r2, r7
 800823a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800823e:	b29b      	uxth	r3, r3
 8008240:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008244:	4565      	cmp	r5, ip
 8008246:	f849 3b04 	str.w	r3, [r9], #4
 800824a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800824e:	d8e4      	bhi.n	800821a <__multiply+0xaa>
 8008250:	9b01      	ldr	r3, [sp, #4]
 8008252:	50e7      	str	r7, [r4, r3]
 8008254:	9b03      	ldr	r3, [sp, #12]
 8008256:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800825a:	3104      	adds	r1, #4
 800825c:	f1b9 0f00 	cmp.w	r9, #0
 8008260:	d020      	beq.n	80082a4 <__multiply+0x134>
 8008262:	6823      	ldr	r3, [r4, #0]
 8008264:	4647      	mov	r7, r8
 8008266:	46a4      	mov	ip, r4
 8008268:	f04f 0a00 	mov.w	sl, #0
 800826c:	f8b7 b000 	ldrh.w	fp, [r7]
 8008270:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008274:	fb09 220b 	mla	r2, r9, fp, r2
 8008278:	4452      	add	r2, sl
 800827a:	b29b      	uxth	r3, r3
 800827c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008280:	f84c 3b04 	str.w	r3, [ip], #4
 8008284:	f857 3b04 	ldr.w	r3, [r7], #4
 8008288:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800828c:	f8bc 3000 	ldrh.w	r3, [ip]
 8008290:	fb09 330a 	mla	r3, r9, sl, r3
 8008294:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008298:	42bd      	cmp	r5, r7
 800829a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800829e:	d8e5      	bhi.n	800826c <__multiply+0xfc>
 80082a0:	9a01      	ldr	r2, [sp, #4]
 80082a2:	50a3      	str	r3, [r4, r2]
 80082a4:	3404      	adds	r4, #4
 80082a6:	e79f      	b.n	80081e8 <__multiply+0x78>
 80082a8:	3e01      	subs	r6, #1
 80082aa:	e7a1      	b.n	80081f0 <__multiply+0x80>
 80082ac:	0800903c 	.word	0x0800903c
 80082b0:	0800905e 	.word	0x0800905e

080082b4 <__pow5mult>:
 80082b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082b8:	4615      	mov	r5, r2
 80082ba:	f012 0203 	ands.w	r2, r2, #3
 80082be:	4607      	mov	r7, r0
 80082c0:	460e      	mov	r6, r1
 80082c2:	d007      	beq.n	80082d4 <__pow5mult+0x20>
 80082c4:	4c25      	ldr	r4, [pc, #148]	@ (800835c <__pow5mult+0xa8>)
 80082c6:	3a01      	subs	r2, #1
 80082c8:	2300      	movs	r3, #0
 80082ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80082ce:	f7ff fea7 	bl	8008020 <__multadd>
 80082d2:	4606      	mov	r6, r0
 80082d4:	10ad      	asrs	r5, r5, #2
 80082d6:	d03d      	beq.n	8008354 <__pow5mult+0xa0>
 80082d8:	69fc      	ldr	r4, [r7, #28]
 80082da:	b97c      	cbnz	r4, 80082fc <__pow5mult+0x48>
 80082dc:	2010      	movs	r0, #16
 80082de:	f7ff fcdb 	bl	8007c98 <malloc>
 80082e2:	4602      	mov	r2, r0
 80082e4:	61f8      	str	r0, [r7, #28]
 80082e6:	b928      	cbnz	r0, 80082f4 <__pow5mult+0x40>
 80082e8:	4b1d      	ldr	r3, [pc, #116]	@ (8008360 <__pow5mult+0xac>)
 80082ea:	481e      	ldr	r0, [pc, #120]	@ (8008364 <__pow5mult+0xb0>)
 80082ec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80082f0:	f000 fa9e 	bl	8008830 <__assert_func>
 80082f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80082f8:	6004      	str	r4, [r0, #0]
 80082fa:	60c4      	str	r4, [r0, #12]
 80082fc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008300:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008304:	b94c      	cbnz	r4, 800831a <__pow5mult+0x66>
 8008306:	f240 2171 	movw	r1, #625	@ 0x271
 800830a:	4638      	mov	r0, r7
 800830c:	f7ff ff1a 	bl	8008144 <__i2b>
 8008310:	2300      	movs	r3, #0
 8008312:	f8c8 0008 	str.w	r0, [r8, #8]
 8008316:	4604      	mov	r4, r0
 8008318:	6003      	str	r3, [r0, #0]
 800831a:	f04f 0900 	mov.w	r9, #0
 800831e:	07eb      	lsls	r3, r5, #31
 8008320:	d50a      	bpl.n	8008338 <__pow5mult+0x84>
 8008322:	4631      	mov	r1, r6
 8008324:	4622      	mov	r2, r4
 8008326:	4638      	mov	r0, r7
 8008328:	f7ff ff22 	bl	8008170 <__multiply>
 800832c:	4631      	mov	r1, r6
 800832e:	4680      	mov	r8, r0
 8008330:	4638      	mov	r0, r7
 8008332:	f7ff fe53 	bl	8007fdc <_Bfree>
 8008336:	4646      	mov	r6, r8
 8008338:	106d      	asrs	r5, r5, #1
 800833a:	d00b      	beq.n	8008354 <__pow5mult+0xa0>
 800833c:	6820      	ldr	r0, [r4, #0]
 800833e:	b938      	cbnz	r0, 8008350 <__pow5mult+0x9c>
 8008340:	4622      	mov	r2, r4
 8008342:	4621      	mov	r1, r4
 8008344:	4638      	mov	r0, r7
 8008346:	f7ff ff13 	bl	8008170 <__multiply>
 800834a:	6020      	str	r0, [r4, #0]
 800834c:	f8c0 9000 	str.w	r9, [r0]
 8008350:	4604      	mov	r4, r0
 8008352:	e7e4      	b.n	800831e <__pow5mult+0x6a>
 8008354:	4630      	mov	r0, r6
 8008356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800835a:	bf00      	nop
 800835c:	08009100 	.word	0x08009100
 8008360:	08008fcd 	.word	0x08008fcd
 8008364:	0800905e 	.word	0x0800905e

08008368 <__lshift>:
 8008368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800836c:	460c      	mov	r4, r1
 800836e:	6849      	ldr	r1, [r1, #4]
 8008370:	6923      	ldr	r3, [r4, #16]
 8008372:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008376:	68a3      	ldr	r3, [r4, #8]
 8008378:	4607      	mov	r7, r0
 800837a:	4691      	mov	r9, r2
 800837c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008380:	f108 0601 	add.w	r6, r8, #1
 8008384:	42b3      	cmp	r3, r6
 8008386:	db0b      	blt.n	80083a0 <__lshift+0x38>
 8008388:	4638      	mov	r0, r7
 800838a:	f7ff fde7 	bl	8007f5c <_Balloc>
 800838e:	4605      	mov	r5, r0
 8008390:	b948      	cbnz	r0, 80083a6 <__lshift+0x3e>
 8008392:	4602      	mov	r2, r0
 8008394:	4b28      	ldr	r3, [pc, #160]	@ (8008438 <__lshift+0xd0>)
 8008396:	4829      	ldr	r0, [pc, #164]	@ (800843c <__lshift+0xd4>)
 8008398:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800839c:	f000 fa48 	bl	8008830 <__assert_func>
 80083a0:	3101      	adds	r1, #1
 80083a2:	005b      	lsls	r3, r3, #1
 80083a4:	e7ee      	b.n	8008384 <__lshift+0x1c>
 80083a6:	2300      	movs	r3, #0
 80083a8:	f100 0114 	add.w	r1, r0, #20
 80083ac:	f100 0210 	add.w	r2, r0, #16
 80083b0:	4618      	mov	r0, r3
 80083b2:	4553      	cmp	r3, sl
 80083b4:	db33      	blt.n	800841e <__lshift+0xb6>
 80083b6:	6920      	ldr	r0, [r4, #16]
 80083b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80083bc:	f104 0314 	add.w	r3, r4, #20
 80083c0:	f019 091f 	ands.w	r9, r9, #31
 80083c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80083c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80083cc:	d02b      	beq.n	8008426 <__lshift+0xbe>
 80083ce:	f1c9 0e20 	rsb	lr, r9, #32
 80083d2:	468a      	mov	sl, r1
 80083d4:	2200      	movs	r2, #0
 80083d6:	6818      	ldr	r0, [r3, #0]
 80083d8:	fa00 f009 	lsl.w	r0, r0, r9
 80083dc:	4310      	orrs	r0, r2
 80083de:	f84a 0b04 	str.w	r0, [sl], #4
 80083e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80083e6:	459c      	cmp	ip, r3
 80083e8:	fa22 f20e 	lsr.w	r2, r2, lr
 80083ec:	d8f3      	bhi.n	80083d6 <__lshift+0x6e>
 80083ee:	ebac 0304 	sub.w	r3, ip, r4
 80083f2:	3b15      	subs	r3, #21
 80083f4:	f023 0303 	bic.w	r3, r3, #3
 80083f8:	3304      	adds	r3, #4
 80083fa:	f104 0015 	add.w	r0, r4, #21
 80083fe:	4560      	cmp	r0, ip
 8008400:	bf88      	it	hi
 8008402:	2304      	movhi	r3, #4
 8008404:	50ca      	str	r2, [r1, r3]
 8008406:	b10a      	cbz	r2, 800840c <__lshift+0xa4>
 8008408:	f108 0602 	add.w	r6, r8, #2
 800840c:	3e01      	subs	r6, #1
 800840e:	4638      	mov	r0, r7
 8008410:	612e      	str	r6, [r5, #16]
 8008412:	4621      	mov	r1, r4
 8008414:	f7ff fde2 	bl	8007fdc <_Bfree>
 8008418:	4628      	mov	r0, r5
 800841a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800841e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008422:	3301      	adds	r3, #1
 8008424:	e7c5      	b.n	80083b2 <__lshift+0x4a>
 8008426:	3904      	subs	r1, #4
 8008428:	f853 2b04 	ldr.w	r2, [r3], #4
 800842c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008430:	459c      	cmp	ip, r3
 8008432:	d8f9      	bhi.n	8008428 <__lshift+0xc0>
 8008434:	e7ea      	b.n	800840c <__lshift+0xa4>
 8008436:	bf00      	nop
 8008438:	0800903c 	.word	0x0800903c
 800843c:	0800905e 	.word	0x0800905e

08008440 <__mcmp>:
 8008440:	690a      	ldr	r2, [r1, #16]
 8008442:	4603      	mov	r3, r0
 8008444:	6900      	ldr	r0, [r0, #16]
 8008446:	1a80      	subs	r0, r0, r2
 8008448:	b530      	push	{r4, r5, lr}
 800844a:	d10e      	bne.n	800846a <__mcmp+0x2a>
 800844c:	3314      	adds	r3, #20
 800844e:	3114      	adds	r1, #20
 8008450:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008454:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008458:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800845c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008460:	4295      	cmp	r5, r2
 8008462:	d003      	beq.n	800846c <__mcmp+0x2c>
 8008464:	d205      	bcs.n	8008472 <__mcmp+0x32>
 8008466:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800846a:	bd30      	pop	{r4, r5, pc}
 800846c:	42a3      	cmp	r3, r4
 800846e:	d3f3      	bcc.n	8008458 <__mcmp+0x18>
 8008470:	e7fb      	b.n	800846a <__mcmp+0x2a>
 8008472:	2001      	movs	r0, #1
 8008474:	e7f9      	b.n	800846a <__mcmp+0x2a>
	...

08008478 <__mdiff>:
 8008478:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800847c:	4689      	mov	r9, r1
 800847e:	4606      	mov	r6, r0
 8008480:	4611      	mov	r1, r2
 8008482:	4648      	mov	r0, r9
 8008484:	4614      	mov	r4, r2
 8008486:	f7ff ffdb 	bl	8008440 <__mcmp>
 800848a:	1e05      	subs	r5, r0, #0
 800848c:	d112      	bne.n	80084b4 <__mdiff+0x3c>
 800848e:	4629      	mov	r1, r5
 8008490:	4630      	mov	r0, r6
 8008492:	f7ff fd63 	bl	8007f5c <_Balloc>
 8008496:	4602      	mov	r2, r0
 8008498:	b928      	cbnz	r0, 80084a6 <__mdiff+0x2e>
 800849a:	4b3f      	ldr	r3, [pc, #252]	@ (8008598 <__mdiff+0x120>)
 800849c:	f240 2137 	movw	r1, #567	@ 0x237
 80084a0:	483e      	ldr	r0, [pc, #248]	@ (800859c <__mdiff+0x124>)
 80084a2:	f000 f9c5 	bl	8008830 <__assert_func>
 80084a6:	2301      	movs	r3, #1
 80084a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80084ac:	4610      	mov	r0, r2
 80084ae:	b003      	add	sp, #12
 80084b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084b4:	bfbc      	itt	lt
 80084b6:	464b      	movlt	r3, r9
 80084b8:	46a1      	movlt	r9, r4
 80084ba:	4630      	mov	r0, r6
 80084bc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80084c0:	bfba      	itte	lt
 80084c2:	461c      	movlt	r4, r3
 80084c4:	2501      	movlt	r5, #1
 80084c6:	2500      	movge	r5, #0
 80084c8:	f7ff fd48 	bl	8007f5c <_Balloc>
 80084cc:	4602      	mov	r2, r0
 80084ce:	b918      	cbnz	r0, 80084d8 <__mdiff+0x60>
 80084d0:	4b31      	ldr	r3, [pc, #196]	@ (8008598 <__mdiff+0x120>)
 80084d2:	f240 2145 	movw	r1, #581	@ 0x245
 80084d6:	e7e3      	b.n	80084a0 <__mdiff+0x28>
 80084d8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80084dc:	6926      	ldr	r6, [r4, #16]
 80084de:	60c5      	str	r5, [r0, #12]
 80084e0:	f109 0310 	add.w	r3, r9, #16
 80084e4:	f109 0514 	add.w	r5, r9, #20
 80084e8:	f104 0e14 	add.w	lr, r4, #20
 80084ec:	f100 0b14 	add.w	fp, r0, #20
 80084f0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80084f4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80084f8:	9301      	str	r3, [sp, #4]
 80084fa:	46d9      	mov	r9, fp
 80084fc:	f04f 0c00 	mov.w	ip, #0
 8008500:	9b01      	ldr	r3, [sp, #4]
 8008502:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008506:	f853 af04 	ldr.w	sl, [r3, #4]!
 800850a:	9301      	str	r3, [sp, #4]
 800850c:	fa1f f38a 	uxth.w	r3, sl
 8008510:	4619      	mov	r1, r3
 8008512:	b283      	uxth	r3, r0
 8008514:	1acb      	subs	r3, r1, r3
 8008516:	0c00      	lsrs	r0, r0, #16
 8008518:	4463      	add	r3, ip
 800851a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800851e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008522:	b29b      	uxth	r3, r3
 8008524:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008528:	4576      	cmp	r6, lr
 800852a:	f849 3b04 	str.w	r3, [r9], #4
 800852e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008532:	d8e5      	bhi.n	8008500 <__mdiff+0x88>
 8008534:	1b33      	subs	r3, r6, r4
 8008536:	3b15      	subs	r3, #21
 8008538:	f023 0303 	bic.w	r3, r3, #3
 800853c:	3415      	adds	r4, #21
 800853e:	3304      	adds	r3, #4
 8008540:	42a6      	cmp	r6, r4
 8008542:	bf38      	it	cc
 8008544:	2304      	movcc	r3, #4
 8008546:	441d      	add	r5, r3
 8008548:	445b      	add	r3, fp
 800854a:	461e      	mov	r6, r3
 800854c:	462c      	mov	r4, r5
 800854e:	4544      	cmp	r4, r8
 8008550:	d30e      	bcc.n	8008570 <__mdiff+0xf8>
 8008552:	f108 0103 	add.w	r1, r8, #3
 8008556:	1b49      	subs	r1, r1, r5
 8008558:	f021 0103 	bic.w	r1, r1, #3
 800855c:	3d03      	subs	r5, #3
 800855e:	45a8      	cmp	r8, r5
 8008560:	bf38      	it	cc
 8008562:	2100      	movcc	r1, #0
 8008564:	440b      	add	r3, r1
 8008566:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800856a:	b191      	cbz	r1, 8008592 <__mdiff+0x11a>
 800856c:	6117      	str	r7, [r2, #16]
 800856e:	e79d      	b.n	80084ac <__mdiff+0x34>
 8008570:	f854 1b04 	ldr.w	r1, [r4], #4
 8008574:	46e6      	mov	lr, ip
 8008576:	0c08      	lsrs	r0, r1, #16
 8008578:	fa1c fc81 	uxtah	ip, ip, r1
 800857c:	4471      	add	r1, lr
 800857e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008582:	b289      	uxth	r1, r1
 8008584:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008588:	f846 1b04 	str.w	r1, [r6], #4
 800858c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008590:	e7dd      	b.n	800854e <__mdiff+0xd6>
 8008592:	3f01      	subs	r7, #1
 8008594:	e7e7      	b.n	8008566 <__mdiff+0xee>
 8008596:	bf00      	nop
 8008598:	0800903c 	.word	0x0800903c
 800859c:	0800905e 	.word	0x0800905e

080085a0 <__d2b>:
 80085a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80085a4:	460f      	mov	r7, r1
 80085a6:	2101      	movs	r1, #1
 80085a8:	ec59 8b10 	vmov	r8, r9, d0
 80085ac:	4616      	mov	r6, r2
 80085ae:	f7ff fcd5 	bl	8007f5c <_Balloc>
 80085b2:	4604      	mov	r4, r0
 80085b4:	b930      	cbnz	r0, 80085c4 <__d2b+0x24>
 80085b6:	4602      	mov	r2, r0
 80085b8:	4b23      	ldr	r3, [pc, #140]	@ (8008648 <__d2b+0xa8>)
 80085ba:	4824      	ldr	r0, [pc, #144]	@ (800864c <__d2b+0xac>)
 80085bc:	f240 310f 	movw	r1, #783	@ 0x30f
 80085c0:	f000 f936 	bl	8008830 <__assert_func>
 80085c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80085c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80085cc:	b10d      	cbz	r5, 80085d2 <__d2b+0x32>
 80085ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80085d2:	9301      	str	r3, [sp, #4]
 80085d4:	f1b8 0300 	subs.w	r3, r8, #0
 80085d8:	d023      	beq.n	8008622 <__d2b+0x82>
 80085da:	4668      	mov	r0, sp
 80085dc:	9300      	str	r3, [sp, #0]
 80085de:	f7ff fd84 	bl	80080ea <__lo0bits>
 80085e2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80085e6:	b1d0      	cbz	r0, 800861e <__d2b+0x7e>
 80085e8:	f1c0 0320 	rsb	r3, r0, #32
 80085ec:	fa02 f303 	lsl.w	r3, r2, r3
 80085f0:	430b      	orrs	r3, r1
 80085f2:	40c2      	lsrs	r2, r0
 80085f4:	6163      	str	r3, [r4, #20]
 80085f6:	9201      	str	r2, [sp, #4]
 80085f8:	9b01      	ldr	r3, [sp, #4]
 80085fa:	61a3      	str	r3, [r4, #24]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	bf0c      	ite	eq
 8008600:	2201      	moveq	r2, #1
 8008602:	2202      	movne	r2, #2
 8008604:	6122      	str	r2, [r4, #16]
 8008606:	b1a5      	cbz	r5, 8008632 <__d2b+0x92>
 8008608:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800860c:	4405      	add	r5, r0
 800860e:	603d      	str	r5, [r7, #0]
 8008610:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008614:	6030      	str	r0, [r6, #0]
 8008616:	4620      	mov	r0, r4
 8008618:	b003      	add	sp, #12
 800861a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800861e:	6161      	str	r1, [r4, #20]
 8008620:	e7ea      	b.n	80085f8 <__d2b+0x58>
 8008622:	a801      	add	r0, sp, #4
 8008624:	f7ff fd61 	bl	80080ea <__lo0bits>
 8008628:	9b01      	ldr	r3, [sp, #4]
 800862a:	6163      	str	r3, [r4, #20]
 800862c:	3020      	adds	r0, #32
 800862e:	2201      	movs	r2, #1
 8008630:	e7e8      	b.n	8008604 <__d2b+0x64>
 8008632:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008636:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800863a:	6038      	str	r0, [r7, #0]
 800863c:	6918      	ldr	r0, [r3, #16]
 800863e:	f7ff fd35 	bl	80080ac <__hi0bits>
 8008642:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008646:	e7e5      	b.n	8008614 <__d2b+0x74>
 8008648:	0800903c 	.word	0x0800903c
 800864c:	0800905e 	.word	0x0800905e

08008650 <__sread>:
 8008650:	b510      	push	{r4, lr}
 8008652:	460c      	mov	r4, r1
 8008654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008658:	f000 f898 	bl	800878c <_read_r>
 800865c:	2800      	cmp	r0, #0
 800865e:	bfab      	itete	ge
 8008660:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008662:	89a3      	ldrhlt	r3, [r4, #12]
 8008664:	181b      	addge	r3, r3, r0
 8008666:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800866a:	bfac      	ite	ge
 800866c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800866e:	81a3      	strhlt	r3, [r4, #12]
 8008670:	bd10      	pop	{r4, pc}

08008672 <__swrite>:
 8008672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008676:	461f      	mov	r7, r3
 8008678:	898b      	ldrh	r3, [r1, #12]
 800867a:	05db      	lsls	r3, r3, #23
 800867c:	4605      	mov	r5, r0
 800867e:	460c      	mov	r4, r1
 8008680:	4616      	mov	r6, r2
 8008682:	d505      	bpl.n	8008690 <__swrite+0x1e>
 8008684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008688:	2302      	movs	r3, #2
 800868a:	2200      	movs	r2, #0
 800868c:	f000 f86c 	bl	8008768 <_lseek_r>
 8008690:	89a3      	ldrh	r3, [r4, #12]
 8008692:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008696:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800869a:	81a3      	strh	r3, [r4, #12]
 800869c:	4632      	mov	r2, r6
 800869e:	463b      	mov	r3, r7
 80086a0:	4628      	mov	r0, r5
 80086a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086a6:	f000 b893 	b.w	80087d0 <_write_r>

080086aa <__sseek>:
 80086aa:	b510      	push	{r4, lr}
 80086ac:	460c      	mov	r4, r1
 80086ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086b2:	f000 f859 	bl	8008768 <_lseek_r>
 80086b6:	1c43      	adds	r3, r0, #1
 80086b8:	89a3      	ldrh	r3, [r4, #12]
 80086ba:	bf15      	itete	ne
 80086bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80086be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80086c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80086c6:	81a3      	strheq	r3, [r4, #12]
 80086c8:	bf18      	it	ne
 80086ca:	81a3      	strhne	r3, [r4, #12]
 80086cc:	bd10      	pop	{r4, pc}

080086ce <__sclose>:
 80086ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086d2:	f000 b88f 	b.w	80087f4 <_close_r>

080086d6 <_realloc_r>:
 80086d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086da:	4607      	mov	r7, r0
 80086dc:	4614      	mov	r4, r2
 80086de:	460d      	mov	r5, r1
 80086e0:	b921      	cbnz	r1, 80086ec <_realloc_r+0x16>
 80086e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086e6:	4611      	mov	r1, r2
 80086e8:	f7ff bb00 	b.w	8007cec <_malloc_r>
 80086ec:	b92a      	cbnz	r2, 80086fa <_realloc_r+0x24>
 80086ee:	f000 f8d1 	bl	8008894 <_free_r>
 80086f2:	4625      	mov	r5, r4
 80086f4:	4628      	mov	r0, r5
 80086f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086fa:	f000 f927 	bl	800894c <_malloc_usable_size_r>
 80086fe:	4284      	cmp	r4, r0
 8008700:	4606      	mov	r6, r0
 8008702:	d802      	bhi.n	800870a <_realloc_r+0x34>
 8008704:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008708:	d8f4      	bhi.n	80086f4 <_realloc_r+0x1e>
 800870a:	4621      	mov	r1, r4
 800870c:	4638      	mov	r0, r7
 800870e:	f7ff faed 	bl	8007cec <_malloc_r>
 8008712:	4680      	mov	r8, r0
 8008714:	b908      	cbnz	r0, 800871a <_realloc_r+0x44>
 8008716:	4645      	mov	r5, r8
 8008718:	e7ec      	b.n	80086f4 <_realloc_r+0x1e>
 800871a:	42b4      	cmp	r4, r6
 800871c:	4622      	mov	r2, r4
 800871e:	4629      	mov	r1, r5
 8008720:	bf28      	it	cs
 8008722:	4632      	movcs	r2, r6
 8008724:	f000 f876 	bl	8008814 <memcpy>
 8008728:	4629      	mov	r1, r5
 800872a:	4638      	mov	r0, r7
 800872c:	f000 f8b2 	bl	8008894 <_free_r>
 8008730:	e7f1      	b.n	8008716 <_realloc_r+0x40>

08008732 <memmove>:
 8008732:	4288      	cmp	r0, r1
 8008734:	b510      	push	{r4, lr}
 8008736:	eb01 0402 	add.w	r4, r1, r2
 800873a:	d902      	bls.n	8008742 <memmove+0x10>
 800873c:	4284      	cmp	r4, r0
 800873e:	4623      	mov	r3, r4
 8008740:	d807      	bhi.n	8008752 <memmove+0x20>
 8008742:	1e43      	subs	r3, r0, #1
 8008744:	42a1      	cmp	r1, r4
 8008746:	d008      	beq.n	800875a <memmove+0x28>
 8008748:	f811 2b01 	ldrb.w	r2, [r1], #1
 800874c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008750:	e7f8      	b.n	8008744 <memmove+0x12>
 8008752:	4402      	add	r2, r0
 8008754:	4601      	mov	r1, r0
 8008756:	428a      	cmp	r2, r1
 8008758:	d100      	bne.n	800875c <memmove+0x2a>
 800875a:	bd10      	pop	{r4, pc}
 800875c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008760:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008764:	e7f7      	b.n	8008756 <memmove+0x24>
	...

08008768 <_lseek_r>:
 8008768:	b538      	push	{r3, r4, r5, lr}
 800876a:	4d07      	ldr	r5, [pc, #28]	@ (8008788 <_lseek_r+0x20>)
 800876c:	4604      	mov	r4, r0
 800876e:	4608      	mov	r0, r1
 8008770:	4611      	mov	r1, r2
 8008772:	2200      	movs	r2, #0
 8008774:	602a      	str	r2, [r5, #0]
 8008776:	461a      	mov	r2, r3
 8008778:	f7f9 f904 	bl	8001984 <_lseek>
 800877c:	1c43      	adds	r3, r0, #1
 800877e:	d102      	bne.n	8008786 <_lseek_r+0x1e>
 8008780:	682b      	ldr	r3, [r5, #0]
 8008782:	b103      	cbz	r3, 8008786 <_lseek_r+0x1e>
 8008784:	6023      	str	r3, [r4, #0]
 8008786:	bd38      	pop	{r3, r4, r5, pc}
 8008788:	200004c4 	.word	0x200004c4

0800878c <_read_r>:
 800878c:	b538      	push	{r3, r4, r5, lr}
 800878e:	4d07      	ldr	r5, [pc, #28]	@ (80087ac <_read_r+0x20>)
 8008790:	4604      	mov	r4, r0
 8008792:	4608      	mov	r0, r1
 8008794:	4611      	mov	r1, r2
 8008796:	2200      	movs	r2, #0
 8008798:	602a      	str	r2, [r5, #0]
 800879a:	461a      	mov	r2, r3
 800879c:	f7f9 f892 	bl	80018c4 <_read>
 80087a0:	1c43      	adds	r3, r0, #1
 80087a2:	d102      	bne.n	80087aa <_read_r+0x1e>
 80087a4:	682b      	ldr	r3, [r5, #0]
 80087a6:	b103      	cbz	r3, 80087aa <_read_r+0x1e>
 80087a8:	6023      	str	r3, [r4, #0]
 80087aa:	bd38      	pop	{r3, r4, r5, pc}
 80087ac:	200004c4 	.word	0x200004c4

080087b0 <_sbrk_r>:
 80087b0:	b538      	push	{r3, r4, r5, lr}
 80087b2:	4d06      	ldr	r5, [pc, #24]	@ (80087cc <_sbrk_r+0x1c>)
 80087b4:	2300      	movs	r3, #0
 80087b6:	4604      	mov	r4, r0
 80087b8:	4608      	mov	r0, r1
 80087ba:	602b      	str	r3, [r5, #0]
 80087bc:	f7f9 f8f0 	bl	80019a0 <_sbrk>
 80087c0:	1c43      	adds	r3, r0, #1
 80087c2:	d102      	bne.n	80087ca <_sbrk_r+0x1a>
 80087c4:	682b      	ldr	r3, [r5, #0]
 80087c6:	b103      	cbz	r3, 80087ca <_sbrk_r+0x1a>
 80087c8:	6023      	str	r3, [r4, #0]
 80087ca:	bd38      	pop	{r3, r4, r5, pc}
 80087cc:	200004c4 	.word	0x200004c4

080087d0 <_write_r>:
 80087d0:	b538      	push	{r3, r4, r5, lr}
 80087d2:	4d07      	ldr	r5, [pc, #28]	@ (80087f0 <_write_r+0x20>)
 80087d4:	4604      	mov	r4, r0
 80087d6:	4608      	mov	r0, r1
 80087d8:	4611      	mov	r1, r2
 80087da:	2200      	movs	r2, #0
 80087dc:	602a      	str	r2, [r5, #0]
 80087de:	461a      	mov	r2, r3
 80087e0:	f7f9 f88d 	bl	80018fe <_write>
 80087e4:	1c43      	adds	r3, r0, #1
 80087e6:	d102      	bne.n	80087ee <_write_r+0x1e>
 80087e8:	682b      	ldr	r3, [r5, #0]
 80087ea:	b103      	cbz	r3, 80087ee <_write_r+0x1e>
 80087ec:	6023      	str	r3, [r4, #0]
 80087ee:	bd38      	pop	{r3, r4, r5, pc}
 80087f0:	200004c4 	.word	0x200004c4

080087f4 <_close_r>:
 80087f4:	b538      	push	{r3, r4, r5, lr}
 80087f6:	4d06      	ldr	r5, [pc, #24]	@ (8008810 <_close_r+0x1c>)
 80087f8:	2300      	movs	r3, #0
 80087fa:	4604      	mov	r4, r0
 80087fc:	4608      	mov	r0, r1
 80087fe:	602b      	str	r3, [r5, #0]
 8008800:	f7f9 f899 	bl	8001936 <_close>
 8008804:	1c43      	adds	r3, r0, #1
 8008806:	d102      	bne.n	800880e <_close_r+0x1a>
 8008808:	682b      	ldr	r3, [r5, #0]
 800880a:	b103      	cbz	r3, 800880e <_close_r+0x1a>
 800880c:	6023      	str	r3, [r4, #0]
 800880e:	bd38      	pop	{r3, r4, r5, pc}
 8008810:	200004c4 	.word	0x200004c4

08008814 <memcpy>:
 8008814:	440a      	add	r2, r1
 8008816:	4291      	cmp	r1, r2
 8008818:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800881c:	d100      	bne.n	8008820 <memcpy+0xc>
 800881e:	4770      	bx	lr
 8008820:	b510      	push	{r4, lr}
 8008822:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008826:	f803 4f01 	strb.w	r4, [r3, #1]!
 800882a:	4291      	cmp	r1, r2
 800882c:	d1f9      	bne.n	8008822 <memcpy+0xe>
 800882e:	bd10      	pop	{r4, pc}

08008830 <__assert_func>:
 8008830:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008832:	4614      	mov	r4, r2
 8008834:	461a      	mov	r2, r3
 8008836:	4b09      	ldr	r3, [pc, #36]	@ (800885c <__assert_func+0x2c>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4605      	mov	r5, r0
 800883c:	68d8      	ldr	r0, [r3, #12]
 800883e:	b14c      	cbz	r4, 8008854 <__assert_func+0x24>
 8008840:	4b07      	ldr	r3, [pc, #28]	@ (8008860 <__assert_func+0x30>)
 8008842:	9100      	str	r1, [sp, #0]
 8008844:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008848:	4906      	ldr	r1, [pc, #24]	@ (8008864 <__assert_func+0x34>)
 800884a:	462b      	mov	r3, r5
 800884c:	f000 f886 	bl	800895c <fiprintf>
 8008850:	f000 f8a3 	bl	800899a <abort>
 8008854:	4b04      	ldr	r3, [pc, #16]	@ (8008868 <__assert_func+0x38>)
 8008856:	461c      	mov	r4, r3
 8008858:	e7f3      	b.n	8008842 <__assert_func+0x12>
 800885a:	bf00      	nop
 800885c:	2000001c 	.word	0x2000001c
 8008860:	080090c1 	.word	0x080090c1
 8008864:	080090ce 	.word	0x080090ce
 8008868:	080090fc 	.word	0x080090fc

0800886c <_calloc_r>:
 800886c:	b570      	push	{r4, r5, r6, lr}
 800886e:	fba1 5402 	umull	r5, r4, r1, r2
 8008872:	b934      	cbnz	r4, 8008882 <_calloc_r+0x16>
 8008874:	4629      	mov	r1, r5
 8008876:	f7ff fa39 	bl	8007cec <_malloc_r>
 800887a:	4606      	mov	r6, r0
 800887c:	b928      	cbnz	r0, 800888a <_calloc_r+0x1e>
 800887e:	4630      	mov	r0, r6
 8008880:	bd70      	pop	{r4, r5, r6, pc}
 8008882:	220c      	movs	r2, #12
 8008884:	6002      	str	r2, [r0, #0]
 8008886:	2600      	movs	r6, #0
 8008888:	e7f9      	b.n	800887e <_calloc_r+0x12>
 800888a:	462a      	mov	r2, r5
 800888c:	4621      	mov	r1, r4
 800888e:	f7fe fa17 	bl	8006cc0 <memset>
 8008892:	e7f4      	b.n	800887e <_calloc_r+0x12>

08008894 <_free_r>:
 8008894:	b538      	push	{r3, r4, r5, lr}
 8008896:	4605      	mov	r5, r0
 8008898:	2900      	cmp	r1, #0
 800889a:	d041      	beq.n	8008920 <_free_r+0x8c>
 800889c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088a0:	1f0c      	subs	r4, r1, #4
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	bfb8      	it	lt
 80088a6:	18e4      	addlt	r4, r4, r3
 80088a8:	f7ff fb4c 	bl	8007f44 <__malloc_lock>
 80088ac:	4a1d      	ldr	r2, [pc, #116]	@ (8008924 <_free_r+0x90>)
 80088ae:	6813      	ldr	r3, [r2, #0]
 80088b0:	b933      	cbnz	r3, 80088c0 <_free_r+0x2c>
 80088b2:	6063      	str	r3, [r4, #4]
 80088b4:	6014      	str	r4, [r2, #0]
 80088b6:	4628      	mov	r0, r5
 80088b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088bc:	f7ff bb48 	b.w	8007f50 <__malloc_unlock>
 80088c0:	42a3      	cmp	r3, r4
 80088c2:	d908      	bls.n	80088d6 <_free_r+0x42>
 80088c4:	6820      	ldr	r0, [r4, #0]
 80088c6:	1821      	adds	r1, r4, r0
 80088c8:	428b      	cmp	r3, r1
 80088ca:	bf01      	itttt	eq
 80088cc:	6819      	ldreq	r1, [r3, #0]
 80088ce:	685b      	ldreq	r3, [r3, #4]
 80088d0:	1809      	addeq	r1, r1, r0
 80088d2:	6021      	streq	r1, [r4, #0]
 80088d4:	e7ed      	b.n	80088b2 <_free_r+0x1e>
 80088d6:	461a      	mov	r2, r3
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	b10b      	cbz	r3, 80088e0 <_free_r+0x4c>
 80088dc:	42a3      	cmp	r3, r4
 80088de:	d9fa      	bls.n	80088d6 <_free_r+0x42>
 80088e0:	6811      	ldr	r1, [r2, #0]
 80088e2:	1850      	adds	r0, r2, r1
 80088e4:	42a0      	cmp	r0, r4
 80088e6:	d10b      	bne.n	8008900 <_free_r+0x6c>
 80088e8:	6820      	ldr	r0, [r4, #0]
 80088ea:	4401      	add	r1, r0
 80088ec:	1850      	adds	r0, r2, r1
 80088ee:	4283      	cmp	r3, r0
 80088f0:	6011      	str	r1, [r2, #0]
 80088f2:	d1e0      	bne.n	80088b6 <_free_r+0x22>
 80088f4:	6818      	ldr	r0, [r3, #0]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	6053      	str	r3, [r2, #4]
 80088fa:	4408      	add	r0, r1
 80088fc:	6010      	str	r0, [r2, #0]
 80088fe:	e7da      	b.n	80088b6 <_free_r+0x22>
 8008900:	d902      	bls.n	8008908 <_free_r+0x74>
 8008902:	230c      	movs	r3, #12
 8008904:	602b      	str	r3, [r5, #0]
 8008906:	e7d6      	b.n	80088b6 <_free_r+0x22>
 8008908:	6820      	ldr	r0, [r4, #0]
 800890a:	1821      	adds	r1, r4, r0
 800890c:	428b      	cmp	r3, r1
 800890e:	bf04      	itt	eq
 8008910:	6819      	ldreq	r1, [r3, #0]
 8008912:	685b      	ldreq	r3, [r3, #4]
 8008914:	6063      	str	r3, [r4, #4]
 8008916:	bf04      	itt	eq
 8008918:	1809      	addeq	r1, r1, r0
 800891a:	6021      	streq	r1, [r4, #0]
 800891c:	6054      	str	r4, [r2, #4]
 800891e:	e7ca      	b.n	80088b6 <_free_r+0x22>
 8008920:	bd38      	pop	{r3, r4, r5, pc}
 8008922:	bf00      	nop
 8008924:	200004c0 	.word	0x200004c0

08008928 <__ascii_mbtowc>:
 8008928:	b082      	sub	sp, #8
 800892a:	b901      	cbnz	r1, 800892e <__ascii_mbtowc+0x6>
 800892c:	a901      	add	r1, sp, #4
 800892e:	b142      	cbz	r2, 8008942 <__ascii_mbtowc+0x1a>
 8008930:	b14b      	cbz	r3, 8008946 <__ascii_mbtowc+0x1e>
 8008932:	7813      	ldrb	r3, [r2, #0]
 8008934:	600b      	str	r3, [r1, #0]
 8008936:	7812      	ldrb	r2, [r2, #0]
 8008938:	1e10      	subs	r0, r2, #0
 800893a:	bf18      	it	ne
 800893c:	2001      	movne	r0, #1
 800893e:	b002      	add	sp, #8
 8008940:	4770      	bx	lr
 8008942:	4610      	mov	r0, r2
 8008944:	e7fb      	b.n	800893e <__ascii_mbtowc+0x16>
 8008946:	f06f 0001 	mvn.w	r0, #1
 800894a:	e7f8      	b.n	800893e <__ascii_mbtowc+0x16>

0800894c <_malloc_usable_size_r>:
 800894c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008950:	1f18      	subs	r0, r3, #4
 8008952:	2b00      	cmp	r3, #0
 8008954:	bfbc      	itt	lt
 8008956:	580b      	ldrlt	r3, [r1, r0]
 8008958:	18c0      	addlt	r0, r0, r3
 800895a:	4770      	bx	lr

0800895c <fiprintf>:
 800895c:	b40e      	push	{r1, r2, r3}
 800895e:	b503      	push	{r0, r1, lr}
 8008960:	4601      	mov	r1, r0
 8008962:	ab03      	add	r3, sp, #12
 8008964:	4805      	ldr	r0, [pc, #20]	@ (800897c <fiprintf+0x20>)
 8008966:	f853 2b04 	ldr.w	r2, [r3], #4
 800896a:	6800      	ldr	r0, [r0, #0]
 800896c:	9301      	str	r3, [sp, #4]
 800896e:	f000 f845 	bl	80089fc <_vfiprintf_r>
 8008972:	b002      	add	sp, #8
 8008974:	f85d eb04 	ldr.w	lr, [sp], #4
 8008978:	b003      	add	sp, #12
 800897a:	4770      	bx	lr
 800897c:	2000001c 	.word	0x2000001c

08008980 <__ascii_wctomb>:
 8008980:	4603      	mov	r3, r0
 8008982:	4608      	mov	r0, r1
 8008984:	b141      	cbz	r1, 8008998 <__ascii_wctomb+0x18>
 8008986:	2aff      	cmp	r2, #255	@ 0xff
 8008988:	d904      	bls.n	8008994 <__ascii_wctomb+0x14>
 800898a:	228a      	movs	r2, #138	@ 0x8a
 800898c:	601a      	str	r2, [r3, #0]
 800898e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008992:	4770      	bx	lr
 8008994:	700a      	strb	r2, [r1, #0]
 8008996:	2001      	movs	r0, #1
 8008998:	4770      	bx	lr

0800899a <abort>:
 800899a:	b508      	push	{r3, lr}
 800899c:	2006      	movs	r0, #6
 800899e:	f000 fa63 	bl	8008e68 <raise>
 80089a2:	2001      	movs	r0, #1
 80089a4:	f7f8 ff83 	bl	80018ae <_exit>

080089a8 <__sfputc_r>:
 80089a8:	6893      	ldr	r3, [r2, #8]
 80089aa:	3b01      	subs	r3, #1
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	b410      	push	{r4}
 80089b0:	6093      	str	r3, [r2, #8]
 80089b2:	da08      	bge.n	80089c6 <__sfputc_r+0x1e>
 80089b4:	6994      	ldr	r4, [r2, #24]
 80089b6:	42a3      	cmp	r3, r4
 80089b8:	db01      	blt.n	80089be <__sfputc_r+0x16>
 80089ba:	290a      	cmp	r1, #10
 80089bc:	d103      	bne.n	80089c6 <__sfputc_r+0x1e>
 80089be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089c2:	f000 b933 	b.w	8008c2c <__swbuf_r>
 80089c6:	6813      	ldr	r3, [r2, #0]
 80089c8:	1c58      	adds	r0, r3, #1
 80089ca:	6010      	str	r0, [r2, #0]
 80089cc:	7019      	strb	r1, [r3, #0]
 80089ce:	4608      	mov	r0, r1
 80089d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089d4:	4770      	bx	lr

080089d6 <__sfputs_r>:
 80089d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089d8:	4606      	mov	r6, r0
 80089da:	460f      	mov	r7, r1
 80089dc:	4614      	mov	r4, r2
 80089de:	18d5      	adds	r5, r2, r3
 80089e0:	42ac      	cmp	r4, r5
 80089e2:	d101      	bne.n	80089e8 <__sfputs_r+0x12>
 80089e4:	2000      	movs	r0, #0
 80089e6:	e007      	b.n	80089f8 <__sfputs_r+0x22>
 80089e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089ec:	463a      	mov	r2, r7
 80089ee:	4630      	mov	r0, r6
 80089f0:	f7ff ffda 	bl	80089a8 <__sfputc_r>
 80089f4:	1c43      	adds	r3, r0, #1
 80089f6:	d1f3      	bne.n	80089e0 <__sfputs_r+0xa>
 80089f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080089fc <_vfiprintf_r>:
 80089fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a00:	460d      	mov	r5, r1
 8008a02:	b09d      	sub	sp, #116	@ 0x74
 8008a04:	4614      	mov	r4, r2
 8008a06:	4698      	mov	r8, r3
 8008a08:	4606      	mov	r6, r0
 8008a0a:	b118      	cbz	r0, 8008a14 <_vfiprintf_r+0x18>
 8008a0c:	6a03      	ldr	r3, [r0, #32]
 8008a0e:	b90b      	cbnz	r3, 8008a14 <_vfiprintf_r+0x18>
 8008a10:	f7fe f920 	bl	8006c54 <__sinit>
 8008a14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a16:	07d9      	lsls	r1, r3, #31
 8008a18:	d405      	bmi.n	8008a26 <_vfiprintf_r+0x2a>
 8008a1a:	89ab      	ldrh	r3, [r5, #12]
 8008a1c:	059a      	lsls	r2, r3, #22
 8008a1e:	d402      	bmi.n	8008a26 <_vfiprintf_r+0x2a>
 8008a20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a22:	f7fe f980 	bl	8006d26 <__retarget_lock_acquire_recursive>
 8008a26:	89ab      	ldrh	r3, [r5, #12]
 8008a28:	071b      	lsls	r3, r3, #28
 8008a2a:	d501      	bpl.n	8008a30 <_vfiprintf_r+0x34>
 8008a2c:	692b      	ldr	r3, [r5, #16]
 8008a2e:	b99b      	cbnz	r3, 8008a58 <_vfiprintf_r+0x5c>
 8008a30:	4629      	mov	r1, r5
 8008a32:	4630      	mov	r0, r6
 8008a34:	f000 f938 	bl	8008ca8 <__swsetup_r>
 8008a38:	b170      	cbz	r0, 8008a58 <_vfiprintf_r+0x5c>
 8008a3a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a3c:	07dc      	lsls	r4, r3, #31
 8008a3e:	d504      	bpl.n	8008a4a <_vfiprintf_r+0x4e>
 8008a40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008a44:	b01d      	add	sp, #116	@ 0x74
 8008a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a4a:	89ab      	ldrh	r3, [r5, #12]
 8008a4c:	0598      	lsls	r0, r3, #22
 8008a4e:	d4f7      	bmi.n	8008a40 <_vfiprintf_r+0x44>
 8008a50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a52:	f7fe f969 	bl	8006d28 <__retarget_lock_release_recursive>
 8008a56:	e7f3      	b.n	8008a40 <_vfiprintf_r+0x44>
 8008a58:	2300      	movs	r3, #0
 8008a5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a5c:	2320      	movs	r3, #32
 8008a5e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008a62:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a66:	2330      	movs	r3, #48	@ 0x30
 8008a68:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008c18 <_vfiprintf_r+0x21c>
 8008a6c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008a70:	f04f 0901 	mov.w	r9, #1
 8008a74:	4623      	mov	r3, r4
 8008a76:	469a      	mov	sl, r3
 8008a78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a7c:	b10a      	cbz	r2, 8008a82 <_vfiprintf_r+0x86>
 8008a7e:	2a25      	cmp	r2, #37	@ 0x25
 8008a80:	d1f9      	bne.n	8008a76 <_vfiprintf_r+0x7a>
 8008a82:	ebba 0b04 	subs.w	fp, sl, r4
 8008a86:	d00b      	beq.n	8008aa0 <_vfiprintf_r+0xa4>
 8008a88:	465b      	mov	r3, fp
 8008a8a:	4622      	mov	r2, r4
 8008a8c:	4629      	mov	r1, r5
 8008a8e:	4630      	mov	r0, r6
 8008a90:	f7ff ffa1 	bl	80089d6 <__sfputs_r>
 8008a94:	3001      	adds	r0, #1
 8008a96:	f000 80a7 	beq.w	8008be8 <_vfiprintf_r+0x1ec>
 8008a9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a9c:	445a      	add	r2, fp
 8008a9e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008aa0:	f89a 3000 	ldrb.w	r3, [sl]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	f000 809f 	beq.w	8008be8 <_vfiprintf_r+0x1ec>
 8008aaa:	2300      	movs	r3, #0
 8008aac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008ab0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ab4:	f10a 0a01 	add.w	sl, sl, #1
 8008ab8:	9304      	str	r3, [sp, #16]
 8008aba:	9307      	str	r3, [sp, #28]
 8008abc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008ac0:	931a      	str	r3, [sp, #104]	@ 0x68
 8008ac2:	4654      	mov	r4, sl
 8008ac4:	2205      	movs	r2, #5
 8008ac6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008aca:	4853      	ldr	r0, [pc, #332]	@ (8008c18 <_vfiprintf_r+0x21c>)
 8008acc:	f7f7 fb80 	bl	80001d0 <memchr>
 8008ad0:	9a04      	ldr	r2, [sp, #16]
 8008ad2:	b9d8      	cbnz	r0, 8008b0c <_vfiprintf_r+0x110>
 8008ad4:	06d1      	lsls	r1, r2, #27
 8008ad6:	bf44      	itt	mi
 8008ad8:	2320      	movmi	r3, #32
 8008ada:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ade:	0713      	lsls	r3, r2, #28
 8008ae0:	bf44      	itt	mi
 8008ae2:	232b      	movmi	r3, #43	@ 0x2b
 8008ae4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ae8:	f89a 3000 	ldrb.w	r3, [sl]
 8008aec:	2b2a      	cmp	r3, #42	@ 0x2a
 8008aee:	d015      	beq.n	8008b1c <_vfiprintf_r+0x120>
 8008af0:	9a07      	ldr	r2, [sp, #28]
 8008af2:	4654      	mov	r4, sl
 8008af4:	2000      	movs	r0, #0
 8008af6:	f04f 0c0a 	mov.w	ip, #10
 8008afa:	4621      	mov	r1, r4
 8008afc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b00:	3b30      	subs	r3, #48	@ 0x30
 8008b02:	2b09      	cmp	r3, #9
 8008b04:	d94b      	bls.n	8008b9e <_vfiprintf_r+0x1a2>
 8008b06:	b1b0      	cbz	r0, 8008b36 <_vfiprintf_r+0x13a>
 8008b08:	9207      	str	r2, [sp, #28]
 8008b0a:	e014      	b.n	8008b36 <_vfiprintf_r+0x13a>
 8008b0c:	eba0 0308 	sub.w	r3, r0, r8
 8008b10:	fa09 f303 	lsl.w	r3, r9, r3
 8008b14:	4313      	orrs	r3, r2
 8008b16:	9304      	str	r3, [sp, #16]
 8008b18:	46a2      	mov	sl, r4
 8008b1a:	e7d2      	b.n	8008ac2 <_vfiprintf_r+0xc6>
 8008b1c:	9b03      	ldr	r3, [sp, #12]
 8008b1e:	1d19      	adds	r1, r3, #4
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	9103      	str	r1, [sp, #12]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	bfbb      	ittet	lt
 8008b28:	425b      	neglt	r3, r3
 8008b2a:	f042 0202 	orrlt.w	r2, r2, #2
 8008b2e:	9307      	strge	r3, [sp, #28]
 8008b30:	9307      	strlt	r3, [sp, #28]
 8008b32:	bfb8      	it	lt
 8008b34:	9204      	strlt	r2, [sp, #16]
 8008b36:	7823      	ldrb	r3, [r4, #0]
 8008b38:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b3a:	d10a      	bne.n	8008b52 <_vfiprintf_r+0x156>
 8008b3c:	7863      	ldrb	r3, [r4, #1]
 8008b3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b40:	d132      	bne.n	8008ba8 <_vfiprintf_r+0x1ac>
 8008b42:	9b03      	ldr	r3, [sp, #12]
 8008b44:	1d1a      	adds	r2, r3, #4
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	9203      	str	r2, [sp, #12]
 8008b4a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008b4e:	3402      	adds	r4, #2
 8008b50:	9305      	str	r3, [sp, #20]
 8008b52:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008c28 <_vfiprintf_r+0x22c>
 8008b56:	7821      	ldrb	r1, [r4, #0]
 8008b58:	2203      	movs	r2, #3
 8008b5a:	4650      	mov	r0, sl
 8008b5c:	f7f7 fb38 	bl	80001d0 <memchr>
 8008b60:	b138      	cbz	r0, 8008b72 <_vfiprintf_r+0x176>
 8008b62:	9b04      	ldr	r3, [sp, #16]
 8008b64:	eba0 000a 	sub.w	r0, r0, sl
 8008b68:	2240      	movs	r2, #64	@ 0x40
 8008b6a:	4082      	lsls	r2, r0
 8008b6c:	4313      	orrs	r3, r2
 8008b6e:	3401      	adds	r4, #1
 8008b70:	9304      	str	r3, [sp, #16]
 8008b72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b76:	4829      	ldr	r0, [pc, #164]	@ (8008c1c <_vfiprintf_r+0x220>)
 8008b78:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008b7c:	2206      	movs	r2, #6
 8008b7e:	f7f7 fb27 	bl	80001d0 <memchr>
 8008b82:	2800      	cmp	r0, #0
 8008b84:	d03f      	beq.n	8008c06 <_vfiprintf_r+0x20a>
 8008b86:	4b26      	ldr	r3, [pc, #152]	@ (8008c20 <_vfiprintf_r+0x224>)
 8008b88:	bb1b      	cbnz	r3, 8008bd2 <_vfiprintf_r+0x1d6>
 8008b8a:	9b03      	ldr	r3, [sp, #12]
 8008b8c:	3307      	adds	r3, #7
 8008b8e:	f023 0307 	bic.w	r3, r3, #7
 8008b92:	3308      	adds	r3, #8
 8008b94:	9303      	str	r3, [sp, #12]
 8008b96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b98:	443b      	add	r3, r7
 8008b9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b9c:	e76a      	b.n	8008a74 <_vfiprintf_r+0x78>
 8008b9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ba2:	460c      	mov	r4, r1
 8008ba4:	2001      	movs	r0, #1
 8008ba6:	e7a8      	b.n	8008afa <_vfiprintf_r+0xfe>
 8008ba8:	2300      	movs	r3, #0
 8008baa:	3401      	adds	r4, #1
 8008bac:	9305      	str	r3, [sp, #20]
 8008bae:	4619      	mov	r1, r3
 8008bb0:	f04f 0c0a 	mov.w	ip, #10
 8008bb4:	4620      	mov	r0, r4
 8008bb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bba:	3a30      	subs	r2, #48	@ 0x30
 8008bbc:	2a09      	cmp	r2, #9
 8008bbe:	d903      	bls.n	8008bc8 <_vfiprintf_r+0x1cc>
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d0c6      	beq.n	8008b52 <_vfiprintf_r+0x156>
 8008bc4:	9105      	str	r1, [sp, #20]
 8008bc6:	e7c4      	b.n	8008b52 <_vfiprintf_r+0x156>
 8008bc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008bcc:	4604      	mov	r4, r0
 8008bce:	2301      	movs	r3, #1
 8008bd0:	e7f0      	b.n	8008bb4 <_vfiprintf_r+0x1b8>
 8008bd2:	ab03      	add	r3, sp, #12
 8008bd4:	9300      	str	r3, [sp, #0]
 8008bd6:	462a      	mov	r2, r5
 8008bd8:	4b12      	ldr	r3, [pc, #72]	@ (8008c24 <_vfiprintf_r+0x228>)
 8008bda:	a904      	add	r1, sp, #16
 8008bdc:	4630      	mov	r0, r6
 8008bde:	f7fd fbd5 	bl	800638c <_printf_float>
 8008be2:	4607      	mov	r7, r0
 8008be4:	1c78      	adds	r0, r7, #1
 8008be6:	d1d6      	bne.n	8008b96 <_vfiprintf_r+0x19a>
 8008be8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008bea:	07d9      	lsls	r1, r3, #31
 8008bec:	d405      	bmi.n	8008bfa <_vfiprintf_r+0x1fe>
 8008bee:	89ab      	ldrh	r3, [r5, #12]
 8008bf0:	059a      	lsls	r2, r3, #22
 8008bf2:	d402      	bmi.n	8008bfa <_vfiprintf_r+0x1fe>
 8008bf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008bf6:	f7fe f897 	bl	8006d28 <__retarget_lock_release_recursive>
 8008bfa:	89ab      	ldrh	r3, [r5, #12]
 8008bfc:	065b      	lsls	r3, r3, #25
 8008bfe:	f53f af1f 	bmi.w	8008a40 <_vfiprintf_r+0x44>
 8008c02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c04:	e71e      	b.n	8008a44 <_vfiprintf_r+0x48>
 8008c06:	ab03      	add	r3, sp, #12
 8008c08:	9300      	str	r3, [sp, #0]
 8008c0a:	462a      	mov	r2, r5
 8008c0c:	4b05      	ldr	r3, [pc, #20]	@ (8008c24 <_vfiprintf_r+0x228>)
 8008c0e:	a904      	add	r1, sp, #16
 8008c10:	4630      	mov	r0, r6
 8008c12:	f7fd fe53 	bl	80068bc <_printf_i>
 8008c16:	e7e4      	b.n	8008be2 <_vfiprintf_r+0x1e6>
 8008c18:	0800904d 	.word	0x0800904d
 8008c1c:	08009057 	.word	0x08009057
 8008c20:	0800638d 	.word	0x0800638d
 8008c24:	080089d7 	.word	0x080089d7
 8008c28:	08009053 	.word	0x08009053

08008c2c <__swbuf_r>:
 8008c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c2e:	460e      	mov	r6, r1
 8008c30:	4614      	mov	r4, r2
 8008c32:	4605      	mov	r5, r0
 8008c34:	b118      	cbz	r0, 8008c3e <__swbuf_r+0x12>
 8008c36:	6a03      	ldr	r3, [r0, #32]
 8008c38:	b90b      	cbnz	r3, 8008c3e <__swbuf_r+0x12>
 8008c3a:	f7fe f80b 	bl	8006c54 <__sinit>
 8008c3e:	69a3      	ldr	r3, [r4, #24]
 8008c40:	60a3      	str	r3, [r4, #8]
 8008c42:	89a3      	ldrh	r3, [r4, #12]
 8008c44:	071a      	lsls	r2, r3, #28
 8008c46:	d501      	bpl.n	8008c4c <__swbuf_r+0x20>
 8008c48:	6923      	ldr	r3, [r4, #16]
 8008c4a:	b943      	cbnz	r3, 8008c5e <__swbuf_r+0x32>
 8008c4c:	4621      	mov	r1, r4
 8008c4e:	4628      	mov	r0, r5
 8008c50:	f000 f82a 	bl	8008ca8 <__swsetup_r>
 8008c54:	b118      	cbz	r0, 8008c5e <__swbuf_r+0x32>
 8008c56:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008c5a:	4638      	mov	r0, r7
 8008c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c5e:	6823      	ldr	r3, [r4, #0]
 8008c60:	6922      	ldr	r2, [r4, #16]
 8008c62:	1a98      	subs	r0, r3, r2
 8008c64:	6963      	ldr	r3, [r4, #20]
 8008c66:	b2f6      	uxtb	r6, r6
 8008c68:	4283      	cmp	r3, r0
 8008c6a:	4637      	mov	r7, r6
 8008c6c:	dc05      	bgt.n	8008c7a <__swbuf_r+0x4e>
 8008c6e:	4621      	mov	r1, r4
 8008c70:	4628      	mov	r0, r5
 8008c72:	f7ff f93f 	bl	8007ef4 <_fflush_r>
 8008c76:	2800      	cmp	r0, #0
 8008c78:	d1ed      	bne.n	8008c56 <__swbuf_r+0x2a>
 8008c7a:	68a3      	ldr	r3, [r4, #8]
 8008c7c:	3b01      	subs	r3, #1
 8008c7e:	60a3      	str	r3, [r4, #8]
 8008c80:	6823      	ldr	r3, [r4, #0]
 8008c82:	1c5a      	adds	r2, r3, #1
 8008c84:	6022      	str	r2, [r4, #0]
 8008c86:	701e      	strb	r6, [r3, #0]
 8008c88:	6962      	ldr	r2, [r4, #20]
 8008c8a:	1c43      	adds	r3, r0, #1
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d004      	beq.n	8008c9a <__swbuf_r+0x6e>
 8008c90:	89a3      	ldrh	r3, [r4, #12]
 8008c92:	07db      	lsls	r3, r3, #31
 8008c94:	d5e1      	bpl.n	8008c5a <__swbuf_r+0x2e>
 8008c96:	2e0a      	cmp	r6, #10
 8008c98:	d1df      	bne.n	8008c5a <__swbuf_r+0x2e>
 8008c9a:	4621      	mov	r1, r4
 8008c9c:	4628      	mov	r0, r5
 8008c9e:	f7ff f929 	bl	8007ef4 <_fflush_r>
 8008ca2:	2800      	cmp	r0, #0
 8008ca4:	d0d9      	beq.n	8008c5a <__swbuf_r+0x2e>
 8008ca6:	e7d6      	b.n	8008c56 <__swbuf_r+0x2a>

08008ca8 <__swsetup_r>:
 8008ca8:	b538      	push	{r3, r4, r5, lr}
 8008caa:	4b29      	ldr	r3, [pc, #164]	@ (8008d50 <__swsetup_r+0xa8>)
 8008cac:	4605      	mov	r5, r0
 8008cae:	6818      	ldr	r0, [r3, #0]
 8008cb0:	460c      	mov	r4, r1
 8008cb2:	b118      	cbz	r0, 8008cbc <__swsetup_r+0x14>
 8008cb4:	6a03      	ldr	r3, [r0, #32]
 8008cb6:	b90b      	cbnz	r3, 8008cbc <__swsetup_r+0x14>
 8008cb8:	f7fd ffcc 	bl	8006c54 <__sinit>
 8008cbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cc0:	0719      	lsls	r1, r3, #28
 8008cc2:	d422      	bmi.n	8008d0a <__swsetup_r+0x62>
 8008cc4:	06da      	lsls	r2, r3, #27
 8008cc6:	d407      	bmi.n	8008cd8 <__swsetup_r+0x30>
 8008cc8:	2209      	movs	r2, #9
 8008cca:	602a      	str	r2, [r5, #0]
 8008ccc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cd0:	81a3      	strh	r3, [r4, #12]
 8008cd2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008cd6:	e033      	b.n	8008d40 <__swsetup_r+0x98>
 8008cd8:	0758      	lsls	r0, r3, #29
 8008cda:	d512      	bpl.n	8008d02 <__swsetup_r+0x5a>
 8008cdc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008cde:	b141      	cbz	r1, 8008cf2 <__swsetup_r+0x4a>
 8008ce0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008ce4:	4299      	cmp	r1, r3
 8008ce6:	d002      	beq.n	8008cee <__swsetup_r+0x46>
 8008ce8:	4628      	mov	r0, r5
 8008cea:	f7ff fdd3 	bl	8008894 <_free_r>
 8008cee:	2300      	movs	r3, #0
 8008cf0:	6363      	str	r3, [r4, #52]	@ 0x34
 8008cf2:	89a3      	ldrh	r3, [r4, #12]
 8008cf4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008cf8:	81a3      	strh	r3, [r4, #12]
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	6063      	str	r3, [r4, #4]
 8008cfe:	6923      	ldr	r3, [r4, #16]
 8008d00:	6023      	str	r3, [r4, #0]
 8008d02:	89a3      	ldrh	r3, [r4, #12]
 8008d04:	f043 0308 	orr.w	r3, r3, #8
 8008d08:	81a3      	strh	r3, [r4, #12]
 8008d0a:	6923      	ldr	r3, [r4, #16]
 8008d0c:	b94b      	cbnz	r3, 8008d22 <__swsetup_r+0x7a>
 8008d0e:	89a3      	ldrh	r3, [r4, #12]
 8008d10:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008d14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d18:	d003      	beq.n	8008d22 <__swsetup_r+0x7a>
 8008d1a:	4621      	mov	r1, r4
 8008d1c:	4628      	mov	r0, r5
 8008d1e:	f000 f83f 	bl	8008da0 <__smakebuf_r>
 8008d22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d26:	f013 0201 	ands.w	r2, r3, #1
 8008d2a:	d00a      	beq.n	8008d42 <__swsetup_r+0x9a>
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	60a2      	str	r2, [r4, #8]
 8008d30:	6962      	ldr	r2, [r4, #20]
 8008d32:	4252      	negs	r2, r2
 8008d34:	61a2      	str	r2, [r4, #24]
 8008d36:	6922      	ldr	r2, [r4, #16]
 8008d38:	b942      	cbnz	r2, 8008d4c <__swsetup_r+0xa4>
 8008d3a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008d3e:	d1c5      	bne.n	8008ccc <__swsetup_r+0x24>
 8008d40:	bd38      	pop	{r3, r4, r5, pc}
 8008d42:	0799      	lsls	r1, r3, #30
 8008d44:	bf58      	it	pl
 8008d46:	6962      	ldrpl	r2, [r4, #20]
 8008d48:	60a2      	str	r2, [r4, #8]
 8008d4a:	e7f4      	b.n	8008d36 <__swsetup_r+0x8e>
 8008d4c:	2000      	movs	r0, #0
 8008d4e:	e7f7      	b.n	8008d40 <__swsetup_r+0x98>
 8008d50:	2000001c 	.word	0x2000001c

08008d54 <__swhatbuf_r>:
 8008d54:	b570      	push	{r4, r5, r6, lr}
 8008d56:	460c      	mov	r4, r1
 8008d58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d5c:	2900      	cmp	r1, #0
 8008d5e:	b096      	sub	sp, #88	@ 0x58
 8008d60:	4615      	mov	r5, r2
 8008d62:	461e      	mov	r6, r3
 8008d64:	da0d      	bge.n	8008d82 <__swhatbuf_r+0x2e>
 8008d66:	89a3      	ldrh	r3, [r4, #12]
 8008d68:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008d6c:	f04f 0100 	mov.w	r1, #0
 8008d70:	bf14      	ite	ne
 8008d72:	2340      	movne	r3, #64	@ 0x40
 8008d74:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008d78:	2000      	movs	r0, #0
 8008d7a:	6031      	str	r1, [r6, #0]
 8008d7c:	602b      	str	r3, [r5, #0]
 8008d7e:	b016      	add	sp, #88	@ 0x58
 8008d80:	bd70      	pop	{r4, r5, r6, pc}
 8008d82:	466a      	mov	r2, sp
 8008d84:	f000 f89c 	bl	8008ec0 <_fstat_r>
 8008d88:	2800      	cmp	r0, #0
 8008d8a:	dbec      	blt.n	8008d66 <__swhatbuf_r+0x12>
 8008d8c:	9901      	ldr	r1, [sp, #4]
 8008d8e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008d92:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008d96:	4259      	negs	r1, r3
 8008d98:	4159      	adcs	r1, r3
 8008d9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008d9e:	e7eb      	b.n	8008d78 <__swhatbuf_r+0x24>

08008da0 <__smakebuf_r>:
 8008da0:	898b      	ldrh	r3, [r1, #12]
 8008da2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008da4:	079d      	lsls	r5, r3, #30
 8008da6:	4606      	mov	r6, r0
 8008da8:	460c      	mov	r4, r1
 8008daa:	d507      	bpl.n	8008dbc <__smakebuf_r+0x1c>
 8008dac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008db0:	6023      	str	r3, [r4, #0]
 8008db2:	6123      	str	r3, [r4, #16]
 8008db4:	2301      	movs	r3, #1
 8008db6:	6163      	str	r3, [r4, #20]
 8008db8:	b003      	add	sp, #12
 8008dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dbc:	ab01      	add	r3, sp, #4
 8008dbe:	466a      	mov	r2, sp
 8008dc0:	f7ff ffc8 	bl	8008d54 <__swhatbuf_r>
 8008dc4:	9f00      	ldr	r7, [sp, #0]
 8008dc6:	4605      	mov	r5, r0
 8008dc8:	4639      	mov	r1, r7
 8008dca:	4630      	mov	r0, r6
 8008dcc:	f7fe ff8e 	bl	8007cec <_malloc_r>
 8008dd0:	b948      	cbnz	r0, 8008de6 <__smakebuf_r+0x46>
 8008dd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dd6:	059a      	lsls	r2, r3, #22
 8008dd8:	d4ee      	bmi.n	8008db8 <__smakebuf_r+0x18>
 8008dda:	f023 0303 	bic.w	r3, r3, #3
 8008dde:	f043 0302 	orr.w	r3, r3, #2
 8008de2:	81a3      	strh	r3, [r4, #12]
 8008de4:	e7e2      	b.n	8008dac <__smakebuf_r+0xc>
 8008de6:	89a3      	ldrh	r3, [r4, #12]
 8008de8:	6020      	str	r0, [r4, #0]
 8008dea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008dee:	81a3      	strh	r3, [r4, #12]
 8008df0:	9b01      	ldr	r3, [sp, #4]
 8008df2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008df6:	b15b      	cbz	r3, 8008e10 <__smakebuf_r+0x70>
 8008df8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008dfc:	4630      	mov	r0, r6
 8008dfe:	f000 f83b 	bl	8008e78 <_isatty_r>
 8008e02:	b128      	cbz	r0, 8008e10 <__smakebuf_r+0x70>
 8008e04:	89a3      	ldrh	r3, [r4, #12]
 8008e06:	f023 0303 	bic.w	r3, r3, #3
 8008e0a:	f043 0301 	orr.w	r3, r3, #1
 8008e0e:	81a3      	strh	r3, [r4, #12]
 8008e10:	89a3      	ldrh	r3, [r4, #12]
 8008e12:	431d      	orrs	r5, r3
 8008e14:	81a5      	strh	r5, [r4, #12]
 8008e16:	e7cf      	b.n	8008db8 <__smakebuf_r+0x18>

08008e18 <_raise_r>:
 8008e18:	291f      	cmp	r1, #31
 8008e1a:	b538      	push	{r3, r4, r5, lr}
 8008e1c:	4605      	mov	r5, r0
 8008e1e:	460c      	mov	r4, r1
 8008e20:	d904      	bls.n	8008e2c <_raise_r+0x14>
 8008e22:	2316      	movs	r3, #22
 8008e24:	6003      	str	r3, [r0, #0]
 8008e26:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008e2a:	bd38      	pop	{r3, r4, r5, pc}
 8008e2c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008e2e:	b112      	cbz	r2, 8008e36 <_raise_r+0x1e>
 8008e30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008e34:	b94b      	cbnz	r3, 8008e4a <_raise_r+0x32>
 8008e36:	4628      	mov	r0, r5
 8008e38:	f000 f840 	bl	8008ebc <_getpid_r>
 8008e3c:	4622      	mov	r2, r4
 8008e3e:	4601      	mov	r1, r0
 8008e40:	4628      	mov	r0, r5
 8008e42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e46:	f000 b827 	b.w	8008e98 <_kill_r>
 8008e4a:	2b01      	cmp	r3, #1
 8008e4c:	d00a      	beq.n	8008e64 <_raise_r+0x4c>
 8008e4e:	1c59      	adds	r1, r3, #1
 8008e50:	d103      	bne.n	8008e5a <_raise_r+0x42>
 8008e52:	2316      	movs	r3, #22
 8008e54:	6003      	str	r3, [r0, #0]
 8008e56:	2001      	movs	r0, #1
 8008e58:	e7e7      	b.n	8008e2a <_raise_r+0x12>
 8008e5a:	2100      	movs	r1, #0
 8008e5c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008e60:	4620      	mov	r0, r4
 8008e62:	4798      	blx	r3
 8008e64:	2000      	movs	r0, #0
 8008e66:	e7e0      	b.n	8008e2a <_raise_r+0x12>

08008e68 <raise>:
 8008e68:	4b02      	ldr	r3, [pc, #8]	@ (8008e74 <raise+0xc>)
 8008e6a:	4601      	mov	r1, r0
 8008e6c:	6818      	ldr	r0, [r3, #0]
 8008e6e:	f7ff bfd3 	b.w	8008e18 <_raise_r>
 8008e72:	bf00      	nop
 8008e74:	2000001c 	.word	0x2000001c

08008e78 <_isatty_r>:
 8008e78:	b538      	push	{r3, r4, r5, lr}
 8008e7a:	4d06      	ldr	r5, [pc, #24]	@ (8008e94 <_isatty_r+0x1c>)
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	4604      	mov	r4, r0
 8008e80:	4608      	mov	r0, r1
 8008e82:	602b      	str	r3, [r5, #0]
 8008e84:	f7f8 fd73 	bl	800196e <_isatty>
 8008e88:	1c43      	adds	r3, r0, #1
 8008e8a:	d102      	bne.n	8008e92 <_isatty_r+0x1a>
 8008e8c:	682b      	ldr	r3, [r5, #0]
 8008e8e:	b103      	cbz	r3, 8008e92 <_isatty_r+0x1a>
 8008e90:	6023      	str	r3, [r4, #0]
 8008e92:	bd38      	pop	{r3, r4, r5, pc}
 8008e94:	200004c4 	.word	0x200004c4

08008e98 <_kill_r>:
 8008e98:	b538      	push	{r3, r4, r5, lr}
 8008e9a:	4d07      	ldr	r5, [pc, #28]	@ (8008eb8 <_kill_r+0x20>)
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	4604      	mov	r4, r0
 8008ea0:	4608      	mov	r0, r1
 8008ea2:	4611      	mov	r1, r2
 8008ea4:	602b      	str	r3, [r5, #0]
 8008ea6:	f7f8 fcf2 	bl	800188e <_kill>
 8008eaa:	1c43      	adds	r3, r0, #1
 8008eac:	d102      	bne.n	8008eb4 <_kill_r+0x1c>
 8008eae:	682b      	ldr	r3, [r5, #0]
 8008eb0:	b103      	cbz	r3, 8008eb4 <_kill_r+0x1c>
 8008eb2:	6023      	str	r3, [r4, #0]
 8008eb4:	bd38      	pop	{r3, r4, r5, pc}
 8008eb6:	bf00      	nop
 8008eb8:	200004c4 	.word	0x200004c4

08008ebc <_getpid_r>:
 8008ebc:	f7f8 bcdf 	b.w	800187e <_getpid>

08008ec0 <_fstat_r>:
 8008ec0:	b538      	push	{r3, r4, r5, lr}
 8008ec2:	4d07      	ldr	r5, [pc, #28]	@ (8008ee0 <_fstat_r+0x20>)
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	4604      	mov	r4, r0
 8008ec8:	4608      	mov	r0, r1
 8008eca:	4611      	mov	r1, r2
 8008ecc:	602b      	str	r3, [r5, #0]
 8008ece:	f7f8 fd3e 	bl	800194e <_fstat>
 8008ed2:	1c43      	adds	r3, r0, #1
 8008ed4:	d102      	bne.n	8008edc <_fstat_r+0x1c>
 8008ed6:	682b      	ldr	r3, [r5, #0]
 8008ed8:	b103      	cbz	r3, 8008edc <_fstat_r+0x1c>
 8008eda:	6023      	str	r3, [r4, #0]
 8008edc:	bd38      	pop	{r3, r4, r5, pc}
 8008ede:	bf00      	nop
 8008ee0:	200004c4 	.word	0x200004c4

08008ee4 <_init>:
 8008ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ee6:	bf00      	nop
 8008ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eea:	bc08      	pop	{r3}
 8008eec:	469e      	mov	lr, r3
 8008eee:	4770      	bx	lr

08008ef0 <_fini>:
 8008ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ef2:	bf00      	nop
 8008ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ef6:	bc08      	pop	{r3}
 8008ef8:	469e      	mov	lr, r3
 8008efa:	4770      	bx	lr
